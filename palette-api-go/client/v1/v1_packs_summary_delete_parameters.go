// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewV1PacksSummaryDeleteParams creates a new V1PacksSummaryDeleteParams object
// with the default values initialized.
func NewV1PacksSummaryDeleteParams() *V1PacksSummaryDeleteParams {
	var ()
	return &V1PacksSummaryDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV1PacksSummaryDeleteParamsWithTimeout creates a new V1PacksSummaryDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1PacksSummaryDeleteParamsWithTimeout(timeout time.Duration) *V1PacksSummaryDeleteParams {
	var ()
	return &V1PacksSummaryDeleteParams{

		timeout: timeout,
	}
}

// NewV1PacksSummaryDeleteParamsWithContext creates a new V1PacksSummaryDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1PacksSummaryDeleteParamsWithContext(ctx context.Context) *V1PacksSummaryDeleteParams {
	var ()
	return &V1PacksSummaryDeleteParams{

		Context: ctx,
	}
}

// NewV1PacksSummaryDeleteParamsWithHTTPClient creates a new V1PacksSummaryDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1PacksSummaryDeleteParamsWithHTTPClient(client *http.Client) *V1PacksSummaryDeleteParams {
	var ()
	return &V1PacksSummaryDeleteParams{
		HTTPClient: client,
	}
}

/*V1PacksSummaryDeleteParams contains all the parameters to send to the API endpoint
for the v1 packs summary delete operation typically these are written to a http.Request
*/
type V1PacksSummaryDeleteParams struct {

	/*Filters
	  Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws

	Server will be restricted to certain fields based on the indexed data for each resource.

	*/
	Filters *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 packs summary delete params
func (o *V1PacksSummaryDeleteParams) WithTimeout(timeout time.Duration) *V1PacksSummaryDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 packs summary delete params
func (o *V1PacksSummaryDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 packs summary delete params
func (o *V1PacksSummaryDeleteParams) WithContext(ctx context.Context) *V1PacksSummaryDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 packs summary delete params
func (o *V1PacksSummaryDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 packs summary delete params
func (o *V1PacksSummaryDeleteParams) WithHTTPClient(client *http.Client) *V1PacksSummaryDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 packs summary delete params
func (o *V1PacksSummaryDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilters adds the filters to the v1 packs summary delete params
func (o *V1PacksSummaryDeleteParams) WithFilters(filters *string) *V1PacksSummaryDeleteParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the v1 packs summary delete params
func (o *V1PacksSummaryDeleteParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WriteToRequest writes these params to a swagger request
func (o *V1PacksSummaryDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
