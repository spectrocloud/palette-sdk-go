// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1DataSinkPayload Data sink payload entity
//
// swagger:model v1.DataSinkPayload
type V1DataSinkPayload struct {

	// RefUid of the data sink payload
	RefUID string `json:"refUid,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp V1Time `json:"timestamp,omitempty"`

	// v1 data sink payload
	V1DataSinkPayload map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *V1DataSinkPayload) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// RefUid of the data sink payload
		RefUID string `json:"refUid,omitempty"`

		// timestamp
		// Format: date-time
		Timestamp V1Time `json:"timestamp,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv V1DataSinkPayload

	rcv.RefUID = stage1.RefUID
	rcv.Timestamp = stage1.Timestamp
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "refUid")
	delete(stage2, "timestamp")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.V1DataSinkPayload = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m V1DataSinkPayload) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// RefUid of the data sink payload
		RefUID string `json:"refUid,omitempty"`

		// timestamp
		// Format: date-time
		Timestamp V1Time `json:"timestamp,omitempty"`
	}

	stage1.RefUID = m.RefUID
	stage1.Timestamp = m.Timestamp

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.V1DataSinkPayload) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.V1DataSinkPayload)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this v1 data sink payload
func (m *V1DataSinkPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DataSinkPayload) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := m.Timestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1DataSinkPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1DataSinkPayload) UnmarshalBinary(b []byte) error {
	var res V1DataSinkPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
