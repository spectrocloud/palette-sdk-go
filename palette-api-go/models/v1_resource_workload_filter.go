// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ResourceWorkloadFilter Workload resource filter
//
// swagger:model v1ResourceWorkloadFilter
type V1ResourceWorkloadFilter struct {

	// names
	// Unique: true
	Names []string `json:"names"`

	// type
	// Enum: [deployment statefulset daemonset all]
	Type *string `json:"type,omitempty"`
}

// Validate validates this v1 resource workload filter
func (m *V1ResourceWorkloadFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ResourceWorkloadFilter) validateNames(formats strfmt.Registry) error {

	if swag.IsZero(m.Names) { // not required
		return nil
	}

	if err := validate.UniqueItems("names", "body", m.Names); err != nil {
		return err
	}

	return nil
}

var v1ResourceWorkloadFilterTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deployment","statefulset","daemonset","all"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ResourceWorkloadFilterTypeTypePropEnum = append(v1ResourceWorkloadFilterTypeTypePropEnum, v)
	}
}

const (

	// V1ResourceWorkloadFilterTypeDeployment captures enum value "deployment"
	V1ResourceWorkloadFilterTypeDeployment string = "deployment"

	// V1ResourceWorkloadFilterTypeStatefulset captures enum value "statefulset"
	V1ResourceWorkloadFilterTypeStatefulset string = "statefulset"

	// V1ResourceWorkloadFilterTypeDaemonset captures enum value "daemonset"
	V1ResourceWorkloadFilterTypeDaemonset string = "daemonset"

	// V1ResourceWorkloadFilterTypeAll captures enum value "all"
	V1ResourceWorkloadFilterTypeAll string = "all"
)

// prop value enum
func (m *V1ResourceWorkloadFilter) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ResourceWorkloadFilterTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ResourceWorkloadFilter) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ResourceWorkloadFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ResourceWorkloadFilter) UnmarshalBinary(b []byte) error {
	var res V1ResourceWorkloadFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
