// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1SpectroClusterUIDStatusSummary Spectro cluster status summary
//
// swagger:model v1SpectroClusterUidStatusSummary
type V1SpectroClusterUIDStatusSummary struct {

	// abort timestamp
	// Format: date-time
	AbortTimestamp V1Time `json:"abortTimestamp,omitempty"`

	// add on services
	AddOnServices []*V1SpectroClusterAddOnServiceSummary `json:"addOnServices"`

	// api endpoints
	APIEndpoints []*V1APIEndpoint `json:"apiEndpoints"`

	// cluster import
	ClusterImport *V1ClusterImport `json:"clusterImport,omitempty"`

	// conditions
	Conditions []*V1ClusterCondition `json:"conditions"`

	// cost
	Cost *V1ResourceCost `json:"cost,omitempty"`

	// fips
	Fips *V1ClusterFips `json:"fips,omitempty"`

	// health
	Health *V1SpectroClusterHealthStatus `json:"health,omitempty"`

	// hourly rate
	HourlyRate *V1ResourceCost `json:"hourlyRate,omitempty"`

	// kube meta
	KubeMeta *V1KubeMeta `json:"kubeMeta,omitempty"`

	// location
	Location *V1ClusterMetaSpecLocation `json:"location,omitempty"`

	// metrics
	Metrics *V1SpectroClusterMetrics `json:"metrics,omitempty"`

	// notifications
	Notifications *V1ClusterNotificationStatus `json:"notifications,omitempty"`

	// packs
	Packs []*V1ClusterPackStatus `json:"packs"`

	// services
	Services []*V1LoadBalancerService `json:"services"`

	// spc apply
	SpcApply *V1SpcApply `json:"spcApply,omitempty"`

	// current operational state
	State string `json:"state,omitempty"`

	// upgrades
	Upgrades []*V1Upgrades `json:"upgrades"`

	// virtual
	Virtual *V1Virtual `json:"virtual,omitempty"`

	// workspaces
	Workspaces []*V1ResourceReference `json:"workspaces"`
}

// Validate validates this v1 spectro cluster Uid status summary
func (m *V1SpectroClusterUIDStatusSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbortTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddOnServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterImport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFips(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHourlyRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePacks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpcApply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgrades(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtual(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateAbortTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.AbortTimestamp) { // not required
		return nil
	}

	if err := m.AbortTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("abortTimestamp")
		}
		return err
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateAddOnServices(formats strfmt.Registry) error {

	if swag.IsZero(m.AddOnServices) { // not required
		return nil
	}

	for i := 0; i < len(m.AddOnServices); i++ {
		if swag.IsZero(m.AddOnServices[i]) { // not required
			continue
		}

		if m.AddOnServices[i] != nil {
			if err := m.AddOnServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addOnServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateAPIEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.APIEndpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.APIEndpoints); i++ {
		if swag.IsZero(m.APIEndpoints[i]) { // not required
			continue
		}

		if m.APIEndpoints[i] != nil {
			if err := m.APIEndpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apiEndpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateClusterImport(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterImport) { // not required
		return nil
	}

	if m.ClusterImport != nil {
		if err := m.ClusterImport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterImport")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateCost(formats strfmt.Registry) error {

	if swag.IsZero(m.Cost) { // not required
		return nil
	}

	if m.Cost != nil {
		if err := m.Cost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateFips(formats strfmt.Registry) error {

	if swag.IsZero(m.Fips) { // not required
		return nil
	}

	if m.Fips != nil {
		if err := m.Fips.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fips")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateHourlyRate(formats strfmt.Registry) error {

	if swag.IsZero(m.HourlyRate) { // not required
		return nil
	}

	if m.HourlyRate != nil {
		if err := m.HourlyRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hourlyRate")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateKubeMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.KubeMeta) { // not required
		return nil
	}

	if m.KubeMeta != nil {
		if err := m.KubeMeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubeMeta")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateMetrics(formats strfmt.Registry) error {

	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateNotifications(formats strfmt.Registry) error {

	if swag.IsZero(m.Notifications) { // not required
		return nil
	}

	if m.Notifications != nil {
		if err := m.Notifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validatePacks(formats strfmt.Registry) error {

	if swag.IsZero(m.Packs) { // not required
		return nil
	}

	for i := 0; i < len(m.Packs); i++ {
		if swag.IsZero(m.Packs[i]) { // not required
			continue
		}

		if m.Packs[i] != nil {
			if err := m.Packs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateServices(formats strfmt.Registry) error {

	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateSpcApply(formats strfmt.Registry) error {

	if swag.IsZero(m.SpcApply) { // not required
		return nil
	}

	if m.SpcApply != nil {
		if err := m.SpcApply.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spcApply")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateUpgrades(formats strfmt.Registry) error {

	if swag.IsZero(m.Upgrades) { // not required
		return nil
	}

	for i := 0; i < len(m.Upgrades); i++ {
		if swag.IsZero(m.Upgrades[i]) { // not required
			continue
		}

		if m.Upgrades[i] != nil {
			if err := m.Upgrades[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upgrades" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateVirtual(formats strfmt.Registry) error {

	if swag.IsZero(m.Virtual) { // not required
		return nil
	}

	if m.Virtual != nil {
		if err := m.Virtual.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtual")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterUIDStatusSummary) validateWorkspaces(formats strfmt.Registry) error {

	if swag.IsZero(m.Workspaces) { // not required
		return nil
	}

	for i := 0; i < len(m.Workspaces); i++ {
		if swag.IsZero(m.Workspaces[i]) { // not required
			continue
		}

		if m.Workspaces[i] != nil {
			if err := m.Workspaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workspaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterUIDStatusSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterUIDStatusSummary) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterUIDStatusSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
