// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1PackType v1 pack type
//
// swagger:model v1PackType
type V1PackType string

const (

	// V1PackTypeSpectro captures enum value "spectro"
	V1PackTypeSpectro V1PackType = "spectro"

	// V1PackTypeHelm captures enum value "helm"
	V1PackTypeHelm V1PackType = "helm"

	// V1PackTypeManifest captures enum value "manifest"
	V1PackTypeManifest V1PackType = "manifest"

	// V1PackTypeOci captures enum value "oci"
	V1PackTypeOci V1PackType = "oci"
)

// for schema
var v1PackTypeEnum []interface{}

func init() {
	var res []V1PackType
	if err := json.Unmarshal([]byte(`["spectro","helm","manifest","oci"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PackTypeEnum = append(v1PackTypeEnum, v)
	}
}

func (m V1PackType) validateV1PackTypeEnum(path, location string, value V1PackType) error {
	if err := validate.EnumCase(path, location, value, v1PackTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 pack type
func (m V1PackType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1PackTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
