// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1TencentClusterConfig Cluster level configuration for tencent cloud and applicable for all the machine pools
//
// swagger:model v1TencentClusterConfig
type V1TencentClusterConfig struct {

	// Endpoints specifies access to this cluster's control plane endpoints
	EndpointAccess *V1TkeEndpointAccess `json:"endpointAccess,omitempty"`

	// region
	// Required: true
	Region *string `json:"region"`

	// ssh key i ds
	SSHKeyIDs []string `json:"sshKeyIDs"`

	// VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created
	VpcID string `json:"vpcID,omitempty"`
}

// Validate validates this v1 tencent cluster config
func (m *V1TencentClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TencentClusterConfig) validateEndpointAccess(formats strfmt.Registry) error {

	if swag.IsZero(m.EndpointAccess) { // not required
		return nil
	}

	if m.EndpointAccess != nil {
		if err := m.EndpointAccess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpointAccess")
			}
			return err
		}
	}

	return nil
}

func (m *V1TencentClusterConfig) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TencentClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TencentClusterConfig) UnmarshalBinary(b []byte) error {
	var res V1TencentClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
