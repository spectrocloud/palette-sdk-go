// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1VirtualClusterConfig Cluster level configuration for virtual cluster
//
// swagger:model v1VirtualClusterConfig
type V1VirtualClusterConfig struct {

	// control plane endpoint
	ControlPlaneEndpoint *V1APIEndpoint `json:"controlPlaneEndpoint,omitempty"`

	// helm release
	HelmRelease *V1VirtualClusterHelmRelease `json:"helmRelease,omitempty"`

	// kubernetes version
	KubernetesVersion string `json:"kubernetesVersion,omitempty"`
}

// Validate validates this v1 virtual cluster config
func (m *V1VirtualClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControlPlaneEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelmRelease(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VirtualClusterConfig) validateControlPlaneEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.ControlPlaneEndpoint) { // not required
		return nil
	}

	if m.ControlPlaneEndpoint != nil {
		if err := m.ControlPlaneEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlPlaneEndpoint")
			}
			return err
		}
	}

	return nil
}

func (m *V1VirtualClusterConfig) validateHelmRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.HelmRelease) { // not required
		return nil
	}

	if m.HelmRelease != nil {
		if err := m.HelmRelease.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helmRelease")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VirtualClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VirtualClusterConfig) UnmarshalBinary(b []byte) error {
	var res V1VirtualClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
