// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ClusterProfileSummary Cluster profile summary
//
// swagger:model v1ClusterProfileSummary
type V1ClusterProfileSummary struct {

	// metadata
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`

	// spec summary
	SpecSummary *V1ClusterProfileSummarySpecSummary `json:"specSummary,omitempty"`

	// status
	Status *V1ClusterProfileStatusSummary `json:"status,omitempty"`
}

// Validate validates this v1 cluster profile summary
func (m *V1ClusterProfileSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterProfileSummary) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterProfileSummary) validateSpecSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.SpecSummary) { // not required
		return nil
	}

	if m.SpecSummary != nil {
		if err := m.SpecSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specSummary")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterProfileSummary) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterProfileSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterProfileSummary) UnmarshalBinary(b []byte) error {
	var res V1ClusterProfileSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1ClusterProfileSummarySpecSummary Cluster profile spec summary
//
// swagger:model V1ClusterProfileSummarySpecSummary
type V1ClusterProfileSummarySpecSummary struct {

	// draft
	Draft *V1ClusterProfileTemplateSummary `json:"draft,omitempty"`

	// published
	Published *V1ClusterProfileTemplateSummary `json:"published,omitempty"`

	// Cluster profile's latest version
	Version string `json:"version,omitempty"`

	// Cluster profile's list of all the versions
	Versions []*V1ClusterProfileVersion `json:"versions"`
}

// Validate validates this v1 cluster profile summary spec summary
func (m *V1ClusterProfileSummarySpecSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterProfileSummarySpecSummary) validateDraft(formats strfmt.Registry) error {

	if swag.IsZero(m.Draft) { // not required
		return nil
	}

	if m.Draft != nil {
		if err := m.Draft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specSummary" + "." + "draft")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterProfileSummarySpecSummary) validatePublished(formats strfmt.Registry) error {

	if swag.IsZero(m.Published) { // not required
		return nil
	}

	if m.Published != nil {
		if err := m.Published.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specSummary" + "." + "published")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterProfileSummarySpecSummary) validateVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("specSummary" + "." + "versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterProfileSummarySpecSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterProfileSummarySpecSummary) UnmarshalBinary(b []byte) error {
	var res V1ClusterProfileSummarySpecSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
