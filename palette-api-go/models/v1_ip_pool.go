// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1IPPool IPPool defines static IPs available. Gateway, Prefix, Nameserver, if defined, will be default values for all Pools
//
// swagger:model v1IPPool
type V1IPPool struct {

	// Gateway is the gateway ip address
	Gateway string `json:"gateway,omitempty"`

	// Nameserver provide information for dns resolvation
	Nameserver *V1Nameserver `json:"nameserver,omitempty"`

	// Pools contains the list of IP addresses pools
	Pools []*V1Pool `json:"pools"`

	// Prefix is the mask of the network as integer (max 128)
	Prefix int32 `json:"prefix,omitempty"`

	// UID is the UID of this IPPool, used by Hubble
	UID string `json:"uid,omitempty"`
}

// Validate validates this v1 IP pool
func (m *V1IPPool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNameserver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePools(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IPPool) validateNameserver(formats strfmt.Registry) error {

	if swag.IsZero(m.Nameserver) { // not required
		return nil
	}

	if m.Nameserver != nil {
		if err := m.Nameserver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nameserver")
			}
			return err
		}
	}

	return nil
}

func (m *V1IPPool) validatePools(formats strfmt.Registry) error {

	if swag.IsZero(m.Pools) { // not required
		return nil
	}

	for i := 0; i < len(m.Pools); i++ {
		if swag.IsZero(m.Pools[i]) { // not required
			continue
		}

		if m.Pools[i] != nil {
			if err := m.Pools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IPPool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IPPool) UnmarshalBinary(b []byte) error {
	var res V1IPPool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
