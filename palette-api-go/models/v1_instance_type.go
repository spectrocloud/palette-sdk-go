// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1InstanceType Cloud Instance type details
//
// swagger:model v1InstanceType
type V1InstanceType struct {

	// Category of instance type
	Category string `json:"category,omitempty"`

	// Cpu of instance type
	CPU float64 `json:"cpu,omitempty"`

	// Gpu of instance type
	Gpu float64 `json:"gpu,omitempty"`

	// Memory of instance type
	Memory float64 `json:"memory,omitempty"`

	// Price of instance type
	Price float64 `json:"price,omitempty"`

	// Type of instance type
	Type string `json:"type,omitempty"`

	// cost
	Cost *V1InstanceCost `json:"cost,omitempty"`

	// Non supported zones of the instance in a particular region
	NonSupportedZones []string `json:"nonSupportedZones"`

	// Supported architecture of the instance
	SupportedArchitectures []string `json:"supportedArchitectures"`
}

// Validate validates this v1 instance type
func (m *V1InstanceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1InstanceType) validateCost(formats strfmt.Registry) error {

	if swag.IsZero(m.Cost) { // not required
		return nil
	}

	if m.Cost != nil {
		if err := m.Cost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1InstanceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1InstanceType) UnmarshalBinary(b []byte) error {
	var res V1InstanceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
