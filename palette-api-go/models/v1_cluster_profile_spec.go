// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ClusterProfileSpec ClusterProfileTemplate can be in draft mode, or published mode User only see the latest published template, and (or) the draft template User can apply either the draft version or the latest published version to a cluster when user create a draft version, just copy the Published template, increment the version, and keep changing the draft template without increment the draft version when user publish a draft, the version is fixed, and won't be able to make any modification on published template For each clusterprofile that has a published version, there will be a ClusterProfileArchive automatically created when user publish a draft, the published version will also be copied over to the corresponding ClusterProfileArchive it is just in case in the future for whatever reason we may want to expose earlier versions
//
// swagger:model v1ClusterProfileSpec
type V1ClusterProfileSpec struct {

	// draft
	Draft *V1ClusterProfileTemplate `json:"draft,omitempty"`

	// published
	Published *V1ClusterProfileTemplate `json:"published,omitempty"`

	// version
	Version string `json:"version,omitempty"`

	// Cluster profile's list of all the versions
	Versions []*V1ClusterProfileVersion `json:"versions"`
}

// Validate validates this v1 cluster profile spec
func (m *V1ClusterProfileSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterProfileSpec) validateDraft(formats strfmt.Registry) error {

	if swag.IsZero(m.Draft) { // not required
		return nil
	}

	if m.Draft != nil {
		if err := m.Draft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("draft")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterProfileSpec) validatePublished(formats strfmt.Registry) error {

	if swag.IsZero(m.Published) { // not required
		return nil
	}

	if m.Published != nil {
		if err := m.Published.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("published")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterProfileSpec) validateVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterProfileSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterProfileSpec) UnmarshalBinary(b []byte) error {
	var res V1ClusterProfileSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
