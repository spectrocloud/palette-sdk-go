// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1AwsCloudConfigStatus AwsCloudConfigStatus defines the observed state of AwsCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool
//
// swagger:model v1AwsCloudConfigStatus
type V1AwsCloudConfigStatus struct {

	// For mold controller to identify if is there any changes in Pack
	AnsibleRoleDigest string `json:"ansibleRoleDigest,omitempty"`

	// conditions
	Conditions []*V1ClusterCondition `json:"conditions"`

	// Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig
	Images []*V1AwsAMI `json:"images"`

	// addon layers present in spc
	IsAddonLayer bool `json:"isAddonLayer,omitempty"`

	// this map will be for ansible roles present in eack pack
	RoleDigest map[string]string `json:"roleDigest,omitempty"`

	// sourceImageId, it can be from packref's annotations or from pack.json
	SourceImageID string `json:"sourceImageId,omitempty"`

	// PackerVariableDigest string `json:"packerDigest,omitempty"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add
	UseCapiImage bool `json:"useCapiImage,omitempty"`
}

// Validate validates this v1 aws cloud config status
func (m *V1AwsCloudConfigStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AwsCloudConfigStatus) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1AwsCloudConfigStatus) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AwsCloudConfigStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AwsCloudConfigStatus) UnmarshalBinary(b []byte) error {
	var res V1AwsCloudConfigStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
