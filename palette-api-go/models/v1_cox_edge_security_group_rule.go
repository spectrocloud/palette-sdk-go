// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1CoxEdgeSecurityGroupRule v1 cox edge security group rule
//
// swagger:model v1CoxEdgeSecurityGroupRule
type V1CoxEdgeSecurityGroupRule struct {

	// action
	// Enum: [block allow]
	Action string `json:"action,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// port range
	PortRange string `json:"portRange,omitempty"`

	// protocol
	// Enum: [TCP UDP TCP_UDP ESP AH ICMP GRE]
	Protocol string `json:"protocol,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this v1 cox edge security group rule
func (m *V1CoxEdgeSecurityGroupRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1CoxEdgeSecurityGroupRuleTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["block","allow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1CoxEdgeSecurityGroupRuleTypeActionPropEnum = append(v1CoxEdgeSecurityGroupRuleTypeActionPropEnum, v)
	}
}

const (

	// V1CoxEdgeSecurityGroupRuleActionBlock captures enum value "block"
	V1CoxEdgeSecurityGroupRuleActionBlock string = "block"

	// V1CoxEdgeSecurityGroupRuleActionAllow captures enum value "allow"
	V1CoxEdgeSecurityGroupRuleActionAllow string = "allow"
)

// prop value enum
func (m *V1CoxEdgeSecurityGroupRule) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1CoxEdgeSecurityGroupRuleTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1CoxEdgeSecurityGroupRule) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var v1CoxEdgeSecurityGroupRuleTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TCP","UDP","TCP_UDP","ESP","AH","ICMP","GRE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1CoxEdgeSecurityGroupRuleTypeProtocolPropEnum = append(v1CoxEdgeSecurityGroupRuleTypeProtocolPropEnum, v)
	}
}

const (

	// V1CoxEdgeSecurityGroupRuleProtocolTCP captures enum value "TCP"
	V1CoxEdgeSecurityGroupRuleProtocolTCP string = "TCP"

	// V1CoxEdgeSecurityGroupRuleProtocolUDP captures enum value "UDP"
	V1CoxEdgeSecurityGroupRuleProtocolUDP string = "UDP"

	// V1CoxEdgeSecurityGroupRuleProtocolTCPUDP captures enum value "TCP_UDP"
	V1CoxEdgeSecurityGroupRuleProtocolTCPUDP string = "TCP_UDP"

	// V1CoxEdgeSecurityGroupRuleProtocolESP captures enum value "ESP"
	V1CoxEdgeSecurityGroupRuleProtocolESP string = "ESP"

	// V1CoxEdgeSecurityGroupRuleProtocolAH captures enum value "AH"
	V1CoxEdgeSecurityGroupRuleProtocolAH string = "AH"

	// V1CoxEdgeSecurityGroupRuleProtocolICMP captures enum value "ICMP"
	V1CoxEdgeSecurityGroupRuleProtocolICMP string = "ICMP"

	// V1CoxEdgeSecurityGroupRuleProtocolGRE captures enum value "GRE"
	V1CoxEdgeSecurityGroupRuleProtocolGRE string = "GRE"
)

// prop value enum
func (m *V1CoxEdgeSecurityGroupRule) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1CoxEdgeSecurityGroupRuleTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1CoxEdgeSecurityGroupRule) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CoxEdgeSecurityGroupRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CoxEdgeSecurityGroupRule) UnmarshalBinary(b []byte) error {
	var res V1CoxEdgeSecurityGroupRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
