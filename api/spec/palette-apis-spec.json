{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Palette APIs - 4.7",
    "version": "v1"
  },
  "paths": {
    "/v1/apiKeys": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of API keys",
        "operationId": "v1ApiKeysList",
        "responses": {
          "200": {
            "description": "Retrieves a list of API keys",
            "schema": {
              "$ref": "#/definitions/v1ApiKeys"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create an API key",
        "operationId": "v1ApiKeysCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "APIKey Created successfully",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyCreateResponse"
            }
          }
        }
      }
    },
    "/v1/apiKeys/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified API key",
        "operationId": "v1ApiKeysUidGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ApiKey"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the specified API key",
        "operationId": "v1ApiKeysUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified API key",
        "operationId": "v1ApiKeysUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Activate or de-active the specified API key",
        "operationId": "v1ApiKeysUidActiveState",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyActiveState"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify API key uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/apiKeys/{uid}/state": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Revoke or re-activate the API key access",
        "operationId": "v1ApiKeysUidState",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyActiveState"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify API key uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appDeployments": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a application deployment in the virtual cluster",
        "operationId": "v1AppDeploymentsVirtualClusterCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentVirtualClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/appDeployments/clusterGroup": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a application deployment in one of virtual clusters in the cluster group",
        "operationId": "v1AppDeploymentsClusterGroupCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentClusterGroupEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/appDeployments/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified application deployment",
        "operationId": "v1AppDeploymentsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppDeployment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified application deployment",
        "operationId": "v1AppDeploymentsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application deployment uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appDeployments/{uid}/profile": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns profile of the specified application deployment",
        "operationId": "v1AppDeploymentsUidProfileGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentProfileSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified application deployment profile",
        "operationId": "v1AppDeploymentsUidProfileUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentProfileEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application deployment uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appDeployments/{uid}/profile/apply": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Apply the application deployment profile updates",
        "operationId": "v1AppDeploymentsUidProfileApply",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application deployment uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Application deployment notification uid",
          "name": "notify",
          "in": "query"
        }
      ]
    },
    "/v1/appDeployments/{uid}/profile/tiers/{tierUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified application deployment profile tier information",
        "operationId": "v1AppDeploymentsProfileTiersUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppTier"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified application deployment profile tier information",
        "operationId": "v1AppDeploymentsProfileTiersUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppTierUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application deployment uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Application deployment tier uid",
          "name": "tierUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appDeployments/{uid}/profile/tiers/{tierUid}/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of manifests of the specified application deployment profile tier",
        "operationId": "v1AppDeploymentsProfileTiersUidManifestsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppTierManifests"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application deployment uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Application deployment tier uid",
          "name": "tierUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appDeployments/{uid}/profile/tiers/{tierUid}/manifests/{manifestUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified application deployment tier manifest information",
        "operationId": "v1AppDeploymentsProfileTiersManifestsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Manifest"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified application deployment tier manifest information",
        "operationId": "v1AppDeploymentsProfileTiersManifestsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestRefUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application deployment uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Application deployment tier uid",
          "name": "tierUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Application deployment tier manifest uid",
          "name": "manifestUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appDeployments/{uid}/profile/versions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of profile versions of the specified application deployment",
        "operationId": "v1AppDeploymentsUidProfileVersionsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentProfileVersions"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application deployment uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appProfiles": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a application profile",
        "operationId": "v1AppProfilesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfileEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/appProfiles/macros": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of application profile macros",
        "operationId": "v1AppProfilesMacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        }
      }
    },
    "/v1/appProfiles/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified application profile",
        "operationId": "v1AppProfilesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppProfile"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified application profile",
        "operationId": "v1AppProfilesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfileEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified application profile",
        "operationId": "v1AppProfilesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appProfiles/{uid}/clone": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Clones the specified application profile",
        "operationId": "v1AppProfilesUidClone",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfileCloneEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appProfiles/{uid}/clone/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the specified application profile clone",
        "operationId": "v1AppProfilesUidCloneValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfileCloneMetaInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appProfiles/{uid}/metadata": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified application profile metadata",
        "operationId": "v1AppProfilesUidMetadataUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfileMetaEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appProfiles/{uid}/tiers": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of tiers of the specified application profile",
        "operationId": "v1AppProfilesUidTiersGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppProfileTiers"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds tier to the specified application profile",
        "operationId": "v1AppProfilesUidTiersCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppTierEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates app tier of the specified application profile",
        "operationId": "v1AppProfilesUidTiersPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppTierPatchEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appProfiles/{uid}/tiers/{tierUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified application profile tier information",
        "operationId": "v1AppProfilesUidTiersUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppTier"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified application profile tier",
        "operationId": "v1AppProfilesUidTiersUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppTierUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified application profile tier",
        "operationId": "v1AppProfilesUidTiersUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Application profile tier uid",
          "name": "tierUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appProfiles/{uid}/tiers/{tierUid}/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of manifests of the specified application profile tier",
        "operationId": "v1AppProfilesUidTiersUidManifestsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppTierManifests"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds manifest to the specified application profile tier",
        "operationId": "v1AppProfilesUidTiersUidManifestsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Application profile tier uid",
          "name": "tierUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appProfiles/{uid}/tiers/{tierUid}/manifests/{manifestUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified application profile tier manifest information",
        "operationId": "v1AppProfilesUidTiersUidManifestsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Manifest"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified application profile tier manifest information",
        "operationId": "v1AppProfilesUidTiersUidManifestsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestRefUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified application profile tier manifest",
        "operationId": "v1AppProfilesUidTiersUidManifestsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Application profile tier uid",
          "name": "tierUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Application profile tier manifest uid",
          "name": "manifestUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/appProfiles/{uid}/tiers/{tierUid}/resolvedValues": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified application profile tier resolved values",
        "operationId": "v1AppProfilesUidTiersUidResolvedValuesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppTierResolvedValues"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Application profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Application profile tier uid",
          "name": "tierUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/audits": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the list of audit logs",
        "operationId": "v1AuditsList",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the user uid, to retrieve the specific user audit logs",
            "name": "userUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the project uid, to retrieve the specific project audit logs",
            "name": "projectUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the tenant uid, to retrieve the specific tenant audit logs",
            "name": "tenantUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the resource name, to retrieve the specific resource audit logs",
            "name": "resourceKind",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the resource uid, to retrieve the specific resource audit logs",
            "name": "resourceUid",
            "in": "query"
          },
          {
            "enum": [
              "create",
              "update",
              "delete",
              "publish",
              "deploy",
              "activity",
              "action"
            ],
            "type": "string",
            "name": "actionType",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Audits"
            }
          }
        }
      }
    },
    "/v1/audits/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified audit log",
        "operationId": "v1AuditsUidGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Audit"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the audit uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/audits/{uid}/sysMsg": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified system audit message",
        "operationId": "v1AuditsUidGetSysMsg",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AuditSysMsg"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the audit uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/audits/{uid}/userMsg": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified user message for the specified audit",
        "operationId": "v1AuditsUidMsgUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AuditMsgUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the audit uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/auth/authenticate": {
      "post": {
        "description": "Creates a authentication request with the specified credentials",
        "tags": [
          "v1"
        ],
        "summary": "Authenticates the user for the specified crendentials",
        "operationId": "v1Authenticate",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Describes a way to set cookie from backend.",
            "name": "setCookie",
            "in": "query"
          },
          {
            "description": "Describes the credential details required for authentication",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AuthLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      }
    },
    "/v1/auth/org": {
      "get": {
        "description": "Returns the allowed login method and information with the organization details",
        "tags": [
          "v1"
        ],
        "summary": "Returns the user organization details",
        "operationId": "v1AuthOrg",
        "parameters": [
          {
            "type": "string",
            "name": "orgName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1LoginResponse"
            }
          }
        }
      }
    },
    "/v1/auth/org/{org}/oidc/callback": {
      "get": {
        "description": "Returns the Authorization token for the palette. This is called by the IDP as a callback url after IDP authenticates the user with its server.",
        "tags": [
          "v1"
        ],
        "summary": "Idp authorization code callback",
        "operationId": "V1OidcCallback",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Organization name",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Describes temporary and very short lived code sent by IDP to validate the token",
          "name": "code",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Describes a state to validate and associate request and response",
          "name": "state",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Describes a error code in case the IDP is not able to validate and authenticates the user",
          "name": "error",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Describes a error in case the IDP is not able to validate and authenticates the user",
          "name": "error_description",
          "in": "query"
        }
      ]
    },
    "/v1/auth/org/{org}/oidc/logout": {
      "get": {
        "description": "Returns No Content. Works as a callback url after the IDP logout from their server.",
        "tags": [
          "v1"
        ],
        "summary": "Identity provider logout url for the Oidc",
        "operationId": "V1OidcLogout",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Organization name",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Describes a state to validate and associate request and response",
          "name": "state",
          "in": "query"
        }
      ]
    },
    "/v1/auth/org/{org}/saml/callback": {
      "post": {
        "description": "Returns the Authorization token for the palette. This is called by the SAML based IDP as a callback url after IDP authenticates the user with its server.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Identity provider callback url for the SMAL authentication",
        "operationId": "V1SamlCallback",
        "parameters": [
          {
            "type": "string",
            "description": "Describe the SAML compliant response sent by IDP which will be validated by Palette",
            "name": "SAMLResponse",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Describes a state to validate and associate request and response",
            "name": "RelayState",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Organization name",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Deprecated.",
          "name": "authToken",
          "in": "query"
        }
      ]
    },
    "/v1/auth/org/{org}/saml/logout": {
      "post": {
        "description": "Returns No Content. Works as a callback url after the IDP logout from their server.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Identity provider logout url for the SMAL",
        "operationId": "V1SamlLogout",
        "parameters": [
          {
            "type": "string",
            "description": "Describe the SAML compliant response sent by IDP which will be validated by Palette to perform logout.",
            "name": "SAMLResponse",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Organization name",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Deprecated.",
          "name": "authToken",
          "in": "query"
        }
      ]
    },
    "/v1/auth/orgs": {
      "get": {
        "description": "Returns a list of user's organizations details and login methods",
        "tags": [
          "v1"
        ],
        "summary": "Returns a list of user's organizations",
        "operationId": "V1AuthOrgs",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Organizations"
            }
          }
        }
      }
    },
    "/v1/auth/password/{passwordToken}/activate": {
      "patch": {
        "description": "Updates and Activates user password with the help of password token",
        "tags": [
          "v1"
        ],
        "summary": "Updates and Activates the specified user password using the password token",
        "operationId": "v1PasswordActivate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "description": "Describes the new password for the user",
                  "type": "string",
                  "format": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Describes the expirable password token for the user to be used for authentication of user",
          "name": "passwordToken",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/auth/password/{passwordToken}/reset": {
      "patch": {
        "description": "Updates the new user password with the help of password token",
        "tags": [
          "v1"
        ],
        "summary": "Resets the user password using the password token",
        "operationId": "v1PasswordReset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "description": "Describes the new password for the user",
                  "type": "string",
                  "format": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Describes the expirable password token for the user to be used for authentication of user",
          "name": "passwordToken",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/auth/refresh/{token}": {
      "get": {
        "description": "Returns a new token within refresh timeout and same session id is maintained",
        "tags": [
          "v1"
        ],
        "summary": "Refreshes authentication token",
        "operationId": "v1AuthRefresh",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "boolean",
          "default": true,
          "description": "Describes a way to set cookie from backend.",
          "name": "setCookie",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Non expired Authorization token",
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/auth/sso/idps": {
      "get": {
        "description": "Returns a list of predefined Identity Provider (IDP)",
        "tags": [
          "v1"
        ],
        "summary": "Returns a list of predefined Identity Provider (IDP)",
        "operationId": "V1SsoIdps",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1IdentityProviders"
            }
          }
        }
      }
    },
    "/v1/auth/sso/logins": {
      "get": {
        "description": "Returns a list of supported sso logins and their authentication mechanism",
        "tags": [
          "v1"
        ],
        "summary": "Returns a list of supported sso logins",
        "operationId": "V1SsoLogins",
        "parameters": [
          {
            "type": "string",
            "name": "org",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SsoLogins"
            }
          }
        }
      }
    },
    "/v1/auth/sso/providers": {
      "get": {
        "description": "Returns a list of supported sso auth providers",
        "tags": [
          "v1"
        ],
        "summary": "Returns a list of supported sso auth providers",
        "operationId": "V1AuthSsoProviders",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SsoLogins"
            }
          }
        }
      }
    },
    "/v1/auth/sso/{ssoApp}/callback": {
      "get": {
        "description": "Returns Authorization token. Works as a callback url for the system defined sso apps",
        "tags": [
          "v1"
        ],
        "summary": "Returns Authorization token. Works as a callback url for the system defined sso apps",
        "operationId": "V1SsoCallback",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Describes the sso app use to login into the system",
          "name": "ssoApp",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Describes temporary and very short lived code sent by IDP to validate the token",
          "name": "code",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Describes a state to validate and associate request and response",
          "name": "state",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Describes a error code in case the IDP is not able to validate and authenticates the user",
          "name": "error",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Describes a error in case the IDP is not able to validate and authenticates the user",
          "name": "error_description",
          "in": "query"
        }
      ]
    },
    "/v1/auth/user/org/forgot": {
      "get": {
        "description": "Returns No Content. Sends the user organization(s) information via email",
        "tags": [
          "v1"
        ],
        "summary": "Returns No Content. Sends the user organization information via email",
        "operationId": "V1AuthUserOrgForgot",
        "parameters": [
          {
            "type": "string",
            "description": "Describes user's email id for sending organzation(s) details via email.",
            "name": "emailId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/auth/user/password/reset": {
      "post": {
        "description": "Creates request to reset password via email. Password reset email will be sent to the user. Sends 204 No Content.",
        "tags": [
          "v1"
        ],
        "summary": "Creates request to reset password via email",
        "operationId": "v1PasswordResetRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailId"
              ],
              "properties": {
                "emailId": {
                  "description": "Describes email if for which password reset email has to be sent",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/aws": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS cloud accounts",
        "operationId": "v1CloudAccountsAwsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1AwsAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an AWS cloud account",
        "operationId": "v1CloudAccountsAwsCreate",
        "parameters": [
          {
            "description": "Request payload to validate AWS cloud account",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/aws/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AWS account",
        "operationId": "v1CloudAccountsAwsGet",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "assumeCredentials",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified AWS account",
        "operationId": "v1CloudAccountsAwsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified AWS account",
        "operationId": "v1CloudAccountsAwsDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "AWS cloud account uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/azure": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of azure cloud accounts",
        "operationId": "v1CloudAccountsAzureList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of azure cloud account items",
            "schema": {
              "$ref": "#/definitions/v1AzureAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create azure cloud account",
        "operationId": "v1CloudAccountsAzureCreate",
        "parameters": [
          {
            "description": "Request payload to validate Azure cloud account",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/azure/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified azure cloud account",
        "operationId": "v1CloudAccountsAzureGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified azure account",
        "operationId": "v1CloudAccountsAzureUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified azure account",
        "operationId": "v1CloudAccountsAzureDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Azure cloud account uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudTypes/{cloudType}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cloud accounts by cloud type",
        "operationId": "v1CloudAccountsCustomList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account by specified cloud type items",
            "schema": {
              "$ref": "#/definitions/v1CustomAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an cloud account of specific cloud type",
        "operationId": "v1CloudAccountsCustomCreate",
        "parameters": [
          {
            "description": "Request payload to validate Custom cloud account",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomAccountEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Custom cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudTypes/{cloudType}/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified account by cloud type",
        "operationId": "v1CloudAccountsCustomGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CustomAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified account by cloud type",
        "operationId": "v1CloudAccountsCustomUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified account by cloud type",
        "operationId": "v1CloudAccountsCustomDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Custom cloud account uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Custom cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudstack": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of CloudStack cloud accounts",
        "operationId": "v1CloudAccountsCloudStackList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of CloudStack cloud account items",
            "schema": {
              "$ref": "#/definitions/v1CloudStackAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a CloudStack cloud account",
        "operationId": "v1CloudAccountsCloudStackCreate",
        "parameters": [
          {
            "description": "Request payload to validate CloudStack cloud account",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CloudStackAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/cloudstack/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified CloudStack account",
        "operationId": "v1CloudAccountsCloudStackGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CloudStackAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified CloudStack account",
        "operationId": "v1CloudAccountsCloudStackUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CloudStackAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified CloudStack account",
        "operationId": "v1CloudAccountsCloudStackDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "CloudStack cloud account uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudstack/{uid}/properties/diskofferings": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cloudstack disk offerings for a given account and zone",
        "operationId": "v1CloudstackAccountsUidDiskofferings",
        "parameters": [
          {
            "type": "string",
            "name": "zone",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackDiskOfferings"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudstack/{uid}/properties/domains": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cloudstack domains for a given account",
        "operationId": "v1CloudstackAccountsUidDomains",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackDomains"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudstack/{uid}/properties/keypairs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cloudstack SSH key pairs for a given account",
        "operationId": "v1CloudstackAccountsUidKeypairs",
        "parameters": [
          {
            "type": "string",
            "description": "Project ID for which CloudStack SSH key pairs are requested",
            "name": "projectId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackKeypairs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudstack/{uid}/properties/networks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cloudstack networks for a given account and zone",
        "operationId": "v1CloudstackAccountsUidNetworks",
        "parameters": [
          {
            "type": "string",
            "name": "zone",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackNetworks"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudstack/{uid}/properties/offerings": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cloudstack compute offerings for a given account and zone",
        "operationId": "v1CloudstackAccountsUidOfferings",
        "parameters": [
          {
            "type": "string",
            "name": "zone",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackOfferings"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudstack/{uid}/properties/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cloudstack projects for a given account and domain",
        "operationId": "v1CloudstackAccountsUidProjects",
        "parameters": [
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackProjects"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudstack/{uid}/properties/templates": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cloudstack templates for a given account and zone",
        "operationId": "v1CloudstackAccountsUidTemplates",
        "parameters": [
          {
            "type": "string",
            "name": "zone",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackTemplates"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/cloudstack/{uid}/properties/zones": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cloudstack zones for a given account",
        "operationId": "v1CloudstackAccountsUidZones",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackZones"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/gcp": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of gcp cloud accounts",
        "operationId": "v1CloudAccountsGcpList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of gcp cloud account items",
            "schema": {
              "$ref": "#/definitions/v1GcpAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a GCP cloud account",
        "operationId": "v1CloudAccountsGcpCreate",
        "parameters": [
          {
            "description": "Request payload to validate GCP cloud account",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpAccountEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/gcp/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified GCP cloud account",
        "operationId": "v1CloudAccountsGcpGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified GCP account",
        "operationId": "v1CloudAccountsGcpUpdate",
        "parameters": [
          {
            "description": "Request payload to validate GCP cloud account",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified GCP account",
        "operationId": "v1CloudAccountsGcpDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "GCP cloud account uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Maas cloud accounts",
        "operationId": "v1CloudAccountsMaasList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1MaasAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Maas cloud account",
        "operationId": "v1CloudAccountsMaasCreate",
        "parameters": [
          {
            "description": "Request payload to validate Maas cloud account",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/maas/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Maas account",
        "operationId": "v1CloudAccountsMaasGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MaasAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Maas account",
        "operationId": "v1CloudAccountsMaasUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Maas account",
        "operationId": "v1CloudAccountsMaasDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Patches the specified CloudAccount Maas",
        "operationId": "v1CloudAccountsMaasPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CloudAccountsPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Maas cloud account uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/azs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the maas azs for a given account",
        "operationId": "v1MaasAccountsUidAzs",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasZones"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/domains": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the maas domains for a given account",
        "operationId": "v1MaasAccountsUidDomains",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasDomains"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/resourcePools": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the maas pools for a given account",
        "operationId": "v1MaasAccountsUidPools",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasPools"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/subnets": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the maas subnets for a given account",
        "operationId": "v1MaasAccountsUidSubnets",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasSubnets"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/tags": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the maas tags for a given account",
        "operationId": "v1MaasAccountsUidTags",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasTags"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of OpenStack cloud accounts",
        "operationId": "v1CloudAccountsOpenStackList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a OpenStack cloud account",
        "operationId": "v1CloudAccountsOpenStackCreate",
        "parameters": [
          {
            "description": "Request payload to validate OpenStack cloud account",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/openstack/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified OpenStack account",
        "operationId": "v1CloudAccountsOpenStackGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified OpenStack account",
        "operationId": "v1CloudAccountsOpenStackUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified OpenStack account",
        "operationId": "v1CloudAccountsOpenStackDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "OpenStack cloud account uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/azs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack azs for a given account and region",
        "operationId": "v1OpenstackAccountsUidAzs",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAzs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/flavors": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack keypairs for a given account and scope",
        "operationId": "v1OpenstackAccountsUidFlavors",
        "parameters": [
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackFlavors"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/keypairs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack keypairs for a given account and scope",
        "operationId": "v1OpenstackAccountsUidKeypairs",
        "parameters": [
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackKeypairs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/networks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack networks for a given account and scope",
        "operationId": "v1OpenstackAccountsUidNetworks",
        "parameters": [
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackNetworks"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack projects for a given account",
        "operationId": "v1OpenstackAccountsUidProjects",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackProjects"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack regions for a given account",
        "operationId": "v1OpenstackAccountsUidRegions",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackRegions"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/summary": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cloud accounts summary",
        "operationId": "v1CloudAccountsListSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account summary items",
            "schema": {
              "$ref": "#/definitions/v1CloudAccountsSummary"
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/vsphere": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of vSphere cloud accounts",
        "operationId": "v1CloudAccountsVsphereList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a vSphere cloud account",
        "operationId": "v1CloudAccountsVsphereCreate",
        "parameters": [
          {
            "description": "Request payload to validate VSphere cloud account",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/vsphere/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vSphere account",
        "operationId": "v1CloudAccountsVsphereGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified VSphere account",
        "operationId": "v1CloudAccountsVsphereUpdate",
        "parameters": [
          {
            "description": "Request payload to validate VSphere cloud account",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified vSphere account",
        "operationId": "v1CloudAccountsVsphereDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "VSphere cloud account uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/vsphere/{uid}/properties/computecluster/resources": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the vSphere computecluster resources for the given overlord account",
        "operationId": "v1VsphereAccountsUidClusterRes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereComputeClusterResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "datacenter",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "name": "computecluster",
          "in": "query",
          "required": true
        },
        {
          "type": "boolean",
          "name": "useQualifiedNetworkName",
          "in": "query"
        }
      ]
    },
    "/v1/cloudaccounts/vsphere/{uid}/properties/datacenters": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the vSphere datacenters \u0026 datacluster for the given overlord account",
        "operationId": "v1VsphereAccountsUidDatacenters",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDatacenters"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/{uid}/geoLocation": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the geolocation annotation",
        "operationId": "v1AccountsGeolocationPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GeolocationLatlong"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AKS cloud config",
        "operationId": "v1CloudConfigsAksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsAksUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an AKS cloud config's machine pool",
        "operationId": "v1CloudConfigsAksMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified AKS cloud config's machine pool",
        "operationId": "v1CloudConfigsAksMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsAksMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AKS machines",
        "operationId": "v1CloudConfigsAksPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AKS machine items",
            "schema": {
              "$ref": "#/definitions/v1AzureMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsAksPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AKS machine",
        "operationId": "v1CloudConfigsAksPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsAksPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Azure machine",
        "operationId": "v1CloudConfigsAksPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AWS cloud config",
        "operationId": "v1CloudConfigsAwsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsAwsUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/clusterConfig/hybridConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the hybrid configuration information of AWS cluster",
        "operationId": "v1AwsCloudConfigsUidHybridConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsCloudHybridConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "AWS Cluster's Hybrid Configuration",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/edge-native/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Hybrid AWS cloud config's Edge-Native machine pool",
        "operationId": "V1AwsCloudConfigsEdgeNativeUidMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1HybridEdgeNativeMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Hybrid AWS cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/edge-native/machinePools/{machinePoolName}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AWS Cluster's Edge-Native machine pool configuration",
        "operationId": "v1AwsCloudConfigsEdgeNativeMachinePoolGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1HybridEdgeNativeMachinePoolConfig"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Hybrid AWS cluster cloud config's Edge-Native machine pool",
        "operationId": "v1AwsCloudConfigsEdgeNativeMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1HybridEdgeNativeMachinePoolConfigUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Edge-Native machine pool of hybrid AWS cluster",
        "operationId": "v1AwsCloudConfigsEdgeNativeMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "AWS Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Edge-native machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an AWS cloud config's machine pool",
        "operationId": "v1CloudConfigsAwsMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified AWS cloud config's machine pool",
        "operationId": "v1CloudConfigsAwsMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsAwsMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS machines",
        "operationId": "v1CloudConfigsAwsPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AWS machine items",
            "schema": {
              "$ref": "#/definitions/v1AwsMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsAwsPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AWS machine",
        "operationId": "v1CloudConfigsAwsPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsAwsPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified AWS machine",
        "operationId": "v1CloudConfigsAwsPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Azure cloud config",
        "operationId": "v1CloudConfigsAzureGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsAzureUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Azure cloud config's machine pool",
        "operationId": "v1CloudConfigsAzureMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Azure cloud config's machine pool",
        "operationId": "v1CloudConfigsAzureMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsAzureMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "description": "Returns all the Azure machines restricted to the user role and filters.",
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure machines",
        "operationId": "v1CloudConfigsAzurePoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AWS machine items",
            "schema": {
              "$ref": "#/definitions/v1AzureMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsAzurePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "description": "Returns a Azure machine for the specified uid.",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Azure machine",
        "operationId": "v1CloudConfigsAzurePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsAzurePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Azure machine",
        "operationId": "v1CloudConfigsAzurePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Custom cloud config",
        "operationId": "v1CloudConfigsCustomGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsCustomUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Custom cloud config's machine pool",
        "operationId": "v1CloudConfigsCustomMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Custom cloud config's machine pool",
        "operationId": "v1CloudConfigsCustomMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsCustomMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Custom machines",
        "operationId": "v1CloudConfigsCustomPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Custom machine items",
            "schema": {
              "$ref": "#/definitions/v1CustomMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsCustomPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Custom machine",
        "operationId": "v1CloudConfigsCustomPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CustomMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsCustomPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Custom machine",
        "operationId": "v1CloudConfigsCustomPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudstack/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified CloudStack cloud config",
        "operationId": "v1CloudConfigsCloudStackGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CloudStackCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudstack/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsCloudStackUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CloudStackCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudstack/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a CloudStack cloud config's machine pool",
        "operationId": "v1CloudConfigsCloudStackMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CloudStackMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudstack/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified CloudStack cloud config's machine pool",
        "operationId": "v1CloudConfigsCloudStackMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CloudStackMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsCloudStackMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudstack/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of CloudStack machines",
        "operationId": "v1CloudConfigsCloudStackPoolMachinesList",
        "responses": {
          "200": {
            "description": "An array of CloudStack machine items",
            "schema": {
              "$ref": "#/definitions/v1CloudStackMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the CloudStack machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsCloudStackPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CloudStackMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/cloudstack/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified CloudStack machine",
        "operationId": "v1CloudConfigsCloudStackPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CloudStackMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsCloudStackPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CloudStackMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified CloudStack machine",
        "operationId": "v1CloudConfigsCloudStackPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge-native/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified edge-native cloud config",
        "operationId": "v1CloudConfigsEdgeNativeGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge-native/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsEdgeNativeUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge-native/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a edge-native cloud config's machine pool",
        "operationId": "v1CloudConfigsEdgeNativeMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified edge-native cloud config's machine pool",
        "operationId": "v1CloudConfigsEdgeNativeMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsEdgeNativeMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of edge-native machines",
        "operationId": "v1CloudConfigsEdgeNativePoolMachinesList",
        "responses": {
          "200": {
            "description": "An array of edge-native machine items",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the edge-native machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsEdgeNativePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified edge-native machine",
        "operationId": "v1CloudConfigsEdgeNativePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsEdgeNativePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified edge-native machine",
        "operationId": "v1CloudConfigsEdgeNativePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified EKS cloud config",
        "operationId": "v1CloudConfigsEksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EksCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsEksUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EksCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/fargateProfiles": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates EKS cloud config's fargate profiles",
        "operationId": "v1CloudConfigsEksUidFargateProfilesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EksFargateProfiles"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an EKS cloud config's machine pool",
        "operationId": "v1CloudConfigsEksMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified EKS cloud config's machine pool",
        "operationId": "v1CloudConfigsEksMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsEksMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of EKS machines",
        "operationId": "v1CloudConfigsEksPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of EKS machine items",
            "schema": {
              "$ref": "#/definitions/v1AwsMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsEksPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified EKS machine",
        "operationId": "v1CloudConfigsEksPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsEksPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified EKS machine",
        "operationId": "v1CloudConfigsEksPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified GCP cloud config",
        "operationId": "v1CloudConfigsGcpGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsGcpUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a Gcp cloud config's machine pool",
        "operationId": "v1CloudConfigsGcpMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified GCP cloud config's machine pool",
        "operationId": "v1CloudConfigsGcpMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsGcpMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP machines",
        "operationId": "v1CloudConfigsGcpPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of GCP machine items",
            "schema": {
              "$ref": "#/definitions/v1GcpMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsGcpPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified GCP machine",
        "operationId": "v1CloudConfigsGcpPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsGcpPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified GCP machine",
        "operationId": "v1CloudConfigsGcpPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Generic cloud config",
        "operationId": "v1CloudConfigsGenericGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GenericCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsGenericUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a generic cloud config's machine pool",
        "operationId": "v1CloudConfigsGenericMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified generic cloud config's machine pool",
        "operationId": "v1CloudConfigsGenericMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsGenericMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Generic machines",
        "operationId": "v1CloudConfigsGenericPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Generic machine items",
            "schema": {
              "$ref": "#/definitions/v1GenericMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsGenericPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified generic machine",
        "operationId": "v1CloudConfigsGenericPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GenericMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsGenericPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine",
        "operationId": "v1CloudConfigsGenericPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gke/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified GKE cloud config",
        "operationId": "v1CloudConfigsGkeGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gke/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsGkeUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gke/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an GKE cloud config's machine pool",
        "operationId": "v1CloudConfigsGkeMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified GKE cloud config's machine pool",
        "operationId": "v1CloudConfigsGkeMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsGkeMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GKE machines",
        "operationId": "v1CloudConfigsGkePoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of GKE machine items",
            "schema": {
              "$ref": "#/definitions/v1GcpMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsGkePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified GKE machine",
        "operationId": "v1CloudConfigsGkePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsGkePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Gcp machine",
        "operationId": "v1CloudConfigsGkePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Maas cloud config",
        "operationId": "v1CloudConfigsMaasGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MaasCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsMaasUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Maas cloud config's machine pool",
        "operationId": "v1CloudConfigsMaasMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Maas cloud config's machine pool",
        "operationId": "v1CloudConfigsMaasMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsMaasMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Maas machines",
        "operationId": "v1CloudConfigsMaasPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Maas machine items",
            "schema": {
              "$ref": "#/definitions/v1MaasMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsMaasPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Maas machine",
        "operationId": "v1CloudConfigsMaasPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MaasMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsMaasPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Maas machine",
        "operationId": "v1CloudConfigsMaasPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified OpenStack cloud config",
        "operationId": "v1CloudConfigsOpenStackGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OpenStackCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsOpenStackUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a OpenStack cloud config's machine pool",
        "operationId": "v1CloudConfigsOpenStackMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified OpenStack cloud config's machine pool",
        "operationId": "v1CloudConfigsOpenStackMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsOpenStackMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of OpenStack machines",
        "operationId": "v1CloudConfigsOpenStackPoolMachinesList",
        "responses": {
          "200": {
            "description": "An array of OpenStack machine items",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the OpenStack machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsOpenStackPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified OpenStack machine",
        "operationId": "v1CloudConfigsOpenStackPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsOpenStackPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified OpenStack machine",
        "operationId": "v1CloudConfigsOpenStackPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/virtual/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Virtual cloud config",
        "operationId": "v1CloudConfigsVirtualGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VirtualCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/virtual/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsVirtualUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/virtual/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a virtual cloud config's machine pool",
        "operationId": "v1CloudConfigsVirtualMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified virtual cloud config's machine pool",
        "operationId": "v1CloudConfigsVirtualMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsVirtualMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of virtual machines",
        "operationId": "v1CloudConfigsVirtualPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of virtual machine items",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsVirtualPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified virtual machine",
        "operationId": "v1CloudConfigsVirtualPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsVirtualPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified virtual machine",
        "operationId": "v1CloudConfigsVirtualPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/virtual/{configUid}/resize": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates and resizes the virtual cluster",
        "operationId": "v1CloudConfigsVirtualUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualClusterResize"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify virtual cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vSphere cloud config",
        "operationId": "v1CloudConfigsVsphereGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsVsphereUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a vSphere cloud config's machine pool",
        "operationId": "v1CloudConfigsVsphereMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified vSphere cloud config's machine pool",
        "operationId": "v1CloudConfigsVsphereMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsVsphereMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of vSphere machines",
        "operationId": "v1CloudConfigsVspherePoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of vSphere machine items",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the vSphere machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsVspherePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vSphere machine",
        "operationId": "v1CloudConfigsVspherePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsVspherePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified vSphere machine",
        "operationId": "v1CloudConfigsVspherePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}/maintenance": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine maintenance",
        "operationId": "v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MachineMaintenance"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}/maintenance/status": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine maintenance",
        "operationId": "v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MachineMaintenanceStatus"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine pool name",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Machine uid",
          "name": "machineUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/{configUid}/machinePools/machineUids": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cloud config's machine pools and machine uid",
        "operationId": "v1CloudConfigsMachinePoolsMachineUidsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MachinePoolsMachineUids"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud config uid",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/aws/account/secret/credentials": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the Aws secret credentials",
        "operationId": "V1AwsAccountSecretCredentials",
        "parameters": [
          {
            "description": "Retrieves the Aws secret credentials",
            "name": "account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsSecretSpecInputEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsAccountCredentials"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/account/sts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves AWS external id and account id",
        "operationId": "V1AwsAccountStsGet",
        "parameters": [
          {
            "enum": [
              "aws",
              "aws-us-gov"
            ],
            "type": "string",
            "default": "aws",
            "description": "AWS accounts are scoped to a single partition. Allowed values [aws, aws-us-gov], Default values",
            "name": "partition",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/V1AwsAccountSts"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the specified AWS account credentials",
        "operationId": "V1AwsAccountValidate",
        "parameters": [
          {
            "description": "Request payload to validate AWS cloud account",
            "name": "awsCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/amiTypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS AMI types",
        "operationId": "V1AwsAmiTypes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AmiTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/cloudwatch/validate": {
      "post": {
        "description": "Validates aws cloud watch credentials",
        "tags": [
          "v1"
        ],
        "summary": "validates aws cloud watch credentials",
        "operationId": "V1CloudsAwsCloudWatchValidate",
        "parameters": [
          {
            "description": "Request payload for cloud watch config",
            "name": "cloudWatchConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.CloudWatchConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/cost": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves AWS cloud account usage cost from cost explorer.",
        "operationId": "v1AwsCloudCost",
        "parameters": [
          {
            "description": "Request payload for AWS cloud cost",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsCloudCostSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsCloudCostSummary"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/imageIds/{imageId}/volumeSize": {
      "get": {
        "description": "Get AWS Volume Size",
        "tags": [
          "v1"
        ],
        "summary": "Get AWS Volume Size",
        "operationId": "V1AwsVolumeSizeGet",
        "parameters": [
          {
            "type": "string",
            "description": "Specific AWS Region",
            "name": "region",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "AWS image id",
            "name": "imageId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsVolumeSize"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/policies": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS policies for the specified account",
        "operationId": "V1AwsIamPolicies",
        "parameters": [
          {
            "description": "Request payload for AWS Cloud Account",
            "name": "account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsCloudAccount"
            }
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsPolicies"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/policyArns/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the aws policy arns validate",
        "operationId": "V1AwsPolicyArnsValidate",
        "parameters": [
          {
            "description": "Request payload to validate AWS policy ARN",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsPolicyArnsSpec"
            }
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/properties/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate AWS properties",
        "operationId": "V1AwsPropertiesValidate",
        "parameters": [
          {
            "description": "Request payload for AWS properties validate spec",
            "name": "properties",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1AwsPropertiesValidateSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS regions for the specified account",
        "operationId": "V1AwsRegions",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsRegions"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/availabilityzones": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS availability zones for the specified region",
        "operationId": "V1AwsZones",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which zones are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsAvailabilityZones"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/copydefaultimages": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Copies the specified image from one region to another region",
        "operationId": "V1AwsCopyImageFromDefaultRegion",
        "parameters": [
          {
            "type": "string",
            "description": "Region to copy AWS image from",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "description": "Request payload to copy the AWS image",
            "name": "spectroClusterAwsImageTag",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsFindImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AsyncOperationIdEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/eksClusters/name/validate": {
      "get": {
        "description": "Returns no contents if aws cluster name is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if Aws cluster name is valid",
        "operationId": "V1AwsClusterNameValidate",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "cluster name to be validated",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Region for which cluster name is validated",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/images": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Returns AWS image for the specified AMI name",
        "operationId": "V1AwsFindImage",
        "parameters": [
          {
            "type": "string",
            "description": "Region to find AWS image",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "description": "Request payload to find the AWS image",
            "name": "awsImageRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsFindImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsImage"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/instancetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS instance types",
        "operationId": "V1AwsInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which AWS instances are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "description": "Filter for instances having cpu greater than or equal",
            "name": "cpuGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "description": "Filter for instances having memory greater than or equal",
            "name": "memoryGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "description": "Filter for instances having gpu greater than or equal",
            "name": "gpuGtEq",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsInstanceTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/keypairs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS keypairs",
        "operationId": "V1AwsKeyPairs",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which AWS key pairs are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsKeyPairs"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/keypairs/{keypair}/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the specified AWS keypair",
        "operationId": "V1AwsKeyPairValidate",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which AWS key pairs is validated",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "AWS Key pair which is to be validated",
            "name": "keypair",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/kms/{keyId}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get AWS KMS key by Id",
        "operationId": "V1AwsKmsKeyGet",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which AWS KMS key belongs",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The globally unique identifier for the KMS key",
            "name": "keyId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsKmsKeyEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/kmskeys": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS KMS keys for the specified account",
        "operationId": "V1AwsKmsKeys",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which AWS KMS key are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsKmsKeys"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/kmskeys/validate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validate an Aws KMS key for the specified account",
        "operationId": "V1AwsKmsKeyValidate",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which AWS KMS key is validated",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "AWS KEY ARN for validation",
            "name": "keyArn",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/storagetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS storage types",
        "operationId": "V1AwsStorageTypes",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which AWS storage types are requested",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsStorageTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/vpcs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of VPCs for the specified account",
        "operationId": "V1AwsVpcs",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which VPCs are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsVpcs"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/s3/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the AWS S3 bucket",
        "operationId": "V1AwsS3Validate",
        "parameters": [
          {
            "description": "AWS S3 bucket credentials",
            "name": "awsS3Credential",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsS3BucketCredentials"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/securitygroups": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS security groups for the specified account",
        "operationId": "V1AwsSecurityGroups",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific AWS cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Region for which security groups are requested",
            "name": "region",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Vpc Id for which security groups are requested",
            "name": "vpcId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsSecurityGroups"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/volumeTypes": {
      "get": {
        "description": "List all AWS Volume Types",
        "tags": [
          "v1"
        ],
        "summary": "Get all AWS Volume Types",
        "operationId": "V1AwsVolumeTypesGet",
        "parameters": [
          {
            "type": "string",
            "description": "Specific AWS Region",
            "name": "region",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AWSVolumeTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if Azure account is valid",
        "operationId": "V1AzureAccountValidate",
        "parameters": [
          {
            "description": "Request payload for Azure cloud account",
            "name": "azureCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AzureCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/azure/groups": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure groups",
        "operationId": "V1AzureGroups",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureGroups"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure regions",
        "operationId": "V1AzureRegions",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "SubscriptionId for which resources is requested",
            "name": "subscriptionId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureRegions"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/instancetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure instance types",
        "operationId": "V1AzureInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which Azure instance types are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Azure subscription ID (optional - falls back to cloud account subscription if not provided)",
            "name": "subscriptionId",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "description": "Filter for instances having cpu greater than or equal",
            "name": "cpuGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "description": "Filter for instances having memory greater than or equal",
            "name": "memoryGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "description": "Filter for instances having gpu greater than or equal",
            "name": "gpuGtEq",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureInstanceTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/storagetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure storage types",
        "operationId": "V1AzureStorageTypes",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which Azure storage types are requested",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureStorageTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/aksClusters/name/validate": {
      "get": {
        "description": "Returns no contents if Azure cluster name is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if Azure cluster name is valid",
        "operationId": "V1AzureClusterNameValidate",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "cluster name to be validated",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "region in which cluster name is to be validated",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "subscriptionId in which cluster name is to be validated",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resourceGroup in which cluster name is to be validated",
            "name": "resourceGroup",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/networks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure virtual network list for the sepcified account",
        "operationId": "V1AzureVirtualNetworkList",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Region for which Azure virtual networks are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for which Azure virtual networks are requested",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource group for which Azure virtual networks are requested",
            "name": "resourceGroup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureVirtualNetworkList"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/resourceGroups": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure resource group for the specified account",
        "operationId": "V1AzureResourceGroupList",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Region for which Azure resource group are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for which Azure resource group are requested",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureResourceGroupList"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/zones": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure zones for the specified region",
        "operationId": "V1AzureZones",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which Azure zones are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "subscriptionId of azure account",
            "name": "subscriptionId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureZoneEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/resourceGroups/{resourceGroup}/privateDnsZones": {
      "get": {
        "description": "Returns Azure private DNS zones",
        "tags": [
          "v1"
        ],
        "summary": "Get Azure private DNS zones for the given resource group",
        "operationId": "V1AzurePrivateDnsZones",
        "parameters": [
          {
            "type": "string",
            "description": "resourceGroup for which Azure private dns zones are requested",
            "name": "resourceGroup",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "subscriptionId for which Azure private dns zones are requested",
            "name": "subscriptionId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzurePrivateDnsZones"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/resourceGroups/{resourceGroup}/storageAccounts": {
      "get": {
        "description": "Returns Azure storage accounts.",
        "tags": [
          "v1"
        ],
        "summary": "Get Azure storage accounts",
        "operationId": "V1AzureStorageAccounts",
        "parameters": [
          {
            "type": "string",
            "description": "resourceGroup for which Azure storage accounts are requested",
            "name": "resourceGroup",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "subscriptionId for which Azure storage accounts are requested",
            "name": "subscriptionId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureStorageAccounts"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/resourceGroups/{resourceGroup}/storageAccounts/{storageAccountName}/containers": {
      "get": {
        "description": "Returns Azure storage containers for the given account.",
        "tags": [
          "v1"
        ],
        "summary": "Get Azure storage containers",
        "operationId": "V1AzureStorageContainers",
        "parameters": [
          {
            "type": "string",
            "description": "resourceGroup for which Azure storage accounts are requested",
            "name": "resourceGroup",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "subscriptionId for which Azure storage accounts are requested",
            "name": "subscriptionId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "resourceGroup for which Azure storage accounts are requested",
            "name": "storageAccountName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureStorageContainers"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/storageaccounttypes": {
      "get": {
        "description": "Returns Azure storage account types.",
        "tags": [
          "v1"
        ],
        "summary": "Get Azure storage account types",
        "operationId": "V1AzureStorageAccountTypes",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which Azure storage account types are requested",
            "name": "region",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureStorageAccountEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/subscriptions": {
      "get": {
        "description": "Returns list of Azure subscription list.",
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure subscription list for the specified account",
        "operationId": "V1AzureSubscriptionList",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureSubscriptionList"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/vhds/{vhd}/url": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Azure vhd url for the specified vhd location",
        "operationId": "V1AzureVhdUrl",
        "parameters": [
          {
            "type": "string",
            "description": "vhd location for which Azure vhd url is requested",
            "name": "vhd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Uid for the specific Azure cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureVhdUrlEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/cloudTypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the custom cloud types",
        "operationId": "V1CustomCloudTypesGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/cloudTypes/register": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Registers the custom cloud type",
        "operationId": "V1CustomCloudTypeRegister",
        "parameters": [
          {
            "description": "Request payload to register custom cloud type",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudRequestEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the custom cloud type",
        "operationId": "V1CustomCloudTypesDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Unique cloud type",
            "name": "cloudType",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}/cloudAccountKeys": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns valid keys for the cloud account used for custom cloud type",
        "operationId": "V1CustomCloudTypeCloudAccountKeysGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeCloudAccountKeys"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the custom cloud type cloud account keys",
        "operationId": "V1CustomCloudTypeCloudAccountKeysUpdate",
        "parameters": [
          {
            "description": "Request payload for custom cloud meta entity",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeCloudAccountKeys"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/bootstrap": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the custom cloud type bootstrap",
        "operationId": "V1CustomCloudTypeBootstrapGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Update the custom cloud type bootstrap",
        "operationId": "V1CustomCloudTypeBootstrapUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the custom cloud type bootstrap",
        "operationId": "V1CustomCloudTypeBootstrapDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/cloudProvider": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the custom cloud type cloud provider",
        "operationId": "V1CustomCloudTypeCloudProviderGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Update the custom cloud type cloud provider",
        "operationId": "V1CustomCloudTypeCloudProviderUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the custom cloud type cloud provider",
        "operationId": "V1CustomCloudTypeCloudProviderDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/controlPlane": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the custom cloud type control plane",
        "operationId": "V1CustomCloudTypeControlPlaneGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Update the custom cloud type control plane",
        "operationId": "V1CustomCloudTypeControlPlaneUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the custom cloud type control plane",
        "operationId": "V1CustomCloudTypeControlPlaneDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/core": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the custom cloud type core",
        "operationId": "V1CustomCloudTypeCoreGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Update the custom cloud type core",
        "operationId": "V1CustomCloudTypeCoreUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the custom cloud type core",
        "operationId": "V1CustomCloudTypeCoreDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/templates/clusterTemplate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the custom cloud type cluster template",
        "operationId": "V1CustomCloudTypeClusterTemplateGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Update the custom cloud type cluster template",
        "operationId": "V1CustomCloudTypeClusterTemplateUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the custom cloud type cluster template",
        "operationId": "V1CustomCloudTypeClusterTemplateDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/templates/controlPlanePoolTemplate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the custom cloud type controlPlane pool template",
        "operationId": "V1CustomCloudTypeControlPlanePoolTemplateGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Update the custom cloud type controlPlane pool template",
        "operationId": "V1CustomCloudTypeControlPlanePoolTemplateUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the custom cloud type controlPlane pool template",
        "operationId": "V1CustomCloudTypeControlPlanePoolTemplateDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/templates/workerPoolTemplate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the custom cloud type worker pool template",
        "operationId": "V1CustomCloudTypeWorkerPoolTemplateGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Update the custom cloud type worker pool template",
        "operationId": "V1CustomCloudTypeWorkerPoolTemplateUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the custom cloud type worker pool template",
        "operationId": "V1CustomCloudTypeWorkerPoolTemplateDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/cloudTypes/{cloudType}/logo": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the custom cloud type logo",
        "operationId": "V1CustomCloudTypeLogoGet",
        "responses": {
          "200": {
            "description": "Download the logo",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Update the custom cloud type logo",
        "operationId": "V1CustomCloudTypeLogoUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/cloudTypes/{cloudType}/meta": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the custom cloud type meta",
        "operationId": "V1CustomCloudTypeMetaGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudMetaEntity"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the custom cloud type meta",
        "operationId": "V1CustomCloudTypeMetaUpdate",
        "parameters": [
          {
            "description": "Request payload for custom cloud meta entity",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CustomCloudRequestEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/cloudstack/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if CloudStack account is valid",
        "operationId": "V1CloudStackAccountValidate",
        "parameters": [
          {
            "description": "Request payload for CloudStack cloud account",
            "name": "cloudstackCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CloudStackCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/cloudstack/diskOfferings": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the CloudStack disk offerings",
        "operationId": "V1CloudStackDiskOfferingsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific CloudStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Zone for which CloudStack disk offerings are requested",
            "name": "zone",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Domain ID for which CloudStack disk offerings are requested",
            "name": "domainId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Project ID for which CloudStack disk offerings are requested",
            "name": "projectId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackDiskOfferings"
            }
          }
        }
      }
    },
    "/v1/clouds/cloudstack/domains": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the CloudStack domains",
        "operationId": "V1CloudStackDomainsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific CloudStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackDomains"
            }
          }
        }
      }
    },
    "/v1/clouds/cloudstack/keypairs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the CloudStack SSH key pairs",
        "operationId": "V1CloudStackKeypairsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific CloudStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Project ID for which CloudStack SSH key pairs are requested",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Domain ID for which CloudStack SSH key pairs are requested",
            "name": "domainId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackKeypairs"
            }
          }
        }
      }
    },
    "/v1/clouds/cloudstack/networks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the CloudStack networks",
        "operationId": "V1CloudStackNetworksGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific CloudStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Zone for which CloudStack networks are requested",
            "name": "zone",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Project ID for which CloudStack networks are requested",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "VPC ID for which CloudStack networks are requested",
            "name": "vpcId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Domain ID for which CloudStack networks are requested",
            "name": "domainId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackNetworks"
            }
          }
        }
      }
    },
    "/v1/clouds/cloudstack/offerings": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the CloudStack compute offerings",
        "operationId": "V1CloudStackOfferingsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific CloudStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Zone for which CloudStack offerings are requested",
            "name": "zone",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Domain ID for which CloudStack offerings are requested",
            "name": "domainId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Project ID for which CloudStack offerings are requested",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Template ID for which CloudStack offerings are requested",
            "name": "templateId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackOfferings"
            }
          }
        }
      }
    },
    "/v1/clouds/cloudstack/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the CloudStack projects",
        "operationId": "V1CloudStackProjectsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific CloudStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Domain for which CloudStack projects are requested",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackProjects"
            }
          }
        }
      }
    },
    "/v1/clouds/cloudstack/templates": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the CloudStack templates",
        "operationId": "V1CloudStackTemplatesGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific CloudStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Zone for which CloudStack templates are requested",
            "name": "zone",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Domain ID for which CloudStack templates are requested",
            "name": "domainId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Project ID for which CloudStack templates are requested",
            "name": "projectId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackTemplates"
            }
          }
        }
      }
    },
    "/v1/clouds/cloudstack/vpcs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the CloudStack Vpcs",
        "operationId": "V1CloudStackVpcsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific CloudStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Project ID for which CloudStack SSH key pairs are requested",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Domain ID for which CloudStack SSH key pairs are requested",
            "name": "domainId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackVpcs"
            }
          }
        }
      }
    },
    "/v1/clouds/cloudstack/zones": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the CloudStack zones",
        "operationId": "V1CloudStackZonesGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific CloudStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Domain id for which the zones are requested",
            "name": "domainId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudStackZones"
            }
          }
        }
      }
    },
    "/v1/clouds/eks/properties/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate EKS properties",
        "operationId": "V1EksPropertiesValidate",
        "parameters": [
          {
            "description": "Request payload for EKS properties validate spec",
            "name": "properties",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1EksPropertiesValidateSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the specified GCP account credentials",
        "operationId": "V1GcpAccountValidate",
        "parameters": [
          {
            "description": "Uid for the specific GCP cloud account",
            "name": "gcpCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GcpCloudAccountValidateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/azs/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the specified GCP az",
        "operationId": "V1GcpAzValidate",
        "parameters": [
          {
            "description": "Uid for the specific GCP cloud account",
            "name": "entity",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AzValidateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/bucketname/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the specified GCP bucket name credentials",
        "operationId": "V1GcpBucketNameValidate",
        "parameters": [
          {
            "description": "Request payload for GCP account name validate",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GcpAccountNameValidateSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/image/container/validate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the image with tag",
        "operationId": "V1GcpContainerImageValidate",
        "parameters": [
          {
            "type": "string",
            "description": "image path in the container",
            "name": "imagePath",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "tag in the GCP container",
            "name": "tag",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/images/{imageName}/url": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Gcp image url for the specified image location",
        "operationId": "V1GcpImageUrl",
        "parameters": [
          {
            "type": "string",
            "description": "imageName for which GCP image url is requested",
            "name": "imageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpImageUrlEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP projects for the specified account",
        "operationId": "V1GcpProjects",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific GCP cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpProjects"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/projects/{project}/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP regions",
        "operationId": "V1GcpRegions",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific GCP cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Project Name for which GCP zones are requested",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpRegions"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/projects/{project}/regions/{region}/networks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP networks for the specified account",
        "operationId": "V1GcpNetworks",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific GCP cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Region for which GCP networks are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Project Name for which GCP networks are requested",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpNetworks"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/projects/{project}/regions/{region}/zones": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP zones for the specified account and region",
        "operationId": "V1GcpZones",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific GCP cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Region for which GCP zones are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Project Name for which GCP zones are requested",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpZones"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/projects/{project}/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the specified GCP project",
        "operationId": "V1GcpProjectValidate",
        "parameters": [
          {
            "type": "string",
            "description": "GCP project uid",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "description": "Uid for the specific GCP cloud account",
            "name": "cloudAccountUid",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CloudAccountUidEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/projects/{project}/zones": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP zones for the specified account",
        "operationId": "V1GcpAvailabilityZones",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific GCP cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Project Name for which GCP zones are requested",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpZones"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/properties/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate GCP properties",
        "operationId": "V1GcpPropertiesValidate",
        "parameters": [
          {
            "description": "Request payload for GCP properties validate spec",
            "name": "properties",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1GcpPropertiesValidateSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/regions/{region}/instancetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP instance types",
        "operationId": "V1GcpInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which GCP instance types are requested",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "description": "Filter for instances having cpu greater than or equal",
            "name": "cpuGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "description": "Filter for instances having memory greater than or equal",
            "name": "memoryGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "description": "Filter for instances having gpu greater than or equal",
            "name": "gpuGtEq",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpInstanceTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/regions/{region}/storagetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Gcp storage types",
        "operationId": "V1GcpStorageTypes",
        "parameters": [
          {
            "type": "string",
            "description": "Region for which GCP storage types are requested",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpStorageTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/maas/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if Maas account is valid",
        "operationId": "V1MaasAccountValidate",
        "parameters": [
          {
            "description": "Request payload for Maas cloud account",
            "name": "account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MaasCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/maas/azs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Maas zones for a particular account uid",
        "operationId": "V1MaasZonesGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Maas cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasZones"
            }
          }
        }
      }
    },
    "/v1/clouds/maas/domains": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Maas domains",
        "operationId": "V1MaasDomainsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Maas cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasDomains"
            }
          }
        }
      }
    },
    "/v1/clouds/maas/resourcePools": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Maas pools for a particular account uid",
        "operationId": "V1MaasPoolsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Maas cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasPools"
            }
          }
        }
      }
    },
    "/v1/clouds/maas/subnets": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Maas subnets for a particular account uid",
        "operationId": "V1MaasSubnetsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Maas cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasSubnets"
            }
          }
        }
      }
    },
    "/v1/clouds/maas/tags": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Maas tags for a particular account uid",
        "operationId": "V1MaasTagsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific Maas cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasTags"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if OpenStack account is valid",
        "operationId": "V1OpenStackAccountValidate",
        "parameters": [
          {
            "description": "Request payload for OpenStack cloud account",
            "name": "openstackCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OpenStackCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/azs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of OpenStack azs for a particular account uid",
        "operationId": "V1OpenStackAzsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific OpenStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "project for which OpenStack azs are requested",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "description": "region for which OpenStack azs are requested",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "description": "domain for which OpenStack azs are requested",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAzs"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/flavors": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the OpenStack flavors",
        "operationId": "V1OpenStackFlavorsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific OpenStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "project for which OpenStack flavors are requested",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "description": "region for which OpenStack flavors are requested",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "description": "domain for which OpenStack flavors are requested",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackFlavors"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/keypairs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the OpenStack keypair",
        "operationId": "V1OpenStackKeypairsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific OpenStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "project for which OpenStack keypairs are requested",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "description": "region for which OpenStack keypairs are requested",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "description": "domain for which OpenStack keypairs are requested",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackKeypairs"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/networks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the OpenStack networks",
        "operationId": "V1OpenStackNetworksGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific OpenStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "project for which OpenStack networks are requested",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "description": "region for which OpenStack networks are requested",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "description": "domain for which OpenStack networks are requested",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackNetworks"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the OpenStack projects",
        "operationId": "V1OpenStackProjectsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific OpenStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackProjects"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the OpenStack regions",
        "operationId": "V1OpenStackRegionsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific OpenStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackRegions"
            }
          }
        }
      }
    },
    "/v1/clouds/vsphere/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if Vsphere account is valid",
        "operationId": "V1VsphereAccountValidate",
        "parameters": [
          {
            "description": "Request payload for VSphere cloud account",
            "name": "vsphereCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/vsphere/datacenters": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the vsphere data centers",
        "operationId": "V1VsphereDatacenters",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific OpenStack cloud account",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDatacenters"
            }
          }
        }
      }
    },
    "/v1/clouds/vsphere/datacenters/{uid}/computeclusters/{computecluster}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the resources for vsphere compute cluster",
        "operationId": "V1VsphereComputeClusterResources",
        "parameters": [
          {
            "type": "string",
            "description": "Uid for the specific VSphere cloud account",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "computecluster for which resources is requested",
            "name": "computecluster",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "VSphere datacenter uid for which resources is requested",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereComputeClusterResources"
            }
          }
        }
      }
    },
    "/v1/clouds/vsphere/env": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves vsphere env",
        "operationId": "V1VsphereEnv",
        "parameters": [
          {
            "description": "Request payload for VSphere cloud account",
            "name": "vsphereCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereEnv"
            }
          }
        }
      }
    },
    "/v1/clouds/{cloud}/compute/{type}/rate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the cloud compute rate",
        "operationId": "V1CloudComputeRate",
        "parameters": [
          {
            "type": "string",
            "description": "cloud for which compute rate is requested",
            "name": "cloud",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "instance type for which compute rate is requested",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "region for which compute rate is requested",
            "name": "region",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudCost"
            }
          }
        }
      }
    },
    "/v1/clouds/{cloud}/storage/{type}/rate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the cloud storage rate",
        "operationId": "V1CloudStorageRate",
        "parameters": [
          {
            "type": "string",
            "description": "cloud for which compute rate is requested",
            "name": "cloud",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "storage type for which compute rate is requested",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "region for which compute rate is requested",
            "name": "region",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "maxDiskType for which compute rate is requested",
            "name": "maxDiskType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudCost"
            }
          }
        }
      }
    },
    "/v1/clusterTemplates": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a new cluster template",
        "operationId": "V1ClusterTemplatesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplateEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      }
    },
    "/v1/clusterTemplates/spectroclusters/{clusterUid}/variables": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the specified cluster's template variables",
        "operationId": "V1ClusterTemplatesUidSpectroClustersUidVariablesPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplateVariablesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "clusterUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterTemplates/tags": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster template tags",
        "operationId": "V1ClusterTemplatesTagsGet",
        "responses": {
          "200": {
            "description": "An array of cluster template tags",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplateTags"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      }
    },
    "/v1/clusterTemplates/validate/name": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the cluster template name",
        "operationId": "V1ClusterTemplatesValidateName",
        "parameters": [
          {
            "type": "string",
            "description": "Cluster template name",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      }
    },
    "/v1/clusterTemplates/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster template",
        "operationId": "V1ClusterTemplatesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplate"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete a cluster template by uid",
        "operationId": "V1ClusterTemplatesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster template uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterTemplates/{uid}/metadata": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the specified cluster template metadata",
        "operationId": "V1ClusterTemplatesUidMetadataUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMetaInputEntitySchema"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster template uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterTemplates/{uid}/policies": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the specified cluster template policies",
        "operationId": "V1ClusterTemplatesUidPoliciesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplatePoliciesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster template uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterTemplates/{uid}/profiles": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the specified cluster template profiles",
        "operationId": "V1ClusterTemplatesUidProfilesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplateProfilesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster template uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterTemplates/{uid}/profiles/variables": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update variables for profiles in a cluster template",
        "operationId": "V1ClusterTemplatesUidProfilesVariablesPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplateProfilesVariablesBatchEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster template uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterTemplates/{uid}/profiles/{profileUid}/variables": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieve variables for a specific profile in a cluster template",
        "operationId": "V1ClusterTemplatesUidProfilesProfileUidVariablesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplateProfileVariablesResponse"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster template uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Profile uid",
          "name": "profileUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterTemplates/{uid}/spectroclusters/{clusterUid}/reconcile": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the cluster reconcile document for a specific cluster launched from a template",
        "operationId": "V1ClusterTemplatesUidClusterReconcileClusterUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterReconcile"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster template uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "clusterUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clustergroups": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create cluster groups",
        "operationId": "v1ClusterGroupsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroupEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clustergroups/developerCredit/usage/{scope}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get cluster group developer credit usage by scope",
        "operationId": "v1ClusterGroupsDeveloperCreditUsageGet",
        "responses": {
          "200": {
            "description": "Cluster group developer credit usage",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroupsDeveloperCreditUsage"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant"
          ],
          "type": "string",
          "name": "scope",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clustergroups/hostCluster": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster groups host cluster summary",
        "operationId": "v1ClusterGroupsHostClusterSummary",
        "responses": {
          "200": {
            "description": "An array of cluster groups of host cluster type summary",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroupsHostClusterSummary"
            }
          }
        }
      }
    },
    "/v1/clustergroups/hostCluster/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster groups host cluster metadata",
        "operationId": "v1ClusterGroupsHostClusterMetadata",
        "responses": {
          "200": {
            "description": "An array of cluster groups host cluster metadata items",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroupsHostClusterMetadata"
            }
          }
        }
      }
    },
    "/v1/clustergroups/validate/name": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the cluster groups name",
        "operationId": "v1ClusterGroupsValidateName",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clustergroups/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster groups",
        "operationId": "v1ClusterGroupsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroup"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified cluster group",
        "operationId": "v1ClusterGroupsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clustergroups/{uid}/hostCluster": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates cluster reference and host cluster config",
        "operationId": "v1ClusterGroupsUidHostClusterUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroupHostClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clustergroups/{uid}/meta": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster groups meta",
        "operationId": "v1ClusterGroupsUidMetaUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMeta"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clustergroups/{uid}/packs/resolvedValues": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified clustergroup's profile packs resolved values",
        "operationId": "v1ClusterGroupsUidPacksResolvedValuesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfilesResolvedValues"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster group uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1SpectroClusterProfilesParamReferenceEntity"
          }
        }
      ]
    },
    "/v1/clustergroups/{uid}/profiles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated profiles of a specified cluster group",
        "operationId": "v1ClusterGroupsUidProfilesGet",
        "parameters": [
          {
            "type": "string",
            "description": "includes pack meta such as schema, presets",
            "name": "includePackMeta",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileList"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster groups profiles",
        "operationId": "v1ClusterGroupsUidProfilesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfiles"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ClusterGroup uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a cluster profile",
        "operationId": "v1ClusterProfilesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileEntity"
            }
          },
          {
            "type": "boolean",
            "description": "If true then cluster profile will be created and published in a single transaction",
            "name": "publish",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/bulk": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes list of cluster profiles",
        "operationId": "v1ClusterProfilesBulkDelete",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1BulkDeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1BulkDeleteResponse"
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Imports a cluster profile",
        "operationId": "v1ClusterProfilesImport",
        "parameters": [
          {
            "type": "boolean",
            "description": "If true then cluster profile will be published post successful import",
            "name": "publish",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/import/file": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Imports a cluster profile via file",
        "operationId": "v1ClusterProfilesImportFile",
        "parameters": [
          {
            "type": "boolean",
            "description": "If true then cluster profile will be published post successful import",
            "name": "publish",
            "in": "query"
          },
          {
            "type": "file",
            "description": "Cluster profile import file",
            "name": "importFile",
            "in": "formData"
          },
          {
            "enum": [
              "yaml",
              "json"
            ],
            "type": "string",
            "default": "json",
            "description": "Cluster profile import file format [\"yaml\", \"json\"]",
            "name": "format",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/import/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates cluster profile import",
        "operationId": "v1ClusterProfilesImportValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileImportEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster profile import validated response",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileImportEntity"
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/macros": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of macros",
        "operationId": "v1MacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/validate/name": {
      "get": {
        "description": "Validates the cluster profile name and version",
        "tags": [
          "v1"
        ],
        "summary": "Validates the cluster profile metadata",
        "operationId": "v1ClusterProfilesValidateNameVersion",
        "parameters": [
          {
            "type": "string",
            "description": "Cluster profile name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cluster profile version",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/validate/packs": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates cluster profile packs",
        "operationId": "v1ClusterProfilesValidatePacks",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileTemplateDraft"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster profile packs validation response",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns a specified cluster profile",
        "operationId": "v1ClusterProfilesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster profile",
        "operationId": "v1ClusterProfilesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified cluster profile",
        "operationId": "v1ClusterProfilesDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Comma seperated pack meta such as schema, presets",
          "name": "includePackMeta",
          "in": "query"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/clone": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a clone of the specified cluster profile",
        "operationId": "v1ClusterProfilesUidClone",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileCloneEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/clone/validate": {
      "post": {
        "description": "Validates the cloned cluster profile name, version and target project uid",
        "tags": [
          "v1"
        ],
        "summary": "Validates the cluster profile clone",
        "operationId": "v1ClusterProfilesUidCloneValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileCloneMetaInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/export": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Export the specified cluster profile",
        "operationId": "V1ClusterProfilesUidExport",
        "responses": {
          "200": {
            "description": "Exports cluster profile as a file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "yaml",
            "json"
          ],
          "type": "string",
          "default": "json",
          "description": "Cluster profile export file format [ \"yaml\", \"json\" ]",
          "name": "format",
          "in": "query"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/export/terraform": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the specified cluster profile",
        "operationId": "V1ClusterProfilesUidExportTerraform",
        "responses": {
          "200": {
            "description": "Downloads cluster profile export file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "yaml",
            "json"
          ],
          "type": "string",
          "default": "yaml",
          "description": "Cluster profile export file format [ \"yaml\", \"json\" ]",
          "name": "format",
          "in": "query"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/metadata": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster profile metadata",
        "operationId": "v1ClusterProfilesUidMetadataUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProfileMetaEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packRefs": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates cluster profile packs ref",
        "operationId": "v1ClusterProfilesPacksRefUpdate",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster profile notification uid",
          "name": "notify",
          "in": "query"
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1ClusterProfileNotificationUpdateEntity"
          }
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile packs",
        "operationId": "v1ClusterProfilesUidPacksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilePacksEntities"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds a new pack to the specified cluster profile and returns the created pack uid",
        "operationId": "v1ClusterProfilesUidPacksAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PackInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Comma seperated pack meta such as schema, presets",
          "name": "includePackMeta",
          "in": "query"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile pack manifests",
        "operationId": "v1ClusterProfilesUidPacksManifestsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilePacksManifests"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Comma seperated pack meta such as schema, presets",
          "name": "includePackMeta",
          "in": "query"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/resolvedValues": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile packs resolved values",
        "operationId": "v1ClusterProfilesUidPacksResolvedValuesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackResolvedValues"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1PackParamsEntity"
          }
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile pack",
        "operationId": "V1ClusterProfilesUidPacksNameGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackRefSummaryResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified pack information in the cluster profile",
        "operationId": "v1ClusterProfilesUidPacksNameUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PackUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified pack information in the cluster profile",
        "operationId": "v1ClusterProfilesUidPacksNameDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster profile pack name",
          "name": "packName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile pack configuration",
        "operationId": "v1ClusterProfilesUidPacksConfigGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster profile uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Cluster profile pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Cluster profile pack uid",
            "name": "packUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profile pack configurations",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilePackConfigList"
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated manifests for the specified profile's pack",
        "operationId": "v1ClusterProfilesUidPacksUidManifests",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ManifestEntities"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds manifest to the profiles packs and returns the added manifests uid",
        "operationId": "v1ClusterProfilesUidPacksNameManifestsAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster profile pack name",
          "name": "packName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}/manifests/{manifestUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile pack manifest",
        "operationId": "v1ClusterProfilesUidPacksNameManifestsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ManifestEntity"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified manifest of the profile's pack",
        "operationId": "v1ClusterProfilesUidPacksNameManifestsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified cluster profile pack manifest",
        "operationId": "v1ClusterProfilesUidPacksNameManifestsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster profile pack name",
          "name": "packName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster profile pack manifest uid",
          "name": "manifestUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/publish": {
      "patch": {
        "description": "Publish the draft cluster profile with next revision, the current draft cluster profile will be marked to published\nand the draft cluster profile will be set to null in the cluster profile template.\n",
        "tags": [
          "v1"
        ],
        "summary": "Publishes the specified cluster profile",
        "operationId": "v1ClusterProfilesPublish",
        "responses": {
          "204": {
            "description": "Cluster profile published successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/spc/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the specified cluster profile",
        "operationId": "v1ClusterProfilesUidSpcDownload",
        "responses": {
          "200": {
            "description": "Download cluster profile archive file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/validate/packs": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates specified cluster profile packs",
        "operationId": "v1ClusterProfilesUidValidatePacks",
        "parameters": [
          {
            "type": "string",
            "description": "Cluster profile uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileTemplateDraft"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster profile packs validation response",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/{uid}/variables": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieve a list of variables defined for the cluster profile",
        "operationId": "V1ClusterProfilesUidVariablesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Variables"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the variables defined for a cluster profile",
        "operationId": "V1ClusterProfilesUidVariablesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Variables"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified cluster profile variables",
        "operationId": "V1ClusterProfilesUidVariablesDelete",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VariableNames"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update specific variables defined for a cluster profile",
        "operationId": "V1ClusterProfilesUidVariablesPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Variables"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/appDeployments": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of application deployments filter summary Supported filter fields - [\"appDeploymentName\", \"clusterUid\", \"tags\"] Supported sort fields - [\"appDeploymentName\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "operationId": "v1DashboardAppDeployments",
        "parameters": [
          {
            "maximum": 50,
            "type": "integer",
            "format": "int64",
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentsFilterSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of application deployment summary items",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentsSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/appProfiles": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of application profiles filter summary Supported filter fields - [\"profileName\", \"tags\"] Supported sort fields - [\"profileName\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "operationId": "v1DashboardAppProfiles",
        "parameters": [
          {
            "maximum": 50,
            "type": "integer",
            "format": "int64",
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfilesFilterSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of application profiles summary items",
            "schema": {
              "$ref": "#/definitions/v1AppProfilesSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/appProfiles/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of application profile metadata",
        "operationId": "v1DashboardAppProfilesMetadata",
        "responses": {
          "200": {
            "description": "An array of application profile summary items",
            "schema": {
              "$ref": "#/definitions/v1AppProfilesMetadata"
            }
          }
        }
      }
    },
    "/v1/dashboard/appliances/metadata": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of edgehosts summary",
        "operationId": "v1EdgeHostsMetadata",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostsMetadataFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edgenative pair summary items",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostsMetadataSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/cloudaccounts/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cloud accounts metadata",
        "operationId": "v1DashboardCloudAccountsMetadata",
        "parameters": [
          {
            "type": "string",
            "name": "environment",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud accounts summary items",
            "schema": {
              "$ref": "#/definitions/v1CloudAccountsMetadata"
            }
          }
        }
      }
    },
    "/v1/dashboard/clusterTemplates": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster templates filter summary Supported filter fields - [\"clusterTemplateName\", \"tags\", \"cloudType\",\"projectUid\", \"policyUid\"] Supported sort fields - [\"clusterTemplateName\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "operationId": "v1ClusterTemplatesFilterSummary",
        "parameters": [
          {
            "maximum": 50,
            "type": "integer",
            "format": "int64",
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplatesFilterSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster template summary items",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplatesSummary"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      }
    },
    "/v1/dashboard/clusterTemplates/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of all cluster template metadata.",
        "operationId": "v1ClusterTemplatesMetadataGet",
        "responses": {
          "200": {
            "description": "An array of cluster template metadata",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplatesMetadata"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      }
    },
    "/v1/dashboard/clusterTemplates/{uid}/spectroclusters/meta": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves spectroclusters meta information for clusters launched using the specified cluster template.",
        "operationId": "v1ClusterTemplatesUidSpectroclustersMetaGet",
        "parameters": [
          {
            "type": "string",
            "description": "The UID of the cluster template",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of spectrocluster meta information",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersMeta"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      }
    },
    "/v1/dashboard/clustergroups/{uid}/hostClusters": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster summary for a given cluster group",
        "operationId": "v1ClusterGroupUidHostClustersSummary",
        "parameters": [
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/clustergroups/{uid}/virtualClusters": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster summary for a given cluster group",
        "operationId": "v1ClusterGroupUidVirtualClustersSummary",
        "parameters": [
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/clusterprofiles": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster profiles filter summary Supported filter fields - ['profileName', 'tags', 'profileType', 'environment', 'resourceType'] Supported sort fields - ['profileName', 'environment', 'profileType', 'creationTimestamp', 'lastModifiedTimestamp']",
        "operationId": "v1ClusterProfilesFilterSummary",
        "parameters": [
          {
            "maximum": 50,
            "type": "integer",
            "format": "int64",
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilesFilterSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profiles summary items",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilesSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/clusterprofiles/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster profiles metadata",
        "operationId": "v1ClusterProfilesMetadata",
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilesMetadata"
            }
          }
        }
      }
    },
    "/v1/dashboard/clusterprofiles/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a specified cluster profile summary",
        "operationId": "v1ClusterProfilesUidSummary",
        "responses": {
          "200": {
            "description": "Cluster profile summary response",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/edgehosts/search": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Edgehosts summary with provided search filter. Supported fields as per schema /v1/dashboard/edgehosts/search/schema",
        "operationId": "v1DashboardEdgehostsSearch",
        "parameters": [
          {
            "maximum": 50,
            "type": "integer",
            "format": "int64",
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edgenative pair summary items",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostsSearchSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/edgehosts/search/schema": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a schema for the Edgehost search filter",
        "operationId": "v1DashboardEdgehostsSearchSchemaGet",
        "responses": {
          "200": {
            "description": "An array of schema items",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSchemaSpec"
            }
          }
        }
      }
    },
    "/v1/dashboard/pcgs/search": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of PCG summary with provided search filter. Supported fields as per schema /v1/dashboard/pcgs/search/schema",
        "operationId": "v1DashboardPcgsSearchSummary",
        "parameters": [
          {
            "maximum": 50,
            "type": "integer",
            "format": "int64",
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1PcgsSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/pcgs/search/schema": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a schema for the PCG search filter",
        "operationId": "v1DashboardPcgSearchSchemaGet",
        "responses": {
          "200": {
            "description": "An array of schema items",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSchemaSpec"
            }
          }
        }
      }
    },
    "/v1/dashboard/projects": {
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "v1ProjectsFilterSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectsFilterSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of project filter summary items",
            "schema": {
              "$ref": "#/definitions/v1ProjectsSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/projects/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of projects metadata",
        "operationId": "v1ProjectsMetadata",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the project",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of project metadata items",
            "schema": {
              "$ref": "#/definitions/v1ProjectsMetadata"
            }
          }
        }
      }
    },
    "/v1/dashboard/spcPolicies": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of spc policies filter summary Supported filter fields - [\"policyName\", \"tags\", \"policyType\"] Supported sort fields - [\"policyName\", \"policyType\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "operationId": "v1SpcPoliciesFilterSummary",
        "parameters": [
          {
            "maximum": 50,
            "type": "integer",
            "format": "int64",
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpcPoliciesFilterSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of spc policies summary items",
            "schema": {
              "$ref": "#/definitions/v1SpcPoliciesSummary"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      }
    },
    "/v1/dashboard/spcPolicies/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of all spc policies metadata.",
        "operationId": "v1SpcPoliciesMetadataGet",
        "responses": {
          "200": {
            "description": "An array of spc policies metadata",
            "schema": {
              "$ref": "#/definitions/v1SpcPoliciesMetadata"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/cost": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves spectro clusters cloud cost summary information",
        "operationId": "v1DashboardSpectroClustersCostSummary",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterCloudCostSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resources cloud cost summary items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesCloudCostSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/filters/workspace": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of running, non rbac configured clusters in a workspace",
        "operationId": "v1SpectroClustersFiltersWorkspace",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/meta": {
      "get": {
        "description": "Returns metadata information for all clusters",
        "tags": [
          "v1"
        ],
        "summary": "Get all clusters metadata",
        "operationId": "v1SpectroClustersMetaGet",
        "responses": {
          "200": {
            "description": "An array of cluster metadata items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersMeta"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster summary metadata",
        "operationId": "v1SpectroClustersMetadataGet",
        "parameters": [
          {
            "enum": [
              "hostclusters",
              "strictHostclusters"
            ],
            "type": "string",
            "name": "quickFilter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersMetadata"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster summary",
        "operationId": "v1SpectroClustersMetadata",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterMetadataSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersMetadata"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/metadata/search": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster metadata with provided search filter spec Supported sort fields - [\"environment\", \"clusterName\", \"clusterState\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "operationId": "v1SpectroClustersMetadataSearch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary meta items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersMetadataSearch"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/metadata/search/schema": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a schema for the cluster metadata search filter",
        "operationId": "v1SpectroClustersMetadataSearchSchema",
        "responses": {
          "200": {
            "description": "An array of cluster meta schema items",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSchemaSpec"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/repaveStatus": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of clusters with the desired repave state",
        "operationId": "v1DashboardSpectroClustersRepaveList",
        "parameters": [
          {
            "maximum": 50,
            "type": "integer",
            "format": "int64",
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "enum": [
              "Pending",
              "Approved",
              "Reverted"
            ],
            "type": "string",
            "default": "Pending",
            "name": "repaveState",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/resources/consumption": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves spectro clusters resource consumption",
        "operationId": "v1SpectroClustersResourcesConsumption",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceConsumptionSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resource consumption data items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesConsumption"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/resources/cost": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves spectro clusters resources cost summary information",
        "operationId": "v1SpectroClustersResourcesCostSummary",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceCostSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resources cost summary items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesCostSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/resources/usage": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves spectro clusters resources usage summary information",
        "operationId": "v1SpectroClustersResourcesUsageSummary",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceUsageSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resources usage summary items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesUsageSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/search": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster summary with provided search filter spec Supported sort fields - [\"environment\", \"clusterName\", \"memoryUsage\", \"healthState\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "operationId": "v1SpectroClustersSearchFilterSummary",
        "parameters": [
          {
            "maximum": 50,
            "type": "integer",
            "format": "int64",
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/search/export": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Export and download the list of cluster summary with matching search filter and download as a file(csv)",
        "operationId": "v1DashboardClustersSearchSummaryExportGet",
        "parameters": [
          {
            "type": "string",
            "name": "encodedFilter",
            "in": "query"
          },
          {
            "enum": [
              "csv"
            ],
            "type": "string",
            "default": "csv",
            "name": "format",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Export the list of cluster summary with matching search filter and download as a file(csv) Supported sort fields - [\"environment\", \"clusterName\", \"healthState\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "operationId": "v1DashboardClustersSearchSummaryExport",
        "parameters": [
          {
            "enum": [
              "csv"
            ],
            "type": "string",
            "default": "csv",
            "name": "format",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/search/input": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a supported input values for the cluster search filter",
        "operationId": "v1DashboardSpectroClustersSearchInput",
        "responses": {
          "200": {
            "description": "An array of cluster search filter input items",
            "schema": {
              "$ref": "#/definitions/v1ClusterSearchInputSpec"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/search/schema": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a schema for the cluster search filter",
        "operationId": "v1SpectroClustersSearchSchema",
        "responses": {
          "200": {
            "description": "An array of cluster filter schema items",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSchemaSpec"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/vms": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Virtual machine enabled clusters",
        "operationId": "V1DashboardVMEnabledClustersList",
        "responses": {
          "200": {
            "description": "An array of schema items",
            "schema": {
              "$ref": "#/definitions/v1VMClusters"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster summary",
        "operationId": "v1SpectroClustersSummaryUid",
        "responses": {
          "200": {
            "description": "An spectro cluster summary",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterUidSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/cost": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the specified cluster cost summary",
        "operationId": "v1SpectroClustersUidCostSummary",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "minimum": 60,
            "type": "integer",
            "format": "int32",
            "description": "period in minutes, group the data point by the specified period",
            "name": "period",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An spectro cluster cost summary",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterCostSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/overview": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster summary overview",
        "operationId": "v1SpectroClustersSummaryUidOverview",
        "responses": {
          "200": {
            "description": "An spectro cluster summary overview",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterUidSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/resources/consumption": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified spectro cluster resource consumption",
        "operationId": "v1SpectroClustersUidResourcesConsumption",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceConsumptionSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resource consumption data items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesConsumption"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workloads",
        "operationId": "v1DashboardSpectroClustersUidWorkloads",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workloads",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkload"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/clusterrolebinding": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload clusterrolebindings",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsClusterRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload clusterrolebindings",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadRoleBindings"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/cronjob": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload cronjobs",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsCronJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload cronjobs",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadCronJobs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/daemonset": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload daemonsets",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsDaemonSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload daemonsets",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadDaemonSets"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/deployment": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload deployments",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsDeployment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload deployments",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadDeployments"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/job": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload jobs",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload jobs",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadJobs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/namespace": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload namespaces",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsNamespace",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload namespaces",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadNamespaces"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/pod": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload pods",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsPod",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload pods",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadPods"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/rolebinding": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload rolebindings",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload rolebindings",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadRoleBindings"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/statefulset": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload statefulsets",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsStatefulSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload statefulsets",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadStatefulSets"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of workspace",
        "operationId": "v1DashboardWorkspacesList",
        "responses": {
          "200": {
            "description": "An array of workspace",
            "schema": {
              "$ref": "#/definitions/v1DashboardWorkspaces"
            }
          }
        }
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/clusterrolebinding": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload clusterrolebindings",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload clusterrolebindings",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadRoleBindings"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/cronjob": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload cronjobs",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload cronjobs",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadCronJobs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/daemonset": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload daemonsets",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload daemonsets",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadDaemonSets"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/deployment": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload deployments",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsDeployment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload deployments",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadDeployments"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/job": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload jobs",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload jobs",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadJobs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/namespace": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload namespaces",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespace",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload namespaces",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadNamespaces"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/pod": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload pods",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsPod",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload pods",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadPods"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/rolebinding": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload rolebindings",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload rolebindings",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadRoleBindings"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/statefulset": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload statefulsets",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload statefulsets",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadStatefulSets"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/datasinks/cloudwatch": {
      "post": {
        "description": "Sync data to cloud watch",
        "tags": [
          "v1"
        ],
        "summary": "sync data to cloud watch",
        "operationId": "V1DataSinksCloudWatchSink",
        "parameters": [
          {
            "description": "Request payload for cloud watch config",
            "name": "dataSinkCloudWatchConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DataSinkCloudWatchConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/edgehosts": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create the edge host device",
        "operationId": "v1EdgeHostDevicesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDeviceEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/edgehosts/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of edge hosts metadata matching the filter condition",
        "operationId": "v1EdgeHostsMetadataQuickFilterGet",
        "parameters": [
          {
            "enum": [
              "edge-native",
              "vsphere"
            ],
            "type": "string",
            "name": "type",
            "in": "query"
          },
          {
            "enum": [
              "unusedEdgeHosts"
            ],
            "type": "string",
            "name": "quickFilter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edge host metadata",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostsMeta"
            }
          }
        }
      }
    },
    "/v1/edgehosts/register": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Registers the edge host device",
        "operationId": "v1EdgeHostDevicesRegister",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          }
        }
      }
    },
    "/v1/edgehosts/tags": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of edge hosts tags",
        "operationId": "v1EdgeHostsTagsGet",
        "responses": {
          "200": {
            "description": "An array of edge hosts tags",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostsTags"
            }
          }
        }
      }
    },
    "/v1/edgehosts/tokens": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of edge tokens",
        "operationId": "v1EdgeTokensList",
        "responses": {
          "200": {
            "description": "An array of edge tokens",
            "schema": {
              "$ref": "#/definitions/v1EdgeTokens"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create the edge token",
        "operationId": "v1EdgeTokensCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeTokenEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/edgehosts/tokens/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified edge token",
        "operationId": "v1EdgeTokensUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeToken"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified edge token",
        "operationId": "v1EdgeTokensUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeTokenUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified edge token",
        "operationId": "v1EdgeTokensUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Edge token uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/tokens/{uid}/state": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Revoke or re-activate the edge token access",
        "operationId": "v1EdgeTokensUidState",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeTokenActiveState"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Edge token uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified edge host device",
        "operationId": "v1EdgeHostDevicesUidGet",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "resolve pack values if set to true",
            "name": "resolvePackValues",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified edge host device",
        "operationId": "v1EdgeHostDevicesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified edge host device",
        "operationId": "v1EdgeHostDevicesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/cluster/associate": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deassociate the clusters to the edge host",
        "operationId": "v1EdgeHostDevicesUidClusterDeassociate",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Associate the clusters to the edge host",
        "operationId": "v1EdgeHostDevicesUidClusterAssociate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the specified edge host device configuration",
        "operationId": "v1EdgeHostDevicesUidConfigGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/health": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the edge host health",
        "operationId": "v1EdgeHostDevicesHealthUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostHealth"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/hostCheckSum": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the specified edge host device host check sum",
        "operationId": "v1EdgeHostDeviceHostCheckSumUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDeviceHostCheckSum"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/hostPairingKey": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the specified edge host device host pairing key",
        "operationId": "v1EdgeHostDeviceHostPairingKeyUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDeviceHostPairingKey"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/meta": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified edge host device meta",
        "operationId": "v1EdgeHostDevicesUidMetaUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDeviceMetaUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/pack/manifests/{manifestUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified edge host's manifest",
        "operationId": "v1EdgeHostDevicesUidPackManifestsUidGet",
        "parameters": [
          {
            "type": "string",
            "description": "edge host uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "manifest uid which is part of the pack ref",
            "name": "manifestUid",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "resolve pack manifest values if set to true",
            "name": "resolveManifestValues",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Pack manifest content",
            "schema": {
              "$ref": "#/definitions/v1Manifest"
            }
          }
        }
      }
    },
    "/v1/edgehosts/{uid}/packs/status": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Patch update specified edge host's packs status",
        "operationId": "v1EdgeHostDevicesUidPacksStatusPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksStatusEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/profiles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated profiles of a specified edge host device",
        "operationId": "v1EdgeHostDevicesUidProfilesGet",
        "parameters": [
          {
            "type": "string",
            "description": "includes pack meta such as schema, presets",
            "name": "includePackMeta",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileList"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Associate cluster profiles to the specified edge host device",
        "operationId": "v1EdgeHostDevicesUidProfilesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfiles"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/reset": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Reset the cluster through edge host",
        "operationId": "V1EdgeHostsUidReset",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Edge host uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/spc/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Download the specified edge host device spc",
        "operationId": "v1EdgeHostDevicesUidSpcDownload",
        "responses": {
          "200": {
            "description": "download spc archive file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/tunnelConfig": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified edge host device tunnel configuration",
        "operationId": "v1EdgeHostDevicesUidTunnelConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroTunnelConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/tunnelStatus": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the edge host tunnel status",
        "operationId": "v1EdgeHostDevicesUidTunnelStatusUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroTunnelStatus"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/vsphere/properties": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified edge host device vsphere properties",
        "operationId": "v1EdgeHostDevicesUidVspherePropertiesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostVsphereCloudProperties"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/events/components": {
      "get": {
        "description": "Returns a paginated list of component events based on request parameters",
        "tags": [
          "v1"
        ],
        "summary": "Returns a paginated list of component events based on request parameters",
        "operationId": "v1EventsComponentsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component events items",
            "schema": {
              "$ref": "#/definitions/v1Events"
            }
          }
        }
      },
      "post": {
        "description": "Creates a component event",
        "tags": [
          "v1"
        ],
        "summary": "Creates a component event",
        "operationId": "v1EventsComponentsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/events/components/bulk": {
      "post": {
        "description": "Creates the component events in bulk",
        "tags": [
          "v1"
        ],
        "summary": "Creates the component events in bulk",
        "operationId": "v1EventsComponentsCreateBulk",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1BulkEvents"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uids"
            }
          }
        }
      }
    },
    "/v1/events/components/{objectKind}/{objectUid}": {
      "get": {
        "description": "Returns a list of components events for the specified related object",
        "tags": [
          "v1"
        ],
        "summary": "Returns a list of components events for the specified related object",
        "operationId": "v1EventsComponentsObjTypeUidList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1Events"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete all the components events for the specified related object",
        "operationId": "v1EventsComponentsObjTypeUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "spectrocluster",
            "edgehost"
          ],
          "type": "string",
          "description": "Describes the related object uid for which events has to be fetched",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Describes the related object kind for which events has to be fetched",
          "name": "objectUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/features": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the list of features",
        "operationId": "v1FeaturesList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Features"
            }
          }
        }
      }
    },
    "/v1/features/{uid}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update a feature",
        "operationId": "v1FeaturesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1FeatureUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the feature uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/filters": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns a list of Filters",
        "operationId": "v1FiltersList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of filters",
            "schema": {
              "$ref": "#/definitions/v1FiltersSummary"
            }
          }
        }
      }
    },
    "/v1/filters/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns a list of Filters metadata",
        "operationId": "v1FiltersMetadata",
        "parameters": [
          {
            "type": "string",
            "description": "filterType can be - [tag, meta, resource]",
            "name": "filterType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of filters",
            "schema": {
              "$ref": "#/definitions/v1FiltersMetadata"
            }
          }
        }
      }
    },
    "/v1/filters/tag": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a Tag filter",
        "operationId": "v1TagFiltersCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TagFilter"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/filters/tag/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Filter object",
        "operationId": "v1TagFilterUidGet",
        "responses": {
          "200": {
            "description": "A Filter object",
            "schema": {
              "$ref": "#/definitions/v1TagFilterSummary"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates a Tag filter",
        "operationId": "v1TagFilterUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TagFilter"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the specified Filter object",
        "operationId": "v1TagFilterUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/metrics/{resourceKind}/values": {
      "get": {
        "description": "Returns all the metrics for a given resource kind",
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the list of metrics for a specified resource kind",
        "operationId": "v1MetricsList",
        "parameters": [
          {
            "enum": [
              "pod",
              "namespace",
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "all",
            "name": "metricKind",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "name": "period",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Deprecated. includeMasterMachines in boolean, group the data point by including control plane nodes if set to true",
            "name": "includeMasterMachines",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "includeControlPlaneMachines in boolean, group the data point by including control plane nodes if set to true",
            "name": "includeControlPlaneMachines",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "if true then api returns only aggregation values, else api returns all data points by default",
            "name": "discrete",
            "in": "query"
          },
          {
            "type": "string",
            "name": "spectroClusterUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of metric items",
            "schema": {
              "$ref": "#/definitions/v1MetricTimeSeriesList"
            }
          }
        }
      }
    },
    "/v1/metrics/{resourceKind}/{resourceUid}/values": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the metrics for a specified resource uid",
        "operationId": "v1MetricsUidList",
        "parameters": [
          {
            "enum": [
              "pod",
              "namespace",
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "all",
            "description": "multiple metric kinds can be provided with comma separated",
            "name": "metricKind",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "period in minutes, group the data point by the specified period",
            "name": "period",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Deprecated. includeMasterMachines in boolean, group the data point by including control plane nodes if set to true",
            "name": "includeMasterMachines",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "includeControlPlaneMachines in boolean, group the data point by including control plane nodes if set to true",
            "name": "includeControlPlaneMachines",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "if true then api returns only aggregation values, else api returns all data points by default",
            "name": "discrete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of metric items",
            "schema": {
              "$ref": "#/definitions/v1MetricTimeSeries"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the metrics of the specified resource",
        "operationId": "v1MetricsUidDelete",
        "parameters": [
          {
            "enum": [
              "pod",
              "namespace",
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      }
    },
    "/v1/notifications/": {
      "get": {
        "description": "Returns a paginated list of notifications based on request parameters",
        "tags": [
          "v1"
        ],
        "summary": "Returns a paginated list of notifications based on request parameters",
        "operationId": "v1NotificationsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of notification items",
            "schema": {
              "$ref": "#/definitions/v1Notifications"
            }
          }
        }
      }
    },
    "/v1/notifications/events": {
      "post": {
        "description": "Creates a notification event",
        "tags": [
          "v1"
        ],
        "summary": "Creates a notification event",
        "operationId": "v1NotificationsEventCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1NotificationEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/notifications/{objectKind}/{objectUid}": {
      "get": {
        "description": "Returns a list of notifications for the specified related object",
        "tags": [
          "v1"
        ],
        "summary": "Returns a list of notifications for the specified related object",
        "operationId": "v1NotificationsObjTypeUidList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1Notifications"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "spectrocluster",
            "clusterprofile",
            "appdeployment"
          ],
          "type": "string",
          "description": "Describes the related object kind for which notifications have to be fetched",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Describes the related object uid for which notifications have to be fetched",
          "name": "objectUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Describes a way to fetch \"done\" notifications",
          "name": "isDone",
          "in": "query"
        }
      ]
    },
    "/v1/notifications/{uid}/ack": {
      "patch": {
        "description": "Updates the specified notification for the acknowledgment",
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified notification for the acknowledgment",
        "operationId": "v1NotificationsUidAck",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Describes acknowledging notification uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/notifications/{uid}/done": {
      "patch": {
        "description": "Updates the specified notification action as done",
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified notification action as done",
        "operationId": "v1NotificationsUidDone",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Describes notification uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of overlords owned by the tenant",
        "operationId": "v1OverlordsList",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Overlords"
            }
          }
        }
      }
    },
    "/v1/overlords/cloudstack/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the manifests required for the private gateway installation",
        "operationId": "v1OverlordsCloudStackManifest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverlordManifest"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "pairingCode",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/overlords/cloudstack/{uid}/account": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the CloudStack cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidCloudStackAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordCloudStackAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the CloudStack cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidCloudStackAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordCloudStackAccountCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/cloudstack/{uid}/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "validate the CloudStack cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidCloudStackAccountValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1CloudStackCloudAccount"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/cloudstack/{uid}/cloudconfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the CloudStack cloud config for the private gateway",
        "operationId": "v1OverlordsUidCloudStackCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordCloudStackCloudConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the CloudStack cloud config for the private gateway",
        "operationId": "v1OverlordsUidCloudStackCloudConfigCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordCloudStackCloudConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/cloudstack/{uid}/clusterprofile": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified CloudStack private gateway cluster profile",
        "operationId": "v1OverlordsUidCloudStackClusterProfile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/maas/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the manifests required for the private gateway installation",
        "operationId": "V1OverlordsMaasManifest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverlordManifest"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "pairingCode",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/overlords/maas/{uid}/account": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the maas cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidMaasAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the maas cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidMaasAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasAccountCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/maas/{uid}/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "validate the maas cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidMaasAccountValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1MaasCloudAccount"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/maas/{uid}/cloudconfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the maas cloud config for the private gateway",
        "operationId": "V1OverlordsUidMaasCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasCloudConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the maas cloud config for the private gateway",
        "operationId": "V1OverlordsUidMaasCloudConfigCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasCloudConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/maas/{uid}/clusterprofile": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified maas private gateway cluster profile",
        "operationId": "v1OverlordsUidMaasClusterProfile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/maas/{uid}/pools": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of IP Pools for the specified maas private gateway",
        "operationId": "v1OverlordsUidMaasPoolsList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1IpPools"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an IP pool definition for the specified maas private gateway",
        "operationId": "v1OverlordsUidMaasPoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1IpPoolInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/maas/{uid}/pools/{poolUid}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the maas private gateway's specified IP Pool data",
        "operationId": "v1OverlordsUidMaasPoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1IpPoolInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the maas private gateway's specified IP Pool data",
        "operationId": "v1OverlordsUidMaasPoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "poolUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/migrate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "migrate all the clusters from source overlord to target overlord",
        "operationId": "V1OverlordsMigrate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMigrateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/overlords/openstack/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the manifests required for the private gateway installation",
        "operationId": "v1OverlordsOpenStackManifest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverlordManifest"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "pairingCode",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/overlords/openstack/{uid}/account": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the OpenStack cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidOpenStackAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the OpenStack cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidOpenStackAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackAccountCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/openstack/{uid}/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "validate the OpenStack cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidOpenStackAccountValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1OpenStackCloudAccount"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/openstack/{uid}/cloudconfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the OpenStack cloud config for the private gateway",
        "operationId": "v1OverlordsUidOpenStackCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackCloudConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the OpenStack cloud config for the private gateway",
        "operationId": "v1OverlordsUidOpenStackCloudConfigCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackCloudConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/openstack/{uid}/clusterprofile": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified OpenStack private gateway cluster profile",
        "operationId": "v1OverlordsUidOpenStackClusterProfile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/pairing/code": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the pairing code for the private gateway",
        "operationId": "v1OverlordsPairingCode",
        "parameters": [
          {
            "enum": [
              "vsphere",
              "openstack",
              "maas",
              "cloudstack"
            ],
            "type": "string",
            "name": "cloudType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1PairingCode"
            }
          }
        }
      }
    },
    "/v1/overlords/vsphere/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the manifests required for the private gateway installation",
        "operationId": "v1OverlordsVsphereManifest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverlordManifest"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "pairingCode",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/ova": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns overlord's ova information",
        "operationId": "v1OverlordsVsphereOvaGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverloadVsphereOva"
            }
          }
        }
      }
    },
    "/v1/overlords/vsphere/{uid}/account": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the vSphere cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidVsphereAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the vSphere cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidVsphereAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereAccountCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "validate the vSphere cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidVsphereAccountValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1VsphereCloudAccount"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/cloudconfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the vSphere cloud config for the private gateway",
        "operationId": "v1OverlordsUidVsphereCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereCloudConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the vSphere cloud config for the private gateway",
        "operationId": "v1OverlordsUidVsphereCloudConfigCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereCloudConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/clusterprofile": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vsphere private gateway cluster profile",
        "operationId": "v1OverlordsUidVsphereClusterProfile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/pools": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of IP Pools for the specified private gateway",
        "operationId": "v1OverlordsUidPoolsList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1IpPools"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an IP pool defintion for the sepcified private gateway",
        "operationId": "v1OverlordsUidPoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1IpPoolInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/pools/{poolUid}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the private gateways's specified IP Pool data",
        "operationId": "v1OverlordsUidPoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1IpPoolInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the private gateways's specified IP Pool data",
        "operationId": "v1OverlordsUidPoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "poolUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/properties/computecluster/resources": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the vSphere computecluster resources for the specified private gateway's account",
        "operationId": "v1OverlordsUidVsphereComputeclusterRes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereComputeClusterResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "datacenter",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "name": "computecluster",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/properties/datacenters": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the vSphere datacenters \u0026 datacluster for the specified private gateway's account",
        "operationId": "v1OverlordsUidVsphereDatacenters",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDatacenters"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified private gateway's for the given uid",
        "operationId": "v1OverlordsUidGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Overlord"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "delete the private gateway",
        "operationId": "v1OverlordsUidDelete",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DeletedMsg"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/{uid}/metadata": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the private gateway's metadata",
        "operationId": "v1OverlordsUidMetadataUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMetaInputEntitySchema"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/{uid}/reset": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "reset the private gateway by disaaociating the private gateway's resources",
        "operationId": "v1OverlordsUidReset",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UpdatedMsg"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/packs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of packs",
        "operationId": "v1PacksSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of pack summary items",
            "schema": {
              "$ref": "#/definitions/v1PackSummaries"
            }
          }
        }
      }
    },
    "/v1/packs/search": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of packs based on filter",
        "operationId": "v1PacksSearch",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PacksFilterSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of pack summary items",
            "schema": {
              "$ref": "#/definitions/v1PackMetadataList"
            }
          }
        }
      }
    },
    "/v1/packs/{packName}/registries/{registryUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of packs",
        "operationId": "v1PacksNameRegistryUidList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1PackTagEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Pack registry uid",
          "name": "registryUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Pack name",
          "name": "packName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "default": "all",
          "description": "Pack cloud type",
          "name": "cloudType",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Pack layer",
          "name": "layer",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Comma seperated pack states. Example values are \"deprecated\" \"deprecated,disabled\". If states is not specified or empty then by default API will return all packs except \"disabled\" packs",
          "name": "states",
          "in": "query"
        }
      ]
    },
    "/v1/packs/{packUid}/logo": {
      "get": {
        "produces": [
          "image/png",
          "image/gif",
          "image/jpeg"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the logo for a specified pack",
        "operationId": "v1PacksPackUidLogo",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "Cache control directive for the response"
              },
              "Expires": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Pack uid",
          "name": "packUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/packs/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified pack",
        "operationId": "v1PacksUid",
        "responses": {
          "200": {
            "description": "A pack for the specified uid",
            "schema": {
              "$ref": "#/definitions/v1PackTagEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Pack uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/packs/{uid}/readme": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the readme of a specified pack",
        "operationId": "v1PacksUidReadme",
        "responses": {
          "200": {
            "description": "Readme describes the documentation of the specified pack",
            "schema": {
              "$ref": "#/definitions/v1PackReadme"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Pack uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/pcg/selfHosted": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the private gateway manifest link",
        "operationId": "v1PcgSelfHosted",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PcgSelfHostedParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1PcgServiceKubectlCommands"
            }
          }
        }
      }
    },
    "/v1/pcg/{uid}/register": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Registers the pcg",
        "operationId": "v1PcgUidRegister",
        "parameters": [
          {
            "name": "pairingCode",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PairingCode"
            }
          },
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/pcg/{uid}/services/ally/manifest": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the pcg ally manifest",
        "operationId": "v1PcgUidAllyManifestGet",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/pcg/{uid}/services/jet/manifest": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the pcg jet manifest",
        "operationId": "v1PcgUidJetManifestGet",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/permissions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of permissions",
        "operationId": "v1PermissionsList",
        "parameters": [
          {
            "enum": [
              "system",
              "tenant",
              "project",
              "resource"
            ],
            "type": "string",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of permissions",
            "schema": {
              "$ref": "#/definitions/v1Permissions"
            }
          }
        }
      }
    },
    "/v1/projects": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a project",
        "operationId": "v1ProjectsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/projects/alerts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of supported alerts for a project",
        "operationId": "v1ProjectsAlerts",
        "responses": {
          "200": {
            "description": "An array of alert components",
            "schema": {
              "$ref": "#/definitions/v1ProjectAlertComponents"
            }
          }
        }
      }
    },
    "/v1/projects/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified project",
        "operationId": "v1ProjectsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Project"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified project",
        "operationId": "v1ProjectsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified project",
        "operationId": "v1ProjectsUidDelete",
        "parameters": [
          {
            "type": "boolean",
            "name": "cleanupProjectResources",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectCleanup"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/alerts/{component}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Upsert the specified alert to the specified project",
        "operationId": "v1ProjectsUidAlertUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AlertEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create the specified alert to the specified project",
        "operationId": "v1ProjectsUidAlertCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Channel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified alert to the specified project",
        "operationId": "v1ProjectsUidAlertDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "component",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/alerts/{component}/{alertUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the specified alert of the specified project",
        "operationId": "v1ProjectsUidAlertsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Channel"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the specified alert of the specified project",
        "operationId": "v1ProjectsUidAlertsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Channel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified alert of the specified project",
        "operationId": "v1ProjectsUidAlertsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "component",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "alertUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/macros": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "List the macros of the specified project",
        "operationId": "v1ProjectsUidMacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the macros of the specified project",
        "operationId": "v1ProjectsUidMacrosUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create or add new macros for the specified project",
        "operationId": "v1ProjectsUidMacrosCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the macros for the specified project by macro name",
        "operationId": "v1ProjectsUidMacrosDeleteByMacroName",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the macros for the specified project by macro name",
        "operationId": "v1ProjectsUidMacrosUpdateByMacroName",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/meta": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the metadata of the specified project",
        "operationId": "v1ProjectsUidMetaUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMeta"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/preferences/clusterSettings": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get project cluster settings",
        "operationId": "v1ProjectClusterSettingsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ProjectClusterSettings"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/preferences/clusterSettings/nodesAutoRemediationSetting": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update project clusters nodes auto remediation setting",
        "operationId": "v1ProjectClustersNodesAutoRemediationSettingUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1NodesAutoRemediationSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/teams": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the teams association to the specified project",
        "operationId": "v1ProjectsUidTeamsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectTeamsEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/users": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the users association to the specified project",
        "operationId": "v1ProjectsUidUsersUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectUsersEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/validate": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Validate and returns active resource of project before delete",
        "operationId": "v1ProjectsUidValidate",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ProjectActiveResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/helm": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Helm registries",
        "operationId": "v1RegistriesHelmList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistries"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a helm registry",
        "operationId": "v1RegistriesHelmCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistryEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1/registries/helm/summary": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of helm registries as summary",
        "operationId": "v1RegistriesHelmSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistriesSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1/registries/helm/validate": {
      "post": {
        "description": "Returns no contents if helm registry is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if helm registry is valid",
        "operationId": "V1RegistriesHelmValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HelmRegistrySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/registries/helm/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Helm registry",
        "operationId": "v1RegistriesHelmUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified helm registry",
        "operationId": "v1RegistriesHelmUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified helm registry",
        "operationId": "v1RegistriesHelmUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/helm/{uid}/sync": {
      "post": {
        "description": "Sync all the helm charts from the registry",
        "tags": [
          "v1"
        ],
        "summary": "Sync Helm registry",
        "operationId": "v1RegistriesHelmUidSync",
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "default": false,
          "name": "forceSync",
          "in": "query"
        }
      ]
    },
    "/v1/registries/helm/{uid}/sync/status": {
      "get": {
        "description": "Get the sync status for the specified helm registry",
        "tags": [
          "v1"
        ],
        "summary": "Get helm registry sync status",
        "operationId": "v1RegistriesHelmUidSyncStatus",
        "responses": {
          "200": {
            "description": "Helm registry sync status",
            "schema": {
              "$ref": "#/definitions/v1RegistrySyncStatus"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of registries metadata",
        "operationId": "v1RegistriesMetadata",
        "responses": {
          "200": {
            "description": "An array of registry metadata items",
            "schema": {
              "$ref": "#/definitions/v1RegistriesMetadata"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1/registries/oci/basic": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a basic oci registry",
        "operationId": "v1BasicOciRegistriesCreate",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "skipPackSync",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/registries/oci/basic/validate": {
      "post": {
        "description": "Returns no contents if oci registry is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if oci registry is valid",
        "operationId": "v1BasicOciRegistriesValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistrySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/registries/oci/ecr": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a ecr registry",
        "operationId": "v1EcrRegistriesCreate",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "skipPackSync",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EcrRegistry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/registries/oci/ecr/validate": {
      "post": {
        "description": "Returns no contents if ecr registry is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if ecr registry is valid",
        "operationId": "v1EcrRegistriesValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EcrRegistrySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/registries/oci/image": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a image registry",
        "operationId": "v1OciImageRegistryGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OciImageRegistry"
            }
          }
        }
      }
    },
    "/v1/registries/oci/summary": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a oci registries summary",
        "operationId": "v1OciRegistriesSummary",
        "responses": {
          "200": {
            "description": "An array of oci registry items",
            "schema": {
              "$ref": "#/definitions/v1OciRegistries"
            }
          }
        }
      }
    },
    "/v1/registries/oci/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the information of specified oci registry",
        "operationId": "v1OciRegistriesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OciRegistryEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "clusterUid",
          "in": "query"
        }
      ]
    },
    "/v1/registries/oci/{uid}/basic": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the basic oci registry",
        "operationId": "v1BasicOciRegistriesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified basic oci registry",
        "operationId": "v1BasicOciRegistriesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified basic oci registry",
        "operationId": "v1BasicOciRegistriesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/oci/{uid}/basic/sync": {
      "post": {
        "description": "Sync all the content from the oci registry",
        "tags": [
          "v1"
        ],
        "summary": "Sync oci registry",
        "operationId": "v1BasicOciRegistriesUidSync",
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "default": false,
          "name": "forceSync",
          "in": "query"
        }
      ]
    },
    "/v1/registries/oci/{uid}/basic/sync/status": {
      "get": {
        "description": "Get sync status for the oci specified registry",
        "tags": [
          "v1"
        ],
        "summary": "Get oci registry sync status",
        "operationId": "v1BasicOciRegistriesUidSyncStatus",
        "responses": {
          "200": {
            "description": "Oci registry sync status",
            "schema": {
              "$ref": "#/definitions/v1RegistrySyncStatus"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/oci/{uid}/ecr": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified ecr registry",
        "operationId": "v1EcrRegistriesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EcrRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified ecr registry",
        "operationId": "v1EcrRegistriesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EcrRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified ecr registry",
        "operationId": "v1EcrRegistriesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/oci/{uid}/ecr/sync": {
      "post": {
        "description": "Sync all the content from the ecr registry",
        "tags": [
          "v1"
        ],
        "summary": "Sync ecr registry",
        "operationId": "v1EcrRegistriesUidSync",
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "default": false,
          "name": "forceSync",
          "in": "query"
        }
      ]
    },
    "/v1/registries/oci/{uid}/ecr/sync/status": {
      "get": {
        "description": "Get sync status for the ecr specified registry",
        "tags": [
          "v1"
        ],
        "summary": "Get ecr registry sync status",
        "operationId": "v1EcrRegistriesUidSyncStatus",
        "responses": {
          "200": {
            "description": "Ecr registry sync status",
            "schema": {
              "$ref": "#/definitions/v1RegistrySyncStatus"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/pack": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Pack registries",
        "operationId": "v1RegistriesPackList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1PackRegistries"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a pack registry",
        "operationId": "v1RegistriesPackCreate",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "skipPackSync",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PackRegistry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1/registries/pack/summary": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of pack registries as summary",
        "operationId": "v1RegistriesPackSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1PackRegistriesSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1/registries/pack/validate": {
      "post": {
        "description": "Returns no contents if pack registry is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if pack registry is valid",
        "operationId": "V1RegistriesPackValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PackRegistrySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/registries/pack/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Pack registry",
        "operationId": "v1RegistriesPackUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified pack registry",
        "operationId": "v1RegistriesPackUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PackRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified pack registry",
        "operationId": "v1RegistriesPackUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/pack/{uid}/sync": {
      "post": {
        "description": "Sync all the packs from the registry",
        "tags": [
          "v1"
        ],
        "summary": "Sync Pack registry",
        "operationId": "v1RegistriesPackUidSync",
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "default": false,
          "name": "forceSync",
          "in": "query"
        }
      ]
    },
    "/v1/registries/pack/{uid}/sync/status": {
      "get": {
        "description": "Get sync status for the pack specified registry",
        "tags": [
          "v1"
        ],
        "summary": "Get pack registry sync status",
        "operationId": "v1RegistriesPackUidSyncStatus",
        "responses": {
          "200": {
            "description": "Pack registry sync status",
            "schema": {
              "$ref": "#/definitions/v1RegistrySyncStatus"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/{registryName}/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified system scope registry configuration",
        "operationId": "v1RegistriesNameConfigGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RegistryConfigEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "registryName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/{uid}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified registry",
        "operationId": "v1RegistriesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/roles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of roles",
        "operationId": "v1RolesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Roles"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a role with specified permissions",
        "operationId": "v1RolesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/roles/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified role",
        "operationId": "v1RolesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified role",
        "operationId": "v1RolesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified role",
        "operationId": "v1RolesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/roles/{uid}/clone": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Clone the role",
        "operationId": "v1RolesClone",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1RoleClone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/services/{serviceName}/version": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns a latest version for a given service name",
        "operationId": "v1ServiceVersionGet",
        "parameters": [
          {
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit",
              "ally-lite",
              "palette-lite",
              "crony",
              "tick",
              "edge",
              "lodge",
              "level",
              "edgeconfig",
              "firth",
              "stylus",
              "provider-k3s",
              "provider-kubeadm",
              "provider-rke2",
              "provider-nodeadm",
              "provider-canonical"
            ],
            "type": "string",
            "description": "service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "spectro cluster uid",
            "name": "clusterUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "edge host uid",
            "name": "edgeHostUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ServiceVersion"
            }
          }
        }
      }
    },
    "/v1/services/{serviceName}/versions/{version}/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns a service manifest for a given service name and version",
        "operationId": "v1ServiceManifestGet",
        "parameters": [
          {
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit",
              "ally-lite",
              "palette-lite",
              "crony",
              "tick",
              "edge",
              "lodge",
              "level",
              "edgeconfig",
              "firth",
              "stylus",
              "provider-k3s",
              "provider-kubeadm",
              "provider-rke2",
              "provider-nodeadm",
              "provider-canonical"
            ],
            "type": "string",
            "description": "service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "service version",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "apply",
              "delete",
              "resources"
            ],
            "type": "string",
            "description": "action type",
            "name": "action",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "resource file name",
            "name": "resourceFilename",
            "in": "query"
          },
          {
            "type": "string",
            "description": "spectro cluster uid",
            "name": "clusterUid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "edge host uid",
            "name": "edgeHostUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ServiceManifest"
            }
          }
        }
      }
    },
    "/v1/spcPolicies/maintenance": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a new maintenance policy",
        "operationId": "V1SpcPoliciesMaintenanceCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpcPolicyEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      }
    },
    "/v1/spcPolicies/maintenance/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified maintenance policy",
        "operationId": "V1SpcPoliciesMaintenanceUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpcPolicyEntity"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified maintenance policy",
        "operationId": "V1SpcPoliciesMaintenanceUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpcPolicyEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Policy uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spcPolicies/tags": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of spc policy tags",
        "operationId": "V1SpcPoliciesTagsGet",
        "responses": {
          "200": {
            "description": "An array of spc policy tags",
            "schema": {
              "$ref": "#/definitions/v1SpcPolicyTags"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      }
    },
    "/v1/spcPolicies/{policyType}/validate/name": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the spc policy name",
        "operationId": "V1SpcPoliciesValidateName",
        "parameters": [
          {
            "type": "string",
            "description": "Spc policy name",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Spc policy type",
          "name": "policyType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spcPolicies/{uid}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete a policy by uid",
        "operationId": "V1SpcPoliciesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/aks": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an AKS cluster",
        "operationId": "v1SpectroClustersAksCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aks/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get AKS cluster estimated rate information",
        "operationId": "v1SpectroClustersAksRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aks Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aks/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates AKS cluster create operation",
        "operationId": "v1SpectroClustersAksValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aks Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aws": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an AWS cluster",
        "operationId": "v1SpectroClustersAwsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aws/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Imports an AWS cluster",
        "operationId": "v1SpectroClustersAwsImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aws/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get AWS cluster estimated rate information",
        "operationId": "v1SpectroClustersAwsRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aws Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aws/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates AWS cluster create operation",
        "operationId": "v1SpectroClustersAwsValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aws Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/azure": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Azure cluster",
        "operationId": "v1SpectroClustersAzureCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/azure/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Imports an Azure cluster",
        "operationId": "v1SpectroClustersAzureImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/azure/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get Azure cluster estimated rate information",
        "operationId": "v1SpectroClustersAzureRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/azure/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates Azure cluster create operation",
        "operationId": "v1SpectroClustersAzureValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/cloudTypes/{cloudType}": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a Custom cluster",
        "operationId": "v1SpectroClustersCustomCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroCustomClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/cloudTypes/{cloudType}/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates Custom cluster create operation",
        "operationId": "v1SpectroClustersCustomValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroCustomClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster's cloud type",
          "name": "cloudType",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/cloudstack": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a CloudStack cluster",
        "operationId": "v1SpectroClustersCloudStackCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroCloudStackClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/cloudstack/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Imports a CloudStack cluster",
        "operationId": "v1SpectroClustersCloudStackImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroCloudStackClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/cloudstack/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get CloudStack cluster estimated rate information",
        "operationId": "v1SpectroClustersCloudStackRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroCloudStackClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CloudStack Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/cloudstack/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates CloudStack cluster create operation",
        "operationId": "v1SpectroClustersCloudStackValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroCloudStackClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CloudStack Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/clusterTemplates/{uid}/clusters/upgrade": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Upgrades clusters launched from the specified cluster template",
        "operationId": "V1SpectroClustersTemplatesUidClustersUpgrade",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterTemplateUpgradeSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster template uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/clusterTemplates/{uid}/profiles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated profiles for all the cluster of launched from the specified cluster template",
        "operationId": "V1SpectroClustersClusterTemplatesUIDProfilesGet",
        "parameters": [
          {
            "type": "string",
            "description": "includes pack meta such as schema, presets",
            "name": "includePackMeta",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileList"
            }
          }
        },
        "x-Features": [
          "ClusterTemplate"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster template uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/config/edgeInstaller": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Cluster configuration for the edge installer",
        "operationId": "v1SpectroClustersConfigEdgeInstaller",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterEdgeInstallerConfig"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/edge-native": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an EdgeNative cluster",
        "operationId": "v1SpectroClustersEdgeNativeCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeNativeClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/edge-native/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Imports an EdgeNative cluster",
        "operationId": "v1SpectroClustersEdgeNativeImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeNativeClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/edge-native/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get edge-native cluster estimated rate information",
        "operationId": "v1SpectroClustersEdgeNativeRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeNativeClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EdgeNative Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/edge-native/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates edge-native cluster create operation",
        "operationId": "v1SpectroClustersEdgeNativeValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeNativeClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EdgeNative Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/eks": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an EKS cluster",
        "operationId": "v1SpectroClustersEksCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEksClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/eks/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get EKS cluster estimated rate information",
        "operationId": "v1SpectroClustersEksRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEksClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Eks Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/eks/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates EKS cluster create operation",
        "operationId": "v1SpectroClustersEksValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEksClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Eks Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/features/backup/locations/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the cluster object references based on locationUid",
        "operationId": "V1ClusterFeatureBackupLocationUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRefs"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Change cluster backup location",
        "operationId": "V1ClusterFeatureBackupLocationUidChange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupLocationType"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/features/logFetcher/{uid}/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Download log fetcher logs for cluster by log fetcher uid",
        "operationId": "v1ClusterFeatureLogFetcherLogDownload",
        "parameters": [
          {
            "type": "string",
            "name": "fileName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Log fetcher uid for which log is requested",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/features/logFetcher/{uid}/log": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Update log fetcher logs by log fetcher uid",
        "operationId": "v1ClusterFeatureLogFetcherLogUpdate",
        "parameters": [
          {
            "type": "file",
            "description": "Log file by agent",
            "name": "fileName",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Unique request Id",
            "name": "requestId",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid for which log is requested",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/gcp": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a GCP cluster",
        "operationId": "v1SpectroClustersGcpCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/gcp/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Imports a GCP cluster",
        "operationId": "v1SpectroClustersGcpImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/gcp/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get GCP cluster estimated rate information",
        "operationId": "v1SpectroClustersGcpRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gcp Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/gcp/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates GCP cluster create operation",
        "operationId": "v1SpectroClustersGcpValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gcp Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/generic/import": {
      "post": {
        "description": "The machines information will be captured, whereas the cloud specific configuration info will not be retrieved",
        "tags": [
          "v1"
        ],
        "summary": "Imports a cluster of any cloud type in generic way",
        "operationId": "v1SpectroClustersGenericImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGenericClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/generic/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get generic cluster estimated rate information",
        "operationId": "v1SpectroClustersGenericRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGenericClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Genric Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/gke": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an GKE cluster",
        "operationId": "v1SpectroClustersGkeCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/gke/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get GKE cluster estimated rate information",
        "operationId": "v1SpectroClustersGkeRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gke Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/gke/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates GKE cluster create operation",
        "operationId": "v1SpectroClustersGkeValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gke Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/maas": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a MAAS cluster",
        "operationId": "v1SpectroClustersMaasCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/maas/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Imports a Maas cluster",
        "operationId": "v1SpectroClustersMaasImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/maas/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get maas cluster estimated rate information",
        "operationId": "v1SpectroClustersMaasRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Maas Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/maas/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates MAAS cluster create operation",
        "operationId": "v1SpectroClustersMaasValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Maas Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/openstack": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a OpenStack cluster",
        "operationId": "v1SpectroClustersOpenStackCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/openstack/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Imports an OpenStack cluster",
        "operationId": "v1SpectroClustersOpenStackImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/openstack/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get openstack cluster estimated rate information",
        "operationId": "v1SpectroClustersOpenStackRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Openstack Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/openstack/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates OpenStack cluster create operation",
        "operationId": "v1SpectroClustersOpenStackValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "vSphere Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/spc/download": {
      "post": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the cluster definition archive file",
        "operationId": "v1SpectroClustersSpcDownload",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterDefinitionEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster definition archive file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/tags": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of spectrocluster tags",
        "operationId": "v1SpectroClustersTagsGet",
        "responses": {
          "200": {
            "description": "An array of spectrocluster tags",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterTags"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/upgrade/settings": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get cluster settings by context",
        "operationId": "v1SpectroClustersUpgradeSettingsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterUpgradeSettingsEntity"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Update all clusters upgrade settings",
        "operationId": "v1SpectroClustersUpgradeSettings",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterUpgradeSettingsEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/validate/name": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the cluster name",
        "operationId": "v1SpectroClustersValidateName",
        "parameters": [
          {
            "type": "string",
            "description": "Cluster name",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/validate/packs": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates spectro cluster packs",
        "operationId": "v1SpectroClustersValidatePacks",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster packs validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/virtual": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a virtual cluster",
        "operationId": "v1SpectroClustersVirtualCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVirtualClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/virtual/packs/values": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cluster pack values yaml",
        "operationId": "v1VirtualClustersPacksValues",
        "parameters": [
          {
            "enum": [
              "k3s",
              "cncf_k8s",
              "vcluster-generic"
            ],
            "type": "string",
            "default": "k3s",
            "description": "Kubernetes distribution type",
            "name": "kubernetesDistroType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualPacksValues"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/virtual/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates virtual cluster create operation",
        "operationId": "v1SpectroClustersVirtualValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVirtualClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/vsphere": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a vSphere cluster",
        "operationId": "v1SpectroClustersVsphereCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/vsphere/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Imports a vSphere cluster",
        "operationId": "v1SpectroClustersVsphereImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/vsphere/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get vSphere cluster estimated rate information",
        "operationId": "v1SpectroClustersVsphereRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vsphere Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/vsphere/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates vSphere cluster create operation",
        "operationId": "v1SpectroClustersVsphereValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "vSphere Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster",
        "operationId": "v1SpectroClustersGet",
        "parameters": [
          {
            "type": "string",
            "description": "Comma separated tags like system,profile",
            "name": "includeTags",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Resolve pack values if set to true",
            "name": "resolvePackValues",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Includes pack meta such as schema, presets",
            "name": "includePackMeta",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter cluster profile templates by profileType",
            "name": "profileType",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Include non spectro labels in the cluster labels if set to true",
            "name": "includeNonSpectroLabels",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroCluster"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified cluster",
        "operationId": "v1SpectroClustersDelete",
        "parameters": [
          {
            "type": "boolean",
            "description": "If set to true the cluster will be force deleted and user has to manually clean up the provisioned cloud resources",
            "name": "forceDelete",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cluster asset doc",
        "operationId": "v1SpectroClustersUidAssetsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetEntity"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Associate the assets for the cluster",
        "operationId": "v1SpectroClustersUidAssets",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/adminKubeconfig": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's kube config file",
        "operationId": "v1SpectroClustersUidAdminKubeConfig",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/adminTokenKubeconfig": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's token kube config file",
        "operationId": "v1SpectroClustersUidTokenKubeConfigGet",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's token kube config data",
        "operationId": "v1SpectroClustersUidTokenKubeConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetTokenKubeConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the cluster's token kube config data",
        "operationId": "v1SpectroClustersUidTokenKubeConfigDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/frpKubeconfig": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's frp kube config file",
        "operationId": "v1SpectroClustersUidFrpKubeConfigGet",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's frp kube config data",
        "operationId": "v1SpectroClustersUidFrpKubeConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetFrpKubeConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the cluster's frp kube config client data",
        "operationId": "v1SpectroClustersUidFrpKubeConfigDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/kubeconfig": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's kube config file",
        "operationId": "v1SpectroClustersUidKubeConfig",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "FRP (reverse-proxy) based kube config will be returned if available",
            "name": "frp",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's manifest data",
        "operationId": "v1SpectroClustersUidKubeConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetKubeConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/kubeconfigclient": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's kube config client file",
        "operationId": "v1SpectroClustersUidKubeConfigClientGet",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's kube config client data",
        "operationId": "v1SpectroClustersUidKubeConfigClientUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetKubeConfigClient"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the cluster's kube config client data",
        "operationId": "v1SpectroClustersUidKubeConfigClientDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's manifest data",
        "operationId": "v1SpectroClustersUidManifestGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster's manifest data",
        "operationId": "v1SpectroClustersUidManifestUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetManifest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/clusterConfig/clusterMetaAttribute": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster meta attribute",
        "operationId": "v1SpectroClustersUidClusterMetaAttributeUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterMetaAttributeEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/clusterConfig/controlPlaneHealthCheckTimeout": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster controlPlane health check timeout",
        "operationId": "V1ControlPlaneHealthCheckTimeoutUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ControlPlaneHealthCheckTimeoutEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/clusterConfig/hostCluster": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster host config",
        "operationId": "V1HostClusterConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1HostClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/clusterConfig/lifecycleConfig": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster Life cycle configuration",
        "operationId": "v1SpectroClustersUidLifecycleConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1LifecycleConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/clusterConfig/osPatch": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster OS patch configuration",
        "operationId": "v1SpectroClustersUidOsPatchUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OsPatchEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/config/namespaces": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves namespaces for the specified cluster",
        "operationId": "v1SpectroClustersUidConfigNamespacesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResources"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates namespaces for the specified cluster",
        "operationId": "v1SpectroClustersUidConfigNamespacesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResourcesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/config/namespaces/{namespaceUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the specified namespace of the cluster",
        "operationId": "v1SpectroClustersUidConfigNamespacesUidGet",
        "responses": {
          "200": {
            "description": "Cluster's namespace response",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResource"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified namespace of the cluster",
        "operationId": "v1SpectroClustersUidConfigNamespacesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResourceInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster namespace uid",
          "name": "namespaceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/config/rbacs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves RBAC information for the specified cluster",
        "operationId": "v1SpectroClustersUidConfigRbacsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacs"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates RBAC information for the specified cluster",
        "operationId": "v1SpectroClustersUidConfigRbacsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacResourcesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/config/rbacs/{rbacUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the specified RBAC of the cluster",
        "operationId": "v1SpectroClustersUidConfigRbacsUidGet",
        "responses": {
          "200": {
            "description": "Cluster's RBAC response",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified RBAC of the cluster",
        "operationId": "v1SpectroClustersUidConfigRbacsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "RBAC resource uid",
          "name": "rbacUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Download the specified cluster",
        "operationId": "v1SpectroClustersUidDownload",
        "responses": {
          "200": {
            "description": "download cluster archive file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/edge-native/edgeHosts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of edge host of edge-native cluster",
        "operationId": "v1EdgeNativeClustersHostsList",
        "responses": {
          "200": {
            "description": "List of edge host device",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevices"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/edge/reset": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "reset the edge clusters by deleting machine pools and conditions",
        "operationId": "V1SpectroClustersUidEdgeReset",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/backup": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the cluster backup result",
        "operationId": "v1ClusterFeatureBackupGet",
        "parameters": [
          {
            "type": "string",
            "name": "backupRequestUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackup"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update cluster backup settings",
        "operationId": "v1ClusterFeatureBackupUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create cluster backup settings",
        "operationId": "v1ClusterFeatureBackupCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Reset cluster backup schedule settings",
        "operationId": "v1ClusterFeatureBackupScheduleReset",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/backup/onDemand": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create on demand cluster backup",
        "operationId": "v1ClusterFeatureBackupOnDemandCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/backup/{backupName}/request/{requestUid}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete cluster backup",
        "operationId": "v1ClusterFeatureBackupDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "backupName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "requestUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the compliance scan of cluster, if driverType is provided then specific status of driverType will be returned",
        "operationId": "v1ClusterFeatureComplianceScanGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScan"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update cluster compliance scan settings",
        "operationId": "v1ClusterFeatureComplianceScanUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScheduleConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create cluster compliance scan",
        "operationId": "v1ClusterFeatureComplianceScanCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScheduleConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the compliance scan log by cluster uid and driver type",
        "operationId": "v1ClusterFeatureComplianceScanLogsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScanLogs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/kubeBench": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the KubeBench compliance scan log by uid",
        "operationId": "v1ClusterFeatureScanKubeBenchLogUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1KubeBenchEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/kubeHunter": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the KubeHunter compliance scan log by uid",
        "operationId": "v1ClusterFeatureScanKubeHunterLogUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1KubeHunterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/sonobuoy": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the Sonobuoy compliance scan log by uid",
        "operationId": "v1ClusterFeatureScanSonobuoyLogUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SonobuoyEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/syft": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the Syft compliance scan log by uid",
        "operationId": "v1ClusterFeatureScanSyftLogUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SyftEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the compliance scan log by uid",
        "operationId": "v1ClusterFeatureComplianceScanLogDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/kubeBench": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the KubeBench compliance scan log by uid",
        "operationId": "v1ClusterFeatureKubeBenchLogGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogKubeBench"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "reportId",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/kubeHunter": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the KubeHunter compliance scan log by uid",
        "operationId": "v1ClusterFeatureKubeHunterLogGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogKubeHunter"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "reportId",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/sonobuoy": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Sonobuoy compliance scan log by uid",
        "operationId": "v1ClusterFeatureSonobuoyLogGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogSonobuoy"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "reportId",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/syft": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Syft compliance scan log by uid",
        "operationId": "v1ClusterFeatureSyftLogGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogSyft"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/syft/sbom": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the image sbom of syft scan log of cluster",
        "operationId": "v1SyftScanLogImageSBOMGet",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "image",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/{driver}/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the driver cluster logs",
        "operationId": "v1ClusterFeatureDriverLogDownload",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "kubeBench",
            "kubeHunter",
            "sonobuoy",
            "syft"
          ],
          "type": "string",
          "name": "driver",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "default": "pdf",
          "name": "fileFormat",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/onDemand": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create on demand cluster compliance scan",
        "operationId": "v1ClusterFeatureComplianceScanOnDemandCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceOnDemandConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/helmCharts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the installed helm charts of a specified cluster",
        "operationId": "v1ClusterFeatureHelmChartsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterHelmCharts"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/logFetcher": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the log fetcher for cluster",
        "operationId": "v1ClusterFeatureLogFetcherGet",
        "parameters": [
          {
            "type": "string",
            "name": "requestId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterLogFetcher"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create the log fetcher for cluster",
        "operationId": "v1ClusterFeatureLogFetcherCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterLogFetcherRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid for which log is requested",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the installed manifests of a specified cluster",
        "operationId": "v1ClusterFeatureManifestsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterManifests"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/restore": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the cluster restore of cluster",
        "operationId": "v1ClusterFeatureRestoreGet",
        "parameters": [
          {
            "type": "string",
            "name": "restoreRequestUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRestore"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/restore/onDemand": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create on demand cluster restore",
        "operationId": "v1ClusterFeatureRestoreOnDemandCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRestoreConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/heartbeat": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update specific cluster heartbeat",
        "operationId": "v1SpectroClustersUidHeartbeatUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterHeartbeat"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/hybridPools/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the metadata of all hybrid pools associated with the specified cluster",
        "operationId": "v1SpectroClustersGetHybridPoolsMetadata",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterHybridPoolsMetadata"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/hybridSettings": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update specific cluster hybrid settings",
        "operationId": "v1SpectroClustersUidHybridSettings",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterHybridSettingsEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/import/manifest": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's import manifest file",
        "operationId": "v1SpectroClustersUidImportManifest",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/import/upgrade": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Upgrade the specified imported read only cluster with full permissions",
        "operationId": "v1SpectroClustersUidImportUpgradePatch",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/k8certificates": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get K8Certificate for spectro cluster",
        "operationId": "v1SpectroClustersK8Certificate",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MachineCertificates"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update K8Certificate for spectro cluster",
        "operationId": "v1SpectroClustersK8CertificateUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterK8sCertificate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/k8certificates/renew": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Sets the cluster control plane nodes Kubernetes certificates for renewal",
        "operationId": "v1SpectroClustersCertificatesRenew",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/kubectl/redirect": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's kube config file",
        "operationId": "V1SpectroClustersUidKubeCtlRedirect",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterKubeCtlRedirect"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/location": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Associate the assets for the cluster",
        "operationId": "v1SpectroClustersUidLocationPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterLocationInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/metadata": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the specified spectro cluster metadata",
        "operationId": "v1SpectroClustersUidMetadataUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMetaInputEntitySchema"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/namespaces": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns available namespaces for the cluster",
        "operationId": "v1ClusterNamespacesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaces"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "default": false,
          "name": "skipEmptyNamespaces",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/oidc": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns k8s spectrocluster oidc",
        "operationId": "V1SpectroClustersUidOIDC",
        "parameters": [
          {
            "type": "string",
            "description": "spc uid",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterOidcSpec"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/oidc/dashboard/url": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns k8s dashboard url",
        "operationId": "V1SpectroClustersUidOIDCDashboardUrl",
        "parameters": [
          {
            "type": "string",
            "description": "spc uid",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SectroClusterK8sDashboardUrl"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/pack/manifests/{manifestUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's manifest",
        "operationId": "v1SpectroClustersUidPackManifestsUidGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "manifest uid which is part of the pack ref",
            "name": "manifestUid",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "resolve pack manifest values if set to true",
            "name": "resolveManifestValues",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Pack manifest content",
            "schema": {
              "$ref": "#/definitions/v1Manifest"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/pack/properties": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get specified cluster pack properties",
        "operationId": "v1SpectroClustersUidPackProperties",
        "parameters": [
          {
            "type": "string",
            "description": "Cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Pack layer",
            "name": "layer",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Pack values yaml field path",
            "name": "fieldPath",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Pack name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Is the macros need to be resolved",
            "name": "resolveMacros",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster's pack properties response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPackProperties"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/packRefs": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's pack references",
        "operationId": "v1SpectroClustersPacksRefUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterNotificationUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "notify",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/packs/resolvedValues": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's packs resolved values",
        "operationId": "v1SpectroClustersUidPacksResolvedValuesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfilesResolvedValues"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1SpectroClusterProfilesParamReferenceEntity"
          }
        }
      ]
    },
    "/v1/spectroclusters/{uid}/packs/status": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Patch update specified cluster's packs status",
        "operationId": "v1SpectroClustersUidPacksStatusPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksStatusEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/profileUpdates": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the profile updates of a specified cluster",
        "operationId": "v1SpectroClustersGetProfileUpdates",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileUpdates"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/profiles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated profiles of a specified cluster",
        "operationId": "v1SpectroClustersGetProfiles",
        "parameters": [
          {
            "type": "string",
            "description": "includes pack meta such as schema, presets",
            "name": "includePackMeta",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileList"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Associate cluster profiles to the specified cluster",
        "operationId": "v1SpectroClustersUpdateProfiles",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Resolve pending cluster notification if set to true",
            "name": "resolveNotification",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfiles"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Remove cluster profiles from the specified cluster",
        "operationId": "v1SpectroClustersDeleteProfiles",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfilesDeleteEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Patch cluster profiles to the specified cluster",
        "operationId": "v1SpectroClustersPatchProfiles",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Resolve pending cluster notification if set to true",
            "name": "resolveNotification",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfiles"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/profiles/packs/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated profile's pack manifests of a specified cluster",
        "operationId": "v1SpectroClustersGetProfilesPacksManifests",
        "parameters": [
          {
            "type": "string",
            "description": "Includes pack meta such as schema, presets",
            "name": "includePackMeta",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Resolve pack macro variables if set to true",
            "name": "resolveMacros",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfilesPacksManifests"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/profiles/{profileUid}/packs/{packName}/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's profile pack configuration",
        "operationId": "v1SpectroClustersUidProfilesUidPacksConfigGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "profile uid",
            "name": "profileUid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster pack values",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPackConfigList"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/profiles/{profileUid}/packs/{packName}/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated profiles pack manifests of the specified cluster",
        "operationId": "v1SpectroClustersProfilesUidPackManifestsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackManifests"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates cluster profiles pack manifests to the specified cluster",
        "operationId": "v1SpectroClustersProfilesUidPackManifestsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestRefInputEntities"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Cluster profile uid",
          "name": "profileUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of the pack",
          "name": "packName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/rate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the estimated rate of the specified cluster",
        "operationId": "v1SpectroClustersUidRate",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "hourly",
            "monthly",
            "yearly"
          ],
          "type": "string",
          "default": "hourly",
          "description": "Period type [hourly, monthly, yearly]",
          "name": "periodType",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/repave/approve": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the spectrocluster repave approve update",
        "operationId": "v1SpectroClustersUidRepaveApproveUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/repave/status": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the spectrocluster repave",
        "operationId": "v1SpectroClustersUidRepaveGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns cluster repave status",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRepave"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/reset": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "reset the cluster s by deleting machine pools and condtions",
        "operationId": "V1SpectroClustersUidReset",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the cluster's status",
        "operationId": "v1SpectroClustersUidStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterStatusEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/condition": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster status condition",
        "operationId": "v1SpectroClustersUpdateStatusCondition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterCondition"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/conditions": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster status conditions",
        "operationId": "v1SpectroClustersUpdateStatusConditions",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ClusterCondition"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/endpoints": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster's service endpoints information",
        "operationId": "v1SpectroClustersUpdateStatusEndpoints",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ApiEndpoint"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/imported": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster status as imported",
        "operationId": "v1SpectroClustersUpdateStatusImported",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/services": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster's services information",
        "operationId": "v1SpectroClustersUpdateStatusServices",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1LoadBalancerService"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/spcApply": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the SPC apply information for the agent",
        "operationId": "v1SpectroClustersUidStatusSpcApplyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SpcApply"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Set the CanBeApplied to true on the spcApply status. CanBeApplied indicates the agent to orchestrate the spc changes",
        "operationId": "v1SpectroClustersUidStatusSpcApply",
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/spcApply/patchTime": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the agent patch time for the SPC changes",
        "operationId": "v1SpectroClustersUidStatusSpcPatchTime",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpcPatchTimeEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/upgrades": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's upgrade status",
        "operationId": "v1SpectroClustersUidUpgradesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterUidUpgrades"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/upgrade/settings": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Update specific cluster upgrade settings",
        "operationId": "v1SpectroClustersUidUpgradeSettings",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterUpgradeSettingsEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/validate/packs": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates cluster packs",
        "operationId": "v1SpectroClustersUidValidatePacks",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster packs validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/validate/repave": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validates if cluster gets repaved for the specified packs",
        "operationId": "v1SpectroClustersUidValidateRepave",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster repave validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRepaveValidationResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/variables": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieve a list of variables associated with the cluster",
        "operationId": "v1SpectroClustersUidVariablesGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterVariables"
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update cluster variable values for specified cluster",
        "operationId": "v1SpectroClustersUidVariablesPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterVariableUpdateEntity"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid for which variables need to be retrieved",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the list of virtual machines",
        "operationId": "v1SpectroClustersVMList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Namespace names, comma separated value (ex: dev,test). If namespace is empty it returns the specific resource under all namespace",
            "name": "namespace",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachineList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create virtual machine",
        "operationId": "v1SpectroClustersVMCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace name",
            "name": "namespace",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/snapshot": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the list of snapshots of given namespaces",
        "operationId": "v1ClusterVMSnapshotsList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "vmName is comma separated value (ex: name1,name2).",
            "name": "vmName",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Namespace names, comma separated value (ex: dev,test). If namespace is empty it returns the specific resource under all namespace",
            "name": "namespace",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshotList"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get virtual machine",
        "operationId": "v1SpectroClustersVMGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified virtual machine of the cluster",
        "operationId": "v1SpectroClustersVMUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the virtual machine",
        "operationId": "v1SpectroClustersVMDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/addVolume": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Add volume to the virtual machine instance",
        "operationId": "v1SpectroClustersVMAddVolume",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VMAddVolumeEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/clone": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Clone virtual machine",
        "operationId": "v1SpectroClustersVMClone",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterVMCloneEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/migrate": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Migrate the virtual machine",
        "operationId": "v1SpectroClustersVMMigrate",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/pause": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Pause the virtual machine instance",
        "operationId": "v1SpectroClustersVMPause",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/removeVolume": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Remove volume from the virtual machine instance",
        "operationId": "v1SpectroClustersVMRemoveVolume",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VMRemoveVolumeEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/restart": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Restart the virtual machine",
        "operationId": "v1SpectroClustersVMRestart",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/resume": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Resume the virtual machine instance",
        "operationId": "v1SpectroClustersVMResume",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/snapshot": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create snapshot of virtual machine",
        "operationId": "v1VMSnapshotCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshot"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshot"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name of virtual machine",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/snapshot/{snapshotName}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get virtual machine snapshot",
        "operationId": "v1VMSnapshotGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshot"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified snapshot of a virtual machine",
        "operationId": "v1VMSnapshotUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshot"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshot"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the snapshot of virtual machine",
        "operationId": "v1VMSnapshotDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Snapshot name",
          "name": "snapshotName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/start": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Start the virtual machine",
        "operationId": "v1SpectroClustersVMStart",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/stop": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Stop the virtual machine",
        "operationId": "v1SpectroClustersVMStop",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Virtual Machine name",
          "name": "vmName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Namespace name",
          "name": "namespace",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/workloads/sync": {
      "post": {
        "description": "Sync specified cluster workload",
        "tags": [
          "v1"
        ],
        "summary": "Sync specified cluster workload",
        "operationId": "v1SpectroClustersUidWorkloadsSync",
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/workloads/{workloadKind}/sync": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Sync specified cluster workload",
        "operationId": "v1SpectroClustersUidWorkloadsKindSync",
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Cluster uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "namespace",
            "pod",
            "deployment",
            "statefulset",
            "daemonset",
            "job",
            "cronjob",
            "rolebinding",
            "clusterrolebinding"
          ],
          "type": "string",
          "description": "Workload kind",
          "name": "workloadKind",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/system/config/reverseproxy": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private",
          "docs-show"
        ],
        "summary": "get the system config reverse proxy",
        "operationId": "V1SystemConfigReverseProxyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemReverseProxy"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private",
          "docs-show"
        ],
        "summary": "updates the system config reverse proxy",
        "operationId": "V1SystemConfigReverseProxyUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemReverseProxy"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/passwords/blocklist": {
      "delete": {
        "tags": [
          "v1",
          "system",
          "docs-show"
        ],
        "summary": "Delete a list of block listed passwords",
        "operationId": "V1PasswordsBlockListDelete",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1PasswordsBlockList"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1",
          "system",
          "docs-show"
        ],
        "summary": "List of block listed passwords",
        "operationId": "V1PasswordsBlockListUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1PasswordsBlockList"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/teams": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of teams",
        "operationId": "v1TeamsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of teams",
            "schema": {
              "$ref": "#/definitions/v1Teams"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a team with the specified users and roles",
        "operationId": "v1TeamsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Team"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/teams/summary": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of teams summary with provided filter spec",
        "operationId": "v1TeamsSummaryGet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TeamsSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of teams summary items",
            "schema": {
              "$ref": "#/definitions/v1TeamsSummaryList"
            }
          }
        }
      }
    },
    "/v1/teams/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the sepcified team",
        "operationId": "v1TeamsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Team"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the sepcified team",
        "operationId": "v1TeamsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Team"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified team",
        "operationId": "v1TeamsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Patches the specified team",
        "operationId": "v1TeamsUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TeamPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/teams/{uid}/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified team's project and roles data",
        "operationId": "v1TeamsProjectRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesEntity"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the projects and roles for the specified team",
        "operationId": "v1TeamsProjectRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/teams/{uid}/resourceRoles": {
      "get": {
        "description": "Returns resource roles for team",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified individual and resource roles for a team",
        "operationId": "v1TeamsUidResourceRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ResourceRoles"
            }
          }
        }
      },
      "post": {
        "description": "Resource roles added to specific team",
        "tags": [
          "v1"
        ],
        "summary": "Add resource roles for team",
        "operationId": "v1TeamsUidResourceRolesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResourceRolesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/teams/{uid}/resourceRoles/{resourceRoleUid}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deleted the resource roles from team",
        "operationId": "v1TeamsUidResourceRolesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "Specific resource roles fo team is updated",
        "tags": [
          "v1"
        ],
        "summary": "Updates the resource roles for team",
        "operationId": "v1TeamsResourceRolesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResourceRolesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "resourceRoleUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/teams/{uid}/roles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified team's tenant roles",
        "operationId": "V1TeamsUidTenantRolesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TeamTenantRolesEntity"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the tenant roles of the specified team",
        "operationId": "V1TeamsUidTenantRolesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TeamTenantRolesUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/address": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant address",
        "operationId": "v1PatchTenantAddress",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantAddressPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/assets/certs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "lists the certificates for the tenant",
        "operationId": "V1TenantUIdAssetsCertsList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCerts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the tenant certificate",
        "operationId": "V1TenantUidAssetsCertsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/assets/certs/{certificateUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the ca certificate for the tenant",
        "operationId": "V1TenantUidAssetsCertsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCert"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "updates the tenant certificate",
        "operationId": "V1TenantUidAssetsCertsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCert"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "deletes the tenant certificate",
        "operationId": "V1TenantUidAssetsCertsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "certificateUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/assets/dataSinks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns data sink config of tenant",
        "operationId": "V1TenantUidAssetsDataSinksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1DataSinkConfig"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "updates the tenant data sink config",
        "operationId": "V1TenantUidAssetsDataSinksUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1DataSinkConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create data sink config",
        "operationId": "V1TenantUidAssetsDataSinksCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1DataSinkConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "deletes the tenant data sink config",
        "operationId": "V1TenantUidAssetsDataSinksDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/authTokenSettings": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get tenant auth token settings",
        "operationId": "v1TenantUidAuthTokenSettingsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AuthTokenSettings"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant auth token settings",
        "operationId": "v1TenantUidAuthTokenSettingsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AuthTokenSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/contract/accept": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Tenant to accept the contract agreement",
        "operationId": "v1TenantsUidContractAccept",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/creditAccount/aws": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the credit accounts for the tenants with free tier access",
        "operationId": "v1TenantsCreditAccountGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsCreditAccountEntity"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the aws credit account for tenants",
        "operationId": "v1TenantsCreditAccountDelete",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "forceDelete",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/domains": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "retrieves the domains for tenant",
        "operationId": "V1TenantUidDomainsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantDomains"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "creates or updates domains for tenant",
        "operationId": "V1TenantUidDomainsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantDomains"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/emailId": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant emailId",
        "operationId": "v1PatchTenantEmailId",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantEmailPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/freemium": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get tenant level freemium configuration",
        "operationId": "v1TenantFreemiumGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantFreemium"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant freemium configuration",
        "operationId": "v1TenantFreemiumUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantFreemium"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/freemiumUsage": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get tenant freemium usage",
        "operationId": "v1TenantFreemiumUsageGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantFreemiumUsage"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns a specified invoice",
        "operationId": "v1InvoicesUidGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Invoice"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the tenant uid",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Specify the invoice uid",
          "name": "invoiceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/invoice/pdf": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the specified invoice report",
        "operationId": "V1InvoiceUidReportInvoicePdf",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the tenant uid",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Specify the invoice uid",
          "name": "invoiceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/pdf": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the specified monthly invoice report",
        "operationId": "V1InvoiceUidReportPdf",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the tenant uid",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Specify the invoice uid",
          "name": "invoiceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/usage/pdf": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the specified tenant usage",
        "operationId": "V1InvoiceUidReportUsagePdf",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the tenant uid",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Specify the invoice uid",
          "name": "invoiceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/loginBanner": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get tenant login banner settings",
        "operationId": "v1TenantUidLoginBannerGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1LoginBannerSettings"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant login banner settings",
        "operationId": "v1TenantUidLoginBannerUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1LoginBannerSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/macros": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "List the macros of the specified tenant",
        "operationId": "v1TenantsUidMacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the macros of the specified tenant",
        "operationId": "v1TenantsUidMacrosUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create or add new macros for the specified tenant",
        "operationId": "v1TenantsUidMacrosCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the macros for the specified tenant by given macro name",
        "operationId": "v1TenantsUidMacrosDeleteByMacroName",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the macros for the specified tenant by given macro name",
        "operationId": "v1TenantsUidMacrosUpdateByMacroName",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/oidc/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the oidc Spec for tenant",
        "operationId": "V1TenantUidOidcConfigGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantOidcClientSpec"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Associates the  oidc Spec for the tenant",
        "operationId": "V1TenantUidOidcConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantOidcClientSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/password/policy": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "retrieves the password policy for tenant",
        "operationId": "V1TenantUidPasswordPolicyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantPasswordPolicyEntity"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "creates or updates a password policy for tenant",
        "operationId": "V1TenantUidPasswordPolicyUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantPasswordPolicyEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/preferences/clusterGroup": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get is cluster group enabled for a specific tenant",
        "operationId": "V1TenantPrefClusterGroupGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantEnableClusterGroup"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Enable or Disable cluster group for a specific tenant",
        "operationId": "V1TenantPrefClusterGroupUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantEnableClusterGroup"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/preferences/clusterRbacSettings": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get tenant cluster RBAC settings",
        "operationId": "v1TenantClusterRbacSettingsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantClusterRbacSettings"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant cluster RBAC settings",
        "operationId": "v1TenantClusterRbacSettingsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantClusterRbacSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/preferences/clusterSettings": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get tenant cluster settings",
        "operationId": "v1TenantClusterSettingsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantClusterSettings"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/preferences/clusterSettings/nodesAutoRemediationSetting": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant clusters nodes auto remediation setting",
        "operationId": "v1TenantClustersNodesAutoRemediationSettingUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1NodesAutoRemediationSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/preferences/developerCredit": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get developer credit enabled for a specific tenant",
        "operationId": "V1TenantDeveloperCreditGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DeveloperCredit"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update developer credit for a specific tenant",
        "operationId": "V1TenantDeveloperCreditUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1DeveloperCredit"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/preferences/fips": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get tenant fips settings",
        "operationId": "v1TenantFipsSettingsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1FipsSettings"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant fips setting",
        "operationId": "v1TenantFipsSettingsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1FipsSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/rateConfig": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get all rate config for public and private cloud",
        "operationId": "v1RateConfigGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RateConfig"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "updates the rate config for public and private cloud",
        "operationId": "v1RateConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1RateConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/resourceLimits": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get tenant level resource limits configuration",
        "operationId": "v1TenantResourceLimitsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantResourceLimits"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant resource limits configuration",
        "operationId": "v1TenantResourceLimitsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantResourceLimitsEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/saml/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified service provider metadata and Saml Spec for tenant",
        "operationId": "V1TenantUidSamlConfigSpecGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantSamlSpec"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Associates the specified federation metadata for the tenant",
        "operationId": "V1TenantUidSamlConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantSamlRequestSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/sso/auth/providers": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "get sso logins for the tenants",
        "operationId": "V1TenantUidSsoAuthProvidersGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantSsoAuthProvidersEntity"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "enable sso logins for the tenants",
        "operationId": "V1TenantUidSsoAuthProvidersUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantSsoAuthProvidersEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users": {
      "get": {
        "description": "Lists users the given user context",
        "tags": [
          "v1"
        ],
        "summary": "Lists users",
        "operationId": "v1UsersList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Users"
            }
          }
        }
      },
      "post": {
        "description": "A user is created for the given user context",
        "tags": [
          "v1"
        ],
        "summary": "Create User",
        "operationId": "v1UsersCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/locations": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified users location",
        "operationId": "v1UsersAssetsLocationGet",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocations"
            }
          }
        }
      }
    },
    "/v1/users/assets/locations/azure": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a Azure location",
        "operationId": "v1UsersAssetsLocationAzureCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationAzure"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/locations/azure/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Azure location",
        "operationId": "v1UsersAssetsLocationAzureGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationAzure"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Azure location",
        "operationId": "v1UsersAssetsLocationAzureUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationAzure"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the Azure location uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/locations/gcp": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a GCP location",
        "operationId": "v1UsersAssetsLocationGcpCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationGcp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/locations/gcp/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified GCP location",
        "operationId": "v1UsersAssetsLocationGcpGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationGcp"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified GCP location",
        "operationId": "v1UsersAssetsLocationGcpUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationGcp"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the GCP location uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/locations/minio": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a MinIO location",
        "operationId": "v1UsersAssetsLocationMinioCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/locations/minio/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified MinIO location",
        "operationId": "v1UsersAssetsLocationMinioGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified MinIO location",
        "operationId": "v1UsersAssetsLocationMinioUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the MinIO location uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/locations/s3": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a S3 location",
        "operationId": "v1UsersAssetsLocationS3Create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/locations/s3/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified S3 location",
        "operationId": "v1UsersAssetsLocationS3Get",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified S3 location",
        "operationId": "v1UsersAssetsLocationS3Update",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified S3 location",
        "operationId": "v1UsersAssetsLocationS3Delete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the S3 location uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/locations/{type}/{uid}/default": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the default backup location",
        "operationId": "v1UsersAssetsLocationDefaultUpdate",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the location uid",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Specify the location type [aws/azure/gcp/minio/s3]",
          "name": "type",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/locations/{uid}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified location",
        "operationId": "v1UsersAssetsLocationDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the location uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/sshkeys": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the SSH keys",
        "operationId": "v1UsersAssetsSshGet",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsSsh"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a SSH key",
        "operationId": "v1UserAssetsSshCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetSshEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/sshkeys/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified user ssh key",
        "operationId": "v1UsersAssetSshGetUid",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetSsh"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified user ssh key",
        "operationId": "v1UsersAssetSshUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetSsh"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified user ssh key",
        "operationId": "v1UsersAssetSshDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the SSH key uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/vsphere/dnsMapping": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vSphere DNS mapping",
        "operationId": "v1VsphereMappingGet",
        "parameters": [
          {
            "type": "string",
            "description": "Specify the vSphere gateway uid",
            "name": "gatewayUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Specify the vSphere datacenter name",
            "name": "datacenter",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Specify the vSphere network name",
            "name": "network",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        }
      }
    },
    "/v1/users/assets/vsphere/dnsMappings": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vSphere DNS mappings",
        "operationId": "v1VsphereDnsMappingsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMappings"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a vSphere DNS mapping",
        "operationId": "v1VsphereDnsMappingCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/vsphere/dnsMappings/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vSphere DNS mapping",
        "operationId": "v1VsphereDnsMappingGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified vSphere DNS mapping",
        "operationId": "v1VsphereDnsMappingUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified vSphere DNS mapping",
        "operationId": "v1VsphereDnsMappingDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Specify the vSphere DNS mapping uid",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/auth/tokens/revoke": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Revoke access of specific token(s)",
        "operationId": "v1UsersAuthTokensRevoke",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AuthTokenRevoke"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/users/config/scar": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the system Spectro repository. Restricted to edge services",
        "operationId": "V1UsersConfigScarGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemScarSpec"
            }
          }
        }
      }
    },
    "/v1/users/info": {
      "get": {
        "description": "Returns a basic information of User for the specified uid.",
        "tags": [
          "v1"
        ],
        "summary": "Returns the base information of specified User",
        "operationId": "v1UsersInfoGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserInfo"
            }
          }
        }
      }
    },
    "/v1/users/kubectl/session/{sessionUid}": {
      "get": {
        "description": "gets users kubectl session",
        "tags": [
          "v1"
        ],
        "summary": "gets users kubectl session",
        "operationId": "V1UsersKubectlSessionUid",
        "parameters": [
          {
            "type": "string",
            "name": "sessionUid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserKubectlSession"
            }
          }
        }
      }
    },
    "/v1/users/meta": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of users metadata",
        "operationId": "v1UsersMetadata",
        "responses": {
          "200": {
            "description": "An array of users metadata items",
            "schema": {
              "$ref": "#/definitions/v1UsersMetadata"
            }
          }
        }
      }
    },
    "/v1/users/password/change": {
      "patch": {
        "description": "User password change request via current password and emailId",
        "tags": [
          "v1"
        ],
        "summary": "User password change request using the user emailId",
        "operationId": "V1UsersPasswordChange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "newPassword",
                "emailId",
                "currentPassword"
              ],
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "emailId": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/password/reset": {
      "patch": {
        "description": "User password request will be sent to the supplied emailId",
        "tags": [
          "v1"
        ],
        "summary": "User password reset request using the email id",
        "operationId": "v1UsersEmailPasswordReset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailId"
              ],
              "properties": {
                "emailId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/summary": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of users summary with provided filter spec",
        "operationId": "v1UsersSummaryGet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UsersSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of users summary items",
            "schema": {
              "$ref": "#/definitions/v1UsersSummaryList"
            }
          }
        }
      }
    },
    "/v1/users/system/features": {
      "get": {
        "description": "Returns the users system feature",
        "tags": [
          "v1"
        ],
        "summary": "Returns the users system feature",
        "operationId": "v1UsersSystemFeature",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SystemFeatures"
            }
          }
        }
      }
    },
    "/v1/users/system/macros": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "List the macros of the system",
        "operationId": "v1UsersSystemMacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the macros of the system",
        "operationId": "v1UsersSystemMacrosUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create or add new macros for the system user",
        "operationId": "v1UsersSystemMacrosCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the macros for the system user by macro name",
        "operationId": "v1UsersSystemMacrosDeleteByMacroName",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the macros for the system user by macro name",
        "operationId": "v1UsersSystemMacrosUpdateByMacroName",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/users/{uid}": {
      "get": {
        "description": "Returns a User for the specified uid.",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified User",
        "operationId": "v1UsersUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          }
        }
      },
      "put": {
        "description": "A user is created for the given user context",
        "tags": [
          "v1"
        ],
        "summary": "Update User",
        "operationId": "v1UsersUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Deletes the specified User for given uid",
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified User",
        "operationId": "v1UsersUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "User is patched for the specified information",
        "tags": [
          "v1"
        ],
        "summary": "Patches the specified User",
        "operationId": "v1UsersUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/password/change": {
      "patch": {
        "description": "User password change request via current password",
        "tags": [
          "v1"
        ],
        "summary": "User password change request using the user uid",
        "operationId": "v1UsersUidPasswordChange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "newPassword"
              ],
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/password/reset": {
      "patch": {
        "description": "User password reset request, will send the password reset option through the emailId",
        "tags": [
          "v1"
        ],
        "summary": "User password reset request using the user uid",
        "operationId": "v1UsersUidPasswordReset",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/projects": {
      "get": {
        "description": "Returns a User with projects and roles",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified User Projects and Roles information",
        "operationId": "v1UsersProjectRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesEntity"
            }
          }
        }
      },
      "put": {
        "description": "User is updated with projects and roles",
        "tags": [
          "v1"
        ],
        "summary": "Updates the projects and roles for user",
        "operationId": "v1UsersProjectRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/resourceRoles": {
      "get": {
        "description": "Returns resource roles for user",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified individual and resource roles for a user",
        "operationId": "v1UsersUidResourceRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ResourceRoles"
            }
          }
        }
      },
      "post": {
        "description": "Resource roles added to specific user",
        "tags": [
          "v1"
        ],
        "summary": "Add resource roles for user",
        "operationId": "v1UsersUidResourceRolesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResourceRolesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/resourceRoles/{resourceRoleUid}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deleted the resource roles from user",
        "operationId": "v1UsersUidResourceRolesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "Specific resource roles fo user is updated",
        "tags": [
          "v1"
        ],
        "summary": "Updates the resource roles for user",
        "operationId": "v1UsersResourceRolesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResourceRolesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "resourceRoleUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/roles": {
      "get": {
        "description": "Returns roles clubbed from team",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified individual and team roles for a user",
        "operationId": "v1UsersUidRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserRolesEntity"
            }
          }
        }
      },
      "put": {
        "description": "User is updated with roles",
        "tags": [
          "v1"
        ],
        "summary": "Updates the roles for user",
        "operationId": "v1UsersUidRolesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserRoleUIDs"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/status/loginMode": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Users status login mode",
        "operationId": "v1UsersStatusLoginMode",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserStatusLoginMode"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create workspace",
        "operationId": "v1WorkspacesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/workspaces/teams/{teamUid}/roles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified team's workspaces and roles data",
        "operationId": "v1TeamsWorkspaceGetRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceScopeRoles"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the workspace roles for the specified team",
        "operationId": "v1TeamsWorkspaceRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1WorkspacesRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "teamUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/users/{userUid}/roles": {
      "get": {
        "description": "Returns a User with workspaces and roles",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified User workspaces and Roles information",
        "operationId": "v1UsersWorkspaceGetRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceScopeRoles"
            }
          }
        }
      },
      "put": {
        "description": "User is updated with workspace roles",
        "tags": [
          "v1"
        ],
        "summary": "Updates the workspace roles for user",
        "operationId": "v1UsersWorkspaceRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1WorkspacesRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "userUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/validate/name": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the workspace name",
        "operationId": "v1WorkspacesValidateName",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/workspaces/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified workspace",
        "operationId": "v1WorkspacesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Workspace"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified workspace",
        "operationId": "v1WorkspacesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/backup": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the  workspace backup result",
        "operationId": "v1WorkspaceOpsBackupGet",
        "parameters": [
          {
            "type": "string",
            "name": "backupRequestUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackup"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update workspace backup settings",
        "operationId": "v1WorkspaceOpsBackupUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create workspace backup settings",
        "operationId": "v1WorkspaceOpsBackupCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete workspace backup",
        "operationId": "v1WorkspaceOpsBackupDelete",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupDeleteEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/backup/onDemand": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create On demand Workspace Backup",
        "operationId": "v1WorkspaceOpsBackupOnDemandCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/clusterNamespaces": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified workspace namespaces",
        "operationId": "v1WorkspacesUidClusterNamespacesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClusterNamespacesEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/clusterRbacs": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create cluster rbac in workspace",
        "operationId": "v1WorkspacesClusterRbacCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/clusterRbacs/{clusterRbacUid}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified workspace cluster rbac",
        "operationId": "v1WorkspacesUidClusterRbacUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified workspace cluster rbac",
        "operationId": "v1WorkspacesUidClusterRbacDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "clusterRbacUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/meta": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified workspace meta",
        "operationId": "v1WorkspacesUidMetaUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMeta"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/restore": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the  workspace restore result",
        "operationId": "v1WorkspaceOpsRestoreGet",
        "parameters": [
          {
            "type": "string",
            "name": "restoreRequestUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceRestore"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/restore/onDemand": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create On demand Workspace Restore",
        "operationId": "v1WorkspaceOpsRestoreOnDemandCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceRestoreConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "V1AwsAccountSts": {
      "description": "AWS cloud account sts",
      "type": "object",
      "properties": {
        "accountId": {
          "description": "A 12-digit number, such as 123456789012, that uniquely identifies an AWS account",
          "type": "string"
        },
        "externalId": {
          "description": "It can be passed to the AssumeRole API of the STS. It can be used in the condition element in a role's trust policy, allowing the role to be assumed only when a certain value is present in the external ID",
          "type": "string"
        },
        "partition": {
          "$ref": "#/definitions/v1AwsPartition"
        }
      }
    },
    "V1AwsPropertiesValidateSpec": {
      "description": "AWS properties validate spec",
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        }
      }
    },
    "V1EksPropertiesValidateSpec": {
      "description": "Eks properties validate spec",
      "type": "object",
      "properties": {
        "cloudAccountUid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "V1GcpPropertiesValidateSpec": {
      "description": "Gcp properties validate spec",
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cloudAccountUid": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "V1PasswordsBlockList": {
      "description": "List of blocklisted passwords",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1PasswordsBlockListEntity"
        }
      }
    },
    "v1.AzureAccountEntitySpec": {
      "type": "object",
      "properties": {
        "clientCloud": {
          "description": "Contains configuration for Azure cloud",
          "type": "string",
          "default": "public",
          "enum": [
            "azure-china",
            "azure-government",
            "public"
          ]
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "v1.CloudWatchConfig": {
      "description": "Cloud watch config entity",
      "type": "object",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "group": {
          "description": "Name of the group",
          "type": "string"
        },
        "region": {
          "description": "Name of the region",
          "type": "string"
        },
        "stream": {
          "description": "Name of the stream",
          "type": "string"
        }
      }
    },
    "v1.DataSinkCloudWatchConfig": {
      "description": "Data sink cloud watch config",
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1.DataSinkPayloads"
        },
        "spec": {
          "$ref": "#/definitions/v1.CloudWatchConfig"
        }
      }
    },
    "v1.DataSinkPayload": {
      "description": "Data sink payload entity",
      "type": "object",
      "properties": {
        "refUid": {
          "description": "RefUid of the data sink payload",
          "type": "string"
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "additionalProperties": {
        "type": "object"
      }
    },
    "v1.DataSinkPayloads": {
      "description": "List of data sink payload entities",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1.DataSinkPayload"
      }
    },
    "v1.GcpAccountEntitySpec": {
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "type": "string"
        }
      }
    },
    "v1AADProfile": {
      "description": "AADProfile - AAD integration is managed by AKS.",
      "type": "object",
      "required": [
        "managed",
        "adminGroupObjectIDs"
      ],
      "properties": {
        "adminGroupObjectIDs": {
          "description": "AdminGroupObjectIDs - AAD group object IDs that will have admin role of the cluster.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "managed": {
          "description": "Managed - Whether to enable managed AAD.",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1APIEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "type": "object",
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1APIServerAccessProfile": {
      "description": "APIServerAccessProfile - access profile for AKS API server.",
      "type": "object",
      "properties": {
        "authorizedIPRanges": {
          "description": "AuthorizedIPRanges - Authorized IP Ranges to kubernetes API server.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "enablePrivateCluster": {
          "description": "EnablePrivateCluster - Whether to create the cluster as a private cluster or not.",
          "type": "boolean"
        },
        "enablePrivateClusterPublicFQDN": {
          "description": "EnablePrivateClusterPublicFQDN - Whether to create additional public FQDN for private cluster or not.",
          "type": "boolean"
        },
        "privateDNSZone": {
          "description": "PrivateDNSZone - Private dns zone mode for private cluster.",
          "type": "string"
        }
      }
    },
    "v1AWSVolumeTypes": {
      "description": "AWS Volume Types",
      "type": "object",
      "properties": {
        "volumeTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsVolumeType"
          }
        }
      }
    },
    "v1AclMeta": {
      "description": "Resource access control information (Read-only response data)",
      "type": "object",
      "properties": {
        "ownerUid": {
          "description": "User or service uid which created the resource",
          "type": "string"
        },
        "projectUid": {
          "description": "Project's uid if the resource is under a project",
          "type": "string"
        },
        "tenantUid": {
          "description": "Tenant's uid",
          "type": "string"
        }
      }
    },
    "v1Address": {
      "description": "Tenant Address",
      "type": "object",
      "properties": {
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "pincode": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1Alert": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Channel"
          }
        },
        "component": {
          "type": "string"
        }
      }
    },
    "v1AlertEntity": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Channel"
          }
        }
      }
    },
    "v1AlertNotificationStatus": {
      "type": "object",
      "properties": {
        "isSucceeded": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1AmiTypes": {
      "description": "List of AWS AMI types",
      "type": "object",
      "properties": {
        "amiTypes": {
          "description": "List of AWS AMI types",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ApiEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "type": "object",
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ApiKey": {
      "description": "API key information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ApiKeySpec"
        },
        "status": {
          "$ref": "#/definitions/v1ApiKeyStatus"
        }
      }
    },
    "v1ApiKeyActiveState": {
      "properties": {
        "isActive": {
          "description": "API key active state",
          "type": "boolean"
        }
      }
    },
    "v1ApiKeyCreateResponse": {
      "description": "Response of create API key",
      "type": "object",
      "properties": {
        "apiKey": {
          "description": "Api key is used for authentication",
          "type": "string"
        },
        "uid": {
          "description": "User uid",
          "type": "string"
        }
      }
    },
    "v1ApiKeyEntity": {
      "description": "API key request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ApiKeySpecEntity"
        }
      }
    },
    "v1ApiKeySpec": {
      "description": "API key specification",
      "type": "object",
      "properties": {
        "expiry": {
          "description": "API key expiry date",
          "$ref": "#/definitions/v1Time"
        },
        "key": {
          "description": "Deprecated: API key field will be no longer available",
          "type": "string"
        },
        "user": {
          "description": "User to whom the API key is created",
          "$ref": "#/definitions/v1ApiKeyUser"
        }
      }
    },
    "v1ApiKeySpecEntity": {
      "description": "API key specification",
      "type": "object",
      "properties": {
        "expiry": {
          "description": "API key expiry date",
          "$ref": "#/definitions/v1Time"
        },
        "userUid": {
          "description": "User to whom the API key has to be created",
          "type": "string"
        }
      }
    },
    "v1ApiKeySpecUpdate": {
      "description": "API key update request specification",
      "properties": {
        "expiry": {
          "description": "API key expiry date",
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1ApiKeyStatus": {
      "description": "API key status",
      "type": "object",
      "properties": {
        "isActive": {
          "description": "API key active state",
          "type": "boolean"
        }
      }
    },
    "v1ApiKeyUpdate": {
      "description": "API key update request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ApiKeySpecUpdate"
        }
      }
    },
    "v1ApiKeyUser": {
      "description": "API key user information",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "First name of user",
          "type": "string"
        },
        "lastName": {
          "description": "Last name of user",
          "type": "string"
        },
        "uid": {
          "description": "User uid",
          "type": "string"
        }
      }
    },
    "v1ApiKeys": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of API keys",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ApiKey"
          }
        }
      }
    },
    "v1AppDeployment": {
      "description": "Application deployment response",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AppDeploymentSpec"
        },
        "status": {
          "$ref": "#/definitions/v1AppDeploymentStatus"
        }
      }
    },
    "v1AppDeploymentClusterGroupConfigEntity": {
      "description": "Application deployment cluster group config",
      "type": "object",
      "properties": {
        "targetSpec": {
          "$ref": "#/definitions/v1AppDeploymentClusterGroupTargetSpec"
        }
      }
    },
    "v1AppDeploymentClusterGroupEntity": {
      "description": "Application deployment cluster group request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1AppDeploymentClusterGroupSpec"
        }
      }
    },
    "v1AppDeploymentClusterGroupSpec": {
      "description": "Application deployment cluster group spec",
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1AppDeploymentClusterGroupConfigEntity"
        },
        "profile": {
          "$ref": "#/definitions/v1AppDeploymentProfileEntity"
        }
      }
    },
    "v1AppDeploymentClusterGroupTargetSpec": {
      "description": "Application deployment cluster group target spec",
      "type": "object",
      "required": [
        "clusterName",
        "clusterGroupUid"
      ],
      "properties": {
        "clusterGroupUid": {
          "description": "Application deployment cluster group uid",
          "type": "string"
        },
        "clusterLimits": {
          "$ref": "#/definitions/v1AppDeploymentTargetClusterLimits"
        },
        "clusterName": {
          "description": "Application deployment virtual cluster name",
          "type": "string"
        }
      }
    },
    "v1AppDeploymentClusterHealth": {
      "description": "Application deployment cluster health status",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1AppDeploymentClusterRef": {
      "description": "Application deployment cluster reference",
      "type": "object",
      "properties": {
        "deploymentClusterType": {
          "description": "Application deployment source cluster type[ \"virtualCluster\", \"hostCluster\" ]",
          "type": "string",
          "enum": [
            "virtual",
            "host"
          ]
        },
        "name": {
          "description": "Application deployment cluster name",
          "type": "string"
        },
        "uid": {
          "description": "Application deployment cluster uid",
          "type": "string"
        }
      }
    },
    "v1AppDeploymentClusterRefSummary": {
      "description": "Application deployment cluster reference",
      "properties": {
        "deploymentClusterType": {
          "description": "Application deployment source cluster type[ \"virtualCluster\", \"hostCluster\" ]",
          "type": "string",
          "enum": [
            "virtual",
            "host"
          ]
        },
        "name": {
          "description": "Application deployment source cluster name",
          "type": "string"
        },
        "uid": {
          "description": "Application deployment source cluster uid",
          "type": "string"
        }
      }
    },
    "v1AppDeploymentClusterStatus": {
      "description": "Application deployment cluster status",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1AppDeploymentClusterHealth"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1AppDeploymentConfig": {
      "description": "Application deployment config response",
      "type": "object",
      "properties": {
        "target": {
          "$ref": "#/definitions/v1AppDeploymentTargetConfig"
        }
      }
    },
    "v1AppDeploymentConfigSummary": {
      "description": "Application deployment config summary",
      "properties": {
        "target": {
          "$ref": "#/definitions/v1AppDeploymentTargetConfigSummary"
        }
      }
    },
    "v1AppDeploymentFilterSpec": {
      "description": "Application deployment filter spec",
      "properties": {
        "appDeploymentName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "clusterUids": {
          "$ref": "#/definitions/v1FilterArray"
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        }
      }
    },
    "v1AppDeploymentNotifications": {
      "description": "Application deployment notifications",
      "properties": {
        "isAvailable": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1AppDeploymentProfile": {
      "description": "Application deployment profile",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1AppDeploymentProfileMeta"
        },
        "template": {
          "$ref": "#/definitions/v1AppProfileTemplate"
        }
      }
    },
    "v1AppDeploymentProfileEntity": {
      "description": "Application deployment profile request payload",
      "type": "object",
      "required": [
        "appProfileUid"
      ],
      "properties": {
        "appProfileUid": {
          "description": "Application deployment profile uid",
          "type": "string"
        }
      }
    },
    "v1AppDeploymentProfileMeta": {
      "description": "Application deployment profile metadata",
      "type": "object",
      "properties": {
        "name": {
          "description": "Application deployment profile name",
          "type": "string"
        },
        "uid": {
          "description": "Application deployment profile uid",
          "type": "string"
        },
        "version": {
          "description": "Application deployment profile version",
          "type": "string"
        }
      }
    },
    "v1AppDeploymentProfileMetadataSummary": {
      "description": "Application deployment profile metadata summary",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1AppDeploymentProfileSpec": {
      "description": "Application deployment profile spec",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1AppDeploymentProfileMeta"
        },
        "template": {
          "$ref": "#/definitions/v1AppProfileTemplateSpec"
        }
      }
    },
    "v1AppDeploymentProfileSummary": {
      "description": "Application deployment profile summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1AppDeploymentProfileMetadataSummary"
        },
        "template": {
          "$ref": "#/definitions/v1AppProfileTemplateSummary"
        }
      }
    },
    "v1AppDeploymentProfileVersion": {
      "description": "Application deployment profile version",
      "type": "object",
      "properties": {
        "uid": {
          "description": "Application deployment profile uid",
          "type": "string"
        },
        "version": {
          "description": "Application deployment profile version",
          "type": "string"
        }
      }
    },
    "v1AppDeploymentProfileVersions": {
      "description": "Application deployment profile versions",
      "type": "object",
      "properties": {
        "availableVersions": {
          "description": "Application deployment profile available versions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppDeploymentProfileVersion"
          }
        },
        "latestVersions": {
          "description": "Application deployment profile latest versions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppDeploymentProfileVersion"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1AppDeploymentProfileMeta"
        }
      }
    },
    "v1AppDeploymentSortFields": {
      "type": "string",
      "enum": [
        "appDeploymentName",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "x-nullable": true
    },
    "v1AppDeploymentSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1AppDeploymentSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1AppDeploymentSpec": {
      "description": "Application deployment spec",
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1AppDeploymentConfig"
        },
        "profile": {
          "$ref": "#/definitions/v1AppDeploymentProfile"
        }
      }
    },
    "v1AppDeploymentStatus": {
      "description": "Application deployment status",
      "type": "object",
      "properties": {
        "appTiers": {
          "description": "Application deployment tiers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterPackStatus"
          }
        },
        "lifecycleStatus": {
          "$ref": "#/definitions/v1LifecycleStatus"
        },
        "state": {
          "description": "Application deployment state [ \"Pending\", \"Deploying\", \"Deployed\", \"Updating\" ]",
          "type": "string"
        }
      }
    },
    "v1AppDeploymentStatusSummary": {
      "description": "Application deployment status summary",
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1AppDeploymentClusterStatus"
        },
        "notifications": {
          "$ref": "#/definitions/v1AppDeploymentNotifications"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1AppDeploymentSummary": {
      "description": "Application deployment summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Application deployment spec summary",
          "type": "object",
          "properties": {
            "config": {
              "$ref": "#/definitions/v1AppDeploymentConfigSummary"
            },
            "profile": {
              "$ref": "#/definitions/v1AppDeploymentProfileSummary"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1AppDeploymentStatusSummary"
        }
      }
    },
    "v1AppDeploymentTargetClusterLimits": {
      "description": "Application deployment target cluster limits",
      "properties": {
        "cpu": {
          "description": "CPU cores",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "Memory in MiB",
          "type": "integer",
          "format": "int32"
        },
        "storageGiB": {
          "description": "Storage in GiB",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1AppDeploymentTargetConfig": {
      "description": "Application deployment target config response",
      "type": "object",
      "properties": {
        "clusterRef": {
          "$ref": "#/definitions/v1AppDeploymentClusterRef"
        },
        "envRef": {
          "$ref": "#/definitions/v1AppDeploymentTargetEnvironmentRef"
        }
      }
    },
    "v1AppDeploymentTargetConfigSummary": {
      "description": "Application deployment target config summary",
      "properties": {
        "clusterRef": {
          "$ref": "#/definitions/v1AppDeploymentClusterRefSummary"
        }
      }
    },
    "v1AppDeploymentTargetEnvironmentRef": {
      "description": "Application deployment target environment reference",
      "type": "object",
      "properties": {
        "name": {
          "description": "Application deployment target resource name",
          "type": "string"
        },
        "type": {
          "description": "Application deployment target resource type [ \"nestedCluster\", \"clusterGroup\" ]",
          "type": "string"
        },
        "uid": {
          "description": "Application deployment target resource uid",
          "type": "string"
        }
      }
    },
    "v1AppDeploymentVirtualClusterConfigEntity": {
      "description": "Application deployment virtual cluster config",
      "type": "object",
      "properties": {
        "targetSpec": {
          "$ref": "#/definitions/v1AppDeploymentVirtualClusterTargetSpec"
        }
      }
    },
    "v1AppDeploymentVirtualClusterEntity": {
      "description": "Application deployment virtual cluster request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1AppDeploymentVirtualClusterSpec"
        }
      }
    },
    "v1AppDeploymentVirtualClusterSpec": {
      "description": "Application deployment virtual cluster spec",
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1AppDeploymentVirtualClusterConfigEntity"
        },
        "profile": {
          "$ref": "#/definitions/v1AppDeploymentProfileEntity"
        }
      }
    },
    "v1AppDeploymentVirtualClusterTargetSpec": {
      "description": "Application deployment virtual cluster target spec",
      "type": "object",
      "required": [
        "clusterUid"
      ],
      "properties": {
        "clusterUid": {
          "description": "Application deployment virtual cluster uid",
          "type": "string"
        }
      }
    },
    "v1AppDeploymentsFilterSpec": {
      "description": "Application deployment filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1AppDeploymentFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppDeploymentSortSpec"
          }
        }
      }
    },
    "v1AppDeploymentsSummary": {
      "type": "object",
      "properties": {
        "appDeployments": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppDeploymentSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AppProfile": {
      "description": "Application profile response",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "parentUid": {
              "description": "Application profile parent profile uid",
              "type": "string"
            },
            "template": {
              "$ref": "#/definitions/v1AppProfileTemplate"
            },
            "version": {
              "description": "Application profile version",
              "type": "string"
            },
            "versions": {
              "description": "Application profile versions list",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1AppProfileVersion"
              }
            }
          }
        },
        "status": {
          "description": "Application profile status",
          "type": "object",
          "properties": {
            "inUseApps": {
              "description": "Application profile apps array",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ObjectResReference"
              }
            }
          }
        }
      }
    },
    "v1AppProfileCloneEntity": {
      "description": "Application profile clone request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1AppProfileCloneMetaInputEntity"
        }
      }
    },
    "v1AppProfileCloneMetaInputEntity": {
      "description": "Application profile clone metadata",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Application profile name",
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/v1AppProfileCloneTarget"
        },
        "version": {
          "description": "Application profile version",
          "type": "string"
        }
      }
    },
    "v1AppProfileCloneTarget": {
      "description": "Application profile clone target",
      "type": "object",
      "properties": {
        "projectUid": {
          "description": "Application profile clone target project uid",
          "type": "string"
        }
      }
    },
    "v1AppProfileEntity": {
      "description": "Application profile request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "description": "Application profile spec",
          "type": "object",
          "properties": {
            "template": {
              "$ref": "#/definitions/v1AppProfileTemplateEntity"
            },
            "version": {
              "description": "Application profile version",
              "type": "string"
            }
          }
        }
      }
    },
    "v1AppProfileFilterSpec": {
      "description": "Application profile filter spec",
      "properties": {
        "profileName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        },
        "version": {
          "$ref": "#/definitions/v1FilterVersionString"
        }
      }
    },
    "v1AppProfileMetaEntity": {
      "description": "Application profile metadata request payload",
      "type": "object",
      "required": [
        "metadata"
      ],
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1AppProfileMetaUpdateEntity"
        },
        "version": {
          "description": "Application profile version",
          "type": "string"
        }
      }
    },
    "v1AppProfileMetaUpdateEntity": {
      "description": "Application profile metadata update request payload",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Application profile annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Application profile labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1AppProfileMetadata": {
      "description": "Application profile metadata summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "spec": {
          "properties": {
            "version": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1AppProfileSortFields": {
      "type": "string",
      "enum": [
        "profileName",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "x-nullable": true
    },
    "v1AppProfileSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1AppProfileSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1AppProfileSummary": {
      "description": "Application profile summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Application profile spec summary",
          "type": "object",
          "properties": {
            "parentUid": {
              "type": "string"
            },
            "template": {
              "$ref": "#/definitions/v1AppProfileTemplateSummary"
            },
            "version": {
              "type": "string"
            },
            "versions": {
              "description": "Application profile's list of all the versions",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1AppProfileVersion"
              }
            }
          }
        }
      }
    },
    "v1AppProfileTemplate": {
      "description": "Application profile template information",
      "type": "object",
      "properties": {
        "appTiers": {
          "description": "Application profile tiers",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppTierRef"
          }
        },
        "registryRefs": {
          "description": "Application profile registries reference",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        }
      }
    },
    "v1AppProfileTemplateEntity": {
      "description": "Application profile template spec",
      "type": "object",
      "properties": {
        "appTiers": {
          "description": "Application profile tiers",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppTierEntity"
          }
        }
      }
    },
    "v1AppProfileTemplateSpec": {
      "description": "Application profile template specs",
      "type": "object",
      "properties": {
        "appTiers": {
          "description": "Application profile tiers",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppTier"
          }
        },
        "registryRefs": {
          "description": "Application profile registries reference",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        }
      }
    },
    "v1AppProfileTemplateSummary": {
      "description": "Application profile template summary",
      "type": "object",
      "properties": {
        "appTiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppTierSummary"
          }
        }
      }
    },
    "v1AppProfileTiers": {
      "description": "Application profile tiers information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AppProfileTiersSpec"
        }
      }
    },
    "v1AppProfileTiersSpec": {
      "description": "Application profile tiers information",
      "type": "object",
      "properties": {
        "appTiers": {
          "description": "Application profile tiers",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppTier"
          }
        }
      }
    },
    "v1AppProfileVersion": {
      "description": "Application profile version",
      "type": "object",
      "properties": {
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1AppProfilesFilterSpec": {
      "description": "Application profile filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1AppProfileFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppProfileSortSpec"
          }
        }
      }
    },
    "v1AppProfilesMetadata": {
      "type": "object",
      "properties": {
        "appProfiles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppProfileMetadata"
          }
        }
      }
    },
    "v1AppProfilesSummary": {
      "type": "object",
      "properties": {
        "appProfiles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppProfileSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AppTier": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AppTierSpec"
        }
      }
    },
    "v1AppTierEntity": {
      "description": "Application tier request payload",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "containerRegistryUid": {
          "description": "Application tier container registry uid",
          "type": "string"
        },
        "installOrder": {
          "description": "Application tier installation order",
          "type": "integer",
          "format": "int32"
        },
        "manifests": {
          "description": "Application tier manifests",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManifestInputEntity"
          }
        },
        "name": {
          "description": "Application tier name",
          "type": "string"
        },
        "properties": {
          "description": "Application tier properties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppTierPropertyEntity"
          }
        },
        "registryUid": {
          "description": "Application tier registry uid",
          "type": "string"
        },
        "sourceAppTierUid": {
          "description": "Application tier source pack uid",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1AppTierType"
        },
        "values": {
          "description": "Application tier configuration values in yaml format",
          "type": "string"
        },
        "version": {
          "description": "Application tier version",
          "type": "string"
        }
      }
    },
    "v1AppTierManifests": {
      "description": "Application tier manifests data",
      "properties": {
        "manifests": {
          "description": "Application tier manifests array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Manifest"
          }
        }
      }
    },
    "v1AppTierPatchEntity": {
      "description": "Application tier patch request payload",
      "properties": {
        "appTier": {
          "$ref": "#/definitions/v1AppTierEntity"
        },
        "replaceWithAppTier": {
          "description": "Application tier UID to be replaced with new tier",
          "type": "string"
        }
      }
    },
    "v1AppTierProperty": {
      "description": "Application tier property object",
      "properties": {
        "format": {
          "description": "Application tier property format",
          "type": "string"
        },
        "name": {
          "description": "Application tier property name",
          "type": "string"
        },
        "type": {
          "description": "Application tier property data type",
          "type": "string"
        },
        "value": {
          "description": "Application tier property value",
          "type": "string"
        }
      }
    },
    "v1AppTierPropertyEntity": {
      "description": "Application tier property object",
      "properties": {
        "name": {
          "description": "Application tier property name",
          "type": "string"
        },
        "value": {
          "description": "Application tier property value",
          "type": "string"
        }
      }
    },
    "v1AppTierRef": {
      "description": "Application tier reference",
      "type": "object",
      "properties": {
        "name": {
          "description": "Application tier name",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1AppTierType"
        },
        "uid": {
          "description": "Application tier uid to uniquely identify the tier",
          "type": "string"
        },
        "version": {
          "description": "Application tier version",
          "type": "string"
        }
      }
    },
    "v1AppTierResolvedValues": {
      "description": "Application tier resolved macro values",
      "properties": {
        "resolved": {
          "description": "Application tier resolved macro values map",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1AppTierSourceSummary": {
      "description": "Application profile's tier source information",
      "properties": {
        "addonSubType": {
          "type": "string"
        },
        "addonType": {
          "type": "string"
        },
        "logoUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1AppTierSpec": {
      "description": "Application tier specs",
      "type": "object",
      "properties": {
        "containerRegistryUid": {
          "description": "Application tier container registry uid",
          "type": "string"
        },
        "installOrder": {
          "description": "Application tier installation order",
          "type": "integer",
          "format": "int32"
        },
        "manifests": {
          "description": "Application tier attached manifest content in yaml format",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "properties": {
          "description": "Application tier properties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppTierProperty"
          }
        },
        "registryUid": {
          "description": "Registry uid",
          "type": "string"
        },
        "sourceAppTierUid": {
          "description": "Application tier source pack uid",
          "type": "string"
        },
        "type": {
          "description": "Application tier type",
          "$ref": "#/definitions/v1AppTierType"
        },
        "values": {
          "description": "Application tier configuration values in yaml format",
          "type": "string"
        },
        "version": {
          "description": "Application tier version",
          "type": "string"
        }
      }
    },
    "v1AppTierSummary": {
      "description": "Application profile's tier summary",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/v1AppTierSourceSummary"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1AppTierType": {
      "type": "string",
      "default": "manifest",
      "enum": [
        "manifest",
        "helm",
        "operator-instance",
        "container"
      ]
    },
    "v1AppTierUpdateEntity": {
      "description": "Application tier update request payload",
      "type": "object",
      "properties": {
        "containerRegistryUid": {
          "description": "Application tier container registry uid",
          "type": "string"
        },
        "installOrder": {
          "description": "Application tier installation order",
          "type": "integer",
          "format": "int32"
        },
        "manifests": {
          "description": "Application tier manifests",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManifestRefUpdateEntity"
          }
        },
        "name": {
          "description": "Application tier name",
          "type": "string"
        },
        "properties": {
          "description": "Application tier properties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppTierPropertyEntity"
          }
        },
        "values": {
          "description": "Application tier configuration values in yaml format",
          "type": "string"
        },
        "version": {
          "description": "Application tier version",
          "type": "string"
        }
      }
    },
    "v1ArchType": {
      "type": "string",
      "default": "amd64",
      "enum": [
        "amd64",
        "arm64"
      ]
    },
    "v1AsyncOperationIdEntity": {
      "description": "Async operation id",
      "type": "object",
      "properties": {
        "operationId": {
          "description": "OperationId for a particular sync operation id",
          "type": "string"
        }
      }
    },
    "v1Audit": {
      "description": "Audit response payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AuditSpec"
        }
      }
    },
    "v1AuditActor": {
      "description": "Audit actor object",
      "properties": {
        "actorType": {
          "type": "string",
          "enum": [
            "user",
            "system",
            "service"
          ]
        },
        "project": {
          "$ref": "#/definitions/v1ProjectMeta"
        },
        "serviceName": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1UserMeta"
        }
      }
    },
    "v1AuditMsgUpdate": {
      "description": "Audit user message update request payload",
      "type": "object",
      "properties": {
        "userMsg": {
          "description": "User message",
          "type": "string",
          "maxLength": 255,
          "minLength": 3
        }
      }
    },
    "v1AuditResourceReference": {
      "description": "Audit resource reference object",
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "kind": {
          "description": "Audit resource type",
          "type": "string"
        },
        "label": {
          "description": "Audit resource label",
          "type": "string"
        },
        "name": {
          "description": "Audit resource name",
          "type": "string"
        },
        "uid": {
          "description": "Audit resource uid",
          "type": "string"
        }
      }
    },
    "v1AuditSpec": {
      "description": "Audit specifications",
      "properties": {
        "actionMsg": {
          "description": "Audit action message",
          "type": "string"
        },
        "actionType": {
          "type": "string",
          "enum": [
            "create",
            "update",
            "delete",
            "publish",
            "deploy",
            "activity",
            "action"
          ]
        },
        "actor": {
          "$ref": "#/definitions/v1AuditActor"
        },
        "contentMsg": {
          "description": "Audit content message",
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/v1AuditResourceReference"
        },
        "userMsg": {
          "description": "Audit user message",
          "type": "string"
        }
      }
    },
    "v1AuditSysMsg": {
      "description": "Audit system message",
      "type": "object",
      "properties": {
        "actionMsg": {
          "description": "Audit resource action message",
          "type": "string"
        },
        "contentMsg": {
          "description": "Audit resource content message",
          "type": "string"
        }
      }
    },
    "v1Audits": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of audit message",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Audit"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AuthLogin": {
      "description": "Describes the credential details required for authentication",
      "type": "object",
      "properties": {
        "emailId": {
          "description": "Describes the email id required for the user to authenticate",
          "type": "string"
        },
        "org": {
          "description": "Describes the user's organization name to login",
          "type": "string"
        },
        "password": {
          "description": "Describes the password required for the user to authenticate",
          "type": "string",
          "format": "password"
        }
      }
    },
    "v1AuthTokenRevoke": {
      "properties": {
        "tokens": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AuthTokenSettings": {
      "description": "System auth token settings",
      "properties": {
        "expiryTimeMinutes": {
          "description": "Auth token expiry time in minutes",
          "type": "integer",
          "format": "int32",
          "maximum": 1440,
          "minimum": 15,
          "x-omitempty": false
        }
      }
    },
    "v1AwsAMI": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1AwsAccount": {
      "description": "Aws cloud account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1AwsAccountCredentials": {
      "description": "Aws secret account credentials",
      "type": "object",
      "properties": {
        "accessKey": {
          "description": "Aws account access key",
          "type": "string"
        },
        "expirationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "secretKey": {
          "description": "Aws account secret key",
          "type": "string"
        },
        "secretToken": {
          "description": "Aws account secret token",
          "type": "string"
        }
      }
    },
    "v1AwsAccounts": {
      "description": "List of AWS accounts",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AwsAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AwsAmiReference": {
      "description": "AMI is the reference to the AMI from which to create the machine instance",
      "type": "object",
      "properties": {
        "eksOptimizedLookupType": {
          "description": "EKSOptimizedLookupType If specified, will look up an EKS Optimized image in SSM Parameter store",
          "type": "string",
          "enum": [
            "AmazonLinux",
            "AmazonLinuxGPU"
          ]
        },
        "id": {
          "description": "ID of resource",
          "type": "string"
        }
      }
    },
    "v1AwsAvailabilityZone": {
      "description": "Distinct locations within an AWS Region that are engineered to be isolated from failures in other Zones",
      "type": "object",
      "properties": {
        "name": {
          "description": "AWS availability zone name",
          "type": "string"
        },
        "state": {
          "description": "AWS availability zone state",
          "type": "string"
        },
        "zoneId": {
          "description": "AWS availability zone id",
          "type": "string"
        }
      }
    },
    "v1AwsAvailabilityZones": {
      "type": "object",
      "required": [
        "zones"
      ],
      "properties": {
        "zones": {
          "description": "List of AWS Zones",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsAvailabilityZone"
          }
        }
      }
    },
    "v1AwsCloudAccount": {
      "description": "AWS cloud account which includes access key and secret key in case of 'secret' credentials type. It includes policyARNS, ARN and externalId in case of sts. It includes roleArn and permissionBoundaryArn in case of podIdentity. Partition is a group of AWS Region and Service objects",
      "type": "object",
      "properties": {
        "accessKey": {
          "description": "AWS account access key",
          "type": "string"
        },
        "credentialType": {
          "$ref": "#/definitions/v1AwsCloudAccountCredentialType"
        },
        "partition": {
          "description": "AWS accounts are scoped to a single partition. Allowed values [aws, aws-us-gov], Default values",
          "type": "string",
          "default": "aws",
          "enum": [
            "aws",
            "aws-us-gov",
            "aws-iso",
            "aws-iso-b"
          ]
        },
        "podIdentity": {
          "description": "AWS EKS Pod Identity credentials in case of credentialType podIdentity, will be empty in case of other credential types",
          "$ref": "#/definitions/v1AwsPodIdentityCredentials"
        },
        "policyARNs": {
          "description": "List of policy ARNs required in case of credentialType sts.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretKey": {
          "description": "AWS account secret key",
          "type": "string"
        },
        "secretSpec": {
          "$ref": "#/definitions/v1AwsSecretSpec"
        },
        "secretToken": {
          "description": "AWS account secret token; in case of aws-iso and aws-iso-b",
          "type": "string"
        },
        "sts": {
          "description": "AWS STS credentials in case of credentialType sts, will be empty in case of credential type secret",
          "$ref": "#/definitions/v1AwsStsCredentials"
        }
      }
    },
    "v1AwsCloudAccountCredentialType": {
      "description": "Allowed Values [secret, sts, pod-identity]. STS type will be used for role assumption for sts type, accessKey/secretKey contains the source account, Arn is the target account. Pod Identity type will be used for EKS Pod Identity authentication with roleArn as the target account.",
      "type": "string",
      "default": "secret",
      "enum": [
        "secret",
        "sts",
        "pod-identity"
      ]
    },
    "v1AwsCloudClusterConfigEntity": {
      "description": "AWS cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1AwsClusterConfig"
        }
      }
    },
    "v1AwsCloudConfig": {
      "description": "AwsCloudConfig is the Schema for the awscloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1AwsCloudConfigStatus"
        }
      }
    },
    "v1AwsCloudConfigSpec": {
      "description": "AwsCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains AwsCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1AwsClusterConfig"
        },
        "hybridMachinePools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsHybridMachinePool"
          }
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsMachinePoolConfig"
          }
        }
      }
    },
    "v1AwsCloudConfigStatus": {
      "description": "AwsCloudConfigStatus defines the observed state of AwsCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsAMI"
          }
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1AwsCloudCostSpec": {
      "description": "Aws cloud account usage cost payload spec",
      "type": "object",
      "required": [
        "credentials"
      ],
      "properties": {
        "accountId": {
          "description": "AccountId of AWS cloud cost",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "filter": {
          "$ref": "#/definitions/v1AwsCloudCostSpecFilter"
        }
      }
    },
    "v1AwsCloudCostSpecFilter": {
      "description": "Aws cloud account usage cost payload filter. startTime and endTime should be within 12 months range from now.",
      "type": "object",
      "required": [
        "startTime"
      ],
      "properties": {
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "iamUserId": {
          "description": "IAM UserId of AWS account",
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1AwsCloudCostSummary": {
      "description": "AWS cloud account usage cost summary response data",
      "type": "object",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1AwsCloudCostSummaryCloudCost"
        }
      }
    },
    "v1AwsCloudCostSummaryCloudCost": {
      "description": "AWS cloud account usage cost summary of monthlyCosts and totalCost",
      "type": "object",
      "properties": {
        "monthlyCosts": {
          "description": "Monthly cost of AWS cost",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsCloudCostSummaryMonthlyCost"
          }
        },
        "total": {
          "description": "Total cost of AWS cost",
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1AwsCloudCostSummaryMonthlyCost": {
      "type": "object",
      "properties": {
        "amount": {
          "description": "Amount for aws cloud cost",
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "timestamp": {
          "description": "Time duration for aws cloud cost",
          "type": "integer"
        }
      }
    },
    "v1AwsCloudHybridConfigEntity": {
      "description": "AWS cloud hybrid config entity",
      "type": "object",
      "properties": {
        "hybridConfig": {
          "$ref": "#/definitions/v1AwsHybridConfig"
        }
      }
    },
    "v1AwsClusterConfig": {
      "description": "Cluster level configuration for aws cloud and applicable for all the machine pools",
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "bastionDisabled": {
          "description": "Create bastion node option we have earlier supported creation of bastion by default capa seems to favour session manager against bastion node https://github.com/kubernetes-sigs/cluster-api-provider-aws/issues/947",
          "type": "boolean"
        },
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer specifies how API server elb will be configured, this field is optional, not provided, \"\", default =\u003e \"Internet-facing\" \"Internet-facing\" =\u003e \"Internet-facing\" \"internal\" =\u003e \"internal\" For spectro saas setup we require to talk to the apiserver from our cluster so ControlPlaneLoadBalancer should be \"\", not provided or \"Internet-facing\"",
          "type": "string"
        },
        "hybridConfig": {
          "description": "AWS hybrid cluster config",
          "$ref": "#/definitions/v1AwsHybridConfig"
        },
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "vpcId": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      }
    },
    "v1AwsCreditAccountEntity": {
      "type": "object",
      "properties": {
        "creditLimitInDollars": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "creditUsedInDollars": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "loginCredentials": {
          "$ref": "#/definitions/v1AwsLoginCredentials"
        },
        "userCloudAccount": {
          "$ref": "#/definitions/v1AwsUserCloudAccount"
        }
      }
    },
    "v1AwsFindImageRequest": {
      "description": "AWS image name and credentials",
      "type": "object",
      "properties": {
        "amiName": {
          "description": "AWS image ami name",
          "type": "string"
        },
        "awsAccount": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        }
      }
    },
    "v1AwsHybridConfig": {
      "description": "AwsHybridConfig specifies the AWS Hybrid configuration for the cluster",
      "type": "object",
      "properties": {
        "awsVpcCidr": {
          "description": "AWS VPC CIDR is the CIDR of the AWS/EKS cluster's VPC",
          "type": "string"
        },
        "iamRolesAnywhere": {
          "description": "IamRolesAnywhere specifies the IAM Roles Anywhere configuration for the AWS/EKS cluster",
          "$ref": "#/definitions/v1IamRolesAnywhere"
        },
        "remoteNodeCidrs": {
          "description": "RemoteNodeCIDRs specifies the Node CIDRs of all remote nodes",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remotePodCidrs": {
          "description": "RemotePodCIDRs specifies the Pod CIDRs of all remote pods",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "systemsManager": {
          "description": "SystemsManager specifies the Systems Manager configuration for the AWS/EKS cluster",
          "$ref": "#/definitions/v1SystemsManager"
        }
      }
    },
    "v1AwsHybridMachinePool": {
      "description": "Machine pool reference of cloud config of cluster deployed by hybrid cluster",
      "type": "object",
      "properties": {
        "poolCloudType": {
          "$ref": "#/definitions/v1HybridPoolClusterCloudType"
        },
        "poolName": {
          "description": "Machine pool name",
          "type": "string"
        },
        "poolUid": {
          "description": "Machine pool uid",
          "type": "string"
        }
      }
    },
    "v1AwsIamPolicy": {
      "description": "Aws policy",
      "type": "object",
      "properties": {
        "arn": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        }
      }
    },
    "v1AwsImage": {
      "description": "AWS image name and ami",
      "type": "object",
      "properties": {
        "id": {
          "description": "AWS image id",
          "type": "string"
        },
        "name": {
          "description": "AWS image name",
          "type": "string"
        },
        "owner": {
          "description": "AWS image owner id",
          "type": "string"
        }
      }
    },
    "v1AwsInstanceTypes": {
      "description": "List of AWS instance types",
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          }
        }
      }
    },
    "v1AwsKeyPairs": {
      "description": "List of AWS keypairs",
      "type": "object",
      "properties": {
        "keyNames": {
          "description": "Array of Aws Keypair names",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AwsKmsKey": {
      "description": "AWS KMS Key - gives you centralized control over the cryptographic keys used to protect your data.",
      "type": "object",
      "required": [
        "keyId",
        "keyArn"
      ],
      "properties": {
        "keyAlias": {
          "description": "AWS KMS alias",
          "type": "string"
        },
        "keyArn": {
          "description": "AWS KMS arn",
          "type": "string"
        },
        "keyId": {
          "description": "AWS KMS keyid",
          "type": "string"
        }
      }
    },
    "v1AwsKmsKeyEntity": {
      "description": "List of AWS Keys",
      "type": "object",
      "properties": {
        "awsAccountId": {
          "description": "The twelve-digit account ID of the Amazon Web Services account that owns the KMS key",
          "type": "string"
        },
        "enabled": {
          "description": "Specifies whether the KMS key is enabled.",
          "type": "boolean"
        },
        "keyId": {
          "description": "The globally unique identifier for the KMS key",
          "type": "string"
        }
      }
    },
    "v1AwsKmsKeys": {
      "description": "List of AWS Keys",
      "type": "object",
      "required": [
        "kmsKeys"
      ],
      "properties": {
        "kmsKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsKmsKey"
          }
        }
      }
    },
    "v1AwsLaunchTemplate": {
      "description": "AWSLaunchTemplate specifies the launch template to use to create the managed node group",
      "type": "object",
      "properties": {
        "additionalSecurityGroups": {
          "description": "AdditionalSecurityGroups is an array of references to security groups that should be applied to the instances",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AwsResourceReference"
          }
        },
        "ami": {
          "$ref": "#/definitions/v1AwsAmiReference"
        },
        "imageLookupBaseOS": {
          "description": "ImageLookupBaseOS is the name of the base operating system to use for image lookup the AMI is not set",
          "type": "string"
        },
        "imageLookupFormat": {
          "description": "ImageLookupFormat is the AMI naming format to look up the image",
          "type": "string"
        },
        "imageLookupOrg": {
          "description": "ImageLookupOrg is the AWS Organization ID to use for image lookup if AMI is not set",
          "type": "string"
        },
        "rootVolume": {
          "$ref": "#/definitions/v1AwsRootVolume"
        }
      }
    },
    "v1AwsLoginCredentials": {
      "type": "object",
      "properties": {
        "iamUser": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "v1AwsMachine": {
      "description": "AWS cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1AwsMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "additionalSecurityGroups": {
          "description": "Additional Security groups",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsResourceReference"
          }
        },
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacityType": {
          "description": "EC2 instance capacity type",
          "type": "string",
          "default": "on-demand",
          "enum": [
            "on-demand",
            "spot"
          ]
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1
        },
        "spotMarketOptions": {
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.",
          "$ref": "#/definitions/v1SpotMarketOptions"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsSubnetEntity"
          }
        }
      }
    },
    "v1AwsMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalSecurityGroups": {
          "description": "Additional Security groups",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsResourceReference"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "description": "AZs is only used for dynamic placement",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacityType": {
          "description": "EC2 instance capacity type",
          "type": "string",
          "default": "on-demand",
          "enum": [
            "on-demand",
            "spot"
          ]
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "type": "integer",
          "format": "int32"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "spotMarketOptions": {
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.",
          "$ref": "#/definitions/v1SpotMarketOptions"
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1AwsMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AwsMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1AwsMachineSpec": {
      "description": "AWS cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "vpcId",
        "ami"
      ],
      "properties": {
        "additionalSecurityGroups": {
          "description": "Additional Security groups",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsResourceReference"
          }
        },
        "ami": {
          "type": "string"
        },
        "az": {
          "type": "string"
        },
        "dnsName": {
          "type": "string"
        },
        "iamProfile": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsNic"
          }
        },
        "phase": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "v1AwsMachines": {
      "description": "AWS machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AwsMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AwsNic": {
      "description": "AWS network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1AwsPartition": {
      "description": "AWS accounts are scoped to a single partition. Allowed values [aws, aws-us-gov], Default values",
      "type": "string",
      "default": "aws",
      "enum": [
        "aws",
        "aws-us-gov"
      ]
    },
    "v1AwsPodIdentityCredentials": {
      "description": "AWS EKS Pod Identity credentials for role assumption",
      "type": "object",
      "properties": {
        "permissionBoundaryArn": {
          "description": "Optional Permission Boundary ARN to limit the maximum permissions for roles created by Hubble",
          "type": "string"
        },
        "roleArn": {
          "description": "IAM Role ARN for the AWS EKS Pod Identity in cloud account",
          "type": "string"
        }
      }
    },
    "v1AwsPolicies": {
      "type": "object",
      "required": [
        "policies"
      ],
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsIamPolicy"
          }
        }
      }
    },
    "v1AwsPolicyArnsSpec": {
      "description": "Aws policy ARNs spec",
      "type": "object",
      "required": [
        "policyArns",
        "account"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "policyArns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AwsRegion": {
      "description": "AWS region which represents separate geographic area.",
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "AWS offer a regional endpoint that can used to make requests",
          "type": "string"
        },
        "name": {
          "description": "Name of the AWS region",
          "type": "string"
        },
        "optInStatus": {
          "description": "Enable your account to operate in the particular regions",
          "type": "string"
        }
      }
    },
    "v1AwsRegions": {
      "type": "object",
      "required": [
        "regions"
      ],
      "properties": {
        "regions": {
          "description": "List of AWS regions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsRegion"
          }
        }
      }
    },
    "v1AwsResourceFilter": {
      "description": "Filter is a filter used to identify an AWS resource",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the filter. Filter names are case-sensitive",
          "type": "string"
        },
        "values": {
          "description": "Values includes one or more filter values. Filter values are case-sensitive",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AwsResourceReference": {
      "description": "AWSResourceReference is a reference to a specific AWS resource by ID or filters",
      "type": "object",
      "properties": {
        "arn": {
          "description": "ARN of resource",
          "type": "string"
        },
        "filters": {
          "description": "Filters is a set of key/value pairs used to identify a resource",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AwsResourceFilter"
          }
        },
        "id": {
          "description": "ID of resource",
          "type": "string"
        }
      }
    },
    "v1AwsRootVolume": {
      "description": "Volume encapsulates the configuration options for the storage device.",
      "type": "object",
      "properties": {
        "deviceName": {
          "description": "Device name",
          "type": "string"
        },
        "encrypted": {
          "description": "EncryptionKey is the KMS key to use to encrypt the volume. Can be either a KMS key ID or ARN",
          "type": "boolean"
        },
        "encryptionKey": {
          "description": "EncryptionKey is the KMS key to use to encrypt the volume. Can be either a KMS key ID or ARN",
          "type": "string"
        },
        "iops": {
          "description": "IOPS is the number of IOPS requested for the disk. Not applicable to all types",
          "type": "integer",
          "format": "int64"
        },
        "throughput": {
          "description": "Throughput to provision in MiB/s supported for the volume type. Not applicable to all types.",
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "description": "Type is the type of the volume (e.g. gp2, io1, etc...)",
          "type": "string"
        }
      }
    },
    "v1AwsS3BucketCredentials": {
      "description": "AWS S3 Bucket credentials",
      "type": "object",
      "required": [
        "credentials",
        "bucket",
        "region"
      ],
      "properties": {
        "bucket": {
          "description": "Name of AWS S3 bucket",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "folder": {
          "description": "Name of the folder in the specified AWS S3 bucket.",
          "type": "string"
        },
        "region": {
          "description": "Name of the available AWS region.",
          "type": "string"
        }
      }
    },
    "v1AwsSecretSpec": {
      "description": "AWS cloud account which includes access key and secret key in case of 'secret' credentials type. It includes policyARNS, ARN and externalId in case of sts. Partition is a group of AWS Region and Service objects",
      "type": "object",
      "properties": {
        "accountName": {
          "description": "AWS secret accountName; only for aws-iso-b environment",
          "type": "string"
        },
        "agency": {
          "description": "AWS secret agency",
          "type": "string"
        },
        "isCapValidationEnabled": {
          "description": "Flag to rotate the secret region credentials",
          "type": "boolean"
        },
        "mission": {
          "description": "AWS secret mission; only for aws-iso environment",
          "type": "string"
        },
        "namePrefix": {
          "description": "Policy Boundary",
          "type": "string"
        },
        "permissionBoundary": {
          "description": "Role or Policy Prefix",
          "type": "string"
        },
        "policy": {
          "description": "AWS secret policy; JSON string",
          "type": "string"
        },
        "role": {
          "description": "AWS secret role",
          "type": "string"
        },
        "tls": {
          "description": "TLS configuration for the AWS secret",
          "$ref": "#/definitions/v1AwsSecretTlsConfig"
        }
      }
    },
    "v1AwsSecretSpecInputEntity": {
      "description": "AWS Secret spec input entity",
      "properties": {
        "partition": {
          "description": "AWS accounts are scoped to a single partition. Allowed values [aws-iso, aws-iso-b], Default values",
          "type": "string",
          "default": "aws-iso-b",
          "enum": [
            "aws-iso",
            "aws-iso-b"
          ]
        },
        "secretSpec": {
          "description": "AWS secret spec entity",
          "$ref": "#/definitions/v1AwsSecretSpec"
        }
      }
    },
    "v1AwsSecretTlsConfig": {
      "description": "TLS configuration for the AWS secret",
      "type": "object",
      "properties": {
        "ca": {
          "description": "CA certificate",
          "type": "string"
        },
        "cert": {
          "description": "Certificate",
          "type": "string"
        },
        "key": {
          "description": "Key",
          "type": "string"
        }
      }
    },
    "v1AwsSecurityGroups": {
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsSecuritygroup"
          }
        }
      }
    },
    "v1AwsSecuritygroup": {
      "description": "Aws security group",
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        }
      }
    },
    "v1AwsStorageTypes": {
      "type": "object",
      "properties": {
        "storageTypes": {
          "description": "List of AWS storage types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageType"
          }
        }
      }
    },
    "v1AwsStsCredentials": {
      "description": "Aws sts credentials",
      "type": "object",
      "properties": {
        "arn": {
          "description": "Arn for the aws sts credentials in cloud account",
          "type": "string"
        },
        "externalId": {
          "description": "ExternalId for the aws sts credentials in cloud account",
          "type": "string"
        }
      }
    },
    "v1AwsSubnet": {
      "description": "A subnet is a range of IP addresses in a AWS VPC",
      "properties": {
        "az": {
          "description": "Every subnet can only be associated with only one Availability Zone",
          "type": "string"
        },
        "isPrivate": {
          "description": "Is this subnet private",
          "type": "boolean"
        },
        "mapPublicIpOnLaunch": {
          "description": "Indicates whether instances launched in this subnet receive a public IPv4 address.",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "Name of the subnet",
          "type": "string"
        },
        "subnetId": {
          "description": "Id of the subnet",
          "type": "string"
        }
      }
    },
    "v1AwsSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1AwsUserCloudAccount": {
      "properties": {
        "accountId": {
          "type": "string"
        },
        "cloudAccount": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        }
      }
    },
    "v1AwsVolumeSize": {
      "description": "AWS Volume Size entity",
      "type": "object",
      "properties": {
        "sizeGB": {
          "description": "AWS volume size",
          "type": "integer"
        }
      }
    },
    "v1AwsVolumeType": {
      "description": "AWS Volume Type entity",
      "type": "object",
      "properties": {
        "id": {
          "description": "AWS volume type id",
          "type": "string"
        },
        "maxIops": {
          "description": "Iops through put of volume type",
          "type": "string"
        },
        "maxThroughPut": {
          "description": "Max through put of volume type",
          "type": "string"
        },
        "name": {
          "description": "AWS Volume Type Name",
          "type": "string"
        }
      }
    },
    "v1AwsVpc": {
      "description": "A virtual network dedicated to a AWS account",
      "type": "object",
      "required": [
        "vpcId"
      ],
      "properties": {
        "cidrBlock": {
          "type": "string"
        },
        "name": {
          "description": "Name of the virtual network",
          "type": "string"
        },
        "subnets": {
          "description": "List of subnets associated to a AWS VPC",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsSubnet"
          }
        },
        "vpcId": {
          "description": "Id of the virtual network",
          "type": "string"
        }
      }
    },
    "v1AwsVpcs": {
      "description": "List of AWS VPCs",
      "type": "object",
      "required": [
        "vpcs"
      ],
      "properties": {
        "vpcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsVpc"
          }
        }
      }
    },
    "v1AzValidateEntity": {
      "description": "Az validate entity",
      "type": "object",
      "properties": {
        "azs": {
          "description": "Gcp Azs",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "project": {
          "description": "Gcp project",
          "type": "string"
        },
        "region": {
          "description": "Gcp region",
          "type": "string"
        },
        "uid": {
          "description": "Cloud account uid",
          "type": "string"
        }
      }
    },
    "v1AzureAccount": {
      "description": "Azure account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AzureCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1AzureAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AzureAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AzureAvailabilityZone": {
      "description": "Azure availability zone",
      "type": "object",
      "properties": {
        "name": {
          "description": "Azure availability zone name",
          "type": "string"
        }
      }
    },
    "v1AzureCloudAccount": {
      "type": "object",
      "required": [
        "tenantId",
        "clientId",
        "clientSecret"
      ],
      "properties": {
        "azureEnvironment": {
          "description": "Contains configuration for Azure cloud",
          "type": "string",
          "default": "AzurePublicCloud",
          "enum": [
            "AzureChinaCloud",
            "AzurePublicCloud",
            "AzureUSGovernment",
            "AzureUSGovernmentCloud",
            "AzureUSSecretCloud"
          ]
        },
        "clientId": {
          "description": "Client ID(Directory ID) is a unique identifier generated by Azure AD that is tied to an application",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientSecret is the secret associated with Client",
          "type": "string"
        },
        "settings": {
          "description": "Palette internal cloud settings",
          "$ref": "#/definitions/v1CloudAccountSettings"
        },
        "tenantId": {
          "description": "Tenant ID is the ID for the Azure AD tenant that the user belongs to.",
          "type": "string"
        },
        "tenantName": {
          "description": "Tenant ID is the ID for the Azure AD tenant that the user belongs to.",
          "type": "string"
        },
        "tls": {
          "description": "TLS configuration for the Azure secret",
          "$ref": "#/definitions/v1AzureSecretTlsConfig"
        }
      }
    },
    "v1AzureCloudClusterConfigEntity": {
      "description": "Azure cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1AzureClusterConfig"
        }
      }
    },
    "v1AzureCloudConfig": {
      "description": "AzureCloudConfig is the Schema for the azurecloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AzureCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1AzureCloudConfigStatus"
        }
      }
    },
    "v1AzureCloudConfigSpec": {
      "description": "AzureCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains AzureCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1AzureClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureMachinePoolConfig"
          }
        }
      }
    },
    "v1AzureCloudConfigStatus": {
      "description": "AzureCloudConfigStatus defines the observed state of AzureCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "description": "spectroAnsibleProvisioner: should be added only once, subsequent recocile will use the same provisioner SpectroAnsiblePacker bool `json:\"spectroAnsiblePacker,omitempty\"`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "$ref": "#/definitions/v1AzureImage"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        },
        "vhdImage": {
          "$ref": "#/definitions/v1AzureVHDImage"
        }
      }
    },
    "v1AzureClusterConfig": {
      "description": "Cluster level configuration for Azure cloud and applicable for all the machine pools",
      "type": "object",
      "required": [
        "subscriptionId",
        "location",
        "sshKey"
      ],
      "properties": {
        "aadProfile": {
          "description": "AadProfile is Azure Active Directory configuration to integrate with AKS for aad authentication.",
          "$ref": "#/definitions/v1AADProfile"
        },
        "apiServerAccessProfile": {
          "description": "APIServerAccessProfile is the access profile for AKS API server.",
          "$ref": "#/definitions/v1APIServerAccessProfile"
        },
        "containerName": {
          "type": "string"
        },
        "controlPlaneSubnet": {
          "description": "Subnet for Kubernetes control-plane node",
          "$ref": "#/definitions/v1Subnet"
        },
        "enablePrivateCluster": {
          "description": "Deprecated. use apiServerAccessProfile.enablePrivateCluster",
          "type": "boolean"
        },
        "infraLBConfig": {
          "description": "APIServerLB is the configuration for the control-plane load balancer.",
          "$ref": "#/definitions/v1InfraLBConfig"
        },
        "location": {
          "description": "Location is the Azure datacenter location",
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "sshKey": {
          "type": "string"
        },
        "storageAccountName": {
          "type": "string"
        },
        "subscriptionId": {
          "description": "Subscription ID is unique identifier for the subscription used to access Azure services",
          "type": "string"
        },
        "vnetCidrBlock": {
          "type": "string"
        },
        "vnetName": {
          "description": "VNETName is the virtual network in which the cluster is to be provisioned.",
          "type": "string"
        },
        "vnetResourceGroup": {
          "type": "string"
        },
        "workerSubnet": {
          "description": "Subnet for Kubernetes worker node",
          "$ref": "#/definitions/v1Subnet"
        }
      }
    },
    "v1AzureGroup": {
      "description": "Azure group entity",
      "type": "object",
      "properties": {
        "id": {
          "description": "Azure group id",
          "type": "string"
        },
        "name": {
          "description": "Azure group name",
          "type": "string"
        }
      }
    },
    "v1AzureGroups": {
      "description": "List of Azure groups",
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureGroup"
          }
        }
      }
    },
    "v1AzureImage": {
      "description": "Refers to Azure Shared Gallery image",
      "type": "object",
      "properties": {
        "gallery": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscriptionID": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1AzureInstanceTypes": {
      "description": "List of Azure instance types",
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          }
        }
      }
    },
    "v1AzureMachine": {
      "description": "Azure cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AzureMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1AzureMachinePoolCloudConfigEntity": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "isSystemNodePool": {
          "description": "whether this pool is for system node Pool",
          "type": "boolean"
        },
        "osDisk": {
          "$ref": "#/definitions/v1AzureOSDisk"
        }
      }
    },
    "v1AzureMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "isSystemNodePool": {
          "description": "whether this pool is for system node Pool",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "type": "integer",
          "format": "int32"
        },
        "osDisk": {
          "$ref": "#/definitions/v1AzureOSDisk"
        },
        "osType": {
          "type": "string",
          "$ref": "#/definitions/v1OsType"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "spotVMOptions": {
          "description": "SpotVMOptions allows the ability to specify the Machine should use a Spot VM",
          "$ref": "#/definitions/v1SpotVMOptions"
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1AzureMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AzureMachinePoolCloudConfigEntity"
        },
        "managedPoolConfig": {
          "$ref": "#/definitions/v1AzureManagedMachinePoolConfig"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1AzureMachineSpec": {
      "description": "Azure cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "location",
        "osDisk"
      ],
      "properties": {
        "additionalTags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "allocatePublicIP": {
          "type": "boolean"
        },
        "availabilityZone": {
          "$ref": "#/definitions/v1AzureMachineSpecAvailabilityZone"
        },
        "image": {
          "$ref": "#/definitions/v1AzureMachineSpecImage"
        },
        "instanceType": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureNic"
          }
        },
        "osDisk": {
          "$ref": "#/definitions/v1AzureOSDisk"
        },
        "sshPublicKey": {
          "type": "string"
        }
      }
    },
    "v1AzureMachineSpecAvailabilityZone": {
      "description": "Azure Machine Spec Availability zone",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1AzureMachineSpecImage": {
      "description": "Azure Machine Spec Image",
      "type": "object",
      "properties": {
        "gallery": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "offer": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1AzureMachines": {
      "description": "Azure machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AzureMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AzureManagedMachinePoolConfig": {
      "type": "object",
      "properties": {
        "isSystemNodePool": {
          "description": "whether this pool is for system node Pool",
          "type": "boolean",
          "x-omitempty": false
        },
        "osType": {
          "type": "string",
          "$ref": "#/definitions/v1OsType"
        }
      }
    },
    "v1AzureNic": {
      "description": "AWS network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1AzureOSDisk": {
      "type": "object",
      "properties": {
        "diskSizeGB": {
          "type": "integer",
          "format": "int32"
        },
        "managedDisk": {
          "$ref": "#/definitions/v1ManagedDisk"
        },
        "osType": {
          "type": "string",
          "$ref": "#/definitions/v1OsType"
        }
      }
    },
    "v1AzurePrivateDnsZone": {
      "description": "Azure Private DNS zone entity",
      "type": "object",
      "properties": {
        "id": {
          "description": "Fully qualified resource Id for the resource",
          "type": "string"
        },
        "location": {
          "description": "The Azure Region where the resource lives",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource",
          "type": "string"
        }
      }
    },
    "v1AzurePrivateDnsZones": {
      "description": "List of Azure storage accounts",
      "type": "object",
      "properties": {
        "privateDnsZones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzurePrivateDnsZone"
          }
        }
      }
    },
    "v1AzureRegion": {
      "description": "Azure region entity",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Azure region displayname",
          "type": "string"
        },
        "name": {
          "description": "Azure region name",
          "type": "string"
        },
        "zones": {
          "description": "List of zones associated to a particular Azure region",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureAvailabilityZone"
          }
        }
      }
    },
    "v1AzureRegions": {
      "description": "List of Azure regions",
      "type": "object",
      "required": [
        "regions"
      ],
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureRegion"
          }
        }
      }
    },
    "v1AzureResourceGroupList": {
      "description": "List of Azure resource group",
      "type": "object",
      "properties": {
        "resourceGroupList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceGroup"
          }
        }
      }
    },
    "v1AzureSecretTlsConfig": {
      "description": "TLS configuration for the AWS secret",
      "type": "object",
      "properties": {
        "cert": {
          "description": "Certificate is the TLS certificate used to authenticate the Azure secret",
          "type": "string"
        }
      }
    },
    "v1AzureStorageAccountEntity": {
      "description": "Azure Storage Account Entity",
      "type": "object",
      "properties": {
        "storageAccountTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageAccountEntity"
          }
        }
      }
    },
    "v1AzureStorageAccounts": {
      "description": "List of Azure storage accounts",
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageAccount"
          }
        }
      }
    },
    "v1AzureStorageConfig": {
      "description": "Azure storage config object",
      "type": "object",
      "required": [
        "resourceGroup",
        "containerName",
        "storageName",
        "credentials"
      ],
      "properties": {
        "containerName": {
          "description": "Azure container name",
          "type": "string"
        },
        "credentials": {
          "description": "Azure cloud account credentials",
          "$ref": "#/definitions/v1.AzureAccountEntitySpec"
        },
        "resourceGroup": {
          "description": "Azure resource group name, to which the storage account is mapped",
          "type": "string"
        },
        "sku": {
          "description": "Azure sku",
          "type": "string"
        },
        "storageName": {
          "description": "Azure storage name",
          "type": "string"
        }
      }
    },
    "v1AzureStorageContainers": {
      "description": "List of Azure storage containers",
      "type": "object",
      "properties": {
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageContainer"
          }
        }
      }
    },
    "v1AzureStorageTypes": {
      "description": "List of Azure storage types",
      "type": "object",
      "properties": {
        "storageTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageType"
          }
        }
      }
    },
    "v1AzureSubscriptionList": {
      "description": "List of Azure subscription",
      "type": "object",
      "properties": {
        "subscriptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Subscription"
          }
        }
      }
    },
    "v1AzureVHDImage": {
      "description": "Mold always create VHD image for custom image, and this can be use as golden images",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1AzureVhdUrlEntity": {
      "description": "Azure vhd url entity",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the resource",
          "type": "string"
        },
        "url": {
          "description": "The url of the Azure Vhd",
          "type": "string"
        }
      }
    },
    "v1AzureVirtualNetworkList": {
      "description": "List of Azure virtual network",
      "type": "object",
      "properties": {
        "virtualNetworkList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VirtualNetwork"
          }
        }
      }
    },
    "v1AzureZoneEntity": {
      "description": "List of Azure zone",
      "type": "object",
      "properties": {
        "zoneList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ZoneEntity"
          }
        }
      }
    },
    "v1BackupLocationConfig": {
      "description": "Backup location configuration",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1BackupRestoreStatusMeta": {
      "description": "Backup restored status",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "destinationClusterRef": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "restoreState": {
          "type": "string"
        }
      }
    },
    "v1BackupState": {
      "description": "Backup state",
      "properties": {
        "backupTime": {
          "$ref": "#/definitions/v1Time"
        },
        "deleteState": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1BackupStatusConfig": {
      "description": "Backup config",
      "properties": {
        "includeAllDisks": {
          "type": "boolean"
        },
        "includeClusterResourceMode": {
          "$ref": "#/definitions/v1IncludeClusterResourceMode"
        },
        "includeClusterResources": {
          "description": "Deprecated. Use includeClusterResourceMode",
          "type": "boolean"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BackupStatusMeta": {
      "description": "Backup  status meta",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "backupState": {
          "$ref": "#/definitions/v1BackupState"
        },
        "backupedNamespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "expiryDate": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1BasicOciRegistry": {
      "description": "Basic oci registry information",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1BasicOciRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1OciRegistryStatus"
        }
      }
    },
    "v1BasicOciRegistrySpec": {
      "description": "Basic oci registry spec",
      "type": "object",
      "required": [
        "endpoint",
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "baseContentPath": {
          "description": "OCI registry content base path",
          "type": "string"
        },
        "basePath": {
          "description": "OCI registry api base path",
          "type": "string"
        },
        "containsSpectroManifest": {
          "type": "boolean",
          "x-omitempty": false
        },
        "endpoint": {
          "description": "OCI registry endpoint",
          "type": "string"
        },
        "isSyncSupported": {
          "type": "boolean"
        },
        "providerType": {
          "type": "string",
          "default": "helm",
          "enum": [
            "helm",
            "zarf",
            "pack"
          ]
        },
        "registryUid": {
          "description": "Basic oci registry uid",
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1BulkDeleteFailure": {
      "properties": {
        "errMsg": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1BulkDeleteRequest": {
      "required": [
        "uids"
      ],
      "properties": {
        "uids": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BulkDeleteResponse": {
      "properties": {
        "deletedCount": {
          "type": "integer",
          "x-omitempty": false
        },
        "failures": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1BulkDeleteFailure"
          },
          "x-omitempty": false
        },
        "isSucceeded": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1BulkEvents": {
      "description": "Describes a list component events' details",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1Event"
      }
    },
    "v1CPU": {
      "type": "object",
      "properties": {
        "cores": {
          "description": "number of cpu cores",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Cert": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string",
          "x-omitempty": false
        },
        "isCA": {
          "type": "boolean",
          "x-omitempty": false
        },
        "key": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1Certificate": {
      "description": "Certificate details",
      "type": "object",
      "properties": {
        "expiry": {
          "description": "Certificate expiry time",
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CertificateAuthority": {
      "description": "Certificate Authority",
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Certificate"
          }
        },
        "expiry": {
          "description": "Certificate expiry time",
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1Channel": {
      "type": "object",
      "properties": {
        "alertAllUsers": {
          "type": "boolean",
          "x-omitempty": false
        },
        "createdBy": {
          "type": "string"
        },
        "http": {
          "type": "object",
          "properties": {
            "body": {
              "type": "string"
            },
            "headers": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "method": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "identifiers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "$ref": "#/definitions/v1AlertNotificationStatus"
        },
        "type": {
          "type": "string",
          "enum": [
            "email",
            "app",
            "http"
          ]
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1CloudAccountMeta": {
      "description": "Cloud account meta information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1CloudAccountMetadata": {
      "description": "Cloud account metadata summary",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        }
      }
    },
    "v1CloudAccountSettings": {
      "description": "Cloud account settings",
      "type": "object",
      "properties": {
        "disablePropertiesRequest": {
          "description": "Will disable certain properties request to cloud and the input is collected directly from the user",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1CloudAccountStatus": {
      "description": "Status of the account",
      "type": "object",
      "properties": {
        "state": {
          "description": "Cloud account status",
          "type": "string"
        },
        "tokenExpiry": {
          "description": "Token expiry time",
          "$ref": "#/definitions/v1Time"
        },
        "tokenGenerationTime": {
          "description": "Token generation time",
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1CloudAccountSummary": {
      "description": "Cloud account summary",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Cloud account spec summary",
          "type": "object",
          "properties": {
            "accountId": {
              "type": "string"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1CloudAccountUidEntity": {
      "description": "Cloud account uid entity",
      "type": "object",
      "properties": {
        "uid": {
          "description": "Cloud account uid",
          "type": "string"
        }
      }
    },
    "v1CloudAccountsMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudAccountMetadata"
          }
        }
      }
    },
    "v1CloudAccountsPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      }
    },
    "v1CloudAccountsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudAccountSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1CloudCategory": {
      "description": "Cloud category description",
      "type": "string",
      "default": "cloud",
      "enum": [
        "datacenter",
        "cloud",
        "edge"
      ]
    },
    "v1CloudConfigMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "hybridMachinePools": {
          "description": "Hybrid Machine pools meta information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachinePoolMeta"
          }
        },
        "machinePools": {
          "description": "Machine pools meta information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachinePoolMeta"
          }
        },
        "uid": {
          "description": "Cluster's cloud config uid",
          "type": "string"
        }
      }
    },
    "v1CloudCost": {
      "description": "Cloud cost information",
      "type": "object",
      "properties": {
        "compute": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1CloudCostDataPoint": {
      "description": "Cloud cost data point information",
      "type": "object",
      "properties": {
        "compute": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1CloudInstanceRateConfig": {
      "description": "Cloud instance rate config",
      "properties": {
        "computeRateProportion": {
          "type": "number",
          "format": "float"
        },
        "memoryRateProportion": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "v1CloudMachineStatus": {
      "description": "cloud machine status",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1MachineHealth"
        },
        "instanceState": {
          "type": "string",
          "enum": [
            "Pending",
            "Provisioning",
            "Provisioned",
            "Running",
            "Deleting",
            "Deleted",
            "Failed",
            "Unknown"
          ]
        },
        "maintenanceStatus": {
          "$ref": "#/definitions/v1MachineMaintenanceStatus"
        }
      }
    },
    "v1CloudRate": {
      "description": "Cloud estimated rate information",
      "type": "object",
      "properties": {
        "compute": {
          "$ref": "#/definitions/v1ComputeRate"
        },
        "storage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageRate"
          }
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1CloudResourceMetadata": {
      "description": "Cloud resource metadata",
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1InstanceType"
          }
        },
        "storageTypes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1StorageType"
          }
        }
      }
    },
    "v1CloudStackAccount": {
      "description": "CloudStack account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1CloudStackCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1CloudStackAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1CloudStackCloudAccount": {
      "description": "CloudStack cloud account credentials",
      "type": "object",
      "required": [
        "apiUrl",
        "apiKey",
        "secretKey"
      ],
      "properties": {
        "apiKey": {
          "description": "API Key for CloudStack authentication",
          "type": "string"
        },
        "apiUrl": {
          "description": "API URL for CloudStack management server",
          "type": "string"
        },
        "insecure": {
          "description": "Skip SSL certificate verification (default: false)",
          "type": "boolean"
        },
        "secretKey": {
          "description": "Secret Key for CloudStack authentication",
          "type": "string"
        }
      }
    },
    "v1CloudStackCloudClusterConfigEntity": {
      "description": "CloudStack cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1CloudStackClusterConfig"
        }
      }
    },
    "v1CloudStackCloudConfig": {
      "description": "CloudStackCloudConfig is the Schema for the CloudStackcloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1CloudStackCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudStackCloudConfigStatus"
        }
      }
    },
    "v1CloudStackCloudConfigSpec": {
      "description": "CloudStackCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains CloudStackCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1CloudStackClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudStackMachinePoolConfig"
          }
        }
      }
    },
    "v1CloudStackCloudConfigStatus": {
      "description": "CloudStackCloudConfigStatus defines the observed state of CloudStackCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "nodeImage": {
          "type": "string"
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "type": "boolean"
        }
      }
    },
    "v1CloudStackClusterConfig": {
      "description": "Cluster level configuration for CloudStack cloud, same for all machinepools",
      "type": "object",
      "properties": {
        "controlPlaneEndpoint": {
          "description": "Endpoint IP to be used for API server, should only be enabled for static CloudStack network",
          "type": "string"
        },
        "domain": {
          "description": "Domain name for the cluster",
          "type": "string"
        },
        "project": {
          "description": "Project name for the cluster (optional)",
          "type": "string"
        },
        "sshKeyName": {
          "description": "SSH Key name for accessing cluster nodes",
          "type": "string"
        },
        "zones": {
          "description": "Multiple zones for multi-AZ deployments. If only one zone is specified, it will be treated as single-zone deployment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudStackZoneSpec"
          }
        }
      }
    },
    "v1CloudStackDiskOffering": {
      "description": "CloudStack disk offering",
      "type": "object",
      "properties": {
        "id": {
          "description": "Disk offering ID",
          "type": "string"
        },
        "name": {
          "description": "Disk offering name",
          "type": "string"
        }
      }
    },
    "v1CloudStackDiskOfferings": {
      "description": "List of CloudStack disk offerings",
      "type": "object",
      "properties": {
        "diskOfferings": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackDiskOffering"
          }
        }
      }
    },
    "v1CloudStackDomain": {
      "description": "CloudStack domain",
      "type": "object",
      "properties": {
        "id": {
          "description": "Domain ID",
          "type": "string"
        },
        "name": {
          "description": "Domain name",
          "type": "string"
        }
      }
    },
    "v1CloudStackDomains": {
      "description": "List of CloudStack domains",
      "type": "object",
      "properties": {
        "domains": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackDomain"
          }
        }
      }
    },
    "v1CloudStackKeypair": {
      "description": "CloudStack SSH key pair",
      "type": "object",
      "properties": {
        "fingerprint": {
          "description": "SSH key pair fingerprint",
          "type": "string"
        },
        "name": {
          "description": "SSH key pair name",
          "type": "string"
        }
      }
    },
    "v1CloudStackKeypairs": {
      "description": "List of CloudStack SSH key pairs",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackKeypair"
          }
        }
      }
    },
    "v1CloudStackMachine": {
      "description": "CloudStack cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1CloudStackMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1CloudStackMachineConfig": {
      "description": "CloudStack-specific machine configuration",
      "type": "object",
      "required": [
        "template",
        "offering"
      ],
      "properties": {
        "affinityGroupIds": {
          "description": "Affinity group for VM placement (optional)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "description": "Additional details for instance creation",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "diskOffering": {
          "description": "Disk offering name for root disk (optional)",
          "type": "string"
        },
        "instanceConfig": {
          "description": "Instance configuration",
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "networks": {
          "description": "Network configuration",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudStackNetworkConfig"
          }
        },
        "offering": {
          "description": "Service offering (instance type/size) name",
          "type": "string"
        },
        "rootDiskSizeGB": {
          "description": "Root disk size in GB (optional)",
          "type": "integer",
          "format": "int32"
        },
        "template": {
          "description": "Template (VM template/image) name to use for the instances",
          "type": "string"
        }
      }
    },
    "v1CloudStackMachineConfigEntity": {
      "type": "object",
      "required": [
        "instanceType",
        "serviceOffering",
        "template"
      ],
      "properties": {
        "affinityGroupIds": {
          "description": "Affinity group for VM placement (optional)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "azs": {
          "description": "for control plane pool, this will be the failure domains for kcp",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "description": "Additional details for instance creation",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "diskOffering": {
          "$ref": "#/definitions/v1CloudStackResource"
        },
        "instanceType": {
          "$ref": "#/definitions/v1CloudStackResource"
        },
        "networks": {
          "description": "Network configuration",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudStackNetworkConfig"
          }
        },
        "rootDiskSizeGB": {
          "description": "Root disk size in GB",
          "type": "integer",
          "format": "int32"
        },
        "serviceOffering": {
          "$ref": "#/definitions/v1CloudStackResource"
        },
        "template": {
          "$ref": "#/definitions/v1CloudStackResource"
        }
      }
    },
    "v1CloudStackMachineNetwork": {
      "description": "CloudStack network configuration for machine",
      "type": "object",
      "properties": {
        "networkId": {
          "description": "Network ID to use for the machine",
          "type": "string"
        },
        "networkName": {
          "description": "Network name to use for the machine",
          "type": "string"
        },
        "privateIPs": {
          "description": "Private IP addresses for the machine",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CloudStackMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "template",
        "offering"
      ],
      "properties": {
        "affinityGroupIds": {
          "description": "Affinity group for VM placement (optional)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "description": "Additional details for instance creation",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "diskOffering": {
          "description": "Disk offering name for root disk (optional)",
          "type": "string"
        },
        "instanceConfig": {
          "description": "Instance configuration",
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "networks": {
          "description": "Network configuration",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudStackNetworkConfig"
          }
        },
        "offering": {
          "description": "Service offering (instance type/size) name",
          "type": "string"
        },
        "rootDiskSizeGB": {
          "description": "Root disk size in GB (optional)",
          "type": "integer",
          "format": "int32"
        },
        "template": {
          "description": "Template (VM template/image) name to use for the instances",
          "type": "string"
        }
      }
    },
    "v1CloudStackMachinePoolConfig": {
      "description": "Configuration for a CloudStack machine pool",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/v1MachinePoolBaseConfig"
        },
        {
          "$ref": "#/definitions/v1CloudStackMachineConfig"
        }
      ]
    },
    "v1CloudStackMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1CloudStackMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1CloudStackMachineSpec": {
      "description": "CloudStack cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "template",
        "zone"
      ],
      "properties": {
        "diskOffering": {
          "description": "Disk offering ID for additional storage",
          "type": "string"
        },
        "instanceType": {
          "description": "Instance service offering with cpu and memory info",
          "$ref": "#/definitions/v1GenericInstanceType"
        },
        "network": {
          "description": "Network configuration for the machine",
          "$ref": "#/definitions/v1CloudStackMachineNetwork"
        },
        "rootDiskSizeGB": {
          "description": "Root disk size in GB",
          "type": "integer",
          "format": "int32"
        },
        "template": {
          "description": "Template ID to use for the machine",
          "type": "string"
        },
        "zone": {
          "description": "Zone where the machine will be deployed",
          "type": "string"
        }
      }
    },
    "v1CloudStackMachines": {
      "description": "CloudStack machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackMachine"
          }
        }
      }
    },
    "v1CloudStackNetwork": {
      "description": "CloudStack network",
      "type": "object",
      "properties": {
        "id": {
          "description": "Network ID",
          "type": "string"
        },
        "name": {
          "description": "Network name",
          "type": "string"
        }
      }
    },
    "v1CloudStackNetworkConfig": {
      "description": "Network configuration for CloudStack instances",
      "type": "object",
      "required": [
        "network"
      ],
      "properties": {
        "ipAddress": {
          "description": "IP address to assign (optional, for static IP)",
          "type": "string"
        },
        "network": {
          "description": "Network name",
          "type": "string"
        }
      }
    },
    "v1CloudStackNetworkSpec": {
      "description": "Enhanced network configuration for CloudStack",
      "type": "object",
      "properties": {
        "gateway": {
          "description": "Gateway IP address for the network",
          "type": "string"
        },
        "name": {
          "description": "Network name",
          "type": "string"
        },
        "netmask": {
          "description": "Network mask for the network",
          "type": "string"
        },
        "offering": {
          "description": "Network offering name",
          "type": "string"
        },
        "routingMode": {
          "description": "Routing mode for the network",
          "type": "string"
        },
        "type": {
          "description": "Network type: Isolated, Shared, etc.",
          "type": "string"
        },
        "vpc": {
          "description": "VPC configuration (optional, for VPC networks)",
          "$ref": "#/definitions/v1CloudStackVPCSpec"
        }
      }
    },
    "v1CloudStackNetworks": {
      "description": "List of CloudStack networks",
      "type": "object",
      "properties": {
        "networks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackNetwork"
          }
        }
      }
    },
    "v1CloudStackOffering": {
      "description": "CloudStack compute offering",
      "type": "object",
      "properties": {
        "id": {
          "description": "Offering ID",
          "type": "string"
        },
        "name": {
          "description": "Offering name",
          "type": "string"
        }
      }
    },
    "v1CloudStackOfferings": {
      "description": "List of CloudStack compute offerings",
      "type": "object",
      "properties": {
        "offerings": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackOffering"
          }
        }
      }
    },
    "v1CloudStackProject": {
      "description": "CloudStack project",
      "type": "object",
      "properties": {
        "id": {
          "description": "Project ID",
          "type": "string"
        },
        "name": {
          "description": "Project name",
          "type": "string"
        }
      }
    },
    "v1CloudStackProjects": {
      "description": "List of CloudStack projects",
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackProject"
          }
        }
      }
    },
    "v1CloudStackResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CloudStackTemplate": {
      "description": "CloudStack template",
      "type": "object",
      "properties": {
        "id": {
          "description": "Template ID",
          "type": "string"
        },
        "name": {
          "description": "Template name",
          "type": "string"
        }
      }
    },
    "v1CloudStackTemplates": {
      "description": "List of CloudStack templates",
      "type": "object",
      "properties": {
        "templates": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackTemplate"
          }
        }
      }
    },
    "v1CloudStackVPCSpec": {
      "description": "VPC configuration for CloudStack networks",
      "type": "object",
      "properties": {
        "cidr": {
          "description": "CIDR block for the VPC",
          "type": "string"
        },
        "name": {
          "description": "VPC name",
          "type": "string"
        },
        "offering": {
          "description": "VPC offering name",
          "type": "string"
        }
      }
    },
    "v1CloudStackVpc": {
      "description": "CloudStack Vpc",
      "type": "object",
      "properties": {
        "id": {
          "description": "Vpc id",
          "type": "string"
        },
        "name": {
          "description": "Vpc name",
          "type": "string"
        }
      }
    },
    "v1CloudStackVpcs": {
      "description": "List of CloudStack SSH key pairs",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackVpc"
          }
        }
      }
    },
    "v1CloudStackZone": {
      "description": "CloudStack zone",
      "type": "object",
      "properties": {
        "id": {
          "description": "Zone ID",
          "type": "string"
        },
        "name": {
          "description": "Zone name",
          "type": "string"
        }
      }
    },
    "v1CloudStackZoneSpec": {
      "description": "CloudStack zone with its network configuration",
      "type": "object",
      "properties": {
        "name": {
          "description": "Zone name",
          "type": "string"
        },
        "network": {
          "description": "Network configuration specific to this zone",
          "$ref": "#/definitions/v1CloudStackNetworkSpec"
        }
      }
    },
    "v1CloudStackZones": {
      "description": "List of CloudStack zones",
      "type": "object",
      "properties": {
        "zones": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudStackZone"
          }
        }
      }
    },
    "v1CloudType": {
      "type": "string",
      "default": "all",
      "enum": [
        "all",
        "aws",
        "azure",
        "gcp",
        "vsphere",
        "openstack",
        "maas",
        "nested",
        "baremetal",
        "eks",
        "aks",
        "edge",
        "edge-native",
        "generic",
        "gke"
      ]
    },
    "v1CloudWatch": {
      "type": "object",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "group": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "stream": {
          "type": "string"
        }
      }
    },
    "v1ClusterBackup": {
      "description": "Cluster Backup",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterBackupSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterBackupStatus"
        }
      }
    },
    "v1ClusterBackupConfig": {
      "description": "Cluster backup config",
      "properties": {
        "backupLocationName": {
          "type": "string"
        },
        "backupLocationUid": {
          "type": "string"
        },
        "backupName": {
          "type": "string"
        },
        "backupPrefix": {
          "type": "string"
        },
        "durationInHours": {
          "type": "number",
          "format": "int64"
        },
        "includeAllDisks": {
          "type": "boolean"
        },
        "includeClusterResourceMode": {
          "$ref": "#/definitions/v1IncludeClusterResourceMode"
        },
        "includeClusterResources": {
          "description": "Deprecated. Use includeClusterResourceMode",
          "type": "boolean"
        },
        "locationType": {
          "type": "string"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterBackupLocationType": {
      "description": "Cluster backup location type",
      "required": [
        "locationType"
      ],
      "properties": {
        "locationType": {
          "type": "string"
        }
      }
    },
    "v1ClusterBackupSpec": {
      "description": "Cluster Backup Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        }
      }
    },
    "v1ClusterBackupStatus": {
      "description": "Cluster Backup Status",
      "properties": {
        "clusterBackupStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterBackupStatusMeta"
          }
        }
      }
    },
    "v1ClusterBackupStatusMeta": {
      "description": "Cluster Backup Status Meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "backupConfig": {
          "$ref": "#/definitions/v1BackupStatusConfig"
        },
        "backupLocationConfig": {
          "$ref": "#/definitions/v1BackupLocationConfig"
        },
        "backupRequestUid": {
          "type": "string"
        },
        "backupStatusMeta": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BackupStatusMeta"
          }
        },
        "restoreStatusMeta": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BackupRestoreStatusMeta"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterComplianceOnDemandConfig": {
      "description": "Cluster compliance scan on demand configuration",
      "properties": {
        "kubeBench": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeBenchConfig"
        },
        "kubeHunter": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeHunterConfig"
        },
        "sonobuoy": {
          "$ref": "#/definitions/v1ClusterComplianceScanSonobuoyConfig"
        },
        "syft": {
          "$ref": "#/definitions/v1ClusterComplianceScanSyftConfig"
        }
      }
    },
    "v1ClusterComplianceScan": {
      "description": "Cluster Compliance Scan",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanSpec"
        }
      }
    },
    "v1ClusterComplianceScanKubeBenchConfig": {
      "description": "Cluster compliance scan config for kube bench driver",
      "properties": {
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanKubeBenchScheduleConfig": {
      "description": "Cluster compliance scan schedule config for kube bench driver",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterComplianceScanKubeHunterConfig": {
      "description": "Cluster compliance scan config for kube hunter driver",
      "properties": {
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanKubeHunterScheduleConfig": {
      "description": "Cluster compliance scan schedule config for kube hunter driver",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterComplianceScanLogSpec": {
      "description": "Cluster compliance scan logs spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "driverType": {
          "type": "string"
        }
      }
    },
    "v1ClusterComplianceScanLogs": {
      "description": "Cluster compliance scan Logs",
      "properties": {
        "kubeBenchLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogKubeBench"
          }
        },
        "kubeHunterLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogKubeHunter"
          }
        },
        "sonobuoyLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogSonobuoy"
          }
        },
        "syftLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogSyft"
          }
        }
      }
    },
    "v1ClusterComplianceScanSonobuoyConfig": {
      "description": "Cluster compliance scan config for sonobuoy driver",
      "properties": {
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanSonobuoyScheduleConfig": {
      "description": "Cluster compliance scan schedule config for sonobuoy driver",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterComplianceScanSpec": {
      "description": "Cluster compliance scan Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "driverSpec": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ComplianceScanDriverSpec"
          }
        }
      }
    },
    "v1ClusterComplianceScanSyftConfig": {
      "description": "Cluster compliance scan config for syft driver",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1ClusterComplianceScanSyftDriverConfig"
        },
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanSyftDriverConfig": {
      "description": "Cluster compliance scan specification",
      "properties": {
        "format": {
          "type": "string",
          "enum": [
            "cyclonedx-json",
            "github-json",
            "spdx-json",
            "syft-json"
          ]
        },
        "labelSelector": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "namespace": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        },
        "scope": {
          "type": "string",
          "enum": [
            "cluster",
            "namespace",
            "label-selector",
            "pod"
          ]
        }
      }
    },
    "v1ClusterComplianceScheduleConfig": {
      "description": "Cluster compliance scan schedule configuration",
      "properties": {
        "kubeBench": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeBenchScheduleConfig"
        },
        "kubeHunter": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeHunterScheduleConfig"
        },
        "sonobuoy": {
          "$ref": "#/definitions/v1ClusterComplianceScanSonobuoyScheduleConfig"
        }
      }
    },
    "v1ClusterCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ClusterConfig": {
      "type": "object",
      "properties": {
        "clusterMetaAttribute": {
          "description": "ClusterMetaAttribute contains additional cluster metadata information.",
          "type": "string"
        },
        "clusterRbac": {
          "description": "Deprecated. Use clusterResources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        },
        "clusterResources": {
          "description": "ClusterResources defines the managment of namespace resource allocations, role bindings.",
          "$ref": "#/definitions/v1ClusterResources"
        },
        "controlPlaneHealthCheckTimeout": {
          "description": "ControlPlaneHealthCheckTimeout is the timeout to check for ready state of the control plane nodes. If the node is not ready within the time out set, the node will be deleted and a new node will be launched.",
          "type": "string"
        },
        "hostClusterConfig": {
          "description": "HostClusterConfiguration defines the configuration of host clusters, where virtual clusters be deployed",
          "$ref": "#/definitions/v1HostClusterConfig"
        },
        "hybridClusterConfig": {
          "description": "HybridClusterConfiguration defines the configuration of hybrid clusters and clusters deployed through hybrid clusters",
          "$ref": "#/definitions/v1HybridClusterConfig"
        },
        "lifecycleConfig": {
          "$ref": "#/definitions/v1LifecycleConfig"
        },
        "machineHealthConfig": {
          "description": "MachineHealthCheckConfig defines the healthcheck timeouts for the node. The timeouts are configured by the user to overide the default healthchecks.",
          "$ref": "#/definitions/v1MachineHealthCheckConfig"
        },
        "machineManagementConfig": {
          "description": "MachineManagementConfig defines the management configurations for the node. Patching OS security updates etc can be configured by user.",
          "$ref": "#/definitions/v1MachineManagementConfig"
        },
        "updateWorkerPoolsInParallel": {
          "description": "UpdateWorkerPoolsInParallel is used to decide if the update of workerpools happen in parallel. When this flag is false, the workerpools are updated sequentially.",
          "type": "boolean"
        }
      }
    },
    "v1ClusterConfigEntity": {
      "type": "object",
      "properties": {
        "clusterMetaAttribute": {
          "description": "ClusterMetaAttribute can be used to set additional cluster metadata information.",
          "type": "string"
        },
        "controlPlaneHealthCheckTimeout": {
          "type": "string"
        },
        "hostClusterConfig": {
          "$ref": "#/definitions/v1HostClusterConfig"
        },
        "lifecycleConfig": {
          "$ref": "#/definitions/v1LifecycleConfig"
        },
        "location": {
          "$ref": "#/definitions/v1ClusterLocation"
        },
        "machineManagementConfig": {
          "$ref": "#/definitions/v1MachineManagementConfig"
        },
        "resources": {
          "$ref": "#/definitions/v1ClusterResourcesEntity"
        },
        "updateWorkerPoolsInParallel": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterConfigResponse": {
      "type": "object",
      "properties": {
        "hostClusterConfig": {
          "description": "HostClusterConfig defines the configuration entity of host clusters config entity",
          "$ref": "#/definitions/v1HostClusterConfigResponse"
        }
      }
    },
    "v1ClusterDefinitionEntity": {
      "description": "Cluster definition entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterDefinitionSpecEntity"
        }
      }
    },
    "v1ClusterDefinitionProfileEntity": {
      "description": "Cluster definition profile entity",
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "packs": {
          "description": "Cluster profile packs array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackValuesEntity"
          }
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        }
      }
    },
    "v1ClusterDefinitionSpecEntity": {
      "description": "Cluster definition spec entity",
      "type": "object",
      "required": [
        "profiles",
        "cloudType"
      ],
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "profiles": {
          "description": "Cluster definition profiles",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterDefinitionProfileEntity"
          }
        }
      }
    },
    "v1ClusterEdgeInstallerConfig": {
      "properties": {
        "installerDownloadLinks": {
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1ClusterFeatureActor": {
      "description": "Compliance Scan actor",
      "properties": {
        "actorType": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterFeatureSchedule": {
      "description": "Cluster feature schedule",
      "properties": {
        "scheduledRunTime": {
          "type": "string"
        }
      }
    },
    "v1ClusterFips": {
      "properties": {
        "mode": {
          "$ref": "#/definitions/v1ClusterFipsMode"
        }
      }
    },
    "v1ClusterFipsMode": {
      "type": "string",
      "default": "none",
      "enum": [
        "full",
        "none",
        "partial",
        "unknown"
      ]
    },
    "v1ClusterGroup": {
      "description": "Cluster group information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterGroupSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterGroupStatus"
        }
      }
    },
    "v1ClusterGroupClusterRef": {
      "description": "Cluster group cluster reference",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1ClusterGroupClustersConfig": {
      "description": "Clusters config of cluster group",
      "properties": {
        "endpointType": {
          "description": "Host cluster endpoint type",
          "type": "string",
          "enum": [
            "Ingress",
            "LoadBalancer"
          ]
        },
        "hostClustersConfig": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterGroupHostClusterConfig"
          }
        },
        "kubernetesDistroType": {
          "$ref": "#/definitions/v1ClusterKubernetesDistroType"
        },
        "limitConfig": {
          "$ref": "#/definitions/v1ClusterGroupLimitConfig"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "v1ClusterGroupEntity": {
      "description": "Cluster group information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterGroupSpecEntity"
        }
      }
    },
    "v1ClusterGroupHostClusterConfig": {
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "endpointConfig": {
          "description": "host cluster endpoint configuration",
          "$ref": "#/definitions/v1HostClusterEndpointConfig"
        }
      }
    },
    "v1ClusterGroupHostClusterEntity": {
      "description": "Clusters and clusters config of cluster group",
      "properties": {
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterGroupClusterRef"
          }
        },
        "clustersConfig": {
          "$ref": "#/definitions/v1ClusterGroupClustersConfig"
        }
      }
    },
    "v1ClusterGroupLimitConfig": {
      "description": "Cluster group limit config",
      "properties": {
        "cpu": {
          "description": "Deprecated. Use field cpuMilliCore",
          "type": "integer",
          "format": "int32"
        },
        "cpuMilliCore": {
          "description": "CPU in milli cores",
          "type": "integer",
          "format": "int32"
        },
        "memory": {
          "description": "Deprecated. Use field memoryMiB",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "Memory in MiB",
          "type": "integer",
          "format": "int32"
        },
        "overSubscription": {
          "description": "Over subscription percentage",
          "type": "integer",
          "format": "int32"
        },
        "storageGiB": {
          "description": "Storage in GiB",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterGroupResource": {
      "description": "Cluster group resource allocated and usage information",
      "properties": {
        "allocated": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "used": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterGroupSpec": {
      "description": "Cluster group specifications",
      "properties": {
        "clusterProfileTemplates": {
          "description": "ClusterProfileTemplate is a copy of the draft version or latest published version of the clusterprofileSpec. It consists of list of add on profiles at a cluster group level which will be enforced on all virtual cluster. ClusterProfileTemplate will be updated from the clusterprofile pointed by ClusterProfileRef",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          }
        },
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterGroupClusterRef"
          }
        },
        "clustersConfig": {
          "$ref": "#/definitions/v1ClusterGroupClustersConfig"
        },
        "type": {
          "type": "string",
          "enum": [
            "hostCluster"
          ]
        }
      }
    },
    "v1ClusterGroupSpecEntity": {
      "description": "Cluster group specifications request entity",
      "properties": {
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterGroupClusterRef"
          }
        },
        "clustersConfig": {
          "$ref": "#/definitions/v1ClusterGroupClustersConfig"
        },
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "hostCluster"
          ]
        }
      }
    },
    "v1ClusterGroupStatus": {
      "description": "Cluster group status",
      "properties": {
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterGroupSummary": {
      "description": "Cluster group summay",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterGroupSummarySpec"
        }
      }
    },
    "v1ClusterGroupSummarySpec": {
      "description": "Cluster group summay spec",
      "properties": {
        "clusterProfileTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
          }
        },
        "cpu": {
          "description": "Deprecated",
          "$ref": "#/definitions/v1ClusterGroupResource"
        },
        "endpointType": {
          "type": "string",
          "enum": [
            "Ingress",
            "LoadBalancer"
          ]
        },
        "hostClusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ObjectResReference"
          }
        },
        "hostClustersCount": {
          "type": "integer",
          "x-omitempty": false
        },
        "kubernetesDistroType": {
          "$ref": "#/definitions/v1ClusterKubernetesDistroType"
        },
        "memory": {
          "description": "Deprecated",
          "$ref": "#/definitions/v1ClusterGroupResource"
        },
        "scope": {
          "type": "string"
        },
        "virtualClustersCount": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterGroupsDeveloperCreditUsage": {
      "description": "Cluster group resource allocated and usage information",
      "properties": {
        "allocatedCredit": {
          "$ref": "#/definitions/v1DeveloperCredit"
        },
        "usedCredit": {
          "$ref": "#/definitions/v1DeveloperCredit"
        }
      }
    },
    "v1ClusterGroupsHostClusterMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ObjectScopeEntity"
          }
        }
      }
    },
    "v1ClusterGroupsHostClusterSummary": {
      "type": "object",
      "required": [
        "summaries"
      ],
      "properties": {
        "summaries": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterGroupSummary"
          }
        }
      }
    },
    "v1ClusterHelmChart": {
      "description": "Cluster helm chart metadata",
      "properties": {
        "localName": {
          "type": "string"
        },
        "matchedRegistries": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterHelmRegistry"
          }
        },
        "name": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ClusterHelmCharts": {
      "description": "Cluster helm charts metadata",
      "properties": {
        "charts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterHelmChart"
          }
        }
      }
    },
    "v1ClusterHelmRegistry": {
      "description": "Cluster helm registry information",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterHybridSettingsEntity": {
      "properties": {
        "enable": {
          "description": "Property which is used to enable a cluster to perform hybrid operations",
          "type": "boolean"
        }
      }
    },
    "v1ClusterImport": {
      "type": "object",
      "properties": {
        "importLink": {
          "description": "import link to download and install ally-lite, palette-lite",
          "type": "string"
        },
        "isBrownfield": {
          "description": "Deprecated. Use the 'spec.clusterType'",
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "description": "cluster import status",
          "type": "string"
        }
      }
    },
    "v1ClusterKubeBenchLogStatus": {
      "description": "Cluster compliance scan KubeBench Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "message": {
          "type": "string"
        },
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeBenchReport"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterKubeHunterLogStatus": {
      "description": "Cluster compliance scan KubeHunter Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "message": {
          "type": "string"
        },
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeHunterReport"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterKubernetesDistroType": {
      "type": "string",
      "default": "k3s",
      "enum": [
        "k3s",
        "cncf_k8s",
        "vcluster-generic"
      ]
    },
    "v1ClusterLocation": {
      "description": "Cluster location information",
      "type": "object",
      "properties": {
        "countryCode": {
          "description": "country code for cluster location",
          "type": "string"
        },
        "countryName": {
          "description": "country name for cluster location",
          "type": "string"
        },
        "geoLoc": {
          "$ref": "#/definitions/v1GeolocationLatlong"
        },
        "regionCode": {
          "description": "region code for cluster location",
          "type": "string"
        },
        "regionName": {
          "description": "region name for cluster location",
          "type": "string"
        }
      }
    },
    "v1ClusterLogFetcher": {
      "description": "Cluster Log Fetcher",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterLogFetcherSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterLogFetcherStatus"
        }
      }
    },
    "v1ClusterLogFetcherK8sRequest": {
      "description": "Cluster Log Fetcher K8s",
      "properties": {
        "labelSelector": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ClusterLogFetcherNodeRequest": {
      "description": "Cluster Log Fetcher Node Request",
      "properties": {
        "logs": {
          "description": "Array of logs",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ClusterLogFetcherRequest": {
      "description": "Cluster Log Fetcher Request",
      "properties": {
        "duration": {
          "description": "Duration for which log is requested",
          "type": "integer",
          "format": "int64",
          "default": 10
        },
        "k8s": {
          "$ref": "#/definitions/v1ClusterLogFetcherK8sRequest"
        },
        "mode": {
          "description": "Accepted Values - [\"cluster\", \"app\"]. if \"app\" then logs will be fetched from the virtual cluster",
          "type": "string",
          "default": "cluster",
          "enum": [
            "cluster",
            "app"
          ]
        },
        "noOfLines": {
          "description": "No of lines of logs requested",
          "type": "integer",
          "format": "int64",
          "default": 1000
        },
        "node": {
          "$ref": "#/definitions/v1ClusterLogFetcherNodeRequest"
        }
      }
    },
    "v1ClusterLogFetcherSpec": {
      "description": "Cluster Log Fetcher Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "log": {
          "type": "string"
        }
      }
    },
    "v1ClusterLogFetcherStatus": {
      "description": "Cluster Log Fetcher Status",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterManifest": {
      "description": "Cluster manifest information",
      "properties": {
        "content": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ClusterManifests": {
      "description": "Cluster manifests information",
      "properties": {
        "manifests": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterManifest"
          }
        }
      }
    },
    "v1ClusterMetaAttributeEntity": {
      "description": "Cluster additional metadata entity",
      "type": "object",
      "properties": {
        "clusterMetaAttribute": {
          "type": "string"
        }
      }
    },
    "v1ClusterMetaSpecLocation": {
      "description": "Cluster location information",
      "type": "object",
      "properties": {
        "coordinates": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float64"
          }
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "regionCode": {
          "type": "string"
        },
        "regionName": {
          "type": "string"
        }
      }
    },
    "v1ClusterMetaStatusCost": {
      "description": "Cluster meta Cost information",
      "type": "object",
      "properties": {
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterMetaStatusHealth": {
      "description": "Cluster meta health information",
      "type": "object",
      "properties": {
        "isHeartBeatFailed": {
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterMetaStatusUpdates": {
      "description": "Cluster meta updates information",
      "type": "object",
      "properties": {
        "isUpdatesPending": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterNamespace": {
      "description": "Cluster's namespace",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "pvcCount": {
          "type": "number",
          "format": "int32"
        }
      }
    },
    "v1ClusterNamespaceResource": {
      "description": "Cluster Namespace resource definition",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterNamespaceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterNamespaceStatus"
        }
      }
    },
    "v1ClusterNamespaceResourceAllocation": {
      "description": "Cluster namespace resource allocation",
      "properties": {
        "cpuCores": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "gpuConfig": {
          "$ref": "#/definitions/v1GpuConfig"
        },
        "memoryMiB": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        }
      }
    },
    "v1ClusterNamespaceResourceInputEntity": {
      "description": "Cluster Namespace resource definition",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaUpdateEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterNamespaceSpec"
        }
      }
    },
    "v1ClusterNamespaceResources": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterNamespaceResource"
          }
        }
      }
    },
    "v1ClusterNamespaceResourcesUpdateEntity": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterNamespaceResourceInputEntity"
          }
        }
      }
    },
    "v1ClusterNamespaceSpec": {
      "description": "Cluster namespace spec",
      "properties": {
        "isRegex": {
          "type": "boolean",
          "x-omitempty": false
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "resourceAllocation": {
          "$ref": "#/definitions/v1ClusterNamespaceResourceAllocation"
        }
      }
    },
    "v1ClusterNamespaceStatus": {
      "description": "Cluster namespace status",
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterResourceError"
          }
        }
      }
    },
    "v1ClusterNamespaces": {
      "description": "Cluster's available namespaces",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterNamespace"
          }
        }
      }
    },
    "v1ClusterNotificationStatus": {
      "description": "Cluster notifications status",
      "properties": {
        "isAvailable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isTemplateVariableResolutionPending": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterNotificationUpdateEntity": {
      "description": "Cluster input for notification update",
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfileNotificationUpdateEntity"
          }
        },
        "spcApplySettings": {
          "$ref": "#/definitions/v1SpcApplySettings"
        }
      }
    },
    "v1ClusterPackManifestStatus": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1ClusterCondition"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterPackStatus": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1ClusterCondition"
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterPackManifestStatus"
          }
        },
        "name": {
          "type": "string"
        },
        "profileUid": {
          "type": "string"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ClusterProfile": {
      "description": "ClusterProfile is the Schema for the clusterprofiles API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterProfileSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterProfileStatus"
        }
      }
    },
    "v1ClusterProfileCloneEntity": {
      "description": "Cluster profile clone request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterProfileCloneMetaInputEntity"
        }
      }
    },
    "v1ClusterProfileCloneMetaInputEntity": {
      "description": "Cluster profile clone metadata",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Cloned cluster profile name",
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/v1ClusterProfileCloneTarget"
        },
        "version": {
          "description": "Cloned cluster profile version",
          "type": "string"
        }
      }
    },
    "v1ClusterProfileCloneTarget": {
      "description": "Cluster profile clone meta input entity",
      "type": "object",
      "required": [
        "scope"
      ],
      "properties": {
        "projectUid": {
          "description": "Cloned cluster profile project uid",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/v1Scope"
        }
      }
    },
    "v1ClusterProfileEntity": {
      "description": "Cluster profile request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "template": {
              "$ref": "#/definitions/v1ClusterProfileTemplateDraft"
            },
            "variables": {
              "description": "List of unique variable fields defined for a cluster profile with schema constraints",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1Variable"
              }
            },
            "version": {
              "description": "Cluster profile version",
              "type": "string"
            }
          }
        }
      }
    },
    "v1ClusterProfileFilterSpec": {
      "description": "Cluster profile filter spec",
      "properties": {
        "environment": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "fips": {
          "$ref": "#/definitions/v1ClusterFipsMode"
        },
        "profileName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "profileType": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProfileType"
          }
        },
        "resourceType": {
          "$ref": "#/definitions/v1ClusterProfileResourceType"
        },
        "scope": {
          "$ref": "#/definitions/v1ClusterProfileScope"
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        },
        "version": {
          "$ref": "#/definitions/v1FilterVersionString"
        }
      }
    },
    "v1ClusterProfileFips": {
      "description": "Cluster profile fips compliance status",
      "properties": {
        "mode": {
          "$ref": "#/definitions/v1ClusterFipsMode"
        }
      }
    },
    "v1ClusterProfileImportEntity": {
      "description": "Cluster profile import request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterProfileMetadataImportEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterProfileSpecImportEntity"
        }
      }
    },
    "v1ClusterProfileMetadata": {
      "description": "Cluster profile filter spec",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "spec": {
          "properties": {
            "cloudType": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1ClusterProfileMetadataImportEntity": {
      "description": "Cluster profile import metadata",
      "type": "object",
      "properties": {
        "description": {
          "description": "Cluster profile description",
          "type": "string"
        },
        "labels": {
          "description": "Cluster profile labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Cluster profile name",
          "type": "string"
        }
      }
    },
    "v1ClusterProfileNotificationUpdateEntity": {
      "description": "Cluster profile notification update request payload",
      "type": "object",
      "properties": {
        "packs": {
          "description": "Cluster profile packs array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackManifestUpdateEntity"
          }
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        }
      }
    },
    "v1ClusterProfilePackConfigList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Cluster profile packs array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackConfig"
          }
        }
      }
    },
    "v1ClusterProfilePackManifests": {
      "description": "Cluster profile pack manifests",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackManifestsSpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackSummaryStatus"
        }
      }
    },
    "v1ClusterProfilePackSummary": {
      "description": "Cluster profile packs summary about the deprecated, disabled, deleted packs count",
      "type": "object",
      "properties": {
        "deleted": {
          "description": "Total count of deleted packs in a cluster profile",
          "type": "number",
          "x-omitempty": false
        },
        "deprecated": {
          "description": "Total count of deprecated packs in a cluster profile",
          "type": "number",
          "x-omitempty": false
        },
        "disabled": {
          "description": "Total count of disabled packs in a cluster profile",
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterProfilePacksEntities": {
      "description": "List of cluster profile packs",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Cluster profile packs array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfilePacksEntity"
          }
        }
      }
    },
    "v1ClusterProfilePacksEntity": {
      "description": "Cluster profile packs object",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackSummaryStatus"
        }
      }
    },
    "v1ClusterProfilePacksManifests": {
      "description": "Cluster profile pack manifests",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "packs": {
              "description": "Cluster profile packs array",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1ClusterProfilePackManifests"
              }
            }
          }
        }
      }
    },
    "v1ClusterProfileResourceType": {
      "description": "Filter cluster profiles by target resource type - 'spectrocluster' for profiles suitable to launch clusters, 'clustertemplate' for profiles suitable to create/edit cluster template",
      "type": "string",
      "enum": [
        "spectrocluster",
        "clustertemplate"
      ]
    },
    "v1ClusterProfileScope": {
      "type": "string",
      "enum": [
        "system",
        "tenant",
        "project"
      ]
    },
    "v1ClusterProfileSortFields": {
      "type": "string",
      "enum": [
        "profileName",
        "environment",
        "profileType",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "x-nullable": true
    },
    "v1ClusterProfileSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1ClusterProfileSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1ClusterProfileSpec": {
      "description": "ClusterProfileTemplate can be in draft mode, or published mode User only see the latest published template, and (or) the draft template User can apply either the draft version or the latest published version to a cluster when user create a draft version, just copy the Published template, increment the version, and keep changing the draft template without increment the draft version when user publish a draft, the version is fixed, and won't be able to make any modification on published template For each clusterprofile that has a published version, there will be a ClusterProfileArchive automatically created when user publish a draft, the published version will also be copied over to the corresponding ClusterProfileArchive it is just in case in the future for whatever reason we may want to expose earlier versions",
      "type": "object",
      "properties": {
        "draft": {
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "published": {
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "version": {
          "type": "string"
        },
        "versions": {
          "description": "Cluster profile's list of all the versions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileVersion"
          }
        }
      }
    },
    "v1ClusterProfileSpecEntity": {
      "description": "Cluster profile update spec",
      "type": "object",
      "properties": {
        "version": {
          "description": "Cluster profile version",
          "type": "string"
        }
      }
    },
    "v1ClusterProfileSpecImportEntity": {
      "description": "Cluster profile import spec",
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/v1ClusterProfileTemplateImportEntity"
        },
        "variables": {
          "description": "List of unique variable fields defined for a cluster profile with schema constraints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Variable"
          }
        },
        "version": {
          "description": "Cluster profile version",
          "type": "string"
        }
      }
    },
    "v1ClusterProfileStatus": {
      "description": "ClusterProfileStatus defines the observed state of ClusterProfile",
      "type": "object",
      "properties": {
        "hasUserMacros": {
          "description": "If it is true then profile pack values has a reference to user defined macros",
          "type": "boolean",
          "x-omitempty": false
        },
        "inUseClusterTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ProjectResourceReference"
          }
        },
        "inUseClusterUids": {
          "description": "Deprecated. Use inUseClusters",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inUseClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectResReference"
          }
        },
        "isPublished": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterProfileStatusSummary": {
      "description": "ClusterProfileStatusSummary defines the observed state of ClusterProfile",
      "type": "object",
      "properties": {
        "fips": {
          "$ref": "#/definitions/v1ClusterProfileFips"
        },
        "inUseClusterTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          }
        },
        "inUseClusterUids": {
          "description": "Deprecated. Use inUseClusters",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inUseClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          }
        },
        "isPublished": {
          "type": "boolean",
          "x-omitempty": false
        },
        "pack": {
          "$ref": "#/definitions/v1ClusterProfilePackSummary"
        }
      }
    },
    "v1ClusterProfileSummary": {
      "description": "Cluster profile summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Cluster profile spec summary",
          "type": "object",
          "properties": {
            "draft": {
              "$ref": "#/definitions/v1ClusterProfileTemplateSummary"
            },
            "published": {
              "$ref": "#/definitions/v1ClusterProfileTemplateSummary"
            },
            "version": {
              "description": "Cluster profile's latest version",
              "type": "string"
            },
            "versions": {
              "description": "Cluster profile's list of all the versions",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ClusterProfileVersion"
              }
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1ClusterProfileStatusSummary"
        }
      }
    },
    "v1ClusterProfileTemplate": {
      "description": "ClusterProfileTemplate contains details of a clusterprofile definition",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packServerRefs": {
          "description": "PackServerRefs is only used on Hubble side it is reference to pack registry servers which PackRef belongs to in hubble, pack server is a top level object, so use a reference to point to it packs within a clusterprofile can come from different pack servers, so this is an array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "packServerSecret": {
          "description": "This secret is used only on Palette side use case is similar  to k8s image pull secret this single secret internally should contains all the pack servers in PackServerRefs if empty, means no credential is needed to access the pack server For spectro saas, Ally will set this field before pass to palette",
          "type": "string"
        },
        "packs": {
          "description": "Packs definitions here are final definitions. If ClonedFrom and ParamsOverwrite is present, then Packs are the final merge result of ClonedFrom and ParamsOverwrite So orchestration engine will just take the Packs and do the work, no need to worry about parameters merge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRef"
          }
        },
        "profileVersion": {
          "description": "version start from 1.0.0, matching the index of ClusterProfileSpec.Versions[] will be used by clusterSpec to identify which version is applied to the cluster",
          "type": "string"
        },
        "relatedObject": {
          "description": "RelatedObject refers to the type of object(clustergroup, cluster or edgeHost) the cluster profile is associated with",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "description": "Deprecated. Use profileVersion",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterProfileTemplateDraft": {
      "description": "Cluster profile template spec",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "packs": {
          "description": "Cluster profile packs array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackManifestEntity"
          }
        },
        "type": {
          "$ref": "#/definitions/v1ProfileType"
        }
      }
    },
    "v1ClusterProfileTemplateImportEntity": {
      "description": "Cluster profile import template",
      "type": "object",
      "properties": {
        "cloudType": {
          "description": "Cluster profile cloud type",
          "type": "string"
        },
        "packs": {
          "description": "Cluster profile packs array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackImportEntity"
          }
        },
        "type": {
          "description": "Cluster profile type [ \"cluster\", \"infra\", \"add-on\", \"system\" ]",
          "type": "string"
        }
      }
    },
    "v1ClusterProfileTemplateMeta": {
      "description": "Cluster profile template meta information",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "name": {
          "description": "Cluster profile name",
          "type": "string"
        },
        "packs": {
          "description": "Cluster profile packs array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRef"
          }
        },
        "scope": {
          "description": "scope or context(system, tenant or project)",
          "type": "string"
        },
        "type": {
          "description": "Cluster profile type [ \"cluster\", \"infra\", \"add-on\", \"system\" ]",
          "type": "string"
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterProfileTemplateSummary": {
      "description": "Cluster profile template summary",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRefSummary"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ClusterProfileTemplateUpdate": {
      "description": "Cluster profile template update spec",
      "type": "object",
      "properties": {
        "packs": {
          "description": "Cluster profile packs array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackManifestUpdateEntity"
          }
        },
        "type": {
          "$ref": "#/definitions/v1ProfileType"
        }
      }
    },
    "v1ClusterProfileUpdateEntity": {
      "description": "Cluster profile update request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Cluster profile update spec",
          "type": "object",
          "properties": {
            "template": {
              "$ref": "#/definitions/v1ClusterProfileTemplateUpdate"
            },
            "version": {
              "description": "Cluster profile version",
              "type": "string"
            }
          }
        }
      }
    },
    "v1ClusterProfileValidatorResponse": {
      "description": "Cluster profile validator response",
      "type": "object",
      "properties": {
        "packs": {
          "$ref": "#/definitions/v1ConstraintValidatorResponse"
        }
      }
    },
    "v1ClusterProfileVersion": {
      "description": "Cluster profile with version",
      "properties": {
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ClusterProfilesFilterSpec": {
      "description": "Spectro cluster filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ClusterProfileFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfileSortSpec"
          }
        }
      }
    },
    "v1ClusterProfilesMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfileMetadata"
          }
        }
      }
    },
    "v1ClusterProfilesSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfileSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1ClusterProxySpec": {
      "description": "cluster proxy config spec",
      "type": "object",
      "properties": {
        "caContainerMountPath": {
          "description": "Location to mount Proxy CA cert inside container",
          "type": "string"
        },
        "caHostPath": {
          "description": "Location for Proxy CA cert on host nodes",
          "type": "string"
        },
        "httpProxy": {
          "description": "URL for HTTP requests unless overridden by NoProxy",
          "type": "string"
        },
        "httpsProxy": {
          "description": "HTTPS requests unless overridden by NoProxy",
          "type": "string"
        },
        "noProxy": {
          "description": "NoProxy represents the NO_PROXY or no_proxy environment",
          "type": "string"
        }
      }
    },
    "v1ClusterRbac": {
      "description": "Cluster RBAC role binding defintion",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRbacSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterRbacStatus"
        }
      }
    },
    "v1ClusterRbacBinding": {
      "description": "Cluster RBAC binding",
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/v1ClusterRoleRef"
        },
        "subjects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbacSubjects"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "RoleBinding",
            "ClusterRoleBinding"
          ]
        }
      }
    },
    "v1ClusterRbacInputEntity": {
      "description": "Cluster RBAC role binding defintion",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaUpdateEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRbacSpec"
        }
      }
    },
    "v1ClusterRbacResourcesUpdateEntity": {
      "type": "object",
      "properties": {
        "rbacs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbacInputEntity"
          }
        }
      }
    },
    "v1ClusterRbacSpec": {
      "description": "Cluster RBAC spec",
      "type": "object",
      "properties": {
        "bindings": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbacBinding"
          }
        },
        "isSystem": {
          "description": "Set to true when the binding is created automatically by the system, rather than manually by the user",
          "type": "boolean",
          "default": false
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1ClusterRbacStatus": {
      "description": "Cluster rbac status",
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterResourceError"
          }
        }
      }
    },
    "v1ClusterRbacSubjects": {
      "description": "Cluster role ref",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "User",
            "Group",
            "ServiceAccount"
          ]
        }
      }
    },
    "v1ClusterRbacs": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbac"
          }
        }
      }
    },
    "v1ClusterReconcile": {
      "description": "Cluster reconcile document containing all reconciliation information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterReconcileSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterReconcileStatus"
        }
      }
    },
    "v1ClusterReconcileLog": {
      "description": "Cluster reconciliation log entry",
      "type": "object",
      "properties": {
        "appliedTimestamp": {
          "description": "Timestamp when this log entry was created",
          "type": "string",
          "format": "date-time"
        },
        "message": {
          "description": "Log message",
          "type": "string"
        },
        "profileUids": {
          "description": "List of profile UIDs involved in this reconciliation",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "description": "Reconciliation state for this log entry",
          "type": "string",
          "enum": [
            "Created",
            "Pending",
            "InProgress",
            "Applied",
            "Failed"
          ]
        }
      }
    },
    "v1ClusterReconcileSpec": {
      "description": "Cluster reconcile specification",
      "type": "object",
      "properties": {
        "profiles": {
          "description": "List of cluster profiles with reconciliation information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateProfileVariables"
          }
        }
      }
    },
    "v1ClusterReconcileStatus": {
      "description": "Cluster reconcile status",
      "type": "object",
      "properties": {
        "lastAppliedTimestamp": {
          "description": "Timestamp when reconciliation was last applied",
          "type": "string",
          "format": "date-time"
        },
        "message": {
          "description": "Status message",
          "type": "string"
        },
        "state": {
          "description": "Current reconciliation state",
          "type": "string",
          "enum": [
            "Created",
            "Pending",
            "InProgress",
            "Applied",
            "Failed"
          ]
        },
        "updateLogs": {
          "description": "List of reconciliation update logs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterReconcileLog"
          }
        },
        "variableStatus": {
          "$ref": "#/definitions/v1ClusterVariableReconcileStatus"
        }
      }
    },
    "v1ClusterReconcileStatusCounts": {
      "description": "Cluster reconcile metadata",
      "type": "object",
      "properties": {
        "clusters": {
          "description": "Clusters grouped by reconciliation status",
          "type": "object",
          "properties": {
            "applied": {
              "description": "List of UIDs for clusters in applied state",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "failed": {
              "description": "List of UIDs for clusters in failed state",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pending": {
              "description": "List of UIDs for clusters in pending state",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "v1ClusterRefs": {
      "description": "Cluster Object References",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        }
      }
    },
    "v1ClusterRepaveSource": {
      "type": "string",
      "enum": [
        "user",
        "hubble",
        "palette",
        "stylus"
      ]
    },
    "v1ClusterRepaveState": {
      "type": "string",
      "default": "Pending",
      "enum": [
        "Pending",
        "Approved",
        "Reverted"
      ]
    },
    "v1ClusterRepaveStatus": {
      "description": "Cluster repave status",
      "properties": {
        "state": {
          "$ref": "#/definitions/v1ClusterRepaveState"
        }
      }
    },
    "v1ClusterResourceAllocation": {
      "description": "Workspace resource allocation",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "resourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceResourceAllocation"
        }
      }
    },
    "v1ClusterResourceError": {
      "description": "Cluster resource error",
      "properties": {
        "msg": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        }
      }
    },
    "v1ClusterResources": {
      "type": "object",
      "properties": {
        "namespaces": {
          "description": "Cluster namespaces",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        },
        "rbacs": {
          "description": "Cluster RBAC role bindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        }
      }
    },
    "v1ClusterResourcesEntity": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterNamespaceResourceInputEntity"
          }
        },
        "rbacs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbacInputEntity"
          }
        }
      }
    },
    "v1ClusterRestore": {
      "description": "Cluster Restore",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRestoreSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterRestoreStatus"
        }
      }
    },
    "v1ClusterRestoreConfig": {
      "description": "Cluster restore config",
      "required": [
        "backupRequestUid",
        "backupName",
        "destinationClusterUid"
      ],
      "properties": {
        "backupName": {
          "type": "string"
        },
        "backupRequestUid": {
          "type": "string"
        },
        "destinationClusterUid": {
          "type": "string"
        },
        "includeClusterResourceMode": {
          "$ref": "#/definitions/v1IncludeClusterResourceMode"
        },
        "includeClusterResources": {
          "description": "Deprecated. Use includeClusterResourceMode",
          "type": "boolean"
        },
        "includeNamespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "preserveNodePorts": {
          "type": "boolean"
        },
        "restorePVs": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterRestoreSpec": {
      "description": "Cluster Restore Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1ClusterRestoreStatus": {
      "description": "Cluster Restore Status",
      "properties": {
        "clusterRestoreStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterRestoreStatusMeta"
          }
        }
      }
    },
    "v1ClusterRestoreStatusMeta": {
      "description": "Cluster Restore Status Meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "backupName": {
          "type": "string"
        },
        "backupRequestUid": {
          "type": "string"
        },
        "restoreRequestUid": {
          "type": "string"
        },
        "restoreStatusMeta": {
          "$ref": "#/definitions/v1RestoreStatusMeta"
        },
        "sourceClusterRef": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterRoleRef": {
      "description": "Cluster role ref",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "Role",
            "ClusterRole"
          ]
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ClusterScanLogKubeBench": {
      "description": "Cluster compliance scan KubeBench Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterKubeBenchLogStatus"
        }
      }
    },
    "v1ClusterScanLogKubeHunter": {
      "description": "Cluster compliance scan KubeHunter Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterKubeHunterLogStatus"
        }
      }
    },
    "v1ClusterScanLogSonobuoy": {
      "description": "Cluster compliance scan Sonobuoy Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterSonobuoyLogStatus"
        }
      }
    },
    "v1ClusterScanLogSyft": {
      "description": "Cluster Compliance Scan Syft Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterSyftLogStatus"
        }
      }
    },
    "v1ClusterScanTime": {
      "description": "Cluster compliance scan Time",
      "properties": {
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1ClusterSearchInputSpec": {
      "properties": {
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ClusterSearchInputSpecProperty"
          }
        }
      }
    },
    "v1ClusterSearchInputSpecProperty": {
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          },
          "x-omitempty": true
        }
      }
    },
    "v1ClusterSonobuoyLogStatus": {
      "description": "Cluster compliance scan Sonobuoy Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "message": {
          "type": "string"
        },
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1SonobuoyReport"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterSyftLogStatus": {
      "description": "Cluster compliance scan Syft Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "location": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "message": {
          "type": "string"
        },
        "reports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SyftReport"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "scanContext": {
          "$ref": "#/definitions/v1SyftScanContext"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterTemplate": {
      "description": "Cluster template entity information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterTemplateStatus"
        }
      }
    },
    "v1ClusterTemplateEntity": {
      "description": "Cluster template entity information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterTemplateEntitySpec"
        }
      }
    },
    "v1ClusterTemplateEntitySpec": {
      "description": "Cluster template specification",
      "type": "object",
      "properties": {
        "cloudType": {
          "description": "Type of cloud provider",
          "type": "string"
        },
        "policies": {
          "description": "List of policy references",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyRef"
          }
        },
        "profiles": {
          "description": "List of cluster profile references",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateProfile"
          }
        }
      }
    },
    "v1ClusterTemplateMaintenanceStatus": {
      "description": "Cluster template maintenance status",
      "type": "object",
      "properties": {
        "nextWindowEndTime": {
          "description": "Next maintenance window end time",
          "type": "string",
          "format": "date-time"
        },
        "nextWindowStartTime": {
          "description": "Next maintenance window start time",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ClusterTemplateMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the cluster template",
          "type": "string"
        },
        "projectUid": {
          "description": "The project UID of the cluster template",
          "type": "string"
        },
        "uid": {
          "description": "The uid of the cluster template",
          "type": "string"
        }
      }
    },
    "v1ClusterTemplatePoliciesUpdateEntity": {
      "description": "Cluster template policies update entity",
      "type": "object",
      "required": [
        "policies"
      ],
      "properties": {
        "policies": {
          "description": "List of spc policy references to be updated in the cluster template",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyRef"
          }
        }
      }
    },
    "v1ClusterTemplateProfile": {
      "description": "Cluster template profile information",
      "type": "object",
      "properties": {
        "uid": {
          "description": "UID of the cluster profile",
          "type": "string"
        },
        "variables": {
          "description": "List of cluster profile variable values and assign strategies. This is specified when clusters are launched from the template",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateVariable"
          }
        }
      }
    },
    "v1ClusterTemplateProfileVariable": {
      "description": "Cluster template profile information",
      "type": "object",
      "properties": {
        "uid": {
          "description": "UID of the cluster profile",
          "type": "string"
        },
        "variables": {
          "description": "List of cluster profile variable values for the cluster to be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterVariable"
          }
        }
      }
    },
    "v1ClusterTemplateProfileVariableWithClusters": {
      "description": "Variable with cluster assignments",
      "type": "object",
      "required": [
        "variable",
        "clusters"
      ],
      "properties": {
        "clusters": {
          "description": "List of clusters with variable assignments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateVariableClusterAssignment"
          }
        },
        "variable": {
          "description": "Variable field with schema definition",
          "type": "object",
          "$ref": "#/definitions/v1Variable"
        }
      }
    },
    "v1ClusterTemplateProfileVariables": {
      "description": "Profile variables with grouped resolved and unresolved variables",
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "name": {
          "description": "Profile name",
          "type": "string"
        },
        "uid": {
          "description": "Profile UID",
          "type": "string"
        },
        "variables": {
          "description": "List of resolved and unresolved variables belonging to a cluster launched from template",
          "type": "object",
          "properties": {
            "resolvedVariables": {
              "description": "List of resolved variables",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterVariable"
              }
            },
            "unResolvedVariables": {
              "description": "List of unresolved variables",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterVariable"
              }
            }
          }
        }
      }
    },
    "v1ClusterTemplateProfileVariablesGroup": {
      "description": "Profile with variables and cluster assignments",
      "type": "object",
      "required": [
        "uid",
        "variables"
      ],
      "properties": {
        "uid": {
          "description": "UID of the cluster profile",
          "type": "string"
        },
        "variables": {
          "description": "List of variables with cluster assignments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateVariableClusterMapping"
          }
        }
      }
    },
    "v1ClusterTemplateProfileVariablesResponse": {
      "description": "Response for retrieving variables for a specific profile in a cluster template",
      "type": "object",
      "properties": {
        "variables": {
          "description": "List of variables with cluster assignments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateProfileVariableWithClusters"
          }
        }
      }
    },
    "v1ClusterTemplateProfilesUpdateEntity": {
      "description": "Cluster template profiles update entity",
      "type": "object",
      "required": [
        "profiles"
      ],
      "properties": {
        "profiles": {
          "description": "List of cluster profile references with updated variable values and assign strategies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateProfile"
          }
        }
      }
    },
    "v1ClusterTemplateProfilesVariablesBatchEntity": {
      "description": "Cluster template profiles variables batch entity",
      "type": "object",
      "required": [
        "profiles"
      ],
      "properties": {
        "profiles": {
          "description": "List of profiles with variables and cluster assignments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateProfileVariablesGroup"
          }
        }
      }
    },
    "v1ClusterTemplateRef": {
      "description": "Cluster template configuration to launch a cluster from a template.",
      "type": "object",
      "properties": {
        "uid": {
          "description": "Uid of the cluster template from which the cluster is created. When a cluster is launched using a template, the packs configuration is automatically derived from the template and does not need to be set manually.",
          "type": "string"
        }
      }
    },
    "v1ClusterTemplateSpcRef": {
      "description": "Cluster template cluster reference",
      "type": "object",
      "properties": {
        "clusterUid": {
          "description": "UID of the cluster",
          "type": "string"
        },
        "name": {
          "description": "Name of the cluster",
          "type": "string"
        }
      }
    },
    "v1ClusterTemplateSpec": {
      "description": "Cluster template specification",
      "type": "object",
      "properties": {
        "cloudType": {
          "description": "Type of cloud provider",
          "type": "string"
        },
        "clusters": {
          "description": "Map of cluster references with cluster UID as key",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ClusterTemplateSpcRef"
          }
        },
        "policies": {
          "description": "List of policy references",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyRef"
          }
        },
        "profiles": {
          "description": "List of cluster profile references",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateProfile"
          }
        }
      }
    },
    "v1ClusterTemplateSpectroClusterMeta": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the spectro cluster",
          "type": "string"
        },
        "projectUid": {
          "description": "The project UID of the spectro cluster",
          "type": "string"
        },
        "uid": {
          "description": "The UID of the spectro cluster",
          "type": "string"
        }
      }
    },
    "v1ClusterTemplateStatus": {
      "description": "Cluster template status",
      "type": "object",
      "properties": {
        "clusterStatusCounts": {
          "$ref": "#/definitions/v1ClusterReconcileStatusCounts"
        },
        "clusterVariables": {
          "$ref": "#/definitions/v1ClusterVariableStatus"
        },
        "maintenance": {
          "$ref": "#/definitions/v1ClusterTemplateMaintenanceStatus"
        },
        "state": {
          "description": "Current state of the cluster template",
          "type": "string",
          "enum": [
            "Pending",
            "Applied",
            "Failed",
            "PartiallyApplied"
          ]
        }
      }
    },
    "v1ClusterTemplateSummary": {
      "description": "Cluster template summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterTemplateSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterTemplateSummaryStatus"
        }
      }
    },
    "v1ClusterTemplateSummarySpec": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateSpectroClusterMeta"
          }
        }
      }
    },
    "v1ClusterTemplateSummaryStatus": {
      "description": "Provides status information for cluster templates like in use cluster which are launched using the template",
      "type": "object",
      "properties": {
        "inUseClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          }
        },
        "state": {
          "description": "The reconciliation state of the cluster template",
          "type": "string"
        }
      }
    },
    "v1ClusterTemplateTags": {
      "description": "Cluster template tags response",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Array of cluster template tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ClusterTemplateUpgradeSpec": {
      "type": "object",
      "properties": {
        "clusterUids": {
          "description": "List of cluster UIDs to upgrade. If no clusterUid's specified then all clusters launched from the specified cluster template will be upgraded",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ClusterTemplateVariable": {
      "description": "Cluster template variable",
      "type": "object",
      "properties": {
        "assignStrategy": {
          "description": "Assignment strategy for the variable",
          "type": "string",
          "enum": [
            "all",
            "cluster"
          ]
        },
        "clusters": {
          "description": "List of clusters with the specific variable",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterVariableValue"
          }
        },
        "name": {
          "description": "Name of the variable",
          "type": "string"
        },
        "value": {
          "description": "Value of the variable to be applied to all clusters launched from this template. This value is specified when assignStrategy is set to all",
          "type": "string"
        }
      }
    },
    "v1ClusterTemplateVariableClusterAssignment": {
      "description": "Cluster variable assignment information",
      "type": "object",
      "required": [
        "uid",
        "assignmentState"
      ],
      "properties": {
        "assignedBy": {
          "description": "Specifies the actor who has made the current variable assignment",
          "type": "string",
          "enum": [
            "spectrocluster",
            "clustertemplate"
          ]
        },
        "assignedValue": {
          "description": "Value assigned to the variable",
          "type": "string"
        },
        "assignmentState": {
          "description": "State of the variable assignment",
          "type": "string",
          "enum": [
            "Pending",
            "Assigned"
          ]
        },
        "uid": {
          "description": "Cluster UID",
          "type": "string"
        },
        "value": {
          "description": "Current running value of the variable",
          "type": "string"
        }
      }
    },
    "v1ClusterTemplateVariableClusterMapping": {
      "description": "Variable with cluster assignments",
      "type": "object",
      "required": [
        "name",
        "clusters"
      ],
      "properties": {
        "clusters": {
          "description": "List of clusters with variable values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterVariableValue"
          }
        },
        "name": {
          "description": "Name of the variable",
          "type": "string"
        }
      }
    },
    "v1ClusterTemplateVariablesUpdateEntity": {
      "description": "Cluster template variables update entity",
      "type": "object",
      "required": [
        "profiles"
      ],
      "properties": {
        "profiles": {
          "description": "List of cluster profile references belonging to the cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateProfileVariable"
          }
        }
      }
    },
    "v1ClusterTemplatesFilterSpec": {
      "description": "Cluster template filter spec",
      "properties": {
        "cloudType": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudType"
          }
        },
        "clusterTemplateName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "policyUid": {
          "$ref": "#/definitions/v1FilterString"
        },
        "projectUid": {
          "$ref": "#/definitions/v1FilterString"
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        }
      }
    },
    "v1ClusterTemplatesFilterSummarySpec": {
      "description": "Cluster templates filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ClusterTemplatesFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterTemplatesSortSpec"
          }
        }
      }
    },
    "v1ClusterTemplatesMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateMetadata"
          }
        }
      }
    },
    "v1ClusterTemplatesSortFields": {
      "type": "string",
      "enum": [
        "clusterTemplateName",
        "cloudType",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "x-nullable": true
    },
    "v1ClusterTemplatesSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1ClusterTemplatesSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1ClusterTemplatesSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterTemplateSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1ClusterType": {
      "type": "string",
      "default": "PureManage",
      "enum": [
        "PureManage",
        "PureAttach"
      ]
    },
    "v1ClusterUpgradeSettingsEntity": {
      "properties": {
        "spectroComponents": {
          "type": "string",
          "enum": [
            "lock",
            "unlock"
          ]
        }
      }
    },
    "v1ClusterUsageSummary": {
      "description": "Cluster usage summary",
      "type": "object",
      "properties": {
        "cpuCores": {
          "type": "number",
          "x-omitempty": false
        },
        "isAlloy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterVariableReconcileStatus": {
      "description": "Cluster variable reconciliation status",
      "type": "object",
      "properties": {
        "state": {
          "description": "Variable reconciliation state",
          "type": "string",
          "enum": [
            "Resolved",
            "Unresolved"
          ]
        }
      }
    },
    "v1ClusterVariableStatus": {
      "description": "Cluster variable status counts categorized by resolution state",
      "type": "object",
      "properties": {
        "resolved": {
          "description": "The number of clusters in which all variables have been successfully resolved",
          "type": "integer"
        },
        "unResolved": {
          "description": "The number of clusters that have unresolved variables requiring attention",
          "type": "integer"
        }
      }
    },
    "v1ClusterVariableValue": {
      "description": "Cluster along with specific variable value",
      "type": "object",
      "properties": {
        "uid": {
          "description": "UID of the cluster",
          "type": "string"
        },
        "value": {
          "description": "Value of the variable",
          "type": "string"
        }
      }
    },
    "v1ClusterVirtualMachine": {
      "description": "VirtualMachine handles the VirtualMachines that are not running\nor are in a stopped state\nThe VirtualMachine contains the template to create the\nVirtualMachineInstance. It also mirrors the running state of the created\nVirtualMachineInstance in its status.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1VmObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterVirtualMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterVirtualMachineStatus"
        }
      }
    },
    "v1ClusterVirtualMachineList": {
      "description": "VirtualMachineList is a list of virtual machines",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterVirtualMachine"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1VmListMeta"
        }
      }
    },
    "v1ClusterVirtualMachineSpec": {
      "description": "VirtualMachineSpec describes how the proper VirtualMachine should look like",
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "dataVolumeTemplates": {
          "description": "dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmDataVolumeTemplateSpec"
          }
        },
        "instancetype": {
          "$ref": "#/definitions/v1VmInstancetypeMatcher"
        },
        "preference": {
          "$ref": "#/definitions/v1VmPreferenceMatcher"
        },
        "runStrategy": {
          "description": "Running state indicates the requested running state of the VirtualMachineInstance mutually exclusive with Running",
          "type": "string"
        },
        "running": {
          "description": "Running controls whether the associatied VirtualMachineInstance is created or not Mutually exclusive with RunStrategy",
          "type": "boolean"
        },
        "template": {
          "$ref": "#/definitions/v1VmVirtualMachineInstanceTemplateSpec"
        },
        "updateVolumesStrategy": {
          "description": "UpdateVolumesStrategy is the strategy to apply on volumes updates",
          "type": "string"
        }
      }
    },
    "v1ClusterVirtualMachineStatus": {
      "description": "VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Hold the state information of the VirtualMachine and its VirtualMachineInstance",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmVirtualMachineCondition"
          }
        },
        "created": {
          "description": "Created indicates if the virtual machine is created in the cluster",
          "type": "boolean"
        },
        "memoryDumpRequest": {
          "$ref": "#/definitions/v1VmVirtualMachineMemoryDumpRequest"
        },
        "printableStatus": {
          "description": "PrintableStatus is a human readable, high-level representation of the status of the virtual machine",
          "type": "string"
        },
        "ready": {
          "description": "Ready indicates if the virtual machine is running and ready",
          "type": "boolean"
        },
        "restoreInProgress": {
          "description": "RestoreInProgress is the name of the VirtualMachineRestore currently executing",
          "type": "string"
        },
        "snapshotInProgress": {
          "description": "SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing",
          "type": "string"
        },
        "startFailure": {
          "$ref": "#/definitions/v1VmVirtualMachineStartFailure"
        },
        "stateChangeRequests": {
          "description": "StateChangeRequests indicates a list of actions that should be taken on a VMI e.g. stop a specific VMI then start a new one.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmVirtualMachineStateChangeRequest"
          }
        },
        "volumeRequests": {
          "description": "VolumeRequests indicates a list of volumes add or remove from the VMI template and hotplug on an active running VMI.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmVirtualMachineVolumeRequest"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "volumeSnapshotStatuses": {
          "description": "VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is supported by each volume.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmVolumeSnapshotStatus"
          }
        }
      },
      "x-nullable": true
    },
    "v1ClusterVirtualPacksValue": {
      "description": "Virtual cluster packs value",
      "type": "object",
      "properties": {
        "distroType": {
          "type": "string"
        },
        "layer": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "v1ClusterVirtualPacksValues": {
      "description": "Virtual cluster packs values",
      "type": "object",
      "properties": {
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterVirtualPacksValue"
          }
        }
      }
    },
    "v1ClusterWorkload": {
      "description": "Cluster workload summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterWorkloadSpec"
        }
      }
    },
    "v1ClusterWorkloadCondition": {
      "description": "Cluster workload condition",
      "type": "object",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastUpdateTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadCronJob": {
      "description": "Cluster workload cronjob summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterWorkloadCronJobSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadCronJobStatus"
        }
      }
    },
    "v1ClusterWorkloadCronJobSpec": {
      "description": "Cluster workload cronjob spec",
      "type": "object",
      "properties": {
        "schedule": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadCronJobStatus": {
      "description": "Cluster workload cronjob status",
      "type": "object",
      "properties": {
        "lastScheduleTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1ClusterWorkloadCronJobs": {
      "description": "Cluster workload cronjobs summary",
      "type": "object",
      "properties": {
        "cronJobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCronJob"
          }
        }
      }
    },
    "v1ClusterWorkloadDaemonSet": {
      "description": "Cluster workload daemonset summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadDaemonSetStatus"
        }
      }
    },
    "v1ClusterWorkloadDaemonSetStatus": {
      "description": "Cluster workload daemonset status",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "format": "int32"
        },
        "currentScheduled": {
          "type": "integer",
          "format": "int32"
        },
        "desiredScheduled": {
          "type": "integer",
          "format": "int32"
        },
        "misScheduled": {
          "type": "integer",
          "format": "int32"
        },
        "ready": {
          "type": "integer",
          "format": "int32"
        },
        "updatedScheduled": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterWorkloadDaemonSets": {
      "description": "Cluster workload daemonset summary",
      "type": "object",
      "properties": {
        "daemonSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDaemonSet"
          }
        }
      }
    },
    "v1ClusterWorkloadDeployment": {
      "description": "Cluster workload deployment summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadDeploymentStatus"
        }
      }
    },
    "v1ClusterWorkloadDeploymentStatus": {
      "description": "Cluster workload deployment status",
      "type": "object",
      "properties": {
        "replicas": {
          "$ref": "#/definitions/v1ClusterWorkloadReplicaStatus"
        }
      }
    },
    "v1ClusterWorkloadDeployments": {
      "description": "Cluster workload deployments summary",
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDeployment"
          }
        }
      }
    },
    "v1ClusterWorkloadJob": {
      "description": "Cluster workload job summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadJobStatus"
        }
      }
    },
    "v1ClusterWorkloadJobStatus": {
      "description": "Cluster workload job status",
      "type": "object",
      "properties": {
        "completionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCondition"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "succeeded": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterWorkloadJobs": {
      "description": "Cluster workload jobs summary",
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadJob"
          }
        }
      }
    },
    "v1ClusterWorkloadMetadata": {
      "description": "Cluster workload metadata",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "entity": {
          "$ref": "#/definitions/v1ClusterWorkloadRef"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadNamespace": {
      "description": "Cluster workload namespace summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadNamespaceStatus"
        }
      }
    },
    "v1ClusterWorkloadNamespaceStatus": {
      "description": "Cluster workload namespace status",
      "type": "object",
      "properties": {
        "phase": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadNamespaces": {
      "description": "Cluster workload namespaces summary",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadNamespace"
          }
        }
      }
    },
    "v1ClusterWorkloadPod": {
      "description": "Cluster workload pod summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadPodMetadata"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterWorkloadPodSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadPodStatus"
        }
      }
    },
    "v1ClusterWorkloadPodContainer": {
      "description": "Cluster workload pod container",
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerResources"
        }
      }
    },
    "v1ClusterWorkloadPodContainerResource": {
      "description": "Cluster workload pod container resource",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "cpuUnit": {
          "type": "string"
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "memoryUnit": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadPodContainerResources": {
      "description": "Cluster workload pod container resources",
      "type": "object",
      "properties": {
        "limits": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerResource"
        },
        "requests": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerResource"
        }
      }
    },
    "v1ClusterWorkloadPodContainerState": {
      "description": "Cluster workload pod container state",
      "type": "object",
      "properties": {
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "finishedAt": {
          "$ref": "#/definitions/v1Time"
        },
        "reason": {
          "type": "string"
        },
        "startedAt": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadPodContainerStatus": {
      "description": "Cluster workload pod container status",
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ready": {
          "type": "boolean",
          "x-omitempty": false
        },
        "restartCount": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "started": {
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerState"
        }
      }
    },
    "v1ClusterWorkloadPodMetadata": {
      "description": "Cluster workload pod metadata",
      "type": "object",
      "properties": {
        "associatedRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRef"
          }
        },
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "entity": {
          "$ref": "#/definitions/v1ClusterWorkloadRef"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "machineUid": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "nodename": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadPodSpec": {
      "description": "Cluster workload pod spec",
      "type": "object",
      "properties": {
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPodContainer"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPodVolume"
          }
        }
      }
    },
    "v1ClusterWorkloadPodStatus": {
      "description": "Cluster workload pod status",
      "type": "object",
      "properties": {
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPodContainerStatus"
          }
        },
        "phase": {
          "type": "string"
        },
        "podIp": {
          "type": "string"
        },
        "qosClass": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadPodVolume": {
      "description": "Cluster workload pod volume",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadPods": {
      "description": "Cluster workload pods summary",
      "properties": {
        "pods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPod"
          }
        }
      }
    },
    "v1ClusterWorkloadRef": {
      "description": "Cluster workload ref",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadReplicaStatus": {
      "description": "Cluster workload replica status",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "ready": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "updated": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterWorkloadRoleBinding": {
      "description": "Cluster workload rbac binding summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRbacBinding"
        }
      }
    },
    "v1ClusterWorkloadRoleBindings": {
      "description": "Cluster workload rbac bindings summary",
      "type": "object",
      "properties": {
        "bindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRoleBinding"
          }
        }
      }
    },
    "v1ClusterWorkloadSpec": {
      "description": "Cluster workload spec",
      "type": "object",
      "properties": {
        "clusterroleBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRoleBinding"
          }
        },
        "cronJobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCronJob"
          }
        },
        "daemonSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDaemonSet"
          }
        },
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDeployment"
          }
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadJob"
          }
        },
        "pods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPod"
          }
        },
        "roleBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRoleBinding"
          }
        },
        "statefulSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadStatefulSet"
          }
        }
      }
    },
    "v1ClusterWorkloadStatefulSet": {
      "description": "Cluster workload statefulset summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadStatefulSetStatus"
        }
      }
    },
    "v1ClusterWorkloadStatefulSetStatus": {
      "description": "Cluster workload statefulset status",
      "type": "object",
      "properties": {
        "replicas": {
          "$ref": "#/definitions/v1ClusterWorkloadReplicaStatus"
        }
      }
    },
    "v1ClusterWorkloadStatefulSets": {
      "description": "Cluster workload statefulsets summary",
      "type": "object",
      "properties": {
        "statefulSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadStatefulSet"
          }
        }
      }
    },
    "v1ClusterWorkloadsFilter": {
      "description": "Cluster workloads filter",
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ClusterWorkloadsSpec": {
      "description": "Cluster workloads spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ClusterWorkloadsFilter"
        }
      }
    },
    "v1ComplianceScanConfig": {
      "description": "Compliance Scan config",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ComplianceScanDriverSpec": {
      "description": "Compliance Scan driver spec",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1ComplianceScanConfig"
        },
        "isClusterConfig": {
          "type": "boolean"
        }
      }
    },
    "v1ComputeMetrics": {
      "description": "Compute metrics",
      "type": "object",
      "properties": {
        "lastUpdatedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "limit": {
          "type": "number",
          "x-omitempty": false
        },
        "request": {
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "x-omitempty": false
        },
        "unit": {
          "type": "string"
        },
        "usage": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1ComputeRate": {
      "description": "Compute estimated rate information",
      "type": "object",
      "properties": {
        "rate": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ConstraintError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1ConstraintValidatorResponse": {
      "description": "Constraint validator response",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ConstraintValidatorResult"
          }
        }
      }
    },
    "v1ConstraintValidatorResult": {
      "description": "Constraint validator result",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ConstraintError"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ControlPlaneEndPoint": {
      "type": "object",
      "properties": {
        "ddnsSearchDomain": {
          "description": "DDNSSearchDomain is the search domain used for resolving IP addresses when the EndpointType is DDNS. This search domain is appended to the generated Hostname to obtain the complete DNS name for the endpoint. If Host is already a DDNS FQDN, DDNSSearchDomain is not required",
          "type": "string"
        },
        "host": {
          "description": "IP or FQDN(External/DDNS)",
          "type": "string"
        },
        "type": {
          "description": "VIP or External",
          "type": "string",
          "enum": [
            "VIP",
            "External",
            "DDNS"
          ]
        }
      }
    },
    "v1ControlPlaneHealthCheckTimeoutEntity": {
      "type": "object",
      "properties": {
        "controlPlaneHealthCheckTimeout": {
          "description": "ControlPlaneHealthCheckTimeout is the timeout to check for ready state of the control plane nodes",
          "type": "string"
        }
      }
    },
    "v1CustomAccount": {
      "description": "Custom account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1CustomAccountEntity": {
      "description": "Custom account information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomCloudAccount"
        }
      }
    },
    "v1CustomAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CustomAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1CustomCloudAccount": {
      "type": "object",
      "required": [
        "credentials"
      ],
      "properties": {
        "credentials": {
          "description": "Cloud account credentials",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1CustomCloudClusterConfigEntity": {
      "description": "Custom cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1CustomClusterConfig"
        }
      }
    },
    "v1CustomCloudConfig": {
      "description": "CustomCloudConfig is the Schema for the custom cloudconfigs API",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomCloudConfigSpec"
        }
      }
    },
    "v1CustomCloudConfigSpec": {
      "description": "CustomCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains CustomCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1CustomClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CustomMachinePoolConfig"
          }
        }
      }
    },
    "v1CustomCloudMetaEntity": {
      "description": "Custom cloud meta entity",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Custom cloud metadata",
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomCloudMetaSpecEntity"
        }
      }
    },
    "v1CustomCloudMetaSpecEntity": {
      "description": "Custom cloud spec response entity",
      "type": "object",
      "properties": {
        "cloudCategory": {
          "$ref": "#/definitions/v1CloudCategory"
        },
        "displayName": {
          "description": "Custom cloud displayName",
          "type": "string"
        },
        "isManaged": {
          "description": "If the custom cloud is a managed cluster",
          "type": "boolean"
        },
        "logo": {
          "description": "Custom cloud logo",
          "type": "string"
        }
      }
    },
    "v1CustomCloudRateConfig": {
      "description": "Private cloud rate config",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "rateConfig": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        }
      }
    },
    "v1CustomCloudRequestEntity": {
      "description": "Custom cloud request entity",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Custom cloud metadata",
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomCloudSpecEntity"
        }
      }
    },
    "v1CustomCloudSpecEntity": {
      "description": "Custom cloud request entity spec",
      "type": "object",
      "properties": {
        "cloudCategory": {
          "$ref": "#/definitions/v1CloudCategory"
        },
        "displayName": {
          "description": "Custom cloud displayName",
          "type": "string"
        },
        "isControlPlaneManaged": {
          "description": "If the custom cloud is a managed cluster",
          "type": "boolean"
        },
        "logo": {
          "description": "Custom cloud logo",
          "type": "string"
        }
      }
    },
    "v1CustomCloudType": {
      "type": "object",
      "properties": {
        "cloudCategory": {
          "$ref": "#/definitions/v1CloudCategory"
        },
        "cloudFamily": {
          "description": "Cloud grouping as family",
          "type": "string"
        },
        "displayName": {
          "description": "Custom cloudtype displayName",
          "type": "string"
        },
        "isCustom": {
          "description": "If it is a custom cloudtype",
          "type": "boolean",
          "x-omitempty": false
        },
        "isManaged": {
          "description": "If custom cloudtype is managed",
          "type": "boolean",
          "x-omitempty": false
        },
        "isVertex": {
          "description": "If cloud is support for Vertex env",
          "type": "boolean",
          "x-omitempty": false
        },
        "logo": {
          "description": "Custom cloudtype logo",
          "type": "string"
        },
        "name": {
          "description": "Custom cloudtype name",
          "type": "string"
        }
      }
    },
    "v1CustomCloudTypeCloudAccountKeys": {
      "description": "Custom cloudType custom cloud account keys",
      "type": "object",
      "properties": {
        "keys": {
          "description": "Array of custom cloud type cloud account keys",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CustomCloudTypeContentResponse": {
      "description": "Custom cloudType content response",
      "type": "object",
      "properties": {
        "yaml": {
          "description": "custom cloud type content",
          "type": "string"
        }
      }
    },
    "v1CustomCloudTypes": {
      "description": "Custom cloudType content response",
      "type": "object",
      "properties": {
        "cloudTypes": {
          "description": "Array of custom cloud types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CustomCloudType"
          }
        }
      }
    },
    "v1CustomClusterConfig": {
      "description": "Cluster level configuration for Custom cloud and applicable for all the machine pools",
      "type": "object",
      "required": [
        "values"
      ],
      "properties": {
        "values": {
          "description": "YAML string for Cluster and CloudCluster",
          "type": "string"
        }
      }
    },
    "v1CustomClusterConfigEntity": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/v1ClusterLocation"
        },
        "machineManagementConfig": {
          "$ref": "#/definitions/v1MachineManagementConfig"
        },
        "resources": {
          "$ref": "#/definitions/v1ClusterResourcesEntity"
        }
      }
    },
    "v1CustomInstanceType": {
      "type": "object",
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a custom machine's disk, in GiB",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a custom machine's memory, in MiB",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number in a custom machine",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1CustomMachine": {
      "description": "Custom cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1CustomMachinePoolBaseConfigEntity": {
      "description": "Machine pool configuration for the custom cluster",
      "type": "object",
      "properties": {
        "additionalLabels": {
          "description": "Additional labels to be part of the machine pool",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "isControlPlane": {
          "description": "Whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "useControlPlaneAsWorker": {
          "description": "If IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1CustomMachinePoolCloudConfigEntity": {
      "type": "object",
      "properties": {
        "values": {
          "description": "Machine pool configuration as yaml content",
          "type": "string"
        }
      }
    },
    "v1CustomMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        },
        "values": {
          "description": "YAML string for machine",
          "type": "string"
        }
      }
    },
    "v1CustomMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1CustomMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1CustomMachinePoolBaseConfigEntity"
        }
      }
    },
    "v1CustomMachineSpec": {
      "description": "Custom cloud VM definition spec",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "hostName": {
          "type": "string"
        },
        "imageId": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1CustomInstanceType"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CustomNic"
          }
        },
        "sshKeyName": {
          "type": "string"
        }
      }
    },
    "v1CustomMachines": {
      "description": "List of Custom machines",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CustomMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1CustomNic": {
      "description": "Custom network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1DashboardWorkspace": {
      "description": "Workspace information",
      "properties": {
        "meta": {
          "$ref": "#/definitions/v1DashboardWorkspaceMeta"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1DashboardWorkspaceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1DashboardWorkspaceStatus"
        }
      }
    },
    "v1DashboardWorkspaceAllocation": {
      "description": "Workspace allocation",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1DashboardWorkspaceResourceAllocation"
        },
        "memory": {
          "$ref": "#/definitions/v1DashboardWorkspaceResourceAllocation"
        }
      }
    },
    "v1DashboardWorkspaceClusterRef": {
      "description": "Workspace cluster reference",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1DashboardWorkspaceMeta": {
      "description": "Deprecated. Workspace meta data",
      "properties": {
        "clusterNames": {
          "description": "Deprecated. Use clusterRefs",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspaceClusterRef"
          }
        },
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1DashboardWorkspaceNamespaceAllocation": {
      "description": "Workspace namespace allocation",
      "properties": {
        "name": {
          "type": "string"
        },
        "total": {
          "$ref": "#/definitions/v1DashboardWorkspaceAllocation"
        }
      }
    },
    "v1DashboardWorkspaceQuota": {
      "description": "Workspace resource quota",
      "properties": {
        "resourceAllocation": {
          "$ref": "#/definitions/v1DashboardWorkspaceQuotaResourceAllocation"
        }
      }
    },
    "v1DashboardWorkspaceQuotaResourceAllocation": {
      "description": "Workspace quota resource allocation",
      "properties": {
        "cpu": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "gpuConfig": {
          "$ref": "#/definitions/v1GpuConfig"
        },
        "memory": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        }
      }
    },
    "v1DashboardWorkspaceResourceAllocation": {
      "description": "Workspace resource allocation",
      "properties": {
        "allocated": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "usage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1DashboardWorkspaceSpec": {
      "description": "Workspace spec summary",
      "properties": {
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspaceClusterRef"
          }
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "quota": {
          "$ref": "#/definitions/v1DashboardWorkspaceQuota"
        }
      }
    },
    "v1DashboardWorkspaceStatus": {
      "description": "Workspace status",
      "properties": {
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspaceNamespaceAllocation"
          }
        },
        "total": {
          "$ref": "#/definitions/v1DashboardWorkspaceAllocation"
        }
      }
    },
    "v1DashboardWorkspaces": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "cpuUnit": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspace"
          }
        },
        "memoryUnit": {
          "type": "string"
        }
      }
    },
    "v1DataSinkConfig": {
      "description": "Data sink",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1DataSinkSpec"
        }
      }
    },
    "v1DataSinkSpec": {
      "type": "object",
      "properties": {
        "auditDataSinks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1DataSinkableSpec"
          }
        }
      }
    },
    "v1DataSinkableSpec": {
      "type": "object",
      "properties": {
        "cloudWatch": {
          "$ref": "#/definitions/v1CloudWatch"
        },
        "type": {
          "type": "string",
          "enum": [
            "cloudwatch"
          ]
        }
      }
    },
    "v1DeletedMsg": {
      "description": "Deleted response with message",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1DeveloperCredit": {
      "description": "Credits allocated for each tenant/user",
      "properties": {
        "cpu": {
          "description": "cpu in cores",
          "type": "number",
          "format": "int32",
          "x-omitempty": false
        },
        "memoryGiB": {
          "description": "memory in GiB",
          "type": "number",
          "format": "int32",
          "x-omitempty": false
        },
        "storageGiB": {
          "description": "storage in GiB",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "virtualClustersLimit": {
          "description": "number of active virtual clusters",
          "type": "number",
          "format": "int32",
          "x-omitempty": false
        }
      }
    },
    "v1DeviceSpec": {
      "description": "DeviceSpec defines the desired state of Device",
      "type": "object",
      "properties": {
        "archType": {
          "description": "Architecture type of the edge host",
          "type": "string",
          "default": "amd64",
          "enum": [
            "arm64",
            "amd64"
          ]
        },
        "cpu": {
          "$ref": "#/definitions/v1CPU"
        },
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Disk"
          }
        },
        "gpus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GPUDeviceSpec"
          }
        },
        "hostState": {
          "description": "State of edge host device",
          "type": "string",
          "default": "registration",
          "enum": [
            "registration",
            "cluster",
            "recovery"
          ]
        },
        "hostType": {
          "description": "Type of the edge host device",
          "type": "string",
          "default": "appliance",
          "enum": [
            "appliance",
            "agent-mode"
          ]
        },
        "memory": {
          "$ref": "#/definitions/v1Memory"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Nic"
          }
        },
        "os": {
          "$ref": "#/definitions/v1OS"
        },
        "secureBoot": {
          "description": "Secure boot configuration",
          "type": "boolean",
          "default": false
        }
      }
    },
    "v1Disk": {
      "type": "object",
      "properties": {
        "controller": {
          "type": "string"
        },
        "partitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Partition"
          }
        },
        "size": {
          "description": "Size in GB",
          "type": "integer",
          "format": "int32"
        },
        "vendor": {
          "type": "string"
        }
      }
    },
    "v1EcrRegistry": {
      "description": "Ecr registry information",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EcrRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1OciRegistryStatus"
        }
      }
    },
    "v1EcrRegistrySpec": {
      "description": "Ecr registry spec",
      "type": "object",
      "required": [
        "endpoint",
        "isPrivate"
      ],
      "properties": {
        "baseContentPath": {
          "description": "OCI ecr registry content base path",
          "type": "string"
        },
        "containsSpectroManifest": {
          "type": "boolean",
          "x-omitempty": false
        },
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "defaultRegion": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "isSyncSupported": {
          "type": "boolean"
        },
        "providerType": {
          "type": "string",
          "default": "helm",
          "enum": [
            "helm",
            "pack"
          ]
        },
        "registryUid": {
          "description": "Ecr registry uid",
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "tls": {
          "$ref": "#/definitions/v1TlsConfiguration"
        }
      }
    },
    "v1EdgeClusterObjectEntity": {
      "description": "Object identity meta of the cluster",
      "type": "object",
      "properties": {
        "hybridCluster": {
          "description": "In case of hybrid edge clusters, it provides the object identity meta of hybrid cluster",
          "$ref": "#/definitions/v1HybridClusterMeta"
        },
        "name": {
          "description": "Name of the cluster",
          "type": "string"
        },
        "uid": {
          "description": "Uid of the cluster",
          "type": "string"
        }
      }
    },
    "v1EdgeHost": {
      "description": "EdgeHost is the underlying appliance",
      "type": "object",
      "required": [
        "hostUid",
        "hostAddress"
      ],
      "properties": {
        "disableAutoRegister": {
          "description": "Set to true if auto register is disabled for the device",
          "type": "boolean",
          "x-omitempty": false
        },
        "hostAddress": {
          "description": "HostAddress is a FQDN or IP address of the Host",
          "type": "string"
        },
        "hostAuthToken": {
          "description": "HostAuthToken to authorize auto registration",
          "type": "string",
          "x-omitempty": false
        },
        "hostChecksum": {
          "description": "HostChecksum is the checksum provided by the edge host, to be persisted in SaaS",
          "type": "string",
          "x-omitempty": false
        },
        "hostIdentity": {
          "description": "HostIdentity is the identity to access the edge host",
          "$ref": "#/definitions/v1EdgeHostIdentity"
        },
        "hostPairingKey": {
          "description": "HostPairingKey is the one-time pairing key to pair the edge host with the device registered in SaaS",
          "type": "string",
          "format": "password",
          "x-omitempty": false
        },
        "hostUid": {
          "description": "HostUid is the ID of the EdgeHost",
          "type": "string"
        },
        "macAddress": {
          "description": "Mac address of edgehost",
          "type": "string",
          "x-omitempty": false
        },
        "project": {
          "description": "ProjectUid where the edgehost will be placed during auto registration",
          "x-omitempty": false,
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "remoteSsh": {
          "description": "RemoteSsh controls the remote SSH access for this edge host",
          "type": "string",
          "default": "enabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-omitempty": false
        }
      }
    },
    "v1EdgeHostCloudProperties": {
      "description": "Additional cloud properties of the edge host (applicable based on the cloud type)",
      "type": "object",
      "properties": {
        "vsphere": {
          "$ref": "#/definitions/v1EdgeHostVsphereCloudProperties"
        }
      }
    },
    "v1EdgeHostClusterEntity": {
      "type": "object",
      "properties": {
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostConfig": {
      "type": "object",
      "properties": {
        "clusterUids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tunnelConfig": {
          "$ref": "#/definitions/v1SpectroTunnelConfig"
        }
      }
    },
    "v1EdgeHostDevice": {
      "properties": {
        "aclmeta": {
          "$ref": "#/definitions/v1AclMeta"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeHostDeviceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1EdgeHostDeviceStatus"
        }
      }
    },
    "v1EdgeHostDeviceEntity": {
      "description": "Edge host device information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectTagsEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeHostDeviceSpecEntity"
        }
      }
    },
    "v1EdgeHostDeviceHostCheckSum": {
      "type": "object",
      "properties": {
        "hostCheckSum": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostDeviceHostPairingKey": {
      "type": "object",
      "properties": {
        "hostPairingKey": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "v1EdgeHostDeviceMetaUpdateEntity": {
      "description": "Edge host device uid and name",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectTagsEntity"
        }
      }
    },
    "v1EdgeHostDeviceSpec": {
      "description": "EdgeHostDeviceSpec defines the desired state of EdgeHostDevice",
      "type": "object",
      "properties": {
        "cloudProperties": {
          "$ref": "#/definitions/v1EdgeHostCloudProperties"
        },
        "clusterProfileTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          }
        },
        "device": {
          "$ref": "#/definitions/v1DeviceSpec"
        },
        "host": {
          "$ref": "#/definitions/v1EdgeHost"
        },
        "properties": {
          "$ref": "#/definitions/v1EdgeHostProperties"
        },
        "service": {
          "$ref": "#/definitions/v1ServiceSpec"
        },
        "tunnelConfig": {
          "$ref": "#/definitions/v1SpectroTunnelConfig"
        },
        "type": {
          "description": "Deprecated. Cloudtype of the provisioned edge host",
          "type": "string",
          "enum": [
            "vsphere",
            "edge-native"
          ]
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostDeviceSpecEntity": {
      "description": "Edge host device spec",
      "type": "object",
      "properties": {
        "archType": {
          "$ref": "#/definitions/v1ArchType"
        },
        "hostPairingKey": {
          "type": "string",
          "format": "password"
        },
        "tunnelConfig": {
          "$ref": "#/definitions/v1SpectroTunnelConfig"
        }
      }
    },
    "v1EdgeHostDeviceStatus": {
      "description": "EdgeHostDeviceStatus defines the observed state of EdgeHostDevice",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1EdgeHostHealth"
        },
        "inUseClusters": {
          "description": "Deprecated. Use inUseClustersRef",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          }
        },
        "inUseClustersRef": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeClusterObjectEntity"
          }
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterPackStatus"
          }
        },
        "profileStatus": {
          "$ref": "#/definitions/v1ProfileStatus"
        },
        "serviceAuthToken": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "ready",
            "unpaired",
            "in-use"
          ]
        },
        "tunnelStatus": {
          "$ref": "#/definitions/v1SpectroTunnelStatus"
        }
      }
    },
    "v1EdgeHostDevices": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeHostDevice"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1EdgeHostHealth": {
      "description": "EdgeHostHealth defines the desired health state of EdgeHostDevice",
      "properties": {
        "agentVersion": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "healthy",
            "unhealthy"
          ]
        }
      }
    },
    "v1EdgeHostIdentity": {
      "properties": {
        "caCert": {
          "description": "CACert is the client CA certificate",
          "type": "string"
        },
        "mode": {
          "description": "Mode indicates a system or session connection to the host",
          "type": "string"
        },
        "socketPath": {
          "description": "SocketPath is an optional path to the socket on the host, if not using defaults",
          "type": "string"
        },
        "sshSecret": {
          "description": "SSHSecret to the secret containing ssh-username",
          "$ref": "#/definitions/v1EdgeHostSSHSecret"
        }
      }
    },
    "v1EdgeHostMeta": {
      "type": "object",
      "properties": {
        "archType": {
          "$ref": "#/definitions/v1ArchType"
        },
        "edgeHostType": {
          "type": "string",
          "enum": [
            "edge-native",
            "vsphere"
          ]
        },
        "healthState": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostNetwork": {
      "description": "Network defines the network configuration for a virtual machine",
      "type": "object",
      "required": [
        "networkName",
        "networkType"
      ],
      "properties": {
        "networkName": {
          "description": "NetworkName of the network where this machine will be connected",
          "type": "string"
        },
        "networkType": {
          "description": "NetworkType  specifies the type of network",
          "type": "string",
          "enum": [
            "default",
            "bridge"
          ]
        }
      }
    },
    "v1EdgeHostProperties": {
      "description": "Additional properties of edge host",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeHostNetwork"
          }
        },
        "storagePools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeHostStoragePool"
          }
        }
      }
    },
    "v1EdgeHostSSHSecret": {
      "type": "object",
      "properties": {
        "name": {
          "description": "SSH secret name",
          "type": "string"
        },
        "privateKey": {
          "description": "Private Key to access the host",
          "type": "string"
        }
      }
    },
    "v1EdgeHostSpecHost": {
      "description": "Host specifications",
      "properties": {
        "hostAddress": {
          "description": "HostAddress is a FQDN or IP address of the Host",
          "type": "string"
        },
        "macAddress": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostState": {
      "type": "string",
      "enum": [
        "ready",
        "unpaired",
        "in-use"
      ]
    },
    "v1EdgeHostStoragePool": {
      "description": "StoragePool is the storage pool for the vm image",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostVsphereCloudProperties": {
      "description": "Vsphere cloud properties of edge host",
      "properties": {
        "datacenters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereCloudDatacenter"
          }
        }
      }
    },
    "v1EdgeHostsMeta": {
      "type": "object",
      "properties": {
        "edgeHosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeHostMeta"
          }
        }
      }
    },
    "v1EdgeHostsMetadata": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeHostsMetadataSpec"
        },
        "status": {
          "$ref": "#/definitions/v1EdgeHostsMetadataStatus"
        }
      }
    },
    "v1EdgeHostsMetadataFilter": {
      "description": "Edge host metadata spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1EdgeHostsMetadataFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeHostsMetadataSortSpec"
          }
        }
      }
    },
    "v1EdgeHostsMetadataFilterSpec": {
      "description": "Edge hosts metadata filter spec",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1FilterString"
        },
        "states": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeHostState"
          }
        }
      }
    },
    "v1EdgeHostsMetadataSortFields": {
      "type": "string",
      "enum": [
        "name",
        "state",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "x-nullable": true
    },
    "v1EdgeHostsMetadataSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1EdgeHostsMetadataSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1EdgeHostsMetadataSpec": {
      "type": "object",
      "properties": {
        "clusterProfileTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ProfileTemplateSummary"
          }
        },
        "device": {
          "$ref": "#/definitions/v1DeviceSpec"
        },
        "host": {
          "$ref": "#/definitions/v1EdgeHostSpecHost"
        },
        "projectMeta": {
          "$ref": "#/definitions/v1ProjectMeta"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostsMetadataStatus": {
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1EdgeHostHealth"
        },
        "inUseClusters": {
          "description": "Deprecated. Use inUseClustersRef",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          }
        },
        "inUseClustersRef": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeClusterObjectEntity"
          }
        },
        "state": {
          "$ref": "#/definitions/v1EdgeHostState"
        }
      }
    },
    "v1EdgeHostsMetadataSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeHostsMetadata"
          }
        }
      }
    },
    "v1EdgeHostsSearchSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeHostsMetadata"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1EdgeHostsTags": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1EdgeNativeCloudClusterConfigEntity": {
      "description": "EdgeNative cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1EdgeNativeClusterConfig"
        }
      }
    },
    "v1EdgeNativeCloudConfig": {
      "description": "EdgeNativeCloudConfig is the Schema for the edgenativecloudconfigs API",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeNativeCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1EdgeNativeCloudConfigStatus"
        }
      }
    },
    "v1EdgeNativeCloudConfigSpec": {
      "description": "EdgeNativeCloudConfigSpec defines the desired state of EdgeNativeCloudConfig",
      "type": "object",
      "required": [
        "clusterConfig",
        "machinePoolConfig"
      ],
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1EdgeNativeClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeNativeMachinePoolConfig"
          }
        }
      }
    },
    "v1EdgeNativeCloudConfigStatus": {
      "description": "EdgeNativeCloudConfigStatus defines the observed state of EdgeNativeCloudConfig",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "nodeImage": {
          "type": "string"
        },
        "sourceImageId": {
          "description": "SourceImageId can be from packref's annotations or from pack.json",
          "type": "string"
        }
      }
    },
    "v1EdgeNativeClusterConfig": {
      "description": "EdgeNativeClusterConfig definnes Edge Native Cluster specific Spec",
      "type": "object",
      "properties": {
        "controlPlaneEndpoint": {
          "description": "ControlPlaneEndpoint is the control plane endpoint, which can be an IP or FQDN",
          "$ref": "#/definitions/v1EdgeNativeControlPlaneEndPoint"
        },
        "isTwoNodeCluster": {
          "description": "IsTwoNodeCluster is to enable two node cluster support in the control-plane",
          "type": "boolean"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "overlayNetworkConfiguration": {
          "description": "OverlayNetworkConfiguration is the configuration for the overlay network",
          "$ref": "#/definitions/v1EdgeNativeOverlayNetworkConfiguration"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys to access the vms as a 'spectro' user",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "staticIp": {
          "description": "StaticIP indicates if IP allocation type is static IP. DHCP is the default allocation type",
          "type": "boolean"
        }
      }
    },
    "v1EdgeNativeControlPlaneEndPoint": {
      "type": "object",
      "properties": {
        "ddnsSearchDomain": {
          "description": "DDNSSearchDomain is the search domain used for resolving IP addresses when the EndpointType is DDNS. This search domain is appended to the generated Hostname to obtain the complete DNS name for the endpoint. If Host is already a DDNS FQDN, DDNSSearchDomain is not required",
          "type": "string"
        },
        "host": {
          "description": "Host is FQDN(DDNS) or IP",
          "type": "string"
        },
        "type": {
          "description": "Type indicates DDNS or VIP",
          "type": "string",
          "enum": [
            "VIP",
            "External",
            "DDNS",
            "IP"
          ]
        }
      }
    },
    "v1EdgeNativeHost": {
      "description": "EdgeNativeHost is the underlying appliance",
      "type": "object",
      "required": [
        "hostUid",
        "hostAddress"
      ],
      "properties": {
        "IsCandidateCaption": {
          "description": "Is Edge host nominated as candidate",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        },
        "caCert": {
          "description": "CACert for TLS connections",
          "type": "string"
        },
        "hostAddress": {
          "description": "HostAddress is a FQDN or IP address of the Host",
          "type": "string",
          "default": ""
        },
        "hostName": {
          "description": "Qualified name of host",
          "type": "string",
          "default": ""
        },
        "hostUid": {
          "description": "HostUid is the ID of the EdgeHost",
          "type": "string",
          "default": ""
        },
        "nic": {
          "description": "Edge native nic",
          "$ref": "#/definitions/v1Nic"
        },
        "nicName": {
          "description": "Deprecated. Edge host nic name",
          "type": "string"
        },
        "staticIP": {
          "description": "Deprecated. Edge host static IP",
          "type": "string"
        },
        "twoNodeCandidatePriority": {
          "description": "Sets the Edge Host candidate priority as either primary or secondary. This field is applicable only when the Edge Host is nominated as a two-node candidate. To enable priority assignment, ensure that 'isTwoNodeCluster' is set to true.\n",
          "type": "string",
          "enum": [
            "primary",
            "secondary"
          ]
        }
      }
    },
    "v1EdgeNativeHybridClusterConfig": {
      "description": "EdgeNativeHybridClusterConfig defines Edge Native Cluster specific specification",
      "type": "object",
      "properties": {
        "controlPlaneEndpoint": {
          "description": "ControlPlaneEndpoint is the control plane endpoint, which can be an IP or FQDN",
          "$ref": "#/definitions/v1EdgeNativeControlPlaneEndPoint"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys to access the vms as a 'spectro' user",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "v1EdgeNativeHybridConfigEntity": {
      "description": "EdgeNativeHybridMachineConfigEntity defines Edge Native machine configuration",
      "properties": {
        "clusterConfig": {
          "description": "Edge-Native cluster configurations",
          "$ref": "#/definitions/v1EdgeNativeHybridClusterConfig"
        },
        "machineCloudConfig": {
          "description": "Edge-Native machine cluster configurations",
          "$ref": "#/definitions/v1EdgeNativeHybridMachineConfigEntity"
        },
        "profiles": {
          "description": "Cluster profile templates for edge-native machine pool",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          }
        }
      }
    },
    "v1EdgeNativeHybridMachineConfigEntity": {
      "description": "EdgeNativeHybridMachineConfigEntity defines Edge Native machine configuration",
      "required": [
        "archType",
        "edgeHosts"
      ],
      "properties": {
        "archType": {
          "description": "Architecture type of the edge hosts",
          "x-omitempty": false,
          "$ref": "#/definitions/v1ArchType"
        },
        "edgeHosts": {
          "description": "Edge hosts configurations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeNativeHybridMachinePoolHost"
          }
        }
      }
    },
    "v1EdgeNativeHybridMachinePoolHost": {
      "description": "v1EdgeNativeHybridMachinePoolHostEntity defines Edge Native machine pool's host configuration",
      "required": [
        "hostUid"
      ],
      "properties": {
        "hostName": {
          "description": "Edge host name",
          "type": "string"
        },
        "hostUid": {
          "description": "Edge host id",
          "type": "string"
        },
        "nic": {
          "description": "Edge native nic",
          "$ref": "#/definitions/v1Nic"
        },
        "twoNodeCandidatePriority": {
          "description": "Sets the Edge Host candidate priority as either primary or secondary. This field is applicable only when the Edge Host is nominated as a two-node candidate. To enable priority assignment, ensure that 'isTwoNodeCluster' is set to true.\n",
          "type": "string",
          "enum": [
            "primary",
            "secondary"
          ]
        },
        "vpnServerIp": {
          "description": "Vpn server IP",
          "type": "string"
        }
      }
    },
    "v1EdgeNativeInstanceType": {
      "description": "EdgeNativeInstanceType defines the instance configuration for a docker container node",
      "type": "object",
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name is the instance name",
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of CPUs",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1EdgeNativeMachine": {
      "description": "EdgeNative cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeNativeMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1EdgeNativeMachinePoolCloudConfigEntity": {
      "required": [
        "edgeHosts"
      ],
      "properties": {
        "edgeHosts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeNativeMachinePoolHostEntity"
          }
        }
      }
    },
    "v1EdgeNativeMachinePoolConfig": {
      "type": "object",
      "required": [
        "hosts"
      ],
      "properties": {
        "additionalLabels": {
          "description": "AdditionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "hosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeNativeHost"
          }
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "type": "integer",
          "format": "int32"
        },
        "osType": {
          "description": "the os type for the pool, must be supported by the provider",
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1EdgeNativeMachinePoolConfigEntity": {
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EdgeNativeMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1EdgeNativeMachinePoolHostEntity": {
      "required": [
        "hostUid"
      ],
      "properties": {
        "hostName": {
          "description": "Edge host name",
          "type": "string"
        },
        "hostUid": {
          "description": "Edge host id",
          "type": "string"
        },
        "nic": {
          "description": "Edge native nic",
          "$ref": "#/definitions/v1Nic"
        },
        "nicName": {
          "description": "Deprecated - Edge host nic name",
          "type": "string"
        },
        "staticIP": {
          "description": "Deprecated - Edge host static IP",
          "type": "string"
        },
        "twoNodeCandidatePriority": {
          "description": "Sets the Edge Host candidate priority as either primary or secondary. This field is applicable only when the Edge Host is nominated as a two-node candidate. To enable priority assignment, ensure that 'isTwoNodeCluster' is set to true.\n",
          "type": "string",
          "enum": [
            "primary",
            "secondary"
          ]
        }
      }
    },
    "v1EdgeNativeMachineSpec": {
      "description": "EdgeNative cloud VM definition spec",
      "type": "object",
      "properties": {
        "edgeHostUid": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1EdgeNativeInstanceType"
        },
        "nics": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeNativeNic"
          }
        }
      }
    },
    "v1EdgeNativeMachines": {
      "description": "EdgeNative machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeNativeMachine"
          }
        }
      }
    },
    "v1EdgeNativeNic": {
      "description": "Generic network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1EdgeNativeOverlayNetworkConfiguration": {
      "type": "object",
      "properties": {
        "cidr": {
          "description": "CIDR is the CIDR of the overlay network",
          "type": "string"
        },
        "enable": {
          "description": "Enable is a flag to enable overlay network",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1EdgeToken": {
      "description": "Edge token information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeTokenSpec"
        },
        "status": {
          "$ref": "#/definitions/v1EdgeTokenStatus"
        }
      }
    },
    "v1EdgeTokenActiveState": {
      "description": "Edge token active state",
      "properties": {
        "isActive": {
          "description": "Set to 'true', if the token is active",
          "type": "boolean"
        }
      }
    },
    "v1EdgeTokenEntity": {
      "description": "Edge token request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeTokenSpecEntity"
        }
      }
    },
    "v1EdgeTokenProject": {
      "description": "Edge token project information",
      "type": "object",
      "properties": {
        "name": {
          "description": "Project name",
          "type": "string"
        },
        "uid": {
          "description": "Project uid",
          "type": "string"
        }
      }
    },
    "v1EdgeTokenSpec": {
      "description": "Edge token specification",
      "type": "object",
      "properties": {
        "defaultProject": {
          "description": "Default project where the edgehost will be placed on the token authorization",
          "$ref": "#/definitions/v1EdgeTokenProject"
        },
        "expiry": {
          "description": "Edge token expiry date",
          "$ref": "#/definitions/v1Time"
        },
        "token": {
          "description": "Edge token",
          "type": "string"
        }
      }
    },
    "v1EdgeTokenSpecEntity": {
      "description": "Edge token specification",
      "type": "object",
      "properties": {
        "defaultProjectUid": {
          "description": "Default project where the edgehost will be placed on the token authorization",
          "type": "string"
        },
        "expiry": {
          "description": "Edge token expiry date",
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1EdgeTokenSpecUpdate": {
      "description": "Edge token spec to be updated",
      "properties": {
        "defaultProjectUid": {
          "description": "Default project where the edgehost will be placed on the token authorization",
          "type": "string"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1EdgeTokenStatus": {
      "description": "Edge token status",
      "type": "object",
      "properties": {
        "isActive": {
          "description": "Set to 'true', if the token is active",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1EdgeTokenUpdate": {
      "description": "Edge token update request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeTokenSpecUpdate"
        }
      }
    },
    "v1EdgeTokens": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of edge tokens",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeToken"
          }
        }
      }
    },
    "v1EksAddon": {
      "description": "EksAddon represents a EKS addon",
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "conflictResolution": {
          "description": "ConflictResolution is used to declare what should happen if there are parameter conflicts.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the addon",
          "type": "string"
        },
        "serviceAccountRoleARN": {
          "description": "ServiceAccountRoleArn is the ARN of an IAM role to bind to the addons service account",
          "type": "string"
        },
        "version": {
          "description": "Version is the version of the addon to use",
          "type": "string"
        }
      }
    },
    "v1EksCloudClusterConfigEntity": {
      "description": "EKS cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        }
      }
    },
    "v1EksCloudConfig": {
      "description": "EksCloudConfig is the Schema for the ekscloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EksCloudConfigSpec"
        }
      }
    },
    "v1EksCloudConfigSpec": {
      "description": "EksCloudConfigSpec defines the cloud configuration input by user",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains EksCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        },
        "fargateProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FargateProfile"
          }
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksMachinePoolConfig"
          }
        }
      }
    },
    "v1EksClusterConfig": {
      "description": "EksClusterConfig defines EKS specific config",
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "addons": {
          "description": "Addons defines the EKS addons to enable with the EKS cluster. This may be required for brownfield clusters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksAddon"
          }
        },
        "bastionDisabled": {
          "description": "BastionDisabled is the option to disable bastion node",
          "type": "boolean"
        },
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer specifies how API server elb will be configured, this field is optional, not provided, \"\", default =\u003e \"Internet-facing\" \"Internet-facing\" =\u003e \"Internet-facing\" \"internal\" =\u003e \"internal\" For spectro saas setup we require to talk to the apiserver from our cluster so ControlPlaneLoadBalancer should be \"\", not provided or \"Internet-facing\"",
          "type": "string"
        },
        "encryptionConfig": {
          "description": "EncryptionConfig specifies the encryption configuration for the cluster",
          "$ref": "#/definitions/v1EncryptionConfig"
        },
        "endpointAccess": {
          "description": "Endpoints specifies access to this cluster's control plane endpoints",
          "$ref": "#/definitions/v1EksClusterConfigEndpointAccess"
        },
        "region": {
          "description": "The AWS Region the cluster lives in.",
          "type": "string"
        },
        "sshKeyName": {
          "description": "SSHKeyName specifies which EC2 SSH key can be used to access machines.",
          "type": "string"
        },
        "vpcId": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      }
    },
    "v1EksClusterConfigEndpointAccess": {
      "description": "EndpointAccess specifies how control plane endpoints are accessible",
      "type": "object",
      "properties": {
        "private": {
          "description": "Private points VPC-internal control plane access to the private endpoint",
          "type": "boolean"
        },
        "privateCIDRs": {
          "description": "PrivateCIDRs specifies which blocks can access the private endpoint",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "public": {
          "description": "Public controls whether control plane endpoints are publicly accessible",
          "type": "boolean"
        },
        "publicCIDRs": {
          "description": "PublicCIDRs specifies which blocks can access the public endpoint",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1EksFargateProfiles": {
      "description": "Fargate profiles",
      "type": "object",
      "properties": {
        "fargateProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FargateProfile"
          }
        }
      }
    },
    "v1EksMachineCloudConfigEntity": {
      "properties": {
        "amiType": {
          "description": "ami type",
          "type": "string"
        },
        "awsLaunchTemplate": {
          "$ref": "#/definitions/v1AwsLaunchTemplate"
        },
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacityType": {
          "description": "EC2 instance capacity type",
          "type": "string",
          "default": "on-demand",
          "enum": [
            "on-demand",
            "spot"
          ]
        },
        "enableAwsLaunchTemplate": {
          "description": "flag to know if aws launch template is enabled",
          "type": "boolean"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1
        },
        "spotMarketOptions": {
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.",
          "$ref": "#/definitions/v1SpotMarketOptions"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksSubnetEntity"
          }
        }
      }
    },
    "v1EksMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "amiType": {
          "description": "ami type",
          "type": "string"
        },
        "awsLaunchTemplate": {
          "$ref": "#/definitions/v1AwsLaunchTemplate"
        },
        "azs": {
          "description": "AZs is only used for dynamic placement",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacityType": {
          "description": "EC2 instance capacity type",
          "type": "string",
          "default": "on-demand",
          "enum": [
            "on-demand",
            "spot"
          ]
        },
        "enableAwsLaunchTemplate": {
          "description": "flag to know if aws launch template is enabled",
          "type": "boolean"
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "type": "integer",
          "format": "int32"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "spotMarketOptions": {
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.",
          "$ref": "#/definitions/v1SpotMarketOptions"
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1EksMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EksMachineCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1EksSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1EncryptionConfig": {
      "description": "EncryptionConfig specifies the encryption configuration for the EKS clsuter.",
      "type": "object",
      "properties": {
        "isEnabled": {
          "description": "Is encryption configuration enabled for the cluster",
          "type": "boolean"
        },
        "provider": {
          "description": "Provider specifies the ARN or alias of the CMK (in AWS KMS)",
          "type": "string"
        },
        "resources": {
          "description": "Resources specifies the resources to be encrypted",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Event": {
      "description": "Describes the component event details",
      "type": "object",
      "properties": {
        "involvedObject": {
          "description": "Describes object involved in event generation",
          "type": "object",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "message": {
          "description": "Describes message associated with the event",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "reason": {
          "description": "Describes the reason for the event",
          "type": "string"
        },
        "relatedObject": {
          "description": "Describes object related to the event",
          "type": "object",
          "$ref": "#/definitions/v1EventRelatedObject"
        },
        "severity": {
          "description": "Describes the gravitas for the event",
          "type": "string"
        },
        "source": {
          "description": "Describes the origin for the event",
          "type": "object",
          "$ref": "#/definitions/v1EventSource"
        }
      }
    },
    "v1EventRelatedObject": {
      "description": "Object for which the event is related",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "spectrocluster",
            "edgehost"
          ]
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1EventSource": {
      "description": "Describes the origin for the event",
      "type": "object",
      "properties": {
        "component": {
          "description": "Describes the component where event originated",
          "type": "string"
        },
        "host": {
          "description": "Describes the host where event originated",
          "type": "string"
        }
      }
    },
    "v1Events": {
      "description": "An array of component events items",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Describes a list of returned component events",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Event"
          }
        },
        "listmeta": {
          "description": "Describes the meta information about the component event lists",
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1FargateProfile": {
      "description": "FargateProfile defines the desired state of FargateProfile",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "name specifies the profile name.",
          "type": "string"
        },
        "selectors": {
          "description": "Selectors specify fargate pod selectors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FargateSelector"
          }
        },
        "subnetIds": {
          "description": "SubnetIDs specifies which subnets are used for the auto scaling group of this nodegroup.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1FargateSelector": {
      "description": "FargateSelector specifies a selector for pods that should run on this fargate pool",
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "labels": {
          "description": "Labels specifies which pod labels this selector should match.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespace": {
          "description": "Namespace specifies which namespace this selector should match.",
          "type": "string"
        }
      }
    },
    "v1Feature": {
      "description": "Feature response",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1FeatureSpec"
        }
      }
    },
    "v1FeatureSpec": {
      "description": "Feature spec",
      "properties": {
        "description": {
          "description": "Feature description",
          "type": "string"
        },
        "docLink": {
          "description": "Feature doc link",
          "type": "string"
        },
        "key": {
          "description": "Feature key",
          "type": "string"
        }
      }
    },
    "v1FeatureUpdate": {
      "description": "Feature update spec",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1FeatureUpdateSpec"
        }
      }
    },
    "v1FeatureUpdateSpec": {
      "description": "Feature update spec",
      "properties": {
        "description": {
          "description": "Feature description",
          "type": "string"
        },
        "docLink": {
          "description": "Feature doc link",
          "type": "string"
        }
      }
    },
    "v1Features": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of features",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Feature"
          }
        }
      }
    },
    "v1FilterArray": {
      "type": "object",
      "properties": {
        "beginsWith": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": true
        },
        "eq": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": true
        },
        "ignoreCase": {
          "type": "boolean",
          "default": true
        },
        "ne": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": true
        }
      }
    },
    "v1FilterMetadata": {
      "description": "Filter metadata object",
      "type": "object",
      "properties": {
        "filterType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1FilterString": {
      "type": "object",
      "properties": {
        "beginsWith": {
          "type": "string",
          "x-nullable": true
        },
        "contains": {
          "type": "string",
          "x-nullable": true
        },
        "eq": {
          "type": "string",
          "x-nullable": true
        },
        "ignoreCase": {
          "type": "boolean",
          "default": true
        },
        "ne": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "v1FilterSummary": {
      "description": "Filter summary object",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1FilterSummarySpec"
        }
      }
    },
    "v1FilterSummarySpec": {
      "properties": {
        "filterType": {
          "type": "string"
        }
      }
    },
    "v1FilterVersionString": {
      "type": "object",
      "properties": {
        "beginsWith": {
          "type": "string",
          "x-nullable": true
        },
        "eq": {
          "type": "string",
          "x-nullable": true
        },
        "gt": {
          "type": "string",
          "x-nullable": true
        },
        "lt": {
          "type": "string",
          "x-nullable": true
        },
        "ne": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "v1FiltersMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1FilterMetadata"
          }
        }
      }
    },
    "v1FiltersSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1FilterSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1FipsSettings": {
      "description": "FIPS configuration",
      "properties": {
        "fipsClusterFeatureConfig": {
          "$ref": "#/definitions/v1NonFipsConfig"
        },
        "fipsClusterImportConfig": {
          "$ref": "#/definitions/v1NonFipsConfig"
        },
        "fipsPackConfig": {
          "$ref": "#/definitions/v1NonFipsConfig"
        }
      }
    },
    "v1FreemiumUsage": {
      "type": "object",
      "properties": {
        "usage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1FreemiumUsageLimit": {
      "type": "object",
      "properties": {
        "activeClusters": {
          "type": "integer",
          "x-omitempty": false
        },
        "overageUsage": {
          "type": "number",
          "x-omitempty": false
        },
        "usage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1GPUDeviceSpec": {
      "type": "object",
      "properties": {
        "addresses": {
          "description": "Addresses is a map of PCI device entry name to its addresses.\nExample entry would be \"11:00.0 VGA compatible controller [0300]: NVIDIA\nCorporation Device [10de:1eb1] (rev a1)\"- \u003e 0000_11_00_0\" The address is\nBDF (Bus Device Function) identifier format seperated by underscores. The\nfirst 4 bits are almost always 0000. In the above example 11 is Bus, 00\nis Device,0 is function. The values of these addreses are expected in hexadecimal\nformat\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gpuCount": {
          "description": "Number of GPUs",
          "type": "integer",
          "format": "int32"
        },
        "memory": {
          "description": "GPU memory specification",
          "type": "string"
        },
        "migCapable": {
          "description": "MIG capability flag",
          "type": "boolean"
        },
        "migStrategy": {
          "description": "MIG strategy configuration",
          "type": "string"
        },
        "model": {
          "description": "Model is the model of GPU, for a given vendor, for eg., TU104GL [Tesla T4]",
          "type": "string"
        },
        "vendor": {
          "description": "Vendor is the GPU vendor, for eg., NVIDIA or AMD",
          "type": "string"
        }
      }
    },
    "v1GcpAccount": {
      "description": "GCP account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpAccountSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1GcpAccountEntity": {
      "description": "GCP account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpAccountEntitySpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1GcpAccountEntitySpec": {
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "description": "Gcp cloud account json credentials",
          "type": "string"
        }
      }
    },
    "v1GcpAccountNameValidateSpec": {
      "description": "Gcp cloud account name validate spec",
      "type": "object",
      "required": [
        "credentials",
        "bucketName"
      ],
      "properties": {
        "bucketName": {
          "description": "Bucket name in the GCP",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1GcpAccountValidateSpec"
        },
        "projectId": {
          "description": "ProjectId in the GCP",
          "type": "string"
        }
      }
    },
    "v1GcpAccountSpec": {
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "description": "Gcp cloud account json credentials",
          "type": "string"
        }
      }
    },
    "v1GcpAccountValidateSpec": {
      "description": "Gcp cloud account entity which takes json credentials or reference to the file where credentials are stored",
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "description": "Gcp cloud account json credentials",
          "type": "string"
        }
      }
    },
    "v1GcpAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1GcpAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1GcpCloudAccountValidateEntity": {
      "description": "Gcp cloud account spec",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1GcpAccountValidateSpec"
        }
      }
    },
    "v1GcpCloudClusterConfigEntity": {
      "description": "Gcp cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1GcpClusterConfig"
        }
      }
    },
    "v1GcpCloudConfig": {
      "description": "GcpCloudConfig is the Schema for the gcpcloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1GcpCloudConfigStatus"
        }
      }
    },
    "v1GcpCloudConfigSpec": {
      "description": "GcpCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains GcpCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1GcpClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpMachinePoolConfig"
          }
        }
      }
    },
    "v1GcpCloudConfigStatus": {
      "description": "GcpCloudConfigStatus defines the observed state of GcpCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "description": "spectroAnsibleProvisioner: should be added only once, subsequent recocile will use the same provisioner SpectroAnsiblePacker bool `json:\"spectroAnsiblePacker,omitempty\"`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "$ref": "#/definitions/v1GcpImage"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in each pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1GcpClusterConfig": {
      "description": "Cluster level configuration for gcp cloud and applicable for all the machine pools",
      "type": "object",
      "required": [
        "project",
        "region"
      ],
      "properties": {
        "managedClusterConfig": {
          "$ref": "#/definitions/v1GcpManagedClusterConfig"
        },
        "network": {
          "description": "NetworkName if empty would create VPC Network in auto mode. If provided, custom VPC network will be used",
          "type": "string"
        },
        "project": {
          "description": "Name of the project in which cluster is to be deployed",
          "type": "string"
        },
        "region": {
          "description": "GCP region for the cluster",
          "type": "string"
        }
      }
    },
    "v1GcpImage": {
      "description": "Refers to GCP image",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1GcpImageUrlEntity": {
      "description": "Gcp image url entity",
      "type": "object",
      "properties": {
        "imageFamily": {
          "description": "The name of the image family to which this image belongs",
          "type": "string"
        },
        "imageUrl": {
          "description": "Server-defined URL for the resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource",
          "type": "string"
        }
      }
    },
    "v1GcpInstanceTypes": {
      "description": "Retrieves a list of GCP instance types",
      "type": "object",
      "properties": {
        "instanceTypes": {
          "description": "List of GCP instance types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          }
        }
      }
    },
    "v1GcpMachine": {
      "description": "GCP cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1GcpMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "type": "integer",
          "format": "int64"
        },
        "subnet": {
          "description": "Subnet specifies the subnetwork to use for given instance. If not specified, the first subnet from the cluster region and network is used",
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpSubnetEntity"
          }
        }
      }
    },
    "v1GcpMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane",
        "instanceType"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "type": "integer",
          "format": "int32"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "subnet": {
          "description": "Subnet specifies the subnetwork to use for given instance. If not specified, the first subnet from the cluster region and network is used",
          "type": "string"
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1GcpMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GcpMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1GcpMachineSpec": {
      "description": "GCP cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "image": {
          "type": "string"
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpNic"
          }
        },
        "project": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "rootDeviceSize": {
          "type": "integer",
          "format": "int64"
        },
        "zone": {
          "type": "string"
        }
      }
    },
    "v1GcpMachines": {
      "description": "GCP machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1GcpMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1GcpManagedClusterConfig": {
      "description": "GCP managed cluster config",
      "type": "object",
      "properties": {
        "enableAutoPilot": {
          "description": "EnableAutopilot indicates whether to enable autopilot for this GKE cluster",
          "type": "boolean"
        },
        "location": {
          "description": "Can be Region or Zone",
          "type": "string"
        }
      }
    },
    "v1GcpNetwork": {
      "description": "GCP network enity is a virtual version of a physical network",
      "type": "object",
      "properties": {
        "name": {
          "description": "GCP network name",
          "type": "string"
        },
        "subnets": {
          "description": "List of GCP subnet",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpSubnet"
          }
        }
      }
    },
    "v1GcpNetworks": {
      "description": "List of GCP networks",
      "type": "object",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpNetwork"
          }
        }
      }
    },
    "v1GcpNic": {
      "description": "GCP network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1GcpProject": {
      "description": "GCP project organizes all Google Cloud resources",
      "type": "object",
      "properties": {
        "id": {
          "description": "GCP project id",
          "type": "string"
        },
        "name": {
          "description": "GCP project name",
          "type": "string"
        }
      }
    },
    "v1GcpProjects": {
      "description": "List of GCP Projects",
      "type": "object",
      "properties": {
        "projects": {
          "description": "List of GCP Projects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpProject"
          }
        }
      }
    },
    "v1GcpRegion": {
      "description": "Geographical region made up of zones where you can host your GCP resources",
      "type": "object",
      "properties": {
        "name": {
          "description": "GCP region name",
          "type": "string"
        },
        "status": {
          "description": "GCP region status",
          "type": "string"
        }
      }
    },
    "v1GcpRegions": {
      "description": "List of GCP Regions",
      "type": "object",
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpRegion"
          }
        }
      }
    },
    "v1GcpStorageConfig": {
      "description": "GCP storage config object",
      "type": "object",
      "required": [
        "bucketName",
        "credentials"
      ],
      "properties": {
        "bucketName": {
          "description": "GCP storage bucket name",
          "type": "string"
        },
        "credentials": {
          "description": "GCP cloud account credentials",
          "$ref": "#/definitions/v1.GcpAccountEntitySpec"
        },
        "projectId": {
          "description": "GCP project id",
          "type": "string"
        }
      }
    },
    "v1GcpStorageTypes": {
      "description": "List of GCP storage types",
      "type": "object",
      "properties": {
        "storageTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageType"
          }
        }
      }
    },
    "v1GcpSubnet": {
      "description": "Subnets are regional resources, and have IP address ranges associated with them",
      "type": "object",
      "properties": {
        "id": {
          "description": "GCP subnet id",
          "type": "string"
        },
        "name": {
          "description": "GCP subnet name",
          "type": "string"
        }
      }
    },
    "v1GcpSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1GcpZone": {
      "description": "A zone is a deployment area for Google Cloud resources within a region",
      "type": "object",
      "properties": {
        "name": {
          "description": "GCP zone name",
          "type": "string"
        }
      }
    },
    "v1GcpZones": {
      "description": "List of GCP zones",
      "type": "object",
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpZone"
          }
        }
      }
    },
    "v1GenericCloudClusterConfigEntity": {
      "description": "Generic cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        }
      }
    },
    "v1GenericCloudConfig": {
      "description": "Generic CloudConfig for all cloud types",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GenericCloudConfigSpec"
        }
      }
    },
    "v1GenericCloudConfigSpec": {
      "description": "Generic CloudConfig spec for all cloud types",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "Cloud account reference is optional and dynamically handled based on the kind",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        },
        "edgeHostRefs": {
          "description": "Appliances (Edge Host) uids",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GenericMachinePoolConfig"
          }
        }
      }
    },
    "v1GenericClusterConfig": {
      "description": "Generic cluster config",
      "type": "object",
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1GenericInstanceType"
        },
        "region": {
          "description": "cluster region information",
          "type": "string"
        }
      }
    },
    "v1GenericInstanceType": {
      "type": "object",
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1GenericMachine": {
      "description": "Generic cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GenericMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1GenericMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "instanceType": {
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1GenericMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1GenericMachineSpec": {
      "description": "Generic cloud VM definition spec",
      "properties": {
        "hostName": {
          "type": "string"
        },
        "imageId": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1GenericInstanceType"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GenericNic"
          }
        },
        "sshKeyName": {
          "type": "string"
        }
      }
    },
    "v1GenericMachines": {
      "description": "Generic machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1GenericMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1GenericNic": {
      "description": "Generic network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1GeolocationLatlong": {
      "description": "Geolocation Latlong entity",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "Latitude of a resource",
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "longitude": {
          "description": "Longitude of a resource",
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1GitRepoFileContent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        }
      }
    },
    "v1GpuConfig": {
      "description": "GPU configuration for resource allocation",
      "properties": {
        "limit": {
          "description": "GPU resource limit",
          "type": "integer",
          "format": "int32",
          "minimum": -1,
          "x-omitempty": false
        },
        "provider": {
          "description": "GPU provider (only nvidia is supported currently)",
          "type": "string",
          "default": "nvidia",
          "enum": [
            "nvidia"
          ]
        }
      }
    },
    "v1HelmChartOption": {
      "description": "If chart options are provided then the specified chart is validated first and synced immediately. If the specified chart is not found in the specified registry then creation is cancelled.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1HelmRegistries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1HelmRegistry"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1HelmRegistriesSummary": {
      "description": "Helm Registries Summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1HelmRegistrySummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1HelmRegistry": {
      "description": "Helm registry information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1HelmRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1HelmRegistryStatus"
        }
      }
    },
    "v1HelmRegistryCreateOption": {
      "description": "Helm registry create options",
      "type": "object",
      "properties": {
        "charts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1HelmChartOption"
          }
        },
        "skipSync": {
          "type": "boolean"
        }
      }
    },
    "v1HelmRegistryEntity": {
      "description": "Helm registry information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1HelmRegistrySpecEntity"
        }
      }
    },
    "v1HelmRegistrySpec": {
      "description": "Helm registry credentials spec",
      "type": "object",
      "required": [
        "endpoint",
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "registryUid": {
          "description": "Helm registry uid",
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1HelmRegistrySpecEntity": {
      "description": "Helm registry credentials spec",
      "type": "object",
      "required": [
        "endpoint",
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "createOption": {
          "$ref": "#/definitions/v1HelmRegistryCreateOption"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1HelmRegistrySpecSummary": {
      "description": "Helm Registry spec summary",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean",
          "x-omitempty": false
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1HelmRegistryStatus": {
      "description": "Status of the helm registry",
      "type": "object",
      "properties": {
        "helmSyncStatus": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1HelmRegistryStatusSummary": {
      "description": "Helm registry status summary",
      "properties": {
        "sync": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1HelmRegistrySummary": {
      "description": "Helm Registry summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1HelmRegistrySpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1HelmRegistryStatusSummary"
        }
      }
    },
    "v1HostClusterConfig": {
      "properties": {
        "clusterEndpoint": {
          "description": "host cluster configuration",
          "$ref": "#/definitions/v1HostClusterEndpoint"
        },
        "clusterGroup": {
          "description": "cluster group reference",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "hostCluster": {
          "description": "host cluster reference",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "isHostCluster": {
          "description": "is enabled as host cluster",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        }
      }
    },
    "v1HostClusterConfigEntity": {
      "type": "object",
      "properties": {
        "hostClusterConfig": {
          "$ref": "#/definitions/v1HostClusterConfig"
        }
      }
    },
    "v1HostClusterConfigResponse": {
      "properties": {
        "clusterGroup": {
          "description": "cluster group reference",
          "$ref": "#/definitions/v1ObjectReference"
        }
      }
    },
    "v1HostClusterEndpoint": {
      "properties": {
        "config": {
          "$ref": "#/definitions/v1HostClusterEndpointConfig"
        },
        "type": {
          "description": "is enabled as host cluster",
          "type": "string",
          "enum": [
            "Ingress",
            "LoadBalancer"
          ]
        }
      }
    },
    "v1HostClusterEndpointConfig": {
      "properties": {
        "ingressConfig": {
          "$ref": "#/definitions/v1IngressConfig"
        },
        "loadBalancerConfig": {
          "$ref": "#/definitions/v1LoadBalancerConfig"
        }
      }
    },
    "v1HttpPatch": {
      "type": "object",
      "required": [
        "op",
        "path"
      ],
      "properties": {
        "from": {
          "description": "A path to the pointer from which reference will be taken",
          "type": "string"
        },
        "op": {
          "description": "The operation to be performed",
          "type": "string",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy"
          ]
        },
        "path": {
          "description": "A path to the pointer on which operation will be done",
          "type": "string"
        },
        "value": {
          "description": "The value to be used within the operations.",
          "type": "object"
        }
      }
    },
    "v1HybridCluster": {
      "properties": {
        "cloudConfigUid": {
          "description": "Cloud config uid",
          "type": "string"
        },
        "name": {
          "description": "Cluster name",
          "type": "string"
        },
        "uid": {
          "description": "Cluster uid",
          "type": "string"
        }
      }
    },
    "v1HybridClusterConfig": {
      "properties": {
        "clusterUid": {
          "description": "Parent cluster uid. Provided for hybrid (child) clusters only.",
          "type": "string"
        },
        "enable": {
          "description": "Flag differentiating if the cluster is an hybrid cluster or not. True for a cluster with hybrid mode enabled, false for the actual hybrid (child) clusters",
          "type": "boolean"
        },
        "hybridMachinePoolClusterRefs": {
          "description": "References to hybrid (child) clusters deployed within the hybrid cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1HybridPoolClusterRef"
          }
        }
      }
    },
    "v1HybridClusterMeta": {
      "description": "Object identity meta of hybrid cluster",
      "properties": {
        "name": {
          "description": "Name of the hybrid cluster",
          "type": "string"
        },
        "uid": {
          "description": "Uid of the hybrid cluster",
          "type": "string"
        }
      }
    },
    "v1HybridEdgeNativeMachineCloudConfig": {
      "description": "HybridEdgeNativeMachineCloudConfig defines hybrid Edge-Native cluster's machine configurations",
      "required": [
        "archType",
        "edgeHosts"
      ],
      "properties": {
        "archType": {
          "description": "Architecture type of the edge hosts",
          "x-omitempty": false,
          "$ref": "#/definitions/v1ArchType"
        },
        "edgeHosts": {
          "description": "Edge host's configuration",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeNativeHybridMachinePoolHost"
          }
        },
        "hybridCluster": {
          "description": "Hybrid cluster reference",
          "$ref": "#/definitions/v1HybridCluster"
        }
      }
    },
    "v1HybridEdgeNativeMachinePoolConfig": {
      "description": "HybridEdgeNativeMachinePoolConfig defines hybrid Edge-Native cluster's machine-pool configurations",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1HybridEdgeNativeMachineCloudConfig"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1HybridEdgeNativeMachinePoolConfigEntity": {
      "description": "Hybrid Edge-Native cluster's machine-pool configuration request payload",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EdgeNativeHybridConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1HybridEdgeNativeMachinePoolConfigUpdateEntity": {
      "description": "Hybrid Edge-Native cluster's machine-pool configuration update request payload",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EdgeNativeHybridMachineConfigEntity"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1EdgeNativeHybridClusterConfig"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1HybridMachinePool": {
      "description": "Metadata information related to a hybrid machine pool launched as part of an hybrid cluster",
      "properties": {
        "cloudConfigUid": {
          "description": "Cloud config uid associated with the hybrid machine pool",
          "type": "string"
        },
        "cloudType": {
          "description": "Cloud type of the hybrid machine pool",
          "type": "string"
        },
        "clusterUid": {
          "description": "Uid of the hybrid machine pool cluster",
          "type": "string"
        },
        "name": {
          "description": "Name of the hybrid machine pool",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1HybridMachinePoolStatus"
        },
        "uid": {
          "description": "Uid of the hybrid machine pool",
          "type": "string"
        }
      }
    },
    "v1HybridMachinePoolClusterHealth": {
      "description": "Machine pool cluster meta health information",
      "type": "object",
      "properties": {
        "isHeartBeatFailed": {
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1HybridMachinePoolStatus": {
      "description": "Get the hybrid machine pool's cluster status",
      "properties": {
        "health": {
          "description": "Health of the hybrid machine pool",
          "$ref": "#/definitions/v1HybridMachinePoolClusterHealth"
        },
        "state": {
          "description": "State of the hybrid machine pool",
          "type": "string"
        }
      }
    },
    "v1HybridPoolClusterCloudType": {
      "description": "Flag to indicate whether the pool is deployed in any cloud or an edge environment",
      "type": "string",
      "default": "edge-native",
      "enum": [
        "edge-native"
      ]
    },
    "v1HybridPoolClusterRef": {
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1HybridPoolClusterCloudType"
        },
        "uid": {
          "description": "Cluster uid",
          "type": "string"
        }
      }
    },
    "v1IPPool": {
      "description": "IPPool defines static IPs available. Gateway, Prefix, Nameserver, if defined, will be default values for all Pools",
      "type": "object",
      "properties": {
        "gateway": {
          "description": "Gateway is the gateway ip address",
          "type": "string"
        },
        "nameserver": {
          "description": "Nameserver provide information for dns resolvation",
          "$ref": "#/definitions/v1Nameserver"
        },
        "pools": {
          "description": "Pools contains the list of IP addresses pools",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Pool"
          }
        },
        "prefix": {
          "description": "Prefix is the mask of the network as integer (max 128)",
          "type": "integer",
          "format": "int32"
        },
        "uid": {
          "description": "UID is the UID of this IPPool, used by Hubble",
          "type": "string"
        }
      }
    },
    "v1IamRolesAnywhere": {
      "description": "IamRolesAnywhere specifies the IAM Roles Anywhere configuration for the AWS/EKS cluster",
      "type": "object",
      "properties": {
        "profileArn": {
          "description": "ProfileARN specifies the IAM profile ARN",
          "type": "string"
        },
        "roleArn": {
          "description": "RoleARN specifies the IAM role ARN to use",
          "type": "string"
        },
        "rootCaCertificate": {
          "description": "RootCACertificate specifies the root CA certificate",
          "type": "string"
        },
        "rootCaPrivateKey": {
          "description": "RootCAPrivateKey specifies the root CA private key",
          "type": "string"
        },
        "trustAnchorArn": {
          "description": "TrustAnchorARN specifies the trust anchor ARN",
          "type": "string"
        }
      }
    },
    "v1IdentityProvider": {
      "description": "Describes a predefined Identity Provider (IDP)",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1IdentityProviders": {
      "description": "Describes a list of predefined Identity Provider (IDP)",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1IdentityProvider"
      }
    },
    "v1ImportClusterConfig": {
      "type": "object",
      "properties": {
        "importMode": {
          "description": "If the importMode is empty then cluster is imported with full permission mode. By default importMode is empty and cluster is imported in full permission mode.",
          "type": "string",
          "enum": [
            "read-only"
          ]
        },
        "proxy": {
          "description": "Cluster proxy settings",
          "$ref": "#/definitions/v1ClusterProxySpec"
        }
      }
    },
    "v1ImportEdgeHostConfig": {
      "type": "object",
      "properties": {
        "edgeHostUid": {
          "description": "Deprecated. Use 'edgeHostUids' field",
          "type": "string"
        },
        "edgeHostUids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1IncludeClusterResourceMode": {
      "description": "Specifies the scope of cluster-wide resources to include in the backup based on the flag'--include-cluster-resources':\n- \"Always\": --include-cluster-resources=true, which includes all cluster-wide resources; restores only on the original cluster.\n- \"Auto\": don't specify --include-cluster-resources, which exclude general cluster-wide resources, but includes PersistentVolumes linked to selected namespaces.\n- \"Never\": --include-cluster-resources=false, exclude all cluster-wide resources, including PersistentVolumes.\n",
      "type": "string",
      "enum": [
        "Always",
        "Auto",
        "Never"
      ]
    },
    "v1InfraLBConfig": {
      "type": "object",
      "properties": {
        "apiServerLB": {
          "description": "APIServerLB is the configuration for the control-plane load balancer.",
          "$ref": "#/definitions/v1LoadBalancerSpec"
        }
      }
    },
    "v1IngressConfig": {
      "description": "Ingress configuration for exposing the virtual cluster's kube-apiserver",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1InstanceConfig": {
      "properties": {
        "category": {
          "type": "string"
        },
        "cpuSet": {
          "type": "integer",
          "format": "int64"
        },
        "diskGiB": {
          "type": "integer",
          "format": "int64"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1InstanceCost": {
      "description": "Instance cost entity",
      "type": "object",
      "properties": {
        "price": {
          "description": "Array of cloud instance price",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstancePrice"
          }
        }
      }
    },
    "v1InstancePrice": {
      "description": "Cloud instance price",
      "type": "object",
      "properties": {
        "onDemand": {
          "description": "OnDemand price of instance",
          "type": "number",
          "format": "double"
        },
        "os": {
          "description": "Os associated with instance price. Allowed values - [linux, windows]",
          "type": "string",
          "enum": [
            "linux",
            "windows"
          ]
        },
        "spot": {
          "description": "Spot price of instance",
          "type": "number",
          "format": "double"
        }
      }
    },
    "v1InstanceType": {
      "description": "Cloud Instance type details",
      "type": "object",
      "properties": {
        "category": {
          "description": "Category of instance type",
          "type": "string",
          "x-go-name": "Category"
        },
        "cost": {
          "$ref": "#/definitions/v1InstanceCost"
        },
        "cpu": {
          "description": "Cpu of instance type",
          "type": "number",
          "format": "double",
          "x-go-name": "Cpu"
        },
        "gpu": {
          "description": "Gpu of instance type",
          "type": "number",
          "format": "double",
          "x-go-name": "Gpu"
        },
        "memory": {
          "description": "Memory of instance type",
          "type": "number",
          "format": "double",
          "x-go-name": "Memory"
        },
        "nonSupportedZones": {
          "description": "Non supported zones of the instance in a particular region",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "price": {
          "description": "Price of instance type",
          "type": "number",
          "format": "double",
          "x-go-name": "Price"
        },
        "supportedArchitectures": {
          "description": "Supported architecture of the instance",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "Type of instance type",
          "type": "string",
          "x-go-name": "Type"
        }
      }
    },
    "v1Invoice": {
      "description": "Invoice object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1InvoiceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1InvoiceStatus"
        }
      }
    },
    "v1InvoiceBillingPeriod": {
      "description": "Invoice billing period object",
      "properties": {
        "end": {
          "$ref": "#/definitions/v1Time"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1InvoiceCredits": {
      "description": "Invoice credits object",
      "properties": {
        "alloyFreeCredits": {
          "description": "Credits allocated for import clusters",
          "type": "number",
          "format": "int64"
        },
        "pureFreeCredits": {
          "description": "Credits allocated for managed clusters",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1InvoicePlan": {
      "description": "Invoice plan object",
      "properties": {
        "freeCredits": {
          "description": "List of free credits",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InvoicePlanCredit"
          }
        },
        "plantype": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        },
        "slaCredits": {
          "description": "List of SLA credits",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InvoicePlanCredit"
          }
        }
      }
    },
    "v1InvoicePlanCredit": {
      "description": "Invoice plan credit object",
      "properties": {
        "planCredit": {
          "$ref": "#/definitions/v1PlanCredit"
        },
        "totalCpuCoreHours": {
          "description": "Total used cpu core hours",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1InvoiceProduct": {
      "description": "Product invoice object",
      "properties": {
        "alloy": {
          "$ref": "#/definitions/v1InvoiceProductData"
        },
        "pure": {
          "$ref": "#/definitions/v1InvoiceProductData"
        }
      }
    },
    "v1InvoiceProductData": {
      "description": "Product invoice data",
      "properties": {
        "allocatedCredits": {
          "description": "Allocated credits",
          "type": "number",
          "format": "int64"
        },
        "amount": {
          "description": "Total amount",
          "type": "number",
          "format": "float64"
        },
        "billableCredits": {
          "description": "Credits to be billed",
          "type": "number",
          "format": "float64"
        },
        "breachedCredits": {
          "description": "Credits that are exceeds the allocated credits",
          "type": "number",
          "format": "float64"
        },
        "discount": {
          "description": "Applied discount",
          "type": "number",
          "format": "int64"
        },
        "freeCredits": {
          "description": "Allocated free credits",
          "type": "number",
          "format": "int64"
        },
        "overageLimitPercentage": {
          "description": "Allowed overage limit in percentage",
          "type": "number",
          "format": "int8"
        },
        "tierName": {
          "description": "Tier name",
          "type": "string"
        },
        "tierPrice": {
          "description": "Tier price",
          "type": "number",
          "format": "float64"
        },
        "totalUsedCredits": {
          "description": "Total used credits",
          "type": "number",
          "format": "float64"
        },
        "usedCredits": {
          "description": "Used credits",
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1InvoiceProject": {
      "description": "Invoice project object",
      "properties": {
        "amount": {
          "description": "Billing amount for the project",
          "type": "number",
          "format": "float64"
        },
        "projectName": {
          "description": "Name of the project",
          "type": "string"
        },
        "projectUid": {
          "description": "Project identifier",
          "type": "string"
        },
        "usage": {
          "description": "Usage by the project",
          "$ref": "#/definitions/v1ProjectUsage"
        }
      }
    },
    "v1InvoiceSpec": {
      "description": "Invoice specification",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1Address"
        },
        "billingPeriod": {
          "$ref": "#/definitions/v1InvoiceBillingPeriod"
        },
        "credits": {
          "$ref": "#/definitions/v1InvoiceCredits"
        },
        "envType": {
          "description": "Environment type [Trial,MonthlyOnDemand,AnnualSubscription,OnPrem]",
          "type": "string"
        },
        "month": {
          "description": "Month for which invoice is generated",
          "$ref": "#/definitions/v1Time"
        },
        "paymentUnit": {
          "type": "string",
          "enum": [
            "usd"
          ]
        },
        "plan": {
          "$ref": "#/definitions/v1InvoicePlan"
        }
      }
    },
    "v1InvoiceState": {
      "description": "Invoice state object",
      "properties": {
        "paymentMsg": {
          "description": "Payment status message",
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "Paid",
            "PaymentPending",
            "PaymentInProgress",
            "PaymentFailed"
          ]
        },
        "timestamp": {
          "description": "Time on which the state has been updated",
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1InvoiceStatus": {
      "description": "Invoice Status",
      "properties": {
        "billableAmount": {
          "description": "Total billable amount",
          "type": "number",
          "format": "float64"
        },
        "productInvoice": {
          "$ref": "#/definitions/v1InvoiceProduct"
        },
        "projects": {
          "description": "List of project invoices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InvoiceProject"
          }
        },
        "states": {
          "description": "List of invoice states",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1InvoiceState"
          }
        },
        "stripeInvoiceId": {
          "description": "Stripe invoice uid",
          "type": "string"
        }
      }
    },
    "v1IpPoolEntity": {
      "description": "IP Pool entity definition",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "pool": {
              "$ref": "#/definitions/v1Pool"
            },
            "priavetGatewayUid": {
              "type": "string"
            },
            "restrictToSingleCluster": {
              "description": "if true, restricts this IP pool to be used by single cluster at any time",
              "type": "boolean",
              "x-omitempty": false
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1IpPoolStatus"
        }
      }
    },
    "v1IpPoolInputEntity": {
      "description": "IP Pool input entity definition",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "pool"
          ],
          "properties": {
            "pool": {
              "$ref": "#/definitions/v1Pool"
            },
            "restrictToSingleCluster": {
              "description": "if true, restricts this IP pool to be used by single cluster at any time",
              "type": "boolean"
            }
          }
        }
      }
    },
    "v1IpPoolStatus": {
      "description": "IP Pool status",
      "type": "object",
      "properties": {
        "allottedIps": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "associatedClusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "inUse": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1IpPools": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1IpPoolEntity"
          }
        }
      }
    },
    "v1K8MachineCertificate": {
      "description": "K8 Certificates for control plane nodes",
      "type": "object",
      "properties": {
        "certificateAuthorities": {
          "description": "Applicable certificate authorities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1k8CertificateAuthority"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1KubeBenchEntity": {
      "description": "KubeBench response",
      "required": [
        "requestUid",
        "status",
        "reports"
      ],
      "properties": {
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeBenchReportEntity"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ]
        }
      }
    },
    "v1KubeBenchLog": {
      "description": "Compliance Scan KubeBench Log",
      "properties": {
        "description": {
          "type": "string"
        },
        "expected": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1KubeBenchLogEntity": {
      "description": "KubeBench log",
      "properties": {
        "description": {
          "type": "string"
        },
        "expected": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1KubeBenchReport": {
      "description": "Compliance Scan KubeBench Report",
      "properties": {
        "fail": {
          "type": "integer",
          "format": "int32"
        },
        "info": {
          "type": "integer",
          "format": "int32"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KubeBenchLog"
          }
        },
        "name": {
          "type": "string"
        },
        "pass": {
          "type": "integer",
          "format": "int32"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string"
        },
        "warn": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1KubeBenchReportEntity": {
      "description": "KubeBench report",
      "properties": {
        "fail": {
          "type": "integer",
          "format": "int32"
        },
        "info": {
          "type": "integer",
          "format": "int32"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KubeBenchLogEntity"
          }
        },
        "name": {
          "type": "string"
        },
        "pass": {
          "type": "integer",
          "format": "int32"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string"
        },
        "warn": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1KubeHunterEntity": {
      "description": "KubeHunter response",
      "required": [
        "requestUid",
        "status",
        "reports"
      ],
      "properties": {
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeHunterReportEntity"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ]
        }
      }
    },
    "v1KubeHunterLog": {
      "description": "Compliance Scan KubeHunter Log",
      "properties": {
        "description": {
          "type": "string"
        },
        "evidence": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "vulnerability": {
          "type": "string"
        }
      }
    },
    "v1KubeHunterLogEntity": {
      "description": "KubeHunter log",
      "properties": {
        "description": {
          "type": "string"
        },
        "evidence": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "vulnerability": {
          "type": "string"
        }
      }
    },
    "v1KubeHunterReport": {
      "description": "Compliance Scan KubeHunter Report",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KubeHunterLog"
          }
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "vulnerabilites": {
          "$ref": "#/definitions/v1KubeHunterVulnerabilities"
        }
      }
    },
    "v1KubeHunterReportEntity": {
      "description": "KubeHunter report",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KubeHunterLogEntity"
          }
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "vulnerabilities": {
          "$ref": "#/definitions/v1KubeHunterVulnerabilityDataEntity"
        }
      }
    },
    "v1KubeHunterVulnerabilities": {
      "description": "Compliance Scan KubeHunter Vulnerabilities",
      "properties": {
        "high": {
          "type": "integer",
          "format": "int32"
        },
        "low": {
          "type": "integer",
          "format": "int32"
        },
        "medium": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1KubeHunterVulnerabilityDataEntity": {
      "description": "KubeHunter vulnerability data",
      "properties": {
        "high": {
          "type": "integer",
          "format": "int32"
        },
        "low": {
          "type": "integer",
          "format": "int32"
        },
        "medium": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1KubeMeta": {
      "description": "Spectro cluster kube meta",
      "type": "object",
      "properties": {
        "hasKubeConfig": {
          "type": "boolean",
          "x-omitempty": false
        },
        "hasKubeConfigClient": {
          "type": "boolean",
          "x-omitempty": false
        },
        "hasManifest": {
          "type": "boolean",
          "x-omitempty": false
        },
        "kubernetesVersion": {
          "type": "string"
        }
      }
    },
    "v1LifecycleConfig": {
      "properties": {
        "pause": {
          "description": "enable pause life cycle config",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        }
      }
    },
    "v1LifecycleConfigEntity": {
      "type": "object",
      "properties": {
        "lifecycleConfig": {
          "$ref": "#/definitions/v1LifecycleConfig"
        }
      }
    },
    "v1LifecycleStatus": {
      "properties": {
        "msg": {
          "description": "error or success msg of lifecycle",
          "type": "string"
        },
        "status": {
          "description": "lifecycle status",
          "type": "string",
          "enum": [
            "Pausing",
            "Paused",
            "Resuming",
            "Running",
            "Error"
          ]
        }
      }
    },
    "v1ListMetaData": {
      "description": "ListMeta describes metadata for the resource listing",
      "type": "object",
      "properties": {
        "continue": {
          "description": "Next token for the pagination. Next token is equal to empty string indicates end of result set.",
          "type": "string",
          "x-omitempty": false
        },
        "count": {
          "description": "Total count of the resources which might change during pagination based on the resources addition or deletion",
          "type": "integer",
          "x-omitempty": false
        },
        "limit": {
          "description": "Number of records feteched",
          "type": "integer",
          "x-omitempty": false
        },
        "offset": {
          "description": "The next offset for the pagination. Starting index for which next request will be placed.",
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1LoadBalancerConfig": {
      "description": "Load balancer configuration for exposing the virtual cluster's kube-apiserver",
      "properties": {
        "externalIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "externalTrafficPolicy": {
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1LoadBalancerService": {
      "type": "object",
      "properties": {
        "host": {
          "description": "IP or Host from svc.Status.LoadBalancerStatus.Ingress",
          "type": "string"
        },
        "name": {
          "description": "name of the loadbalancer service",
          "type": "string"
        },
        "ports": {
          "description": "port this service exposed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ServicePort"
          }
        }
      }
    },
    "v1LoadBalancerSpec": {
      "description": "LoadBalancerSpec defines an Azure load balancer.",
      "type": "object",
      "properties": {
        "apiServerLBStaticIP": {
          "type": "string"
        },
        "ipAllocationMethod": {
          "type": "string",
          "default": "Dynamic",
          "enum": [
            "Static",
            "Dynamic"
          ]
        },
        "privateDNSName": {
          "type": "string"
        },
        "privateDNSZoneResourceGroup": {
          "description": "PrivateDNSZoneResourceGroup defines the resource group to be used for Azure Private DNS Zone.\nIf not specified, the resource group of the cluster will be used to create the Azure Private DNS Zone.",
          "type": "string"
        },
        "type": {
          "description": "Load Balancer type",
          "type": "string",
          "default": "Public",
          "enum": [
            "Internal",
            "Public"
          ]
        }
      }
    },
    "v1LocationType": {
      "description": "Location type",
      "type": "string",
      "default": "s3",
      "enum": [
        "s3",
        "gcp",
        "minio"
      ]
    },
    "v1LoginBannerSettings": {
      "properties": {
        "Message": {
          "description": "Login banner message displayed to the user",
          "type": "string",
          "x-omitempty": false
        },
        "isEnabled": {
          "description": "Set to 'true' if login banner has to be displayed for user",
          "type": "boolean",
          "x-omitempty": false
        },
        "title": {
          "description": "Banner title displayed to the user",
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1LoginResponse": {
      "description": "Returns the allowed login method and information with the organization details",
      "type": "object",
      "properties": {
        "appEnv": {
          "description": "Describes the env type. Possible values [ saas, self-hosted, quick-start, enterprise, airgap]",
          "type": "string"
        },
        "authType": {
          "description": "Describes the default mode of authentication. Possible values [password, sso]",
          "type": "string",
          "enum": [
            "password",
            "sso"
          ]
        },
        "orgName": {
          "description": "Organization name.",
          "type": "string"
        },
        "redirectUrl": {
          "description": "Describes the default redirect Url for authentication. If authType is sso, it will have tenant configured saml/oidc idp url else it will be users organization url",
          "type": "string",
          "x-omitempty": false
        },
        "rootDomain": {
          "description": "Describes the domain url on which the saas is available",
          "type": "string"
        },
        "securityMode": {
          "description": "Describes which security mode is enabled",
          "type": "string"
        },
        "ssoLogins": {
          "description": "Just Inside. Describes the allowed social logins",
          "$ref": "#/definitions/v1SsoLogins"
        },
        "totalTenants": {
          "description": "Describes the total number of tenant present in the system",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1MaasAccount": {
      "description": "Maas cloud account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MaasCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1MaasAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1MaasCloudAccount": {
      "type": "object",
      "required": [
        "apiKey",
        "apiEndpoint"
      ],
      "properties": {
        "apiEndpoint": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "preferredSubnets": {
          "description": "list of preferred subnets order in the list reflects order in which subnets will be selected for ip address selection in apiserver dns endpoint this way user can specify external or preferable subnet \"10.11.130.0/24,10.10.10.0/24\"",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "v1MaasCloudClusterConfigEntity": {
      "description": "Maas cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        }
      }
    },
    "v1MaasCloudConfig": {
      "description": "MaasCloudConfig is the Schema for the maascloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MaasCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1MaasCloudConfigStatus"
        }
      }
    },
    "v1MaasCloudConfigSpec": {
      "description": "MaasCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains MaasCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MaasMachinePoolConfig"
          }
        }
      }
    },
    "v1MaasCloudConfigStatus": {
      "description": "MaasCloudConfigStatus defines the observed state of MaasCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "nodeImage": {
          "$ref": "#/definitions/v1MaasImage"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1MaasClusterConfig": {
      "description": "Cluster level configuration for MAAS cloud and applicable for all the machine pools",
      "type": "object",
      "required": [
        "domain"
      ],
      "properties": {
        "domain": {
          "description": "Domain name of the cluster to be provisioned",
          "type": "string"
        },
        "enableLxdVm": {
          "description": "enableLxdVm controls MaaS KVM host enablement for the Host ControlPlane cluster only.\nWhen true, Palette configures MaasMachineTemplate LXD settings so LXD initialization\nis triggered on nodes of this (host) cluster. This does not affect workload clusters.\nCannot be enabled for clusters where useLxdVm is enabled for any of the control plane machine pool configs.",
          "type": "boolean",
          "x-omitempty": false
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sshKeys": {
          "description": "SSH keys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1MaasDomain": {
      "description": "Maas domain",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of Maas domain",
          "type": "string"
        }
      }
    },
    "v1MaasDomains": {
      "description": "List of Maas domains",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasDomain"
          }
        }
      }
    },
    "v1MaasImage": {
      "description": "Name of the image",
      "type": "object",
      "properties": {
        "name": {
          "description": "full path of the image template location it contains datacenter/folder/templatename etc eg: /mydc/vm/template/spectro/workerpool-1-centos",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1MaasInstanceType": {
      "type": "object",
      "properties": {
        "minCPU": {
          "description": "Minimum CPU cores",
          "type": "integer",
          "format": "int32"
        },
        "minDiskSizeInGB": {
          "description": "Minimum disk size in GiB",
          "type": "integer",
          "format": "int32"
        },
        "minMemInMB": {
          "description": "Minimum memory in MiB",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1MaasMachine": {
      "description": "Maas cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MaasMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1MaasMachineConfigEntity": {
      "type": "object",
      "properties": {
        "azs": {
          "description": "for control plane pool, this will be the failure domains for kcp",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "$ref": "#/definitions/v1MaasInstanceType"
        },
        "network": {
          "$ref": "#/definitions/v1MaasNetworkConfigEntity"
        },
        "resourcePool": {
          "type": "string"
        },
        "useLxdVm": {
          "description": "useLxdVm enables on-demand LXD VM provisioning for this machine pool (workload clusters only).\nWhen true, machines in this pool are created as MAAS LXD-backed VMs instead of bare metal.",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1MaasMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType",
        "resourcePool"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "$ref": "#/definitions/v1MaasInstanceType"
        },
        "network": {
          "description": "network info",
          "$ref": "#/definitions/v1MaasNetworkConfigEntity"
        },
        "resourcePool": {
          "description": "the resource pool",
          "type": "string"
        },
        "tags": {
          "description": "Tags in maas environment",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useLxdVm": {
          "description": "useLxdVm enables on-demand LXD VM provisioning for this machine pool (workload clusters only).\nWhen true, machines in this pool are created as MAAS LXD-backed VMs instead of bare metal.",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1MaasMachinePoolConfig": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "InstanceType defines the required CPU, Memory",
          "$ref": "#/definitions/v1MaasInstanceType"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "network": {
          "description": "network info",
          "$ref": "#/definitions/v1MaasNetworkConfig"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "type": "integer",
          "format": "int32"
        },
        "resourcePool": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "tags": {
          "description": "Tags in maas environment",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        },
        "useLxdVm": {
          "description": "useLxdVm enables on-demand LXD VM provisioning for this machine pool (workload clusters only).\nWhen true, machines in this pool are created as MAAS LXD-backed VMs instead of bare metal.\nCannot be enabled for control plane machine pools when enableLxdVm is enabled in the cluster config.",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1MaasMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1MaasMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1MaasMachineSpec": {
      "description": "Maas cloud VM definition spec",
      "type": "object",
      "properties": {
        "az": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MaasNic"
          }
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1MaasMachines": {
      "description": "List of MAAS machines",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1MaasNetworkConfig": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "ipPool": {
          "description": "when staticIP=true, need to provide IPPool",
          "$ref": "#/definitions/v1IPPool"
        },
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolRef": {
          "description": "ParentPoolRef reference to the ParentPool which allocates IPs for this IPPool",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1MaasNetworkConfigEntity": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolUid": {
          "description": "ParentPoolRef Uid to the ParentPool which allocates IPs for this IPPool",
          "type": "string"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1MaasNic": {
      "description": "Maas network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1MaasPool": {
      "description": "Maas pool",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of Maas domain",
          "type": "string"
        },
        "name": {
          "description": "Name of Maas pool",
          "type": "string"
        }
      }
    },
    "v1MaasPools": {
      "description": "List of Maas pools",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasPool"
          }
        }
      }
    },
    "v1MaasSubnet": {
      "description": "Maas subnet",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of Maas subnet",
          "type": "integer"
        },
        "name": {
          "description": "Name of Maas subnet",
          "type": "string"
        },
        "space": {
          "description": "Space associated with Maas subnet",
          "type": "string"
        },
        "vlans": {
          "$ref": "#/definitions/v1MaasVlan"
        }
      }
    },
    "v1MaasSubnets": {
      "description": "List of Maas subnets",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasSubnet"
          }
        }
      }
    },
    "v1MaasTag": {
      "description": "Maas tag",
      "type": "object",
      "properties": {
        "comment": {
          "description": "Comment on Maas tag",
          "type": "string"
        },
        "definition": {
          "description": "Definition of Maas tag",
          "type": "string"
        },
        "kernelOpts": {
          "description": "Kernel Opts on Maas tag",
          "type": "string"
        },
        "name": {
          "description": "Name of Maas tag",
          "type": "string"
        },
        "resourceUri": {
          "description": "Description of Maas tag",
          "type": "string"
        }
      }
    },
    "v1MaasTags": {
      "description": "List of Maas tags",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasTag"
          }
        }
      }
    },
    "v1MaasVlan": {
      "description": "Maas vlan entity",
      "type": "object",
      "properties": {
        "fabric": {
          "description": "Fabric associated with Maas Vlan",
          "type": "string"
        },
        "id": {
          "description": "Id of Maas Vlan",
          "type": "integer"
        },
        "name": {
          "description": "Name of Maas Vlan",
          "type": "string"
        }
      }
    },
    "v1MaasZone": {
      "description": "Maas zone",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of Maas domain",
          "type": "string"
        },
        "name": {
          "description": "Name of Maas zone",
          "type": "string"
        }
      }
    },
    "v1MaasZones": {
      "description": "List of Maas zones",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasZone"
          }
        }
      }
    },
    "v1MachineCertificate": {
      "description": "K8 Certificates for control plane nodes",
      "type": "object",
      "properties": {
        "certificateAuthorities": {
          "description": "Applicable certificate authorities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CertificateAuthority"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1MachineCertificates": {
      "description": "K8 Certificates for all the cluster's control plane nodes",
      "type": "object",
      "properties": {
        "machineCertificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachineCertificate"
          }
        }
      }
    },
    "v1MachineHealth": {
      "description": "Machine health state",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachineHealthCondition"
          }
        },
        "lastHeartBeatTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1MachineHealthCheckConfig": {
      "type": "object",
      "properties": {
        "healthCheckMaxUnhealthy": {
          "description": "HealthCheckMaxUnhealthy is the value above which, if current nodes are unhealthy remediation will not be triggered Can be an absolute int64 number or a percentage string Default value is 100%, i.e by default it is disabled",
          "type": "string"
        },
        "networkReadyHealthCheckDuration": {
          "description": "NetworkReadyHealthCheckDuration is the timeout to check for the network availability. If the network is not available in the given available time, beyond the timeout check a node will be killed and a new node will be created. Default time is 10m",
          "type": "string"
        },
        "nodeReadyHealthCheckDuration": {
          "description": "NodeReadyHealthCheckDuration is the timeout to check for the node ready state. If the node is not ready within the time out set, the node will be deleted and a new node will be launched. Default time is 10m",
          "type": "string"
        }
      }
    },
    "v1MachineHealthCondition": {
      "description": "Machine health condition",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1MachineMaintenance": {
      "type": "object",
      "properties": {
        "action": {
          "description": "Machine maintenance mode action",
          "type": "string",
          "enum": [
            "cordon",
            "uncordon"
          ]
        }
      }
    },
    "v1MachineMaintenanceStatus": {
      "description": "Machine maintenance status",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1MachineManagementConfig": {
      "type": "object",
      "properties": {
        "osPatchConfig": {
          "description": "OS patch config contains properties to patch node os with latest security packages. \nIf OsPatchConfig is not provided then node os will not be patched with latest security updates.\nNote: For edge based cluster (like edge-native type) the osPatchConfig is NOT applicable, the values will be ignored.\n",
          "$ref": "#/definitions/v1OsPatchConfig"
        }
      }
    },
    "v1MachinePoolBaseConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1MachinePoolConfigEntity": {
      "description": "Machine pool configuration for the cluster",
      "type": "object",
      "required": [
        "name",
        "size",
        "labels"
      ],
      "properties": {
        "additionalLabels": {
          "description": "Additional labels to be part of the machine pool",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "isControlPlane": {
          "description": "Whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "Labels for this machine pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "Max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "Min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "description": "Size of the pool, number of nodes/machines",
          "type": "integer",
          "format": "int32"
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "Rolling update strategy for this machine pool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "If IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1MachinePoolMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "healthy": {
          "description": "number of healthy machines",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "infraProfileTemplate": {
          "description": "InfraClusterProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maintenanceMode": {
          "description": "number of machines under maintenance",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        }
      }
    },
    "v1MachinePoolProperties": {
      "description": "Machine pool specific properties",
      "type": "object",
      "properties": {
        "archType": {
          "description": "Architecture type of the pool. Default value is 'amd64'",
          "x-omitempty": false,
          "$ref": "#/definitions/v1ArchType"
        }
      }
    },
    "v1MachinePoolRate": {
      "description": "Machine pool estimated rate information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "nodesCount": {
          "type": "integer",
          "format": "int32"
        },
        "rate": {
          "$ref": "#/definitions/v1CloudRate"
        }
      }
    },
    "v1MachinePoolsMachineUids": {
      "properties": {
        "machinePools": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MachineUids"
          }
        }
      }
    },
    "v1MachineUids": {
      "properties": {
        "machineUids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Macro": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1Macros": {
      "properties": {
        "macros": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Macro"
          }
        }
      }
    },
    "v1ManagedDisk": {
      "type": "object",
      "properties": {
        "storageAccountType": {
          "type": "string"
        }
      }
    },
    "v1Manifest": {
      "description": "Manifest object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ManifestPublishedSpec"
        }
      }
    },
    "v1ManifestData": {
      "description": "Published manifest object",
      "type": "object",
      "properties": {
        "content": {
          "description": "Manifest content in yaml",
          "type": "string"
        },
        "digest": {
          "description": "Manifest digest",
          "type": "string"
        }
      }
    },
    "v1ManifestEntities": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Manifests array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ManifestEntity"
          }
        }
      }
    },
    "v1ManifestEntity": {
      "description": "Manifest object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ManifestSpec"
        }
      }
    },
    "v1ManifestInputEntity": {
      "description": "Manifest request payload",
      "properties": {
        "content": {
          "description": "Manifest content",
          "type": "string"
        },
        "name": {
          "description": "Manifest name",
          "type": "string"
        }
      }
    },
    "v1ManifestPublishedSpec": {
      "description": "Manifest spec",
      "properties": {
        "published": {
          "$ref": "#/definitions/v1ManifestData"
        }
      }
    },
    "v1ManifestRefInputEntities": {
      "description": "Pack manifests input params",
      "properties": {
        "manifests": {
          "description": "Pack manifests array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ManifestRefInputEntity"
          }
        }
      }
    },
    "v1ManifestRefInputEntity": {
      "description": "Manifest request payload",
      "properties": {
        "content": {
          "description": "Manifest content in yaml",
          "type": "string"
        },
        "uid": {
          "description": "Manifest uid",
          "type": "string"
        }
      }
    },
    "v1ManifestRefUpdateEntity": {
      "description": "Manifest update request payload",
      "required": [
        "name"
      ],
      "properties": {
        "content": {
          "description": "Manifest content in yaml",
          "type": "string"
        },
        "name": {
          "description": "Manifest name",
          "type": "string"
        },
        "uid": {
          "description": "Manifest uid",
          "type": "string"
        }
      }
    },
    "v1ManifestSpec": {
      "description": "Manifest spec",
      "type": "object",
      "properties": {
        "draft": {
          "$ref": "#/definitions/v1ManifestData"
        },
        "published": {
          "$ref": "#/definitions/v1ManifestData"
        }
      }
    },
    "v1ManifestSummary": {
      "description": "Manifest object",
      "properties": {
        "content": {
          "description": "Manifest content in yaml",
          "type": "string"
        },
        "name": {
          "description": "Manifest name",
          "type": "string"
        },
        "uid": {
          "description": "Manifest uid",
          "type": "string"
        }
      }
    },
    "v1Memory": {
      "type": "object",
      "properties": {
        "sizeInMB": {
          "description": "memory size in bytes",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1MetricAggregation": {
      "description": "Aggregation values",
      "type": "object",
      "properties": {
        "avg": {
          "type": "number",
          "x-omitempty": false
        },
        "count": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "max": {
          "type": "number",
          "x-omitempty": false
        },
        "min": {
          "type": "number",
          "x-omitempty": false
        },
        "sum": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1MetricMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1MetricPoint": {
      "description": "Metric Info",
      "type": "object",
      "properties": {
        "avg": {
          "type": "number"
        },
        "count": {
          "type": "number",
          "format": "int64"
        },
        "max": {
          "type": "number"
        },
        "min": {
          "type": "number"
        },
        "sum": {
          "type": "number"
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "value": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1MetricTimeSeries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Metrics"
          }
        }
      }
    },
    "v1MetricTimeSeriesList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MetricsList"
          }
        }
      }
    },
    "v1Metrics": {
      "type": "object",
      "properties": {
        "aggregation": {
          "$ref": "#/definitions/v1MetricAggregation"
        },
        "kind": {
          "type": "string"
        },
        "points": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MetricPoint"
          }
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "v1MetricsList": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1MetricMetadata"
        },
        "metrics": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Metrics"
          }
        }
      }
    },
    "v1Nameserver": {
      "description": "Nameserver define search domains and nameserver addresses",
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "search": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1NestedCloudConfigStatus": {
      "description": "Defines the status of virtual cloud config",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        }
      }
    },
    "v1Nic": {
      "type": "object",
      "properties": {
        "dns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "macAddr": {
          "type": "string"
        },
        "nicName": {
          "type": "string"
        },
        "subnet": {
          "type": "string"
        }
      }
    },
    "v1NodesAutoRemediationSettings": {
      "properties": {
        "disableNodesAutoRemediation": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isEnabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1NonFipsConfig": {
      "description": "Non-FIPS configuration",
      "properties": {
        "mode": {
          "description": "enable or disable the non FIPS complaint",
          "type": "string",
          "default": "nonFipsDisabled",
          "enum": [
            "nonFipsEnabled",
            "nonFipsDisabled"
          ]
        }
      }
    },
    "v1Notification": {
      "description": "Describes event notification and action definition",
      "type": "object",
      "properties": {
        "action": {
          "description": "Describes actions for the notification",
          "type": "object",
          "$ref": "#/definitions/v1NotificationAction"
        },
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1RelatedObject"
        },
        "source": {
          "description": "Describes origin info for the notification",
          "type": "object",
          "$ref": "#/definitions/v1NotificationSource"
        },
        "type": {
          "description": "Describes type of notification. Possible values [NotificationPackUpdate, NotificationPackRegistryUpdate, NotificationNone]",
          "type": "string",
          "enum": [
            "NotificationPackUpdate",
            "NotificationPackRegistryUpdate",
            "NotificationNone"
          ]
        }
      }
    },
    "v1NotificationAction": {
      "description": "Describes actions for the notification",
      "type": "object",
      "properties": {
        "ack": {
          "description": "Describes the acknowledgement status for the notification",
          "type": "boolean",
          "x-omitempty": false
        },
        "actionMessage": {
          "description": "Describes information related to notification action",
          "type": "string"
        },
        "actionType": {
          "description": "Describes action type for the notification. Possible Values [NotifyActionPacksUpdate, NotifyActionClusterProfileUpdate, NotifyActionPackRegistryUpdate, NotifyActionClusterUpdate, NotifyActionNone]",
          "type": "string",
          "enum": [
            "NotifyActionPacksUpdate",
            "NotifyActionClusterProfileUpdate",
            "NotifyActionPackRegistryUpdate",
            "NotifyActionClusterUpdate",
            "NotifyActionNone"
          ]
        },
        "events": {
          "description": "Describes the events happened for the notifications",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "isDone": {
          "description": "Describes the \"Done\" status for the notification",
          "type": "boolean",
          "x-omitempty": false
        },
        "isInfo": {
          "description": "Describes the notification as a information",
          "type": "boolean",
          "x-omitempty": false
        },
        "link": {
          "type": "string"
        }
      }
    },
    "v1NotificationEvent": {
      "description": "Describes notification event details",
      "type": "object",
      "properties": {
        "component": {
          "description": "Describes component of notification event",
          "type": "string"
        },
        "digest": {
          "description": "Describes notification event digest",
          "type": "string"
        },
        "message": {
          "description": "Describes a information for the notification event",
          "type": "string"
        },
        "meta": {
          "description": "Describes a event messages with meta digest as the key",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "description": "Describes notification event type",
          "type": "string",
          "enum": [
            "NotificationPackSync",
            "NotificationClusterProfileSync"
          ]
        }
      }
    },
    "v1NotificationSource": {
      "description": "Describes origin info for the notification",
      "type": "object",
      "properties": {
        "component": {
          "description": "Describes component where notification originated",
          "type": "string"
        }
      }
    },
    "v1Notifications": {
      "description": "Describe a list of generated notifications",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Describe a list of generated notifications",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Notification"
          }
        },
        "listmeta": {
          "description": "Describes the meta information about the notification lists",
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1OS": {
      "type": "object",
      "properties": {
        "family": {
          "type": "string"
        },
        "kernel": {
          "type": "string"
        },
        "kernelVersion": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ObjectEntity": {
      "description": "Object identity meta",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1Time"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1Time"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastModifiedTimestamp": {
          "description": "LastModifiedTimestamp is a timestamp representing the server time when this object was last modified. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1ObjectMetaInputEntity": {
      "description": "ObjectMeta input entity for object creation",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "v1ObjectMetaInputEntitySchema": {
      "description": "Resource metadata",
      "type": "object",
      "required": [
        "metadata"
      ],
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1ObjectMetaUpdateEntity": {
      "description": "ObjectMeta update entity with uid as input",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      }
    },
    "v1ObjectResReference": {
      "description": "Object resource reference",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projectUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ObjectScopeEntity": {
      "description": "Object scope identity meta",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ObjectStateEntity": {
      "description": "Object identity meta",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the object",
          "type": "string"
        },
        "state": {
          "description": "State of the object",
          "type": "string",
          "x-omitempty": false
        },
        "uid": {
          "description": "Uid of the object",
          "type": "string"
        }
      }
    },
    "v1ObjectTagsEntity": {
      "description": "Object identity meta with tags",
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1OciImageRegistry": {
      "description": "Oci Image Registry",
      "type": "object",
      "properties": {
        "baseContentPath": {
          "description": "baseContentPath is the root path for the registry content",
          "type": "string"
        },
        "caCert": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "insecureSkipVerify": {
          "type": "boolean"
        },
        "mirrorRegistries": {
          "description": "mirrorRegistries contains the array of image sources like gcr.io, ghcr.io, docker.io",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1OciRegistries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OciRegistry"
          }
        }
      }
    },
    "v1OciRegistry": {
      "description": "Oci registry information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OciRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1OciRegistryStatusSummary"
        }
      }
    },
    "v1OciRegistryEntity": {
      "description": "Oci registry credentials",
      "type": "object",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "defaultRegion": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "providerType": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1OciRegistrySpec": {
      "description": "Image registry spec",
      "type": "object",
      "properties": {
        "containsSpectroManifest": {
          "type": "boolean",
          "x-omitempty": false
        },
        "defaultRegion": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "providerType": {
          "type": "string"
        },
        "registryType": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1OciRegistryStatus": {
      "description": "Status of the oci registry",
      "type": "object",
      "properties": {
        "syncStatus": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1OciRegistryStatusSummary": {
      "description": "OCI registry status summary",
      "properties": {
        "sync": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1OidcIssuerTls": {
      "type": "object",
      "properties": {
        "caCertificateBase64": {
          "type": "string",
          "x-omitempty": false
        },
        "insecureSkipVerify": {
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        }
      }
    },
    "v1OidcUserInfo": {
      "type": "object",
      "properties": {
        "claims": {
          "$ref": "#/definitions/v1TenantOidcClaims"
        },
        "useUserInfo": {
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        }
      }
    },
    "v1OpenStackAccount": {
      "description": "OpenStack account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OpenStackCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1OpenStackAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1OpenStackAz": {
      "description": "OpenStack az entity",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of OpenStack az",
          "type": "string"
        }
      }
    },
    "v1OpenStackAzs": {
      "description": "List of OpenStack azs",
      "type": "object",
      "required": [
        "azs"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackAz"
          }
        }
      }
    },
    "v1OpenStackCloudAccount": {
      "description": "auth-url,project,username,password,domain,cacert etc",
      "type": "object",
      "required": [
        "identityEndpoint",
        "username",
        "password"
      ],
      "properties": {
        "caCert": {
          "description": "Ca cert for OpenStack",
          "type": "string"
        },
        "defaultDomain": {
          "description": "Default Domain name",
          "type": "string"
        },
        "defaultProject": {
          "description": "Default Project name",
          "type": "string"
        },
        "identityEndpoint": {
          "description": "Identity endpoint for OpenStack",
          "type": "string"
        },
        "insecure": {
          "description": "For self signed certs in IdentityEndpoint",
          "type": "boolean"
        },
        "parentRegion": {
          "description": "Parent region of OpenStack",
          "type": "string"
        },
        "password": {
          "description": "Password of OpenStack account",
          "type": "string"
        },
        "username": {
          "description": "Username of OpenStack account",
          "type": "string"
        }
      }
    },
    "v1OpenStackCloudClusterConfigEntity": {
      "description": "Openstack cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        }
      }
    },
    "v1OpenStackCloudConfig": {
      "description": "OpenStackCloudConfig is the Schema for the OpenStackcloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OpenStackCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1OpenStackCloudConfigStatus"
        }
      }
    },
    "v1OpenStackCloudConfigSpec": {
      "description": "OpenStackCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains OpenStackCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OpenStackMachinePoolConfig"
          }
        }
      }
    },
    "v1OpenStackCloudConfigStatus": {
      "description": "OpenStackCloudConfigStatus defines the observed state of OpenStackCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "nodeImage": {
          "type": "string"
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "type": "boolean"
        }
      }
    },
    "v1OpenStackClusterConfig": {
      "description": "Cluster level configuration for OpenStack cloud and applicable for all the machine pools",
      "type": "object",
      "properties": {
        "bastionDisabled": {
          "description": "Create bastion node option we have earlier supported creation of bastion by default",
          "type": "boolean"
        },
        "dnsNameservers": {
          "description": "DNSNameservers is the list of nameservers for OpenStack Subnet being created. Set this value when you need create a new network/subnet while the access through DNS is required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domain": {
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "network": {
          "description": "For static placement",
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "nodeCidr": {
          "description": "For dynamic provision NodeCIDR is the OpenStack Subnet to be created. Cluster actuator will create a network, a subnet with NodeCIDR, and a router connected to this subnet. If you leave this empty, no network will be created.",
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnet": {
          "$ref": "#/definitions/v1OpenStackResource"
        }
      }
    },
    "v1OpenStackDomain": {
      "description": "OpenStack domain. A Domain is a collection of projects, users, and roles",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description is the description of the Domain",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique ID of the domain",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the domain",
          "type": "string"
        }
      }
    },
    "v1OpenStackFlavor": {
      "description": "OpenStack flavor entity. Flavor represent (virtual) hardware configurations for server resources",
      "type": "object",
      "properties": {
        "disk": {
          "description": "Disk is the amount of root disk, measured in GB",
          "type": "integer"
        },
        "ephemeral": {
          "description": "Ephemeral is the amount of ephemeral disk space, measured in GB",
          "type": "integer"
        },
        "id": {
          "description": "ID is the flavor's unique ID",
          "type": "string"
        },
        "memory": {
          "description": "Amount of memory, measured in MB",
          "type": "integer"
        },
        "name": {
          "description": "Name is the name of the flavor",
          "type": "string"
        },
        "vcpus": {
          "description": "VCPUs indicates how many (virtual) CPUs are available for this flavor",
          "type": "integer"
        }
      }
    },
    "v1OpenStackFlavors": {
      "description": "List of OpenStack flavours",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackFlavor"
          }
        }
      }
    },
    "v1OpenStackKeypair": {
      "description": "OpenStack keypair. KeyPair is an SSH key known to the OpenStack Cloud that is available to be injected into servers",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is used to refer to this keypair from other services within this region",
          "type": "string"
        },
        "publicKey": {
          "description": "PublicKey is the public key from this pair, in OpenSSH format",
          "type": "string"
        }
      }
    },
    "v1OpenStackKeypairs": {
      "description": "List of OpenStack keypairs",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackKeypair"
          }
        }
      }
    },
    "v1OpenStackMachine": {
      "description": "OpenStack cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OpenStackMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1OpenStackMachineConfigEntity": {
      "type": "object",
      "required": [
        "flavorConfig"
      ],
      "properties": {
        "azs": {
          "description": "for control plane pool, this will be the failure domains for kcp",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "flavorConfig": {
          "$ref": "#/definitions/v1OpenstackFlavorConfig"
        }
      }
    },
    "v1OpenStackMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "flavorConfig"
      ],
      "properties": {
        "azs": {
          "description": "for control plane pool, this will be the failure domains for kcp",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "diskGiB": {
          "description": "Root disk size",
          "type": "integer",
          "format": "int32"
        },
        "flavorConfig": {
          "$ref": "#/definitions/v1OpenstackFlavorConfig"
        },
        "subnet": {
          "$ref": "#/definitions/v1OpenStackResource"
        }
      }
    },
    "v1OpenStackMachinePoolConfig": {
      "type": "object",
      "required": [
        "flavorConfig"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "description": "for control plane pool, this will be the failure domains for kcp",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "diskGiB": {
          "description": "DiskGiB is used to configure rootVolume, the volume metadata to boot from",
          "type": "integer",
          "format": "int32"
        },
        "flavor": {
          "description": "Openstack flavor name, only return argument",
          "type": "string"
        },
        "flavorConfig": {
          "description": "Openstack flavor configuration, input argument",
          "$ref": "#/definitions/v1OpenstackFlavorConfig"
        },
        "image": {
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "subnet": {
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1OpenStackMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1OpenStackMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1OpenStackMachineSpec": {
      "description": "OpenStack cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "nics"
      ],
      "properties": {
        "az": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "instanceType": {
          "description": "Instance flavor of the machine with cpu and memory info",
          "$ref": "#/definitions/v1GenericInstanceType"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OpenStackNic"
          }
        },
        "projectId": {
          "type": "string"
        },
        "securityGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sshKeyName": {
          "type": "string"
        }
      }
    },
    "v1OpenStackMachines": {
      "description": "OpenStack machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackMachine"
          }
        }
      }
    },
    "v1OpenStackNetwork": {
      "description": "OpenStack network",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of OpenStack network",
          "type": "string"
        },
        "id": {
          "description": "Id of OpenStack network",
          "type": "string"
        },
        "name": {
          "description": "Name of OpenStack network",
          "type": "string"
        },
        "subnets": {
          "description": "Subnets associated with OpenStack network",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackSubnet"
          }
        }
      }
    },
    "v1OpenStackNetworks": {
      "description": "List of OpenStack networks",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackNetwork"
          }
        }
      }
    },
    "v1OpenStackNic": {
      "description": "OpenStack network interface",
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1OpenStackProject": {
      "description": "Project represents an OpenStack Identity Project",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description is the description of the project",
          "type": "string"
        },
        "domainId": {
          "description": "DomainID is the domain ID the project belongs to",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique ID of the project",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the project",
          "type": "string"
        },
        "parentProjectId": {
          "description": "ParentID is the parent_id of the project",
          "type": "string"
        }
      }
    },
    "v1OpenStackProjects": {
      "description": "Array of OpenStack projects",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackProject"
          }
        }
      }
    },
    "v1OpenStackRegion": {
      "description": "OpenStack region entity",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of OpenStack region",
          "type": "string"
        },
        "id": {
          "description": "Id of OpenStack region",
          "type": "string"
        },
        "parentRegionId": {
          "description": "Parent region id of OpenStack region",
          "type": "string"
        }
      }
    },
    "v1OpenStackRegions": {
      "description": "List of OpenStack regions and domains",
      "type": "object",
      "required": [
        "regions",
        "domains"
      ],
      "properties": {
        "domains": {
          "description": "List of OpenStack domains",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackDomain"
          }
        },
        "regions": {
          "description": "List of OpenStack regions",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackRegion"
          }
        }
      }
    },
    "v1OpenStackResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1OpenStackSubnet": {
      "description": "OpenStack subnet entity",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description for the network",
          "type": "string"
        },
        "id": {
          "description": "UUID for the network",
          "type": "string"
        },
        "name": {
          "description": "Human-readable name for the network. Might not be unique",
          "type": "string"
        }
      }
    },
    "v1OpenstackFlavorConfig": {
      "required": [
        "name"
      ],
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB.",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Openstack flavor name",
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Organization": {
      "description": "Describes user's organization details",
      "type": "object",
      "properties": {
        "authType": {
          "description": "Describes user's enabled authorization mode",
          "type": "string"
        },
        "name": {
          "description": "Describes user's organization name",
          "type": "string"
        },
        "redirectUrl": {
          "description": "Describes user's organization authentication url",
          "type": "string"
        },
        "ssoLogins": {
          "description": "Describes a list of allowed social logins for the organization",
          "$ref": "#/definitions/v1SsoLogins"
        }
      }
    },
    "v1Organizations": {
      "description": "Returns a list of user's organizations details and login methods",
      "type": "object",
      "properties": {
        "organizations": {
          "description": "Describes a list of user's organization",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Organization"
          }
        }
      }
    },
    "v1OsPatchConfig": {
      "type": "object",
      "properties": {
        "onDemandPatchAfter": {
          "description": "OnDemandPatchAfter is the desired time for one time on-demand patch",
          "$ref": "#/definitions/v1Time"
        },
        "patchOnBoot": {
          "description": "PatchOnBoot indicates need to do patch when node first boot up, only once",
          "type": "boolean",
          "x-omitempty": false
        },
        "rebootIfRequired": {
          "description": "Reboot once the OS patch is applied",
          "type": "boolean",
          "x-omitempty": false
        },
        "schedule": {
          "description": "The schedule at which security patches will be applied to OS. Schedule should be in Cron format, see https://en.wikipedia.org/wiki/Cron for more help.",
          "type": "string"
        }
      }
    },
    "v1OsPatchEntity": {
      "type": "object",
      "properties": {
        "osPatchConfig": {
          "$ref": "#/definitions/v1OsPatchConfig"
        }
      }
    },
    "v1OsType": {
      "type": "string",
      "default": "Linux",
      "enum": [
        "Linux",
        "Windows"
      ]
    },
    "v1OverloadSpec": {
      "description": "Overload spec",
      "type": "object",
      "properties": {
        "cloudAccountUid": {
          "type": "string",
          "x-omitempty": false
        },
        "ipAddress": {
          "type": "string"
        },
        "ipPools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1IpPoolEntity"
          }
        },
        "isSelfHosted": {
          "type": "boolean"
        },
        "isSystem": {
          "type": "boolean"
        },
        "spectroClusterUid": {
          "type": "string",
          "x-omitempty": false
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1OverloadStatus": {
      "description": "Overload status",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1SpectroClusterHealthStatus"
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isReady": {
          "type": "boolean",
          "x-omitempty": false
        },
        "kubectlCommands": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "notifications": {
          "$ref": "#/definitions/v1ClusterNotificationStatus"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1OverloadVsphereOva": {
      "description": "Overload ova details",
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1Overlord": {
      "description": "Overlord defintiion",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OverloadSpec"
        },
        "status": {
          "$ref": "#/definitions/v1OverloadStatus"
        }
      }
    },
    "v1OverlordCloudStackAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1CloudStackCloudAccount"
        },
        "name": {
          "description": "Name for the private gateway \u0026 cloud account",
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordCloudStackAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1CloudStackCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordCloudStackCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1CloudStackCloudConfig"
        },
        "clusterProfiles": {
          "description": "Cluster profiles pack configuration for private gateway cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          }
        },
        "clusterSettings": {
          "description": "clusterSettings is the generic configuration related to a cluster like OS patch, Rbac, Namespace allocation",
          "$ref": "#/definitions/v1ClusterConfigEntity"
        },
        "machineConfig": {
          "$ref": "#/definitions/v1CloudStackMachineConfigEntity"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1OverlordMaasAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1MaasCloudAccount"
        },
        "name": {
          "description": "Name for the private gateway \u0026 cloud account",
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordMaasAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1MaasCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordMaasCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        },
        "clusterProfiles": {
          "description": "Cluster profiles pack configuration for private gateway cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          }
        },
        "clusterSettings": {
          "description": "clusterSettings is the generic configuration related to a cluster like OS patch, Rbac, Namespace allocation",
          "$ref": "#/definitions/v1ClusterConfigEntity"
        },
        "machineConfig": {
          "$ref": "#/definitions/v1MaasMachineConfigEntity"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1OverlordManifest": {
      "description": "overlord manifest",
      "type": "object",
      "properties": {
        "manifest": {
          "type": "string"
        }
      }
    },
    "v1OverlordMigrateEntity": {
      "properties": {
        "sourceUid": {
          "type": "string"
        },
        "targetUid": {
          "type": "string"
        }
      }
    },
    "v1OverlordOpenStackAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1OpenStackCloudAccount"
        },
        "name": {
          "description": "Name for the private gateway \u0026 cloud account",
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordOpenStackAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1OpenStackCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordOpenStackCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        },
        "clusterProfiles": {
          "description": "Cluster profiles pack configuration for private gateway cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          }
        },
        "clusterSettings": {
          "description": "clusterSettings is the generic configuration related to a cluster like OS patch, Rbac, Namespace allocation",
          "$ref": "#/definitions/v1ClusterConfigEntity"
        },
        "machineConfig": {
          "$ref": "#/definitions/v1OpenStackMachineConfigEntity"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1OverlordVsphereAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1VsphereCloudAccount"
        },
        "name": {
          "description": "Name for the private gateway \u0026 cloud account",
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordVsphereAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1VsphereCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordVsphereCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1VsphereOverlordClusterConfigEntity"
        },
        "clusterProfiles": {
          "description": "Cluster profiles pack configuration for private gateway cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          }
        },
        "clusterSettings": {
          "description": "clusterSettings is the generic configuration related to a cluster like OS patch, Rbac, Namespace allocation",
          "$ref": "#/definitions/v1ClusterConfigEntity"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Overlords": {
      "description": "Array of Overlords",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Overlord"
          }
        }
      }
    },
    "v1PackConfig": {
      "description": "Pack configuration",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1PackConfigSpec"
        }
      }
    },
    "v1PackConfigSpec": {
      "type": "object",
      "properties": {
        "associatedObject": {
          "type": "string"
        },
        "isValuesOverridden": {
          "type": "boolean",
          "x-omitempty": false
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackManifestRef"
          }
        },
        "name": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1PackDependency": {
      "description": "Pack template dependency",
      "type": "object",
      "properties": {
        "layer": {
          "description": "Pack template dependency pack layer",
          "type": "string"
        },
        "name": {
          "description": "Pack template dependency pack name",
          "type": "string"
        },
        "readOnly": {
          "description": "If true then dependency pack values can't be overridden",
          "type": "boolean"
        }
      }
    },
    "v1PackDependencyMeta": {
      "description": "Pack dependency metadata",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Pack display name",
          "type": "string"
        },
        "logoUrl": {
          "description": "Pack logo url",
          "type": "string"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "version": {
          "description": "Pack version",
          "type": "string"
        }
      }
    },
    "v1PackEntity": {
      "description": "Pack object",
      "type": "object",
      "required": [
        "uid",
        "name"
      ],
      "properties": {
        "layer": {
          "description": "Pack layer",
          "type": "string"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      }
    },
    "v1PackFilterSpec": {
      "description": "Packs filter spec",
      "properties": {
        "addOnSubType": {
          "description": "Pack add-on sub type such as monitoring, db etc",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "addOnType": {
          "description": "Pack add-on type such as logging, monitoring, security etc",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "environment": {
          "description": "Pack supported cloud types",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "isFips": {
          "description": "isFips compliant",
          "type": "boolean"
        },
        "layer": {
          "description": "Pack layer",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackLayer"
          }
        },
        "name": {
          "$ref": "#/definitions/v1FilterString"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "source": {
          "description": "The source filter describes the creation origin/source of the pack. Ex. source can be \"spectrocloud\" or \"community\"",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "state": {
          "description": "Pack state such as deprecated or disabled",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "Pack type",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackType"
          }
        }
      }
    },
    "v1PackImportEntity": {
      "description": "Pack import request payload",
      "type": "object",
      "properties": {
        "layer": {
          "description": "Pack layer [ \"os\", \"k8s\", \"cni\", \"csi\", \"addon\" ]",
          "type": "string"
        },
        "manifests": {
          "description": "Pack manifests array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackManifestImportEntity"
          }
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registry": {
          "$ref": "#/definitions/v1PackRegistryImportEntity"
        },
        "tag": {
          "description": "Pack version tag",
          "type": "string"
        },
        "type": {
          "description": "Pack type [ \"spectro\", \"helm\", \"manifest\", \"oci\" ]",
          "type": "string"
        },
        "values": {
          "description": "Pack values are the customizable configurations for the pack",
          "type": "string"
        },
        "version": {
          "description": "Pack version",
          "type": "string"
        }
      }
    },
    "v1PackInputEntity": {
      "description": "Pack request payload",
      "properties": {
        "pack": {
          "$ref": "#/definitions/v1PackManifestEntity"
        }
      }
    },
    "v1PackLayer": {
      "type": "string",
      "enum": [
        "kernel",
        "os",
        "k8s",
        "cni",
        "csi",
        "addon"
      ]
    },
    "v1PackManifestEntity": {
      "description": "Pack request payload",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "layer": {
          "description": "Pack layer",
          "type": "string"
        },
        "manifests": {
          "description": "Pack manifests are additional content as part of the profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManifestInputEntity"
          }
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "Pack values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      }
    },
    "v1PackManifestImportEntity": {
      "description": "Pack manifest import objct",
      "type": "object",
      "properties": {
        "content": {
          "description": "Pack manifest content in yaml",
          "type": "string"
        },
        "name": {
          "description": "Pack manifest name",
          "type": "string"
        }
      }
    },
    "v1PackManifestRef": {
      "type": "object",
      "properties": {
        "digest": {
          "type": "string"
        },
        "isOverridden": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "parentUid": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1PackManifestUpdateEntity": {
      "description": "Pack input entity with values to overwrite and manifests for the intial creation",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "layer": {
          "description": "Pack layer",
          "type": "string"
        },
        "manifests": {
          "description": "Pack manifests are additional content as part of the profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManifestRefUpdateEntity"
          }
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "Pack values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      }
    },
    "v1PackManifests": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Manifests array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Manifest"
          }
        }
      }
    },
    "v1PackManifestsSpec": {
      "description": "Pack manifests spec",
      "type": "object",
      "properties": {
        "addonType": {
          "description": "Pack add-on type such as logging, monitoring, security etc",
          "type": "string"
        },
        "annotations": {
          "description": "Pack annotations is used to allow pack to add more arbitrary configurations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cloudTypes": {
          "description": "Pack supported cloud types",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "digest": {
          "description": "Pack digest",
          "type": "string"
        },
        "displayName": {
          "description": "Pack display name",
          "type": "string"
        },
        "eol": {
          "description": "Pack end of life, date format: yyyy-MM-dd",
          "type": "string"
        },
        "group": {
          "description": "Pack group",
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "description": "Pack logo url",
          "type": "string"
        },
        "manifests": {
          "description": "Pack manifests are additional content as part of the cluster profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManifestSummary"
          }
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "presets": {
          "description": "Pack presets are the set of configurations applied on user selection of presets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          }
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "schema": {
          "description": "Pack schema contains constraints such as data type, format, hints for the pack values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          }
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "values": {
          "description": "Pack values",
          "type": "string"
        },
        "version": {
          "description": "Pack version",
          "type": "string"
        }
      }
    },
    "v1PackMetadata": {
      "description": "Pack metadata object",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Pack api version",
          "type": "string"
        },
        "kind": {
          "description": "Pack kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackMetadataSpec"
        }
      }
    },
    "v1PackMetadataList": {
      "description": "List of packs metadata",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Packs metadata array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackMetadata"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1PackMetadataSpec": {
      "description": "Pack metadata spec",
      "type": "object",
      "properties": {
        "addonSubType": {
          "description": "Pack add-on sub type such as monitoring, db etc",
          "type": "string"
        },
        "addonType": {
          "description": "Pack add-on type such as logging, monitoring, security etc",
          "type": "string"
        },
        "cloudTypes": {
          "description": "Pack supported cloud types",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "description": "Pack display name",
          "type": "string"
        },
        "group": {
          "description": "Pack group",
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registries": {
          "description": "Pack registries array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RegistryPackMetadata"
          }
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        }
      }
    },
    "v1PackParamsEntity": {
      "description": "Pack params request payload",
      "properties": {
        "references": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PackPreset": {
      "description": "PackPreset defines the preset pack values",
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "x-omitempty": false
        },
        "displayName": {
          "type": "string",
          "x-omitempty": false
        },
        "group": {
          "type": "string",
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "remove": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        }
      }
    },
    "v1PackReadme": {
      "properties": {
        "readme": {
          "description": "Readme describes the documentation of the specified pack",
          "type": "string"
        }
      }
    },
    "v1PackRef": {
      "description": "PackRef server/name:tag to point to a pack PackRef is used when construct a ClusterProfile PackSpec is used for UI to render the parameters form ClusterProfile will not know inner details of a pack ClusterProfile only contain pack name:tag, and the param values user entered for it",
      "type": "object",
      "required": [
        "layer",
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is used to allow packref to add more arbitrary information one example is to add git reference for values.yaml",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "digest": {
          "description": "digest is used to specify the version should be installed by palette when pack upgrade available, change this digest to trigger upgrade",
          "type": "string"
        },
        "inValidReason": {
          "type": "string"
        },
        "isInvalid": {
          "description": "pack is invalid when the associated tag is deleted from the registry",
          "type": "boolean"
        },
        "layer": {
          "type": "string",
          "enum": [
            "kernel",
            "os",
            "k8s",
            "cni",
            "csi",
            "addon"
          ]
        },
        "logo": {
          "description": "path to the pack logo",
          "type": "string"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "name": {
          "description": "pack name",
          "type": "string"
        },
        "packUid": {
          "description": "PackUID is Hubble packUID, not palette Pack.UID It is used by Hubble only.",
          "type": "string"
        },
        "params": {
          "description": "params passed as env variables to be consumed at installation time",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "presets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          }
        },
        "registryUid": {
          "description": "pack registry uid",
          "type": "string"
        },
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          }
        },
        "server": {
          "description": "pack registry server or helm repo",
          "type": "string"
        },
        "tag": {
          "description": "pack tag",
          "type": "string"
        },
        "type": {
          "description": "type of the pack",
          "type": "string",
          "enum": [
            "spectro",
            "helm",
            "manifest",
            "oci"
          ]
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        },
        "version": {
          "description": "pack version",
          "type": "string"
        }
      }
    },
    "v1PackRefSummary": {
      "description": "Pack ref summary",
      "properties": {
        "addonType": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1PackRefSummaryResponse": {
      "description": "Pack summary response",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackRefSummarySpec"
        }
      }
    },
    "v1PackRefSummarySpec": {
      "description": "Pack summary spec",
      "properties": {
        "macros": {
          "$ref": "#/definitions/v1PackResolvedValues"
        },
        "pack": {
          "$ref": "#/definitions/v1PackSummarySpec"
        },
        "registry": {
          "$ref": "#/definitions/v1RegistryMetadata"
        }
      }
    },
    "v1PackRegistries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackRegistry"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1PackRegistriesSummary": {
      "description": "Pack Registries Summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackRegistrySummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1PackRegistry": {
      "description": "Pack registry information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackRegistryStatus"
        }
      }
    },
    "v1PackRegistryImportEntity": {
      "description": "Pack registry import entity",
      "type": "object",
      "properties": {
        "matchingRegistries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRegistryMetadata"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1PackRegistryMetadata"
        }
      }
    },
    "v1PackRegistryMetadata": {
      "description": "Pack registry metadata",
      "type": "object",
      "properties": {
        "isPrivate": {
          "description": "If true then helm registry is private and is not accessible for the content sync",
          "type": "boolean",
          "x-omitempty": false
        },
        "isSyncSupported": {
          "description": "If true the registry sync is supported",
          "type": "boolean",
          "x-omitempty": false
        },
        "kind": {
          "description": "Pack registry kind [ \"pack\", \"helm\", \"oci\" ]",
          "type": "string"
        },
        "name": {
          "description": "Pack registry name",
          "type": "string"
        },
        "providerType": {
          "description": "OCI registry provider type [ \"helm\", \"pack\", \"zarf\" ]",
          "type": "string"
        },
        "uid": {
          "description": "Pack registry uid",
          "type": "string"
        }
      }
    },
    "v1PackRegistrySpec": {
      "description": "Pack registry credentials spec",
      "type": "object",
      "required": [
        "endpoint",
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "x-omitempty": false
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1PackRegistrySpecSummary": {
      "description": "Pack Registry spec summary",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "x-omitempty": false
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1PackRegistryStatus": {
      "description": "Status of the pack registry",
      "type": "object",
      "properties": {
        "packSyncStatus": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1PackRegistryStatusSummary": {
      "description": "Pack registry status summary",
      "type": "object",
      "properties": {
        "sync": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1PackRegistrySummary": {
      "description": "Pack Registry summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackRegistrySpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1PackRegistryStatusSummary"
        }
      }
    },
    "v1PackResolvedValues": {
      "description": "Pack resolved values",
      "properties": {
        "resolved": {
          "description": "Pack resolved values map",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1PackSchema": {
      "description": "PackSchema defines the schema definition, hints for the pack values",
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "x-omitempty": false
        },
        "hints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "listOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "readonly": {
          "type": "boolean",
          "x-omitempty": false
        },
        "regex": {
          "type": "string",
          "x-omitempty": false
        },
        "required": {
          "type": "boolean",
          "x-omitempty": false
        },
        "type": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1PackSortFields": {
      "description": "Packs sort by fields",
      "type": "string",
      "enum": [
        "name",
        "type",
        "layer",
        "addOnType",
        "displayName"
      ],
      "x-nullable": true
    },
    "v1PackSortSpec": {
      "description": "Packs sort spec",
      "properties": {
        "field": {
          "$ref": "#/definitions/v1PackSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1PackSummaries": {
      "description": "List of packs",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Packs array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1PackSummary": {
      "description": "Pack summary object",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Pack api version",
          "type": "string"
        },
        "kind": {
          "description": "Pack kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackSummaryStatus"
        }
      }
    },
    "v1PackSummarySpec": {
      "description": "Pack object",
      "type": "object",
      "properties": {
        "addonSubType": {
          "description": "Pack add-on sub type such as monitoring, db etc",
          "type": "string"
        },
        "addonType": {
          "description": "Pack add-on type such as logging, monitoring, security etc",
          "type": "string"
        },
        "annotations": {
          "description": "Pack annotations is used to allow pack to add more arbitrary configurations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cloudTypes": {
          "description": "Pack supported cloud types",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "digest": {
          "description": "Pack digest",
          "type": "string"
        },
        "displayName": {
          "description": "Pack display name",
          "type": "string"
        },
        "eol": {
          "description": "Pack end of life, date format: yyyy-MM-dd",
          "type": "string"
        },
        "group": {
          "description": "Pack group",
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "description": "Pack logo url",
          "type": "string"
        },
        "manifests": {
          "description": "Pack manifests are additional content as part of the cluster profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "presets": {
          "description": "Pack presets are the set of configurations applied on user selection of presets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          }
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "schema": {
          "description": "Pack schema contains constraints such as data type, format, hints for the pack values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          }
        },
        "template": {
          "$ref": "#/definitions/v1PackTemplate"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "values": {
          "description": "Pack values",
          "type": "string"
        },
        "version": {
          "description": "Pack version",
          "type": "string"
        }
      }
    },
    "v1PackSummaryStatus": {
      "description": "Pack status",
      "type": "object"
    },
    "v1PackTagEntity": {
      "description": "Pack object",
      "type": "object",
      "properties": {
        "addonSubType": {
          "description": "Pack add-on sub type such as monitoring, db etc",
          "type": "string"
        },
        "addonType": {
          "description": "Pack add-on type such as logging, monitoring, security etc",
          "type": "string"
        },
        "cloudTypes": {
          "description": "Pack supported cloud types",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "description": "Pack display name",
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "description": "Pack logo url",
          "type": "string"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "packValues": {
          "description": "Pack values array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackUidValues"
          }
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "tags": {
          "description": "Pack version tags array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackTags"
          }
        }
      }
    },
    "v1PackTags": {
      "type": "object",
      "properties": {
        "group": {
          "description": "Pack group",
          "type": "string"
        },
        "packUid": {
          "description": "Pack uid",
          "type": "string"
        },
        "parentTags": {
          "description": "Pack version parent tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tag": {
          "description": "Pack version tag",
          "type": "string"
        },
        "version": {
          "description": "Pack version",
          "type": "string"
        }
      }
    },
    "v1PackTemplate": {
      "description": "Pack template configuration",
      "properties": {
        "manifest": {
          "description": "Pack template manifest content",
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/v1PackTemplateParameters"
        },
        "values": {
          "description": "Pack template values",
          "type": "string"
        }
      }
    },
    "v1PackTemplateParameter": {
      "description": "Pack template parameter",
      "properties": {
        "description": {
          "description": "Pack template parameter description",
          "type": "string"
        },
        "displayName": {
          "description": "Pack template parameter display name",
          "type": "string"
        },
        "format": {
          "description": "Pack template parameter format",
          "type": "string"
        },
        "hidden": {
          "description": "Pack template parameter hidden flag, if true then the parameter is hidden in the UI",
          "type": "boolean"
        },
        "listOptions": {
          "description": "Pack template parameter list options as string array",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Pack template parameter name",
          "type": "string"
        },
        "optional": {
          "description": "Pack template parameter optional flag, if true then the parameter value is not mandatory",
          "type": "boolean"
        },
        "options": {
          "description": "Pack template parameter options array",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "$ref": "#/definitions/v1PackTemplateParameterOption"
          }
        },
        "readOnly": {
          "description": "Pack template parameter readonly flag, if true then the parameter value can't be overridden",
          "type": "boolean"
        },
        "regex": {
          "description": "Pack template parameter regex, if set then parameter value must match with specified regex",
          "type": "string"
        },
        "targetKey": {
          "description": "Pack template parameter target key which is mapped to the key defined in the pack values",
          "type": "string"
        },
        "type": {
          "description": "Pack template parameter data type",
          "type": "string"
        },
        "value": {
          "description": "Pack template parameter value",
          "type": "string"
        }
      }
    },
    "v1PackTemplateParameterOption": {
      "description": "Pack template parameter option",
      "type": "object",
      "properties": {
        "dependencies": {
          "description": "Pack template parameter dependencies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackDependency"
          }
        },
        "description": {
          "description": "Pack template parameter description",
          "type": "string"
        },
        "label": {
          "description": "Pack template parameter label",
          "type": "string"
        }
      }
    },
    "v1PackTemplateParameters": {
      "description": "Pack template parameters",
      "properties": {
        "inputParameters": {
          "description": "Pack template input parameters array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackTemplateParameter"
          }
        },
        "outputParameters": {
          "description": "Pack template output parameters array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackTemplateParameter"
          }
        }
      }
    },
    "v1PackType": {
      "type": "string",
      "default": "spectro",
      "enum": [
        "spectro",
        "helm",
        "manifest",
        "oci"
      ]
    },
    "v1PackUidValues": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Pack annotations is used to allow pack to add more arbitrary configurations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "Pack dependencies array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackDependencyMeta"
          }
        },
        "packUid": {
          "description": "Pack uid",
          "type": "string"
        },
        "presets": {
          "description": "Pack presets are the set of configurations applied on user selection of presets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          }
        },
        "readme": {
          "description": "Readme describes the documentation of the specified pack",
          "type": "string"
        },
        "schema": {
          "description": "Pack schema contains constraints such as data type, format, hints for the pack values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          }
        },
        "template": {
          "$ref": "#/definitions/v1PackTemplate"
        },
        "values": {
          "description": "Pack values represents the values.yaml used as input parameters",
          "type": "string"
        }
      }
    },
    "v1PackUpdateEntity": {
      "description": "Pack update request payload",
      "properties": {
        "pack": {
          "$ref": "#/definitions/v1PackEntity"
        }
      }
    },
    "v1PackValuesEntity": {
      "description": "Pack values entity to refer the existing pack for the values override",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "manifests": {
          "description": "Pack manifests are additional content as part of the profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManifestRefUpdateEntity"
          }
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "tag": {
          "description": "Pack version tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "values": {
          "description": "Pack values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      }
    },
    "v1PacksFilterSpec": {
      "description": "Packs filter spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1PackFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackSortSpec"
          }
        }
      }
    },
    "v1PairingCode": {
      "description": "Pairing code response",
      "type": "object",
      "properties": {
        "pairingCode": {
          "type": "string"
        }
      }
    },
    "v1Partition": {
      "type": "object",
      "properties": {
        "fileSystemType": {
          "type": "string"
        },
        "freeSpace": {
          "type": "integer",
          "format": "int32"
        },
        "mountPoint": {
          "type": "string"
        },
        "totalSpace": {
          "type": "integer",
          "format": "int32"
        },
        "usedSpace": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1PasswordsBlockListEntity": {
      "description": "List of block listed passwords",
      "type": "object",
      "properties": {
        "passwords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PcgSelfHostedParams": {
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1PcgServiceKubectlCommands": {
      "description": "Array of kubectl commands",
      "type": "object",
      "required": [
        "kubectlCommands"
      ],
      "properties": {
        "kubectlCommands": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "overlordUid": {
          "type": "string"
        }
      }
    },
    "v1PcgsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Overlord"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1Permission": {
      "description": "Permission information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "$ref": "#/definitions/v1Scope"
        }
      }
    },
    "v1Permissions": {
      "description": "Array of permissions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1Permission"
      }
    },
    "v1PlanCredit": {
      "description": "Plan Credit",
      "required": [
        "type"
      ],
      "properties": {
        "cpuCoreHours": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "creditUid": {
          "type": "string"
        },
        "expiry": {
          "description": "credit expiry time",
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "start": {
          "description": "credit start time",
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Pure",
            "Alloy"
          ]
        }
      }
    },
    "v1PodAntiAffinity": {
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "type": "object",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmWeightedPodAffinityTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmPodAffinityTerm"
          }
        }
      }
    },
    "v1PolicyRef": {
      "description": "Policy reference",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of the policy",
          "type": "string"
        },
        "uid": {
          "description": "UID of the policy",
          "type": "string"
        }
      }
    },
    "v1Pool": {
      "description": "Pool defines IP ranges or with CIDR for available IPs Gateway, Prefix and Nameserver if provided, will overwrite values in IPPool",
      "type": "object",
      "properties": {
        "end": {
          "description": "End is the last IP address that can be rendered. It is used as a validation that the rendered IP is in bound.",
          "type": "string"
        },
        "gateway": {
          "description": "Gateway is the gateway ip address",
          "type": "string"
        },
        "nameserver": {
          "description": "Nameserver provide information for dns resolvation",
          "$ref": "#/definitions/v1Nameserver"
        },
        "prefix": {
          "description": "Prefix is the mask of the network as integer (max 128)",
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "description": "Start is the first ip address that can be rendered",
          "type": "string"
        },
        "subnet": {
          "description": "Subnet is used to validate that the rendered IP is in bounds. eg: 192.168.0.0/24 If Start value is not given, start value is derived from the subnet ip incremented by 1 (start value is `192.168.0.1` for subnet `192.168.0.0/24`)",
          "type": "string"
        }
      }
    },
    "v1PrivateCloudRateConfig": {
      "description": "Private cloud rate config",
      "properties": {
        "cpuUnitPricePerHour": {
          "type": "number",
          "format": "float64"
        },
        "gpuUnitPricePerHour": {
          "type": "number",
          "format": "float64"
        },
        "memoryUnitPriceGiBPerHour": {
          "type": "number",
          "format": "float64"
        },
        "storageUnitPriceGiBPerHour": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1ProfileMetaEntity": {
      "description": "Cluster profile metadata request payload",
      "type": "object",
      "required": [
        "metadata"
      ],
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterProfileSpecEntity"
        }
      }
    },
    "v1ProfileResolvedValues": {
      "description": "Cluster profile resolved pack values",
      "properties": {
        "resolved": {
          "description": "Cluster profile pack resolved values",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        }
      }
    },
    "v1ProfileStatus": {
      "type": "object",
      "properties": {
        "hasUserMacros": {
          "description": "If it is true then profile pack values has a reference to user defined macros",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1ProfileTemplateSummary": {
      "description": "Edge host clusterprofile template summary",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRefSummary"
          }
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ProfileType": {
      "type": "string",
      "default": "cluster",
      "enum": [
        "cluster",
        "infra",
        "add-on",
        "system"
      ]
    },
    "v1Project": {
      "description": "Project information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ProjectSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ProjectStatus"
        }
      }
    },
    "v1ProjectActiveAppDeployment": {
      "description": "Active app deployment",
      "type": "object",
      "properties": {
        "appRef": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ProjectActiveAppDeployments": {
      "description": "Active app deployment",
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ProjectActiveAppDeployment"
          }
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ProjectActiveCluster": {
      "description": "Active clusters",
      "type": "object",
      "properties": {
        "clusterRef": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ProjectActiveClusters": {
      "description": "Active clusters",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ProjectActiveCluster"
          }
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ProjectActiveResources": {
      "description": "Active project resources",
      "type": "object",
      "properties": {
        "appDeployments": {
          "$ref": "#/definitions/v1ProjectActiveAppDeployments"
        },
        "clusters": {
          "$ref": "#/definitions/v1ProjectActiveClusters"
        },
        "virtualClusters": {
          "$ref": "#/definitions/v1ProjectActiveClusters"
        }
      }
    },
    "v1ProjectAlertComponent": {
      "description": "Project alert component",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "supportedChannels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProjectAlertComponents": {
      "description": "Supported project alerts component",
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ProjectAlertComponent"
          }
        }
      }
    },
    "v1ProjectCleanUpStatus": {
      "description": "Project cleanup status",
      "type": "object",
      "properties": {
        "cleanedResources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ProjectCleanup": {
      "description": "Project delete request payload",
      "properties": {
        "deletingClusterDurationThresholdInMin": {
          "type": "integer",
          "format": "int32"
        },
        "provisioningClusterDurationThresholdInMin": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ProjectClusterSettings": {
      "properties": {
        "nodesAutoRemediationSetting": {
          "$ref": "#/definitions/v1NodesAutoRemediationSettings"
        },
        "tenantClusterSettings": {
          "$ref": "#/definitions/v1TenantClusterSettings"
        }
      }
    },
    "v1ProjectEntity": {
      "description": "Project information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ProjectEntitySpec"
        }
      }
    },
    "v1ProjectEntitySpec": {
      "description": "Project specifications",
      "properties": {
        "logoUid": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamRoleMap"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserRoleMap"
          }
        }
      }
    },
    "v1ProjectFilterSortFields": {
      "type": "string",
      "enum": [
        "name",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "x-nullable": true
    },
    "v1ProjectFilterSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1ProjectFilterSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1ProjectFilterSpec": {
      "description": "Project filter spec",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1FilterString"
        }
      }
    },
    "v1ProjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ProjectMetadata": {
      "description": "Project metadata",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectEntity"
        }
      }
    },
    "v1ProjectResourceReference": {
      "description": "Project-scoped resource reference",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of the referenced resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced resource",
          "type": "string"
        },
        "projectUid": {
          "description": "UID of the Project that scopes this resource",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referenced resource",
          "type": "string"
        }
      }
    },
    "v1ProjectRolesEntity": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidRoleSummary"
          }
        }
      }
    },
    "v1ProjectRolesPatch": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "projectUid": {
                "type": "string"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "v1ProjectSpec": {
      "description": "Project specifications",
      "properties": {
        "alerts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Alert"
          }
        },
        "logoUrl": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamRoleMap"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserRoleMap"
          }
        }
      }
    },
    "v1ProjectSpecSummary": {
      "type": "object",
      "properties": {
        "logoUrl": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        }
      }
    },
    "v1ProjectStatus": {
      "description": "Project status",
      "properties": {
        "cleanUpStatus": {
          "$ref": "#/definitions/v1ProjectCleanUpStatus"
        },
        "isDisabled": {
          "type": "boolean"
        }
      }
    },
    "v1ProjectStatusSummary": {
      "description": "Project status summary",
      "type": "object",
      "properties": {
        "clustersHealth": {
          "$ref": "#/definitions/v1SpectroClustersHealth"
        },
        "status": {
          "$ref": "#/definitions/v1ProjectStatus"
        },
        "usage": {
          "$ref": "#/definitions/v1ProjectUsageSummary"
        }
      }
    },
    "v1ProjectSummary": {
      "description": "Project summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Project spec summary",
          "$ref": "#/definitions/v1ProjectSpecSummary"
        },
        "status": {
          "description": "Project status summary",
          "$ref": "#/definitions/v1ProjectStatusSummary"
        }
      }
    },
    "v1ProjectTeamsEntity": {
      "properties": {
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamRoleMap"
          }
        }
      }
    },
    "v1ProjectUsage": {
      "description": "Project usage object",
      "properties": {
        "alloy": {
          "$ref": "#/definitions/v1ProjectUsageData"
        },
        "pure": {
          "$ref": "#/definitions/v1ProjectUsageData"
        }
      }
    },
    "v1ProjectUsageData": {
      "description": "Project usage data object",
      "properties": {
        "amount": {
          "description": "Billing amount for the project",
          "type": "number",
          "format": "float64"
        },
        "tierPrice": {
          "description": "Tier price based on the usage",
          "type": "number",
          "format": "float64"
        },
        "usedCredits": {
          "description": "Project used credits",
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1ProjectUsageSummary": {
      "description": "Project usage summary",
      "type": "object",
      "properties": {
        "alloyCpuCores": {
          "type": "number",
          "x-omitempty": false
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterUsageSummary"
          }
        },
        "pureCpuCores": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1ProjectUsersEntity": {
      "properties": {
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserRoleMap"
          }
        }
      }
    },
    "v1ProjectsFilterSpec": {
      "description": "Project filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ProjectFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProjectFilterSortSpec"
          }
        }
      }
    },
    "v1ProjectsMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProjectMetadata"
          }
        }
      }
    },
    "v1ProjectsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProjectSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1ProjectsWorkspaces": {
      "description": "List projects and its workspaces",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "workspaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspacesRoles"
          }
        }
      }
    },
    "v1PublicCloudRateConfig": {
      "description": "Public cloud rate config",
      "properties": {
        "computeOptimized": {
          "$ref": "#/definitions/v1CloudInstanceRateConfig"
        },
        "memoryOptimized": {
          "$ref": "#/definitions/v1CloudInstanceRateConfig"
        }
      }
    },
    "v1RateConfig": {
      "description": "Rate config",
      "properties": {
        "aws": {
          "$ref": "#/definitions/v1PublicCloudRateConfig"
        },
        "azure": {
          "$ref": "#/definitions/v1PublicCloudRateConfig"
        },
        "cloudstack": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "custom": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CustomCloudRateConfig"
          }
        },
        "edge": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "edgeNative": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "gcp": {
          "$ref": "#/definitions/v1PublicCloudRateConfig"
        },
        "generic": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "maas": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "openstack": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "vsphere": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        }
      }
    },
    "v1RegistriesMetadata": {
      "description": "Pack Registries Metadata",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1RegistryMetadata"
          }
        }
      }
    },
    "v1RegistryAuth": {
      "description": "Auth credentials of the registry",
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "format": "password"
        },
        "tls": {
          "$ref": "#/definitions/v1TlsConfiguration"
        },
        "token": {
          "type": "string",
          "format": "password"
        },
        "type": {
          "type": "string",
          "enum": [
            "noAuth",
            "basic",
            "token"
          ]
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1RegistryConfigEntity": {
      "description": "Registry configuration entity",
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1RegistryConfiguration"
        }
      }
    },
    "v1RegistryConfiguration": {
      "description": "Registry configuration",
      "type": "object",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1RegistryMetadata": {
      "description": "Registry meta",
      "type": "object",
      "properties": {
        "isDefault": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isPrivate": {
          "type": "boolean",
          "x-omitempty": false
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1RegistryPackMetadata": {
      "description": "Registry metadata information",
      "properties": {
        "annotations": {
          "description": "Pack annotations is used to allow pack to add more arbitrary configurations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "latestPackUid": {
          "description": "Latest pack uid",
          "type": "string"
        },
        "latestVersion": {
          "description": "Pack latest version",
          "type": "string"
        },
        "logoUrl": {
          "description": "Pack logo url",
          "type": "string"
        },
        "name": {
          "description": "Pack registry name",
          "type": "string"
        },
        "scope": {
          "description": "Pack registry scope",
          "type": "string"
        },
        "uid": {
          "description": "Pack registry uid",
          "type": "string"
        }
      }
    },
    "v1RegistrySyncStatus": {
      "description": "Status of the registry sync",
      "type": "object",
      "properties": {
        "isSyncSupported": {
          "type": "boolean",
          "x-omitempty": false
        },
        "lastRunTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastSyncedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1RelatedObject": {
      "description": "Object for which the resource is related",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "spectrocluster",
            "machine",
            "cloudconfig",
            "clusterprofile",
            "pack",
            "appprofile",
            "appdeployment",
            "edgehost"
          ]
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ResourceCloudCostSummary": {
      "description": "Resource cloud cost summary information",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudCostDataPoint"
          }
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCloudCost"
        }
      }
    },
    "v1ResourceConsumption": {
      "description": "Resource consumption information",
      "type": "object",
      "properties": {
        "associatedResources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        },
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ResourceConsumptionDataPoint"
          }
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalConsumptionData"
        }
      }
    },
    "v1ResourceConsumptionData": {
      "description": "Resource cosumption data",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "memory": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceConsumptionDataPoint": {
      "description": "Resource cosumption data point",
      "type": "object",
      "properties": {
        "allotted": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "usage": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        }
      }
    },
    "v1ResourceConsumptionFilter": {
      "description": "Resource consumption filter",
      "type": "object",
      "properties": {
        "clouds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "includeControlPlaneMachines": {
          "type": "boolean"
        },
        "includeMasterMachines": {
          "description": "Deprecated. Use includeControlPlaneMachines",
          "type": "boolean"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workspaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ResourceConsumptionOptions": {
      "description": "Resource consumption options",
      "type": "object",
      "properties": {
        "enableSummaryView": {
          "type": "boolean",
          "default": true
        },
        "groupBy": {
          "type": "string",
          "default": "namespace",
          "enum": [
            "tenant",
            "project",
            "workspace",
            "cluster",
            "namespace",
            "cloud"
          ]
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "default": 60
        }
      }
    },
    "v1ResourceConsumptionSpec": {
      "description": "Resource consumption spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ResourceConsumptionFilter"
        },
        "options": {
          "$ref": "#/definitions/v1ResourceConsumptionOptions"
        }
      }
    },
    "v1ResourceCost": {
      "description": "Resource Cost information",
      "type": "object",
      "properties": {
        "cloud": {
          "$ref": "#/definitions/v1CloudCost"
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceCostDataPoint": {
      "description": "Resource cost data point",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "memory": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceCostSummary": {
      "description": "Resource cost summary information",
      "type": "object",
      "properties": {
        "associatedResources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        },
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ResourceCostDataPoint"
          }
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCost"
        }
      }
    },
    "v1ResourceCostSummaryFilter": {
      "description": "Resource cost summary filter",
      "type": "object",
      "properties": {
        "clouds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "includeControlPlaneMachines": {
          "type": "boolean"
        },
        "includeMasterMachines": {
          "description": "Deprecated. Use includeControlPlaneMachines",
          "type": "boolean"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workspaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ResourceCostSummaryOptions": {
      "description": "Resource cost summary options",
      "type": "object",
      "properties": {
        "enableSummaryView": {
          "type": "boolean",
          "default": true
        },
        "groupBy": {
          "type": "string",
          "default": "cluster",
          "enum": [
            "tenant",
            "project",
            "workspace",
            "cluster",
            "namespace",
            "deployment",
            "cloud"
          ]
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "default": 60
        }
      }
    },
    "v1ResourceCostSummarySpec": {
      "description": "Resource cost summary spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ResourceCostSummaryFilter"
        },
        "options": {
          "$ref": "#/definitions/v1ResourceCostSummaryOptions"
        }
      }
    },
    "v1ResourceGroup": {
      "description": "Azure resource Group is a container that holds related resources for an Azure solution",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the resource group",
          "type": "string"
        },
        "location": {
          "description": "The location of the resource group. It cannot be changed after the resource group has been created",
          "type": "string"
        },
        "name": {
          "description": "The type of the resource group",
          "type": "string"
        }
      }
    },
    "v1ResourceLimitType": {
      "type": "string",
      "enum": [
        "user",
        "project",
        "apiKey",
        "team",
        "role",
        "cloudaccount",
        "clusterprofile",
        "workspace",
        "registry",
        "privategateway",
        "location",
        "certificate",
        "macro",
        "sshkey",
        "alert",
        "spectrocluster",
        "edgehost",
        "appprofile",
        "appdeployment",
        "edgetoken",
        "clustergroup",
        "filter",
        "systemadmin",
        "spcpolicy",
        "clustertemplate"
      ]
    },
    "v1ResourceReference": {
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ResourceRoles": {
      "type": "object",
      "properties": {
        "resourceRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceRolesEntity"
          }
        }
      }
    },
    "v1ResourceRolesEntity": {
      "type": "object",
      "properties": {
        "filterRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "projectUids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ResourceRolesUpdateEntity": {
      "type": "object",
      "properties": {
        "filterRefs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "projectUids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ResourceTotalCloudCost": {
      "description": "Resource total cloud cost information",
      "type": "object",
      "properties": {
        "compute": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceTotalConsumptionData": {
      "description": "Resource total cosumption data",
      "type": "object",
      "properties": {
        "allotted": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        },
        "usage": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        }
      }
    },
    "v1ResourceTotalCost": {
      "description": "Resource total cost information",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "memory": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceUsageDataPoint": {
      "description": "Resource usage data point",
      "type": "object",
      "properties": {
        "baremetal": {
          "$ref": "#/definitions/v1ResourceUsageMeteringDataPoint"
        },
        "cpu": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "edgehost": {
          "$ref": "#/definitions/v1ResourceUsageMeteringDataPoint"
        },
        "memory": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1ResourceUsageMeteringDataPoint": {
      "description": "min and max count for machines \u0026 edgehost for the given period",
      "type": "object",
      "properties": {
        "activeEdgehosts": {
          "type": "number",
          "format": "int64"
        },
        "activeMachines": {
          "type": "number",
          "format": "int64"
        },
        "maxEdgehosts": {
          "type": "number",
          "format": "int64"
        },
        "maxMachines": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1ResourceUsageSummary": {
      "description": "Resource usage summary information",
      "type": "object",
      "properties": {
        "associatedResources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        },
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ResourceUsageDataPoint"
          }
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        }
      }
    },
    "v1ResourceUsageSummaryFilter": {
      "description": "Resource usage summary filter",
      "type": "object",
      "properties": {
        "clouds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "includeControlPlaneMachines": {
          "type": "boolean"
        },
        "includeMasterMachines": {
          "description": "Deprecated. Use includeControlPlaneMachines",
          "type": "boolean"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "pods": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workload": {
          "$ref": "#/definitions/v1ResourceWorkloadFilter"
        },
        "workspaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ResourceUsageSummaryOptions": {
      "description": "Resource usage summary options",
      "type": "object",
      "properties": {
        "enableSummaryView": {
          "type": "boolean",
          "default": true
        },
        "groupBy": {
          "type": "string",
          "default": "cluster",
          "enum": [
            "tenant",
            "project",
            "workspace",
            "cluster",
            "namespace",
            "deployment",
            "statefulset",
            "daemonset",
            "pod",
            "cloud"
          ]
        },
        "includeMeteringInfo": {
          "type": "boolean",
          "default": false
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "default": 60
        }
      }
    },
    "v1ResourceUsageSummarySpec": {
      "description": "Resource usage summary spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ResourceUsageSummaryFilter"
        },
        "options": {
          "$ref": "#/definitions/v1ResourceUsageSummaryOptions"
        }
      }
    },
    "v1ResourceWorkloadFilter": {
      "description": "Workload resource filter",
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "default": "all",
          "enum": [
            "deployment",
            "statefulset",
            "daemonset",
            "all"
          ]
        }
      }
    },
    "v1ResourcesCloudCostSummary": {
      "description": "Resources cloud cost summary information",
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceCloudCostSummary"
          }
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCloudCost"
        }
      }
    },
    "v1ResourcesConsumption": {
      "description": "Resources consumption information",
      "type": "object",
      "properties": {
        "cpuUnit": {
          "type": "string"
        },
        "memoryUnit": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceConsumption"
          }
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalConsumptionData"
        }
      }
    },
    "v1ResourcesCostSummary": {
      "description": "Resources cost summary information",
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceCostSummary"
          }
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCost"
        }
      }
    },
    "v1ResourcesUsageSummary": {
      "description": "Resources usage summary information",
      "type": "object",
      "properties": {
        "cpuUnit": {
          "type": "string"
        },
        "memoryUnit": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceUsageSummary"
          }
        }
      }
    },
    "v1RestoreStatusMeta": {
      "description": "Restore  status meta",
      "properties": {
        "isSucceeded": {
          "type": "boolean"
        },
        "msg": {
          "type": "string"
        },
        "restoreTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1Role": {
      "description": "Role",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1RoleSpec"
        },
        "status": {
          "$ref": "#/definitions/v1RoleStatus"
        }
      }
    },
    "v1RoleClone": {
      "description": "Role clone specifications",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RoleCloneMetadata"
        }
      }
    },
    "v1RoleCloneMetadata": {
      "description": "Role clone metadata",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1RoleSpec": {
      "description": "Role specifications",
      "properties": {
        "permissions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "$ref": "#/definitions/v1Scope"
        },
        "type": {
          "type": "string",
          "enum": [
            "system",
            "user"
          ]
        }
      }
    },
    "v1RoleStatus": {
      "description": "Role status",
      "properties": {
        "isEnabled": {
          "description": "Specifies if role account is enabled/disabled",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1Roles": {
      "description": "Array of Roles",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Role"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1S3StorageConfig": {
      "description": "S3 storage config object",
      "type": "object",
      "required": [
        "bucketName",
        "region",
        "credentials"
      ],
      "properties": {
        "bucketName": {
          "description": "S3 storage bucket name",
          "type": "string"
        },
        "caCert": {
          "description": "CA Certificate",
          "type": "string"
        },
        "credentials": {
          "description": "AWS cloud account credentials",
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "region": {
          "description": "AWS region name",
          "type": "string"
        },
        "s3ForcePathStyle": {
          "type": "boolean",
          "default": true
        },
        "s3Url": {
          "description": "Custom hosted S3 URL",
          "type": "string"
        },
        "useRestic": {
          "description": "Set to 'true', to use Restic plugin for the backup",
          "type": "boolean",
          "default": true
        }
      }
    },
    "v1Schedule": {
      "description": "Information about a schedule for the policy",
      "type": "object",
      "required": [
        "durationHrs",
        "startCron",
        "name"
      ],
      "properties": {
        "durationHrs": {
          "description": "Specifies the time window in hours during which the system is allowed to start upgrades on eligible clusters. Actual upgrade completion may vary due to cluster-specific factors like bandwidth, capacity, or environment.",
          "type": "integer",
          "maximum": 24,
          "minimum": 1
        },
        "name": {
          "description": "Name of the upgrade schedule",
          "type": "string"
        },
        "startCron": {
          "description": "Cron expression for the start time of the schedule",
          "type": "string"
        }
      }
    },
    "v1Scope": {
      "type": "string",
      "enum": [
        "system",
        "tenant",
        "project",
        "resource"
      ]
    },
    "v1SearchFilterBoolCondition": {
      "properties": {
        "value": {
          "type": "boolean"
        }
      }
    },
    "v1SearchFilterCondition": {
      "properties": {
        "bool": {
          "$ref": "#/definitions/v1SearchFilterBoolCondition"
        },
        "date": {
          "$ref": "#/definitions/v1SearchFilterDateCondition"
        },
        "float": {
          "$ref": "#/definitions/v1SearchFilterFloatCondition"
        },
        "int": {
          "$ref": "#/definitions/v1SearchFilterIntegerCondition"
        },
        "keyValue": {
          "$ref": "#/definitions/v1SearchFilterKeyValueCondition"
        },
        "string": {
          "$ref": "#/definitions/v1SearchFilterStringCondition"
        }
      }
    },
    "v1SearchFilterConjunctionOperator": {
      "type": "string",
      "enum": [
        "and",
        "or"
      ],
      "x-nullable": true
    },
    "v1SearchFilterDateCondition": {
      "properties": {
        "match": {
          "$ref": "#/definitions/v1SearchFilterDateConditionMatch"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterDateOperator"
        }
      }
    },
    "v1SearchFilterDateConditionMatch": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "values": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Time"
          }
        }
      }
    },
    "v1SearchFilterDateOperator": {
      "type": "string",
      "enum": [
        "eq",
        "gt",
        "gte",
        "lt",
        "lte",
        "range"
      ]
    },
    "v1SearchFilterFloatCondition": {
      "properties": {
        "match": {
          "$ref": "#/definitions/v1SearchFilterFloatConditionMatch"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterIntegerOperator"
        }
      }
    },
    "v1SearchFilterFloatConditionMatch": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "values": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "format": "float64"
          }
        }
      }
    },
    "v1SearchFilterGroup": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "filters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SearchFilterItem"
          }
        }
      }
    },
    "v1SearchFilterIntegerCondition": {
      "properties": {
        "match": {
          "$ref": "#/definitions/v1SearchFilterIntegerConditionMatch"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterIntegerOperator"
        }
      }
    },
    "v1SearchFilterIntegerConditionMatch": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "values": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "v1SearchFilterIntegerOperator": {
      "type": "string",
      "enum": [
        "eq",
        "gt",
        "gte",
        "lt",
        "lte"
      ]
    },
    "v1SearchFilterItem": {
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1SearchFilterCondition"
        },
        "property": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1SearchFilterPropertyType"
        }
      }
    },
    "v1SearchFilterKeyValueCondition": {
      "properties": {
        "ignoreCase": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "match": {
          "$ref": "#/definitions/v1SearchFilterKeyValueConditionMatch"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterStringOperator"
        }
      }
    },
    "v1SearchFilterKeyValueConditionMatch": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "values": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SearchFilterKeyValueOperator": {
      "type": "string",
      "enum": [
        "eq"
      ]
    },
    "v1SearchFilterPropertyType": {
      "type": "string",
      "enum": [
        "string",
        "int",
        "float",
        "bool",
        "date",
        "keyValue"
      ]
    },
    "v1SearchFilterSchemaSpec": {
      "properties": {
        "schema": {
          "$ref": "#/definitions/v1SearchFilterSchemaSpecProperties"
        }
      }
    },
    "v1SearchFilterSchemaSpecEnumValue": {
      "properties": {
        "displayValue": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1SearchFilterSchemaSpecProperties": {
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SearchFilterSchemaSpecProperty"
          }
        }
      }
    },
    "v1SearchFilterSchemaSpecProperty": {
      "properties": {
        "name": {
          "type": "string",
          "x-order": 0
        },
        "hideDisplay": {
          "type": "boolean",
          "x-order": 1
        },
        "displayName": {
          "type": "string",
          "x-order": 2
        },
        "type": {
          "type": "string",
          "x-order": 3
        },
        "enum": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "x-order": 4
        },
        "enumValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SearchFilterSchemaSpecEnumValue"
          },
          "x-omitempty": true,
          "x-order": 5
        },
        "default": {
          "type": "string",
          "x-order": 6
        },
        "minIntVal": {
          "type": "integer",
          "format": "int32",
          "x-order": 7
        },
        "maxIntVal": {
          "type": "integer",
          "format": "int32",
          "x-order": 8
        },
        "minFloatVal": {
          "type": "number",
          "format": "float64",
          "x-order": 9
        },
        "maxFloatVal": {
          "type": "number",
          "format": "float64",
          "x-order": 10
        },
        "isDeprecated": {
          "type": "boolean",
          "x-omitempty": false,
          "x-order": 11
        }
      }
    },
    "v1SearchFilterSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1SearchSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1SearchFilterSpec": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "filterGroups": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SearchFilterGroup"
          }
        }
      }
    },
    "v1SearchFilterStringCondition": {
      "properties": {
        "ignoreCase": {
          "type": "boolean"
        },
        "match": {
          "$ref": "#/definitions/v1SearchFilterStringConditionMatch"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterStringOperator"
        }
      }
    },
    "v1SearchFilterStringConditionMatch": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "values": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SearchFilterStringOperator": {
      "type": "string",
      "enum": [
        "eq",
        "contains",
        "beginsWith"
      ]
    },
    "v1SearchFilterSummarySpec": {
      "description": "Spectro cluster search filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SearchFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SearchFilterSortSpec"
          }
        }
      }
    },
    "v1SearchSortFields": {
      "type": "string",
      "enum": [
        "environment",
        "clusterName",
        "clusterState",
        "healthState",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "x-nullable": true
    },
    "v1SectroClusterK8sDashboardUrl": {
      "description": "Service version information",
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "v1ServiceManifest": {
      "description": "Service manifest information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ServiceManifestSpec"
        }
      }
    },
    "v1ServiceManifestSpec": {
      "type": "object",
      "properties": {
        "manifests": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1GitRepoFileContent"
          }
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ServicePort": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "v1ServiceSpec": {
      "description": "ServiceSpec defines the specification of service registering edge",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ServiceVersion": {
      "description": "Service version information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ServiceVersionSpec"
        }
      }
    },
    "v1ServiceVersionSpec": {
      "type": "object",
      "properties": {
        "latestVersion": {
          "$ref": "#/definitions/v1GitRepoFileContent"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1SonobuoyEntity": {
      "description": "Sonobuoy response",
      "required": [
        "requestUid",
        "status",
        "reports"
      ],
      "properties": {
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1SonobuoyReportEntity"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ]
        }
      }
    },
    "v1SonobuoyLog": {
      "description": "Compliance Scan Sonobuoy Log",
      "properties": {
        "description": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "output": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SonobuoyLogEntity": {
      "description": "Sonobuoy log",
      "properties": {
        "description": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "output": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SonobuoyReport": {
      "description": "Compliance Scan Sonobuoy Report",
      "properties": {
        "fail": {
          "type": "integer",
          "format": "int32"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SonobuoyLog"
          }
        },
        "node": {
          "type": "string"
        },
        "pass": {
          "type": "integer",
          "format": "int32"
        },
        "plugin": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1SonobuoyReportEntity": {
      "description": "Sonobuoy report",
      "properties": {
        "fail": {
          "type": "integer",
          "format": "int32"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SonobuoyLogEntity"
          }
        },
        "node": {
          "type": "string"
        },
        "pass": {
          "type": "integer",
          "format": "int32"
        },
        "plugin": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1SortOrder": {
      "type": "string",
      "default": "asc",
      "enum": [
        "asc",
        "desc"
      ]
    },
    "v1SpcApply": {
      "type": "object",
      "properties": {
        "actionType": {
          "type": "string",
          "enum": [
            "DownloadAndInstall",
            "DownloadAndInstallLater"
          ]
        },
        "canBeApplied": {
          "description": "If it is true then Agent can apply the changes to the palette",
          "type": "boolean",
          "x-omitempty": false
        },
        "crdDigest": {
          "type": "string"
        },
        "lastModifiedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "patchAppliedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "spcHash": {
          "type": "string"
        },
        "spcInfraHash": {
          "type": "string"
        }
      }
    },
    "v1SpcApplySettings": {
      "type": "object",
      "properties": {
        "actionType": {
          "type": "string",
          "enum": [
            "DownloadAndInstall",
            "DownloadAndInstallLater"
          ]
        }
      }
    },
    "v1SpcPatchTimeEntity": {
      "type": "object",
      "properties": {
        "clusterHash": {
          "type": "string"
        },
        "patchTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SpcPoliciesFilterSpec": {
      "description": "Spc policies filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SpcPolicyFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpcPolicySortSpec"
          }
        }
      }
    },
    "v1SpcPoliciesMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpcPolicyMetadata"
          }
        }
      }
    },
    "v1SpcPoliciesSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpcPolicySummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1SpcPolicyEntity": {
      "description": "Policy entity information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpcPolicySpec"
        }
      }
    },
    "v1SpcPolicyFilterSpec": {
      "description": "Spc policy filter spec",
      "properties": {
        "policyName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "policyType": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpcPolicyType"
          }
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        }
      }
    },
    "v1SpcPolicyMetadata": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "The kind of the spc policy eg maintenance.",
          "type": "string"
        },
        "name": {
          "description": "The name of the spc policy",
          "type": "string"
        },
        "projectUid": {
          "description": "The project UID of the spc policy",
          "type": "string"
        },
        "uid": {
          "description": "The UID of the spc policy",
          "type": "string"
        }
      }
    },
    "v1SpcPolicySortFields": {
      "type": "string",
      "enum": [
        "policyName",
        "policyType",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "x-nullable": true
    },
    "v1SpcPolicySortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1SpcPolicySortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1SpcPolicySpec": {
      "description": "Policy specification",
      "type": "object",
      "properties": {
        "schedules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Schedule"
          }
        }
      }
    },
    "v1SpcPolicyStatusSummary": {
      "description": "Provides status information for SpcPolicy like in use templates using the policy",
      "type": "object",
      "properties": {
        "inUseClusterTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectStateEntity"
          }
        }
      }
    },
    "v1SpcPolicySummary": {
      "description": "Spc policy summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "kind": {
              "description": "The kind of the spc policy eg maintenance.",
              "type": "string"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1SpcPolicyStatusSummary"
        }
      }
    },
    "v1SpcPolicyTags": {
      "description": "Spc policy tags response",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Array of spc policy tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SpcPolicyType": {
      "type": "string",
      "default": "maintenance",
      "enum": [
        "maintenance"
      ]
    },
    "v1SpectroAwsClusterEntity": {
      "description": "AWS cluster request payload for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1AwsClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "clusterTemplate": {
              "$ref": "#/definitions/v1ClusterTemplateRef"
            },
            "clusterType": {
              "$ref": "#/definitions/v1ClusterType"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "description": "Cluster profile references that specify which profiles to apply to the cluster. Supports overriding pack values and variables. When template references are used, pack values cannot be overridden as they are retrieved from the template's pre-configured definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroAwsClusterImportEntity": {
      "description": "Spectro AWS cluster import request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroAwsClusterRateEntity": {
      "description": "Spectro AWS cluster request payload for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AwsClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroAzureClusterEntity": {
      "description": "Azure cluster request payload for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1AzureClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "clusterTemplate": {
              "$ref": "#/definitions/v1ClusterTemplateRef"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "description": "Cluster profile references that specify which profiles to apply to the cluster. Supports overriding pack values and variables. When template references are used, pack values cannot be overridden as they are retrieved from the template's pre-configured definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroAzureClusterImportEntity": {
      "description": "Spectro Azure cluster import request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroAzureClusterRateEntity": {
      "description": "Spectro Azure cluster request payload for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AzureClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroCloudStackClusterEntity": {
      "description": "CloudStack cluster request payload for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1CloudStackClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1CloudStackMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroCloudStackClusterImportEntity": {
      "description": "Spectro CloudStack cluster import request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroCloudStackClusterRateEntity": {
      "description": "CloudStack cluster request payload for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1CloudStackClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudStackMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroCluster": {
      "description": "SpectroCluster is the Schema for the spectroclusters API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterStatus"
        }
      }
    },
    "v1SpectroClusterAddOnService": {
      "description": "Spectro cluster addon service",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAddOnServiceSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAssetEntity": {
      "description": "Cluster asset",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "properties": {
            "frpKubeconfig": {
              "type": "string"
            },
            "kubeconfig": {
              "type": "string"
            },
            "kubeconfigclient": {
              "type": "string"
            },
            "manifest": {
              "type": "string"
            },
            "tokenkubeconfig": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1SpectroClusterAssetFrpKubeConfig": {
      "description": "Cluster asset Frp Kube Config",
      "type": "object",
      "properties": {
        "frpKubeconfig": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAssetKubeConfig": {
      "description": "Cluster asset Kube Config",
      "type": "object",
      "properties": {
        "kubeconfig": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAssetKubeConfigClient": {
      "description": "Cluster asset Kube Config Client",
      "type": "object",
      "properties": {
        "kubeconfigclient": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAssetManifest": {
      "description": "Cluster asset",
      "type": "object",
      "properties": {
        "manifest": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAssetTokenKubeConfig": {
      "description": "Cluster asset admin token Kube Config",
      "type": "object",
      "properties": {
        "tokenkubeconfig": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterCloudCost": {
      "description": "Spectro cluster cloud cost information",
      "type": "object",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudCostDataPoint"
          }
        }
      }
    },
    "v1SpectroClusterCloudCostSummaryFilter": {
      "description": "Spectro cluster cloud cost summary filter",
      "type": "object",
      "properties": {
        "clouds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workspaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SpectroClusterCloudCostSummaryOptions": {
      "description": "Spectro cluster cloud cost summary options",
      "type": "object",
      "properties": {
        "groupBy": {
          "type": "string",
          "default": "project",
          "enum": [
            "tenant",
            "project",
            "cloud",
            "cluster"
          ]
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "default": 1440
        }
      }
    },
    "v1SpectroClusterCloudCostSummarySpec": {
      "description": "Spectro cluster cloud cost summary spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SpectroClusterCloudCostSummaryFilter"
        },
        "options": {
          "$ref": "#/definitions/v1SpectroClusterCloudCostSummaryOptions"
        }
      }
    },
    "v1SpectroClusterCost": {
      "description": "Spectro cluster cost information",
      "type": "object",
      "properties": {
        "cloud": {
          "$ref": "#/definitions/v1SpectroClusterCloudCost"
        },
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterCostSummary": {
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1SpectroClusterCost"
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "period": {
          "type": "integer",
          "format": "int32"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SpectroClusterHealthCondition": {
      "description": "Spectro cluster health condition",
      "properties": {
        "message": {
          "type": "string"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1RelatedObject"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterHealthStatus": {
      "description": "Spectro cluster health status",
      "properties": {
        "agentVersion": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterHealthCondition"
          }
        },
        "lastHeartBeatTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterHeartbeat": {
      "description": "Cluster heartbeat message",
      "type": "object",
      "required": [
        "agentVersion"
      ],
      "properties": {
        "agentVersion": {
          "description": "Version of the agent",
          "type": "string"
        },
        "message": {
          "description": "Heartbeat message",
          "type": "string"
        }
      }
    },
    "v1SpectroClusterHybridPoolsMetadata": {
      "description": "Metadata of clusters launched as hybrid machine pools",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "cloudType": {
              "description": "Cluster's cloud type",
              "type": "string"
            },
            "hybridPools": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1HybridMachinePool"
              }
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterStatus"
        }
      }
    },
    "v1SpectroClusterK8sCertificate": {
      "description": "K8 Certificates for all the cluster's control plane nodes",
      "type": "object",
      "properties": {
        "machineCertificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1K8MachineCertificate"
          }
        }
      }
    },
    "v1SpectroClusterKubeCtlRedirect": {
      "description": "Active resources of tenant",
      "type": "object",
      "properties": {
        "redirectUri": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterLocationInputEntity": {
      "description": "Cluster location",
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/v1ClusterLocation"
        }
      }
    },
    "v1SpectroClusterMeta": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterMetaSpec"
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterMetaStatus"
        }
      }
    },
    "v1SpectroClusterMetaSpec": {
      "description": "Spectro cluster meta summary",
      "type": "object",
      "properties": {
        "archType": {
          "description": "Architecture type of the cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ArchType"
          }
        },
        "cloudAccountUid": {
          "description": "Unique identifier for the cloud account used by this cluster",
          "type": "string"
        },
        "cloudRegion": {
          "description": "Geographic region where the cluster is deployed",
          "type": "string"
        },
        "cloudType": {
          "description": "Infrastructure provider type for the cluster",
          "type": "string"
        },
        "clusterType": {
          "description": "Type classification of the cluster",
          "type": "string"
        },
        "location": {
          "description": "Geographical location metadata for the cluster",
          "$ref": "#/definitions/v1ClusterMetaSpecLocation"
        },
        "tags": {
          "description": "User-defined labels associated with this cluster",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SpectroClusterMetaStatus": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "description": "Current state of the cluster",
          "type": "string"
        }
      }
    },
    "v1SpectroClusterMetaSummary": {
      "description": "Spectro cluster meta summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Spectro cluster meta summary",
          "type": "object",
          "properties": {
            "archType": {
              "description": "Architecture type of the cluster",
              "type": "array",
              "items": {
                "type": "string",
                "default": "amd64",
                "enum": [
                  "arm64",
                  "amd64"
                ]
              }
            },
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudRegion": {
              "type": "string"
            },
            "cloudType": {
              "type": "string"
            },
            "clusterType": {
              "type": "string"
            },
            "importMode": {
              "type": "string"
            },
            "location": {
              "$ref": "#/definitions/v1ClusterMetaSpecLocation"
            },
            "projectMeta": {
              "$ref": "#/definitions/v1ProjectMeta"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "status": {
          "description": "Spectro cluster meta status summary",
          "properties": {
            "cost": {
              "$ref": "#/definitions/v1ClusterMetaStatusCost"
            },
            "fips": {
              "$ref": "#/definitions/v1ClusterFips"
            },
            "health": {
              "$ref": "#/definitions/v1ClusterMetaStatusHealth"
            },
            "state": {
              "type": "string"
            },
            "updates": {
              "$ref": "#/definitions/v1ClusterMetaStatusUpdates"
            }
          }
        }
      }
    },
    "v1SpectroClusterMetadataFilterSpec": {
      "description": "Spectro cluster filter spec",
      "properties": {
        "environment": {
          "type": "string"
        },
        "includeVirtual": {
          "type": "boolean",
          "default": false
        },
        "isAlloy": {
          "description": "isAlloy is renamed to isImported",
          "type": "boolean",
          "default": false
        },
        "isImportReadOnly": {
          "type": "boolean",
          "default": true
        },
        "isImported": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "$ref": "#/definitions/v1FilterString"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterMetadataSpec": {
      "description": "Spectro cluster metadata spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SpectroClusterMetadataFilterSpec"
        },
        "sort": {
          "type": "string",
          "enum": [
            "environment",
            "state",
            "name"
          ],
          "x-nullable": true
        }
      }
    },
    "v1SpectroClusterMetrics": {
      "description": "Spectro cluster metrics",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1ComputeMetrics"
        },
        "memory": {
          "$ref": "#/definitions/v1ComputeMetrics"
        }
      }
    },
    "v1SpectroClusterOidcClaims": {
      "type": "object",
      "properties": {
        "Email": {
          "type": "string",
          "x-omitempty": false
        },
        "FirstName": {
          "type": "string",
          "x-omitempty": false
        },
        "LastName": {
          "type": "string",
          "x-omitempty": false
        },
        "SpectroTeam": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1SpectroClusterOidcIssuerTlsSpec": {
      "type": "object",
      "properties": {
        "caCertificateBase64": {
          "type": "string",
          "x-omitempty": false
        },
        "insecureSkipVerify": {
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        }
      }
    },
    "v1SpectroClusterOidcSpec": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "x-omitempty": false
        },
        "clientSecret": {
          "type": "string",
          "x-omitempty": false
        },
        "issuerTls": {
          "$ref": "#/definitions/v1SpectroClusterOidcIssuerTlsSpec"
        },
        "issuerUrl": {
          "description": "the issuer is the URL identifier for the service",
          "type": "string",
          "x-omitempty": false
        },
        "requiredClaims": {
          "$ref": "#/definitions/v1SpectroClusterOidcClaims"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        }
      }
    },
    "v1SpectroClusterPackCondition": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "ReadyForInstall",
            "Installed",
            "Ready",
            "Error",
            "UpgradeAvailable",
            "WaitingForOtherLayers"
          ]
        }
      }
    },
    "v1SpectroClusterPackConfigList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackConfig"
          }
        }
      }
    },
    "v1SpectroClusterPackDiff": {
      "description": "Cluster pack difference",
      "type": "object",
      "properties": {
        "current": {
          "$ref": "#/definitions/v1PackRef"
        },
        "diffConfigKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "target": {
          "$ref": "#/definitions/v1PackRef"
        }
      }
    },
    "v1SpectroClusterPackProperties": {
      "description": "Cluster pack properties response",
      "type": "object",
      "properties": {
        "yaml": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1SpectroClusterPackStatusEntity": {
      "type": "object",
      "properties": {
        "condition": {
          "description": "Pack deployment status conditions",
          "$ref": "#/definitions/v1SpectroClusterPackCondition"
        },
        "endTime": {
          "description": "Pack deployment end time",
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "profileUid": {
          "description": "Cluster profile uid",
          "type": "string"
        },
        "startTime": {
          "description": "Pack deployment start time",
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "version": {
          "description": "pack version",
          "type": "string"
        }
      }
    },
    "v1SpectroClusterPacksEntity": {
      "description": "Cluster entity for pack refs validate",
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          }
        }
      }
    },
    "v1SpectroClusterPacksStatusEntity": {
      "type": "object",
      "properties": {
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterPackStatusEntity"
          }
        }
      }
    },
    "v1SpectroClusterPolicies": {
      "description": "Cluster policies",
      "type": "object",
      "properties": {
        "backupPolicy": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        },
        "scanPolicy": {
          "$ref": "#/definitions/v1ClusterComplianceScheduleConfig"
        }
      }
    },
    "v1SpectroClusterProfile": {
      "description": "Cluster profile response",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterProfileSpec"
        }
      }
    },
    "v1SpectroClusterProfileEntity": {
      "description": "Cluster profile request payload",
      "type": "object",
      "properties": {
        "packValues": {
          "description": "Cluster profile packs array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackValuesEntity"
          }
        },
        "replaceWithProfile": {
          "description": "Cluster profile uid to be replaced with new profile",
          "type": "string"
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterVariable"
          }
        }
      }
    },
    "v1SpectroClusterProfileList": {
      "type": "object",
      "required": [
        "profiles"
      ],
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfile"
          }
        }
      }
    },
    "v1SpectroClusterProfileSpec": {
      "description": "Cluster profile spec response",
      "type": "object",
      "properties": {
        "cloudType": {
          "description": "Cluster profile cloud type",
          "type": "string"
        },
        "packs": {
          "description": "Cluster profile packs array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfilePacksEntity"
          }
        },
        "relatedObject": {
          "description": "RelatedObject refers to the type of object(clustergroup, cluster or edgeHost) the cluster profile is associated with",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "type": {
          "description": "Cluster profile type [ \"cluster\", \"infra\", \"add-on\", \"system\" ]",
          "type": "string"
        },
        "version": {
          "description": "Cluster profile version",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1SpectroClusterProfileUpdates": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          }
        }
      }
    },
    "v1SpectroClusterProfileValidatorResponse": {
      "description": "Cluster profile validator response",
      "type": "object",
      "properties": {
        "packs": {
          "$ref": "#/definitions/v1ConstraintValidatorResponse"
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        }
      }
    },
    "v1SpectroClusterProfiles": {
      "type": "object",
      "required": [
        "profiles"
      ],
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          }
        },
        "spcApplySettings": {
          "$ref": "#/definitions/v1SpcApplySettings"
        }
      }
    },
    "v1SpectroClusterProfilesDeleteEntity": {
      "type": "object",
      "properties": {
        "profileUids": {
          "description": "Cluster's profile uid list",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SpectroClusterProfilesPacksManifests": {
      "type": "object",
      "required": [
        "profiles"
      ],
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfilePacksManifests"
          }
        }
      }
    },
    "v1SpectroClusterProfilesParamReferenceEntity": {
      "description": "Cluster profiles param reference entity",
      "type": "object",
      "properties": {
        "references": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SpectroClusterProfilesResolvedValues": {
      "description": "Cluster profiles resolved values response",
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProfileResolvedValues"
          }
        }
      }
    },
    "v1SpectroClusterRate": {
      "description": "Cluster estimated rate information",
      "type": "object",
      "properties": {
        "machinePools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachinePoolRate"
          }
        },
        "name": {
          "type": "string"
        },
        "rate": {
          "$ref": "#/definitions/v1TotalClusterRate"
        },
        "resourceMetadata": {
          "$ref": "#/definitions/v1CloudResourceMetadata"
        }
      }
    },
    "v1SpectroClusterRepave": {
      "description": "Spectro cluster repave status information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterRepaveSpec"
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterRepaveStatus"
        }
      }
    },
    "v1SpectroClusterRepaveReason": {
      "description": "Cluster repave reason description",
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "pack": {
          "$ref": "#/definitions/v1SpectroClusterPackDiff"
        }
      }
    },
    "v1SpectroClusterRepaveSpec": {
      "type": "object",
      "properties": {
        "reasons": {
          "description": "Spectro cluster repave reasons",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterRepaveReason"
          }
        },
        "source": {
          "$ref": "#/definitions/v1ClusterRepaveSource"
        },
        "spectroClusterUid": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterRepaveStatus": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "repaveTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "$ref": "#/definitions/v1ClusterRepaveState"
        }
      }
    },
    "v1SpectroClusterRepaveValidationResponse": {
      "description": "Cluster repave validation response",
      "type": "object",
      "properties": {
        "isRepaveRequired": {
          "description": "If true then the pack changes can cause cluster repave",
          "type": "boolean",
          "x-omitempty": false
        },
        "reasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterRepaveReason"
          }
        }
      }
    },
    "v1SpectroClusterSpec": {
      "description": "SpectroClusterSpec defines the desired state of SpectroCluster",
      "type": "object",
      "properties": {
        "cloudConfigRef": {
          "description": "CloudConfigRef point to the cloud configuration for the cluster, input by user Ref types are: AwsCloudConfig/VsphereCloudConfig/BaremetalConfig/ etc this user config will be used to generate cloud specific cluster/machine spec for cluster-api For VM, it will contain information needed to launch VMs, like cloud account, instance type For BM, it will contain actual baremetal machines",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "cloudType": {
          "type": "string"
        },
        "clusterConfig": {
          "description": "ClusterConfig is the configuration related to a general cluster. Configuration related to the health of the cluster.",
          "$ref": "#/definitions/v1ClusterConfig"
        },
        "clusterProfileTemplates": {
          "description": "When a cluster created from a clusterprofile at t1, ClusterProfileTemplate is a copy of the draft version or latest published version of the clusterprofileSpec.clusterprofileTemplate then clusterprofile may evolve to v2 at t2, but before user decide to upgrade the cluster, it will stay as it is when user decide to upgrade, clusterProfileTemplate will be updated from the clusterprofile pointed by ClusterProfileRef",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          }
        },
        "clusterTemplate": {
          "$ref": "#/definitions/v1SpectroClusterTemplateRef"
        },
        "clusterType": {
          "type": "string",
          "enum": [
            "PureManage",
            "AlloyMonitor",
            "AlloyAssist",
            "AlloyExtend"
          ]
        }
      }
    },
    "v1SpectroClusterState": {
      "description": "Spectrocluster state entity",
      "type": "object",
      "properties": {
        "state": {
          "description": "Spectrocluster state",
          "type": "string"
        }
      }
    },
    "v1SpectroClusterStatus": {
      "description": "SpectroClusterStatus",
      "type": "object",
      "properties": {
        "abortTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "addOnServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterAddOnService"
          }
        },
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1APIEndpoint"
          }
        },
        "clusterImport": {
          "$ref": "#/definitions/v1ClusterImport"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "fips": {
          "$ref": "#/definitions/v1ClusterFips"
        },
        "location": {
          "$ref": "#/definitions/v1ClusterLocation"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterPackStatus"
          }
        },
        "profileStatus": {
          "$ref": "#/definitions/v1ProfileStatus"
        },
        "repave": {
          "$ref": "#/definitions/v1ClusterRepaveStatus"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          }
        },
        "spcApply": {
          "$ref": "#/definitions/v1SpcApply"
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        },
        "upgrades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          }
        },
        "virtual": {
          "$ref": "#/definitions/v1Virtual"
        }
      }
    },
    "v1SpectroClusterStatusEntity": {
      "description": "Spectrocluster status entity",
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1SpectroClusterState"
        }
      }
    },
    "v1SpectroClusterSummary": {
      "description": "Spectro cluster summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Spectro cluster spec summary",
          "type": "object",
          "properties": {
            "archTypes": {
              "description": "Architecture type of the cluster",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ArchType"
              }
            },
            "cloudAccountMeta": {
              "$ref": "#/definitions/v1CloudAccountMeta"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1CloudConfigMeta"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigResponse"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
            },
            "clusterProfileTemplates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
              }
            },
            "projectMeta": {
              "$ref": "#/definitions/v1ProjectMeta"
            }
          }
        },
        "status": {
          "description": "Spectro cluster status summary",
          "properties": {
            "clusterImport": {
              "$ref": "#/definitions/v1ClusterImport"
            },
            "cost": {
              "$ref": "#/definitions/v1ResourceCost"
            },
            "fips": {
              "$ref": "#/definitions/v1ClusterFips"
            },
            "health": {
              "$ref": "#/definitions/v1SpectroClusterHealthStatus"
            },
            "hourlyRate": {
              "$ref": "#/definitions/v1ResourceCost"
            },
            "location": {
              "$ref": "#/definitions/v1ClusterMetaSpecLocation"
            },
            "metrics": {
              "$ref": "#/definitions/v1SpectroClusterMetrics"
            },
            "notifications": {
              "$ref": "#/definitions/v1ClusterNotificationStatus"
            },
            "repave": {
              "$ref": "#/definitions/v1ClusterRepaveStatus"
            },
            "state": {
              "type": "string"
            },
            "virtual": {
              "$ref": "#/definitions/v1Virtual"
            }
          }
        }
      }
    },
    "v1SpectroClusterTags": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SpectroClusterTemplateRef": {
      "description": "Reference to the cluster template from which this cluster was created, containing template identification metadata",
      "type": "object",
      "properties": {
        "projectUid": {
          "description": "Project uid of the cluster template",
          "type": "string"
        },
        "uid": {
          "description": "Uid of the cluster template from which the cluster is created",
          "type": "string"
        }
      }
    },
    "v1SpectroClusterUidStatusSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "abortTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "addOnServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterAddOnServiceSummary"
          }
        },
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1APIEndpoint"
          }
        },
        "clusterImport": {
          "$ref": "#/definitions/v1ClusterImport"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "fips": {
          "$ref": "#/definitions/v1ClusterFips"
        },
        "health": {
          "$ref": "#/definitions/v1SpectroClusterHealthStatus"
        },
        "hourlyRate": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "kubeMeta": {
          "$ref": "#/definitions/v1KubeMeta"
        },
        "location": {
          "$ref": "#/definitions/v1ClusterMetaSpecLocation"
        },
        "metrics": {
          "$ref": "#/definitions/v1SpectroClusterMetrics"
        },
        "notifications": {
          "$ref": "#/definitions/v1ClusterNotificationStatus"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterPackStatus"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          }
        },
        "spcApply": {
          "$ref": "#/definitions/v1SpcApply"
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        },
        "upgrades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          }
        },
        "virtual": {
          "$ref": "#/definitions/v1Virtual"
        },
        "workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        }
      }
    },
    "v1SpectroClusterUidSummary": {
      "description": "Spectro cluster summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Spectro cluster spec summary",
          "type": "object",
          "properties": {
            "archTypes": {
              "description": "Architecture types of the cluster",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ArchType"
              }
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1CloudConfigMeta"
            },
            "cloudaccount": {
              "$ref": "#/definitions/v1CloudAccountMeta"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
            },
            "clusterProfileTemplates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
              }
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterUidStatusSummary"
        }
      }
    },
    "v1SpectroClusterUidUpgrades": {
      "description": "Cluster status upgrades",
      "type": "object",
      "properties": {
        "upgrades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          }
        }
      }
    },
    "v1SpectroClusterVMCloneEntity": {
      "type": "object",
      "required": [
        "cloneName"
      ],
      "properties": {
        "annotationFilters": {
          "description": "Annotation filters",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cloneName": {
          "description": "Cloning Virtual machine's name",
          "type": "string"
        },
        "labelFilters": {
          "description": "Label filters",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "newMacAddresses": {
          "description": "NewMacAddresses manually sets that target interfaces' mac addresses. The key is the interface name and the value is the new mac address. If this field is not specified, a new MAC address will be generated automatically, as for any interface that is not included in this map",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "newSMBiosSerial": {
          "description": "NewSMBiosSerial manually sets that target's SMbios serial. If this field is not specified, a new serial will be generated automatically.",
          "type": "string"
        }
      }
    },
    "v1SpectroClusterValidatorResponse": {
      "description": "Cluster validator response",
      "type": "object",
      "properties": {
        "machinePools": {
          "$ref": "#/definitions/v1ConstraintValidatorResponse"
        },
        "profiles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileValidatorResponse"
          }
        }
      }
    },
    "v1SpectroClusterVariable": {
      "description": "Variable with value which will be used within the packs of cluster profile",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Variable name",
          "type": "string"
        },
        "value": {
          "description": "Actual value of the variable to be used within the cluster",
          "type": "string"
        }
      }
    },
    "v1SpectroClusterVariableResponse": {
      "description": "Unique variable field with schema definition",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "defaultValue": {
          "description": "The default value of the variable",
          "type": "string",
          "x-omitempty": false
        },
        "description": {
          "description": "Variable description",
          "type": "string"
        },
        "displayName": {
          "description": "Unique display name of the variable",
          "type": "string"
        },
        "format": {
          "$ref": "#/definitions/v1VariableFormat"
        },
        "hidden": {
          "description": "If true, then variable will be hidden for overriding the value. By default the hidden flag will be set to false",
          "type": "boolean",
          "x-omitempty": false
        },
        "immutable": {
          "description": "If true, then variable value can't be editable. By default the immutable flag will be set to false",
          "type": "boolean",
          "x-omitempty": false
        },
        "inputType": {
          "description": "Input type for the variable - text or dropdown. Defaults to text for backward compatibility",
          "x-omitempty": false,
          "$ref": "#/definitions/v1VariableInputType"
        },
        "isSensitive": {
          "description": "If true, then default value will be masked. By default the isSensitive flag will be set to false",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "Variable name",
          "type": "string"
        },
        "options": {
          "description": "Available options for dropdown input type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VariableOption"
          },
          "x-omitempty": false
        },
        "regex": {
          "description": "Regular expression pattern which the variable value must match",
          "type": "string"
        },
        "required": {
          "description": "Flag to specify if the variable is optional or mandatory. If it is mandatory then default value must be provided",
          "type": "boolean",
          "x-omitempty": false
        },
        "value": {
          "description": "The user specified value of the variable",
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1SpectroClusterVariableUpdateEntity": {
      "description": "List of cluster variables to be updated with profile uid",
      "type": "object",
      "required": [
        "profileUid"
      ],
      "properties": {
        "profileUid": {
          "description": "Profile uid to which the variable belongs",
          "type": "string"
        },
        "variables": {
          "description": "List of variables with updated values",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterVariable"
          }
        }
      }
    },
    "v1SpectroClusterVariables": {
      "description": "List of cluster variables with schema belonging to a cluster",
      "type": "object",
      "required": [
        "profileUid"
      ],
      "properties": {
        "profileUid": {
          "description": "Profile uid to which the cluster variable belongs",
          "type": "string"
        },
        "variables": {
          "description": "List of cluster variables with schema",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterVariableResponse"
          }
        }
      }
    },
    "v1SpectroClustersHealth": {
      "description": "Spectro Clusters health data",
      "type": "object",
      "properties": {
        "errored": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "healthy": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "running": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "unhealthy": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        }
      }
    },
    "v1SpectroClustersMeta": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1SpectroClusterMeta"
      }
    },
    "v1SpectroClustersMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ObjectMeta"
          }
        }
      }
    },
    "v1SpectroClustersMetadataSearch": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterMetaSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1SpectroClustersSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1SpectroCustomClusterEntity": {
      "description": "Custom cluster request payload for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1CustomClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1CustomClusterConfigEntity"
            },
            "clusterTemplate": {
              "$ref": "#/definitions/v1ClusterTemplateRef"
            },
            "clusterType": {
              "$ref": "#/definitions/v1ClusterType"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1CustomMachinePoolConfigEntity"
              }
            },
            "profiles": {
              "description": "Cluster profile references that specify which profiles to apply to the cluster. Supports overriding pack values and variables. When template references are used, pack values cannot be overridden as they are retrieved from the template's pre-configured definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroEdgeNativeClusterEntity": {
      "description": "EdgeNative cluster create or update request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1EdgeNativeClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "clusterTemplate": {
              "$ref": "#/definitions/v1ClusterTemplateRef"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1EdgeNativeMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "description": "Cluster profile references that specify which profiles to apply to the cluster. Supports overriding pack values and variables. When template references are used, pack values cannot be overridden as they are retrieved from the template's pre-configured definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroEdgeNativeClusterImportEntity": {
      "description": "Spectro EdgeNative cluster import request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroEdgeNativeClusterRateEntity": {
      "description": "Edge-native cluster request payload for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EdgeNativeClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeNativeMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroEksClusterEntity": {
      "description": "Spectro EKS cluster request payload for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1EksClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "clusterTemplate": {
              "$ref": "#/definitions/v1ClusterTemplateRef"
            },
            "fargateProfiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1FargateProfile"
              }
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "description": "Cluster profile references that specify which profiles to apply to the cluster. Supports overriding pack values and variables. When template references are used, pack values cannot be overridden as they are retrieved from the template's pre-configured definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroEksClusterRateEntity": {
      "description": "Spectro EKS cluster request payload for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroGcpClusterEntity": {
      "description": "GCP cluster request payload for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1GcpClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "clusterTemplate": {
              "$ref": "#/definitions/v1ClusterTemplateRef"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "description": "Cluster profile references that specify which profiles to apply to the cluster. Supports overriding pack values and variables. When template references are used, pack values cannot be overridden as they are retrieved from the template's pre-configured definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroGcpClusterImportEntity": {
      "description": "Spectro GCP cluster import request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroGcpClusterRateEntity": {
      "description": "Gcp cluster request payload for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GcpClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroGenericClusterImportEntity": {
      "description": "Spectro generic cluster import request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            },
            "edgeConfig": {
              "$ref": "#/definitions/v1ImportEdgeHostConfig"
            }
          }
        }
      }
    },
    "v1SpectroGenericClusterRateEntity": {
      "description": "Generic cluster request payload for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GenericMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroMaasClusterEntity": {
      "description": "Spectro Maas cluster request payload for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1MaasClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "clusterTemplate": {
              "$ref": "#/definitions/v1ClusterTemplateRef"
            },
            "clusterType": {
              "$ref": "#/definitions/v1ClusterType"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "description": "Cluster profile references that specify which profiles to apply to the cluster. Supports overriding pack values and variables. When template references are used, pack values cannot be overridden as they are retrieved from the template's pre-configured definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroMaasClusterImportEntity": {
      "description": "Spectro maas cluster import request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroMaasClusterRateEntity": {
      "description": "Maas cluster request payload for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroOpenStackClusterEntity": {
      "description": "OpenStack cluster request payload for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1OpenStackClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "clusterTemplate": {
              "$ref": "#/definitions/v1ClusterTemplateRef"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "description": "Cluster profile references that specify which profiles to apply to the cluster. Supports overriding pack values and variables. When template references are used, pack values cannot be overridden as they are retrieved from the template's pre-configured definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroOpenStackClusterImportEntity": {
      "description": "Spectro OpenStack cluster import request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroOpenStackClusterRateEntity": {
      "description": "Openstack cluster request payload for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroTunnelConfig": {
      "description": "Spectro tunnel configuration",
      "type": "object",
      "properties": {
        "remoteSsh": {
          "type": "string",
          "default": "disabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-omitempty": false
        },
        "remoteSshTempUser": {
          "type": "string",
          "default": "disabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-omitempty": false
        }
      }
    },
    "v1SpectroTunnelStatus": {
      "description": "SpectroTunnelStatus is the status of the tunnel",
      "type": "object",
      "properties": {
        "ssh": {
          "description": "SshStatus is the status of the ssh tunnel",
          "$ref": "#/definitions/v1SshTunnelStatus"
        }
      }
    },
    "v1SpectroVirtualClusterEntity": {
      "description": "Spectro virtual cluster request payload for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "clusterConfig"
          ],
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1VirtualClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "clusterTemplate": {
              "$ref": "#/definitions/v1ClusterTemplateRef"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1VirtualMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "description": "Cluster profile references that specify which profiles to apply to the cluster. Supports overriding pack values and variables. When template references are used, pack values cannot be overridden as they are retrieved from the template's pre-configured definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroVsphereClusterEntity": {
      "description": "vSphere cluster request payload for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1VsphereClusterConfigEntity"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "clusterTemplate": {
              "$ref": "#/definitions/v1ClusterTemplateRef"
            },
            "edgeHostUid": {
              "description": "Appliance (Edge Host) uid for Edge env",
              "type": "string"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "description": "Cluster profile references that specify which profiles to apply to the cluster. Supports overriding pack values and variables. When template references are used, pack values cannot be overridden as they are retrieved from the template's pre-configured definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroVsphereClusterImportEntity": {
      "description": "Spectro Vsphere cluster import request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroVsphereClusterRateEntity": {
      "description": "Vsphere cluster request payload for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1VsphereClusterConfigEntity"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpotMarketOptions": {
      "description": "SpotMarketOptions defines the options available to a user when configuring Machines to run on Spot instances. Most users should provide an empty struct.",
      "type": "object",
      "properties": {
        "maxPrice": {
          "description": "MaxPrice defines the maximum price the user is willing to pay for Spot VM instances",
          "type": "string"
        }
      }
    },
    "v1SpotVMOptions": {
      "description": "SpotVMOptions defines the options relevant to running the Machine on Spot VMs",
      "type": "object",
      "properties": {
        "maxPrice": {
          "description": "MaxPrice defines the maximum price the user is willing to pay for Spot VM instances",
          "type": "string"
        }
      }
    },
    "v1SshTunnelStatus": {
      "type": "object",
      "properties": {
        "lastModifiedTime": {
          "description": "LastModifiedTime is the last modified time of the SSH tunnel",
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "description": "Message is the status message of the SSH tunnel",
          "type": "string"
        },
        "state": {
          "description": "State is the state of the SSH tunnel",
          "type": "string",
          "enum": [
            "Initiating",
            "Created",
            "Deleting",
            "Deleted",
            "Failed"
          ]
        },
        "user": {
          "description": "User is the temporary user of the SSH tunnel",
          "$ref": "#/definitions/v1SshUserStatus"
        }
      }
    },
    "v1SshUserCredentials": {
      "type": "object",
      "properties": {
        "password": {
          "description": "Password is the temporary password of the SSH tunnel",
          "type": "string"
        },
        "sshKey": {
          "description": "SshKey is the ssh key of the SSH tunnel",
          "type": "string"
        },
        "username": {
          "description": "UserName is the temporary username of the SSH tunnel",
          "type": "string"
        }
      }
    },
    "v1SshUserStatus": {
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Credentials is the temporary user credentials of the SSH tunnel",
          "$ref": "#/definitions/v1SshUserCredentials"
        },
        "lastModifiedTime": {
          "description": "LastModifiedTime is the last modified time of the SSH tunnel",
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "description": "Message is the status message of the SSH tunnel",
          "type": "string"
        },
        "state": {
          "description": "State is the state of the SSH tunnel",
          "type": "string",
          "enum": [
            "Created",
            "Deleted",
            "Failed"
          ]
        }
      }
    },
    "v1SsoLogin": {
      "description": "Describes the allowed sso login details",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Describes the display name for the sso login",
          "type": "string"
        },
        "logo": {
          "description": "Describes the url path for the sso login",
          "type": "string"
        },
        "name": {
          "description": "Describes the processed name for the sso login",
          "type": "string"
        },
        "redirectUri": {
          "description": "Describes the sso login url for the authentication",
          "type": "string"
        }
      }
    },
    "v1SsoLogins": {
      "description": "Describes the allowed sso logins",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1SsoLogin"
      }
    },
    "v1StorageAccount": {
      "description": "Azure storage account provides a unique namespace for your Azure resources",
      "type": "object",
      "properties": {
        "id": {
          "description": "Fully qualified resource ID for the resource",
          "type": "string"
        },
        "kind": {
          "description": "The kind of the resource",
          "type": "string"
        },
        "location": {
          "description": "The geo-location where the resource lives",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource",
          "type": "string"
        }
      }
    },
    "v1StorageAccountEntity": {
      "description": "Azure storage account entity",
      "type": "object",
      "properties": {
        "id": {
          "description": "Azure storage account id",
          "type": "string"
        },
        "name": {
          "description": "Azure storage account name",
          "type": "string"
        }
      }
    },
    "v1StorageContainer": {
      "description": "Azure storage container organizes a set of blobs, similar to a directory in a file system",
      "type": "object",
      "properties": {
        "id": {
          "description": "Fully qualified resource ID for the resource.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource",
          "type": "string"
        },
        "type": {
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\"",
          "type": "string"
        }
      }
    },
    "v1StorageCost": {
      "description": "Cloud storage cost",
      "type": "object",
      "properties": {
        "discountedUsage": {
          "description": "Cloud storage upper limit which is free.",
          "type": "string"
        },
        "price": {
          "description": "Array of cloud storage range prices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StoragePrice"
          }
        }
      }
    },
    "v1StoragePrice": {
      "description": "Cloud storage price within an upper limit.",
      "type": "object",
      "properties": {
        "limit": {
          "description": "Upper limit of cloud storage usage",
          "type": "string"
        },
        "price": {
          "description": "Price of cloud storage type",
          "type": "string"
        }
      }
    },
    "v1StorageRate": {
      "description": "Storage estimated rate information",
      "type": "object",
      "properties": {
        "iops": {
          "type": "number",
          "format": "float64"
        },
        "rate": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "sizeGB": {
          "type": "number",
          "format": "float64"
        },
        "throughput": {
          "type": "number",
          "format": "float64"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1StorageType": {
      "description": "Cloud cloud Storage type details",
      "type": "object",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1StorageCost"
        },
        "iopsCost": {
          "$ref": "#/definitions/v1StorageCost"
        },
        "kind": {
          "description": "kind of storage type",
          "type": "string"
        },
        "name": {
          "description": "Name of the storage type",
          "type": "string"
        },
        "throughputCost": {
          "$ref": "#/definitions/v1StorageCost"
        }
      }
    },
    "v1Subnet": {
      "type": "object",
      "properties": {
        "cidrBlock": {
          "description": "CidrBlock is the CIDR block to be used when the provider creates a managed Vnet.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nsgResourceGroup": {
          "description": "Resource group associated with a network security group",
          "type": "string"
        },
        "securityGroupName": {
          "description": "Network Security Group(NSG) to be attached to subnet. NSG for a control plane subnet, should allow inbound to port 6443, as port 6443 is used by kubeadm to bootstrap the control planes",
          "type": "string"
        }
      }
    },
    "v1Subscription": {
      "description": "Azure Subscription Type",
      "type": "object",
      "properties": {
        "authorizationSource": {
          "description": "The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management",
          "type": "string"
        },
        "displayName": {
          "description": "The subscription display name",
          "type": "string"
        },
        "state": {
          "description": "The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The subscription ID",
          "type": "string"
        }
      }
    },
    "v1SyftDependency": {
      "description": "Compliance Scan Syft Dependency",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1SyftDependencyEntity": {
      "description": "Syft dependency",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1SyftEntity": {
      "description": "Syft response",
      "required": [
        "requestUid",
        "status",
        "report"
      ],
      "properties": {
        "report": {
          "$ref": "#/definitions/v1SyftReportEntity"
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ]
        }
      }
    },
    "v1SyftImageContext": {
      "description": "Compliance Scan Syft Image Context",
      "properties": {
        "containerName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        }
      }
    },
    "v1SyftReport": {
      "description": "Compliance Scan Syft Report",
      "properties": {
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SyftDependency"
          }
        },
        "image": {
          "type": "string"
        },
        "imageContexts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SyftImageContext"
          }
        },
        "isSBOMExist": {
          "type": "boolean"
        },
        "state": {
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "vulnerabilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SyftVulnerability"
          }
        },
        "vulnerabilitySummary": {
          "$ref": "#/definitions/v1SyftVulnerabilitySummary"
        }
      }
    },
    "v1SyftReportEntity": {
      "description": "Syft report",
      "properties": {
        "batchNo": {
          "type": "integer",
          "format": "int32"
        },
        "batchSize": {
          "type": "integer",
          "format": "int32"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SyftDependencyEntity"
          }
        },
        "image": {
          "type": "string"
        },
        "imageContexts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SyftImageContext"
          }
        },
        "sbom": {
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "vulnerabilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SyftVulnerabilityEntity"
          }
        },
        "vulnerabilitySummary": {
          "$ref": "#/definitions/v1SyftVulnerabilitySummaryEntity"
        }
      }
    },
    "v1SyftScanContext": {
      "description": "Compliance Scan Syft Context",
      "properties": {
        "format": {
          "type": "string"
        },
        "labelSelector": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1SyftVulnerability": {
      "description": "Compliance Scan Syft Vulnerability",
      "properties": {
        "fixedIn": {
          "type": "string"
        },
        "installed": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vulnerability": {
          "type": "string"
        }
      }
    },
    "v1SyftVulnerabilityEntity": {
      "description": "Syft vulnerability",
      "properties": {
        "fixedIn": {
          "type": "string"
        },
        "installed": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vulnerability": {
          "type": "string"
        }
      }
    },
    "v1SyftVulnerabilitySummary": {
      "description": "Compliance Scan Syft Vulnerability Summary",
      "properties": {
        "critical": {
          "type": "integer",
          "format": "int32"
        },
        "high": {
          "type": "integer",
          "format": "int32"
        },
        "low": {
          "type": "integer",
          "format": "int32"
        },
        "medium": {
          "type": "integer",
          "format": "int32"
        },
        "negligible": {
          "type": "integer",
          "format": "int32"
        },
        "unknown": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1SyftVulnerabilitySummaryEntity": {
      "description": "Syft vulnerability summary",
      "properties": {
        "critical": {
          "type": "integer",
          "format": "int32"
        },
        "high": {
          "type": "integer",
          "format": "int32"
        },
        "low": {
          "type": "integer",
          "format": "int32"
        },
        "medium": {
          "type": "integer",
          "format": "int32"
        },
        "negligible": {
          "type": "integer",
          "format": "int32"
        },
        "unknown": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1SystemFeature": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SystemFeaturesSpec"
        }
      }
    },
    "v1SystemFeatures": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of system features",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SystemFeature"
          }
        }
      }
    },
    "v1SystemFeaturesSpec": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Feature description",
          "type": "string"
        },
        "docLink": {
          "description": "Feature doc link",
          "type": "string"
        },
        "isAllowed": {
          "description": "Flag which specifies if feature is allowed or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "key": {
          "description": "Unique Feature key",
          "type": "string"
        }
      }
    },
    "v1SystemGitAuthSpec": {
      "description": "system git auth account specifications",
      "properties": {
        "_type": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "$ref": "#/definitions/v1SystemGitAuthSpec"
        }
      }
    },
    "v1SystemReverseProxy": {
      "description": "system config reverse proxy",
      "properties": {
        "caCert": {
          "type": "string"
        },
        "clientCert": {
          "type": "string"
        },
        "clientKey": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "http",
            "https"
          ]
        },
        "server": {
          "type": "string"
        },
        "vHostPort": {
          "type": "integer"
        }
      }
    },
    "v1SystemScarSpec": {
      "description": "system scar config spec",
      "type": "object",
      "properties": {
        "baseContentPath": {
          "type": "string"
        },
        "caCert": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "insecureVerify": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1SystemsManager": {
      "description": "SystemsManager specifies the Systems Manager configuration for the AWS/EKS cluster",
      "type": "object",
      "properties": {
        "activationCode": {
          "description": "ActivationCode specifies the Systems Manager activation code",
          "type": "string"
        },
        "activationId": {
          "description": "ActivationID specifies the Systems Manager activation ID",
          "type": "string"
        }
      }
    },
    "v1TagFilter": {
      "description": "Tag Filter create spec",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1TagFilterSpec"
        }
      }
    },
    "v1TagFilterGroup": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "filters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TagFilterItem"
          }
        }
      }
    },
    "v1TagFilterItem": {
      "properties": {
        "key": {
          "type": "string"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterKeyValueOperator"
        },
        "values": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1TagFilterSpec": {
      "description": "Filter create spec",
      "type": "object",
      "properties": {
        "filterGroup": {
          "$ref": "#/definitions/v1TagFilterGroup"
        }
      }
    },
    "v1TagFilterSummary": {
      "description": "Filter summary object",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TagFilterSpec"
        }
      }
    },
    "v1Taint": {
      "description": "Taint",
      "type": "object",
      "properties": {
        "effect": {
          "type": "string",
          "enum": [
            "NoSchedule",
            "PreferNoSchedule",
            "NoExecute"
          ]
        },
        "key": {
          "description": "The taint key to be applied to a node",
          "type": "string"
        },
        "timeAdded": {
          "$ref": "#/definitions/v1Time"
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "type": "string"
        }
      }
    },
    "v1Team": {
      "description": "Team information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TeamSpec"
        },
        "status": {
          "$ref": "#/definitions/v1TeamStatus"
        }
      }
    },
    "v1TeamPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      }
    },
    "v1TeamRoleMap": {
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "teamId": {
          "type": "string"
        }
      }
    },
    "v1TeamSpec": {
      "description": "Team specifications",
      "properties": {
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1TeamSpecSummary": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        }
      }
    },
    "v1TeamStatus": {
      "description": "Team status",
      "type": "object"
    },
    "v1TeamSummary": {
      "description": "Team summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TeamSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1TeamStatus"
        }
      }
    },
    "v1TeamSummarySortFields": {
      "type": "string",
      "enum": [
        "name",
        "creationTimestamp"
      ],
      "x-nullable": true
    },
    "v1TeamSummarySortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1TeamSummarySortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1TeamTenantRolesEntity": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        }
      }
    },
    "v1TeamTenantRolesUpdate": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Teams": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Team"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1TeamsFilterSpec": {
      "description": "Teams filter spec",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1FilterString"
        }
      }
    },
    "v1TeamsSummaryList": {
      "description": "Returns Team summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamSummary"
          }
        }
      }
    },
    "v1TeamsSummarySpec": {
      "description": "Teams filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1TeamsFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamSummarySortSpec"
          }
        }
      }
    },
    "v1TenantAddressPatch": {
      "description": "Tenant Address",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1Address"
        }
      }
    },
    "v1TenantAssetCert": {
      "description": "tenant cert",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1Cert"
        }
      }
    },
    "v1TenantAssetCerts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TenantAssetCert"
          }
        }
      }
    },
    "v1TenantClusterRbacSettings": {
      "description": "Tenant cluster RBAC settings",
      "type": "object",
      "properties": {
        "automaticClusterRoleBinding": {
          "description": "Specifies the mode for automatic creation and management of cluster role bindings for tenant clusters",
          "type": "string",
          "default": "none",
          "enum": [
            "none",
            "enabled",
            "disabled"
          ],
          "x-omitempty": false
        }
      }
    },
    "v1TenantClusterSettings": {
      "properties": {
        "nodesAutoRemediationSetting": {
          "$ref": "#/definitions/v1NodesAutoRemediationSettings"
        }
      }
    },
    "v1TenantDomains": {
      "description": "Tenant domains",
      "type": "object",
      "properties": {
        "domains": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1TenantEmailPatch": {
      "description": "Tenant EmailId",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        }
      }
    },
    "v1TenantEnableClusterGroup": {
      "description": "Enable or Disable cluster group for a tenant",
      "properties": {
        "hideSystemClusterGroups": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isClusterGroupEnabled": {
          "description": "Deprecated. Use hideSystemClusterGroups field",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1TenantFreemium": {
      "description": "Tenant freemium configuration",
      "properties": {
        "activeClustersLimit": {
          "type": "integer",
          "x-omitempty": false
        },
        "isFreemium": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isUnlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "overageUsageLimit": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "totalUsageLimit": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1TenantFreemiumUsage": {
      "type": "object",
      "properties": {
        "isFreemium": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isUnlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "limit": {
          "$ref": "#/definitions/v1FreemiumUsageLimit"
        },
        "usage": {
          "$ref": "#/definitions/v1FreemiumUsage"
        }
      }
    },
    "v1TenantOidcClaims": {
      "type": "object",
      "properties": {
        "Email": {
          "type": "string",
          "x-omitempty": false
        },
        "FirstName": {
          "type": "string",
          "x-omitempty": false
        },
        "LastName": {
          "type": "string",
          "x-omitempty": false
        },
        "SpectroTeam": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1TenantOidcClientSpec": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "callbackUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "clientId": {
          "type": "string",
          "x-omitempty": false
        },
        "clientSecret": {
          "type": "string",
          "x-omitempty": false
        },
        "defaultTeams": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "isSsoEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "issuerTls": {
          "$ref": "#/definitions/v1OidcIssuerTls"
        },
        "issuerUrl": {
          "description": "the issuer is the URL identifier for the service",
          "type": "string",
          "x-omitempty": false
        },
        "logoutUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "requiredClaims": {
          "$ref": "#/definitions/v1TenantOidcClaims"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "scopesDelimiter": {
          "type": "string",
          "x-omitempty": false
        },
        "syncSsoTeams": {
          "description": "When syncSsoTeams is set to true, all the teams from the OIDC configuration are pulled and saved in palette whereas when set to false, only the teams which are part of palette are pulled and saved",
          "type": "boolean",
          "x-omitempty": false
        },
        "userInfo": {
          "$ref": "#/definitions/v1OidcUserInfo"
        }
      }
    },
    "v1TenantPasswordPolicyEntity": {
      "description": "Tenant Password Policy Entity",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "expiryDurationInDays": {
          "type": "integer"
        },
        "firstReminderInDays": {
          "type": "integer"
        },
        "isRegex": {
          "type": "boolean"
        },
        "maxLength": {
          "type": "integer"
        },
        "minLength": {
          "type": "integer"
        },
        "minNumOfBlockLetters": {
          "type": "integer"
        },
        "minNumOfDigits": {
          "type": "integer"
        },
        "minNumOfSmallLetters": {
          "type": "integer"
        },
        "minNumOfSpecialCharacters": {
          "type": "integer"
        },
        "regex": {
          "type": "string"
        },
        "updateTimestamp": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1TenantResourceLimit": {
      "properties": {
        "kind": {
          "type": "string",
          "$ref": "#/definitions/v1ResourceLimitType"
        },
        "label": {
          "type": "string"
        },
        "limit": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "maxLimit": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        }
      }
    },
    "v1TenantResourceLimitEntity": {
      "properties": {
        "kind": {
          "type": "string",
          "x-omitempty": false,
          "$ref": "#/definitions/v1ResourceLimitType"
        },
        "limit": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        }
      }
    },
    "v1TenantResourceLimits": {
      "description": "Tenant resource limits",
      "properties": {
        "resources": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TenantResourceLimit"
          }
        }
      }
    },
    "v1TenantResourceLimitsEntity": {
      "description": "Tenant resource limits. Supported resources keys are 'user','project','apiKey','team','role','cloudaccount','clusterprofile','workspace','registry','privategateway','location','certificate','macro','sshkey','alert','spectrocluster','edgehost'.",
      "properties": {
        "resources": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TenantResourceLimitEntity"
          }
        }
      }
    },
    "v1TenantSamlRequestSpec": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TenantSamlSpecAttribute"
          }
        },
        "defaultTeams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "federationMetadata": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "isSingleLogoutEnabled": {
          "type": "boolean"
        },
        "isSsoEnabled": {
          "type": "boolean"
        },
        "nameIdFormat": {
          "type": "string"
        },
        "syncSsoTeams": {
          "description": "When syncSsoTeams is set to true, all the teams from the OIDC configuration are pulled and saved in palette whereas when set to false, only the teams which are part of palette are pulled and saved",
          "type": "boolean"
        }
      }
    },
    "v1TenantSamlSpec": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "acsUrl": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TenantSamlSpecAttribute"
          }
        },
        "audienceUrl": {
          "description": "same as entity id",
          "type": "string"
        },
        "certificate": {
          "description": "certificate for slo",
          "type": "string"
        },
        "defaultTeams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityId": {
          "type": "string"
        },
        "federationMetadata": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "isSingleLogoutEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isSsoEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "issuer": {
          "description": "same as entity id",
          "type": "string"
        },
        "nameIdFormat": {
          "type": "string"
        },
        "serviceProviderMetadata": {
          "type": "string"
        },
        "singleLogoutUrl": {
          "description": "slo url",
          "type": "string",
          "x-omitempty": false
        },
        "syncSsoTeams": {
          "description": "When syncSsoTeams is set to true, all the teams from the OIDC configuration are pulled and saved in palette whereas when set to false, only the teams which are part of palette are pulled and saved",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1TenantSamlSpecAttribute": {
      "type": "object",
      "properties": {
        "attributeValue": {
          "type": "string"
        },
        "mappedAttribute": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nameFormat": {
          "type": "string"
        }
      }
    },
    "v1TenantSsoAuthProvidersEntity": {
      "type": "object",
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ssoLogins": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "v1TlsConfiguration": {
      "description": "TLS configuration",
      "type": "object",
      "properties": {
        "ca": {
          "type": "string"
        },
        "certificate": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "insecureSkipVerify": {
          "type": "boolean",
          "x-omitempty": false
        },
        "key": {
          "type": "string"
        }
      }
    },
    "v1TotalClusterRate": {
      "description": "Cluster total estimated rate information",
      "type": "object",
      "properties": {
        "compute": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1Uid": {
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "uid": {
          "type": "string"
        }
      }
    },
    "v1UidRoleSummary": {
      "type": "object",
      "properties": {
        "inheritedRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1UidSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1Uids": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1Uid"
      }
    },
    "v1UpdateStrategy": {
      "description": "UpdatesStrategy will be used to translate to RollingUpdateStrategy of a MachineDeployment We'll start with default values for the translation, can expose more details later Following is details of parameters translated from the type ScaleOut =\u003e maxSurge=1, maxUnavailable=0 ScaleIn =\u003e maxSurge=0, maxUnavailable=1",
      "type": "object",
      "properties": {
        "type": {
          "description": "update strategy, either ScaleOut or ScaleIn if empty, will default to RollingUpdateScaleOut",
          "type": "string",
          "enum": [
            "RollingUpdateScaleOut",
            "RollingUpdateScaleIn"
          ]
        }
      }
    },
    "v1Updated": {
      "description": "The resource was updated successfully"
    },
    "v1UpdatedMsg": {
      "description": "Update response with message",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1Upgrades": {
      "description": "Upgrades represent the reason of the last upgrade that took place",
      "type": "object",
      "properties": {
        "reason": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1User": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1UserStatus"
        }
      }
    },
    "v1UserAssetSsh": {
      "description": "SSH key information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetSshSpec"
        }
      }
    },
    "v1UserAssetSshEntity": {
      "description": "SSH Key request payload",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetSshSpec"
        }
      }
    },
    "v1UserAssetSshSpec": {
      "description": "SSH key specification",
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string"
        }
      }
    },
    "v1UserAssetsLocation": {
      "description": "Location object",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationSpec"
        }
      }
    },
    "v1UserAssetsLocationAzure": {
      "description": "Azure location object",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationAzureSpec"
        }
      }
    },
    "v1UserAssetsLocationAzureSpec": {
      "description": "Azure location specification",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/v1AzureStorageConfig"
        },
        "isDefault": {
          "description": "Set to 'true', if location has to be set as default",
          "type": "boolean"
        },
        "type": {
          "description": "Azure location type [azure]",
          "type": "string"
        }
      }
    },
    "v1UserAssetsLocationGcp": {
      "description": "GCP location object",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationGcpSpec"
        }
      }
    },
    "v1UserAssetsLocationGcpSpec": {
      "description": "GCP location specification",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/v1GcpStorageConfig"
        },
        "isDefault": {
          "description": "Set to 'true', if location has to be set as default",
          "type": "boolean"
        },
        "type": {
          "description": "GCP location type [gcp]",
          "type": "string"
        }
      }
    },
    "v1UserAssetsLocationS3": {
      "description": "S3 location object",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationS3Spec"
        }
      }
    },
    "v1UserAssetsLocationS3Spec": {
      "description": "S3 location specification",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/v1S3StorageConfig"
        },
        "isDefault": {
          "description": "Set to 'true', if location has to be set as default",
          "type": "boolean"
        },
        "type": {
          "description": "S3 location type [s3/minio]",
          "type": "string"
        }
      }
    },
    "v1UserAssetsLocationSpec": {
      "description": "Location specification",
      "type": "object",
      "properties": {
        "isDefault": {
          "type": "boolean"
        },
        "storage": {
          "$ref": "#/definitions/v1LocationType"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1UserAssetsLocations": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of locations",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserAssetsLocation"
          }
        }
      }
    },
    "v1UserAssetsSsh": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of SSH keys",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserAssetSsh"
          }
        }
      }
    },
    "v1UserEntity": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpecEntity"
        }
      }
    },
    "v1UserInfo": {
      "description": "User basic information",
      "properties": {
        "orgName": {
          "description": "Organization name",
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        },
        "userUid": {
          "type": "string"
        }
      }
    },
    "v1UserKubectlSession": {
      "type": "object",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "podIp": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "projectUid": {
          "type": "string"
        },
        "sessionUid": {
          "type": "string"
        },
        "shellyCluster": {
          "type": "string"
        },
        "tenantClusterEndpoint": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "userUid": {
          "type": "string"
        }
      }
    },
    "v1UserMeta": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1UserMetaEntity": {
      "description": "User meta entity",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1UserPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      }
    },
    "v1UserRoleMap": {
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1UserRoleUIDs": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1UserRolesEntity": {
      "type": "object",
      "properties": {
        "inheritedRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        }
      }
    },
    "v1UserSpec": {
      "description": "User specifications",
      "properties": {
        "emailId": {
          "description": "User's email id",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1UserSpecEntity": {
      "description": "User Entity input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "loginMode": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1UserSpecSummary": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "projects": {
          "description": "Deprecated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "projectsCount": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        }
      }
    },
    "v1UserStatus": {
      "description": "User status",
      "properties": {
        "activationLink": {
          "description": "provides the link to activate or reset the user password",
          "type": "string",
          "x-omitempty": false
        },
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean",
          "x-omitempty": false
        },
        "isPasswordResetting": {
          "description": "Specifies if user in multi org requested password reset",
          "type": "boolean",
          "x-omitempty": false
        },
        "lastSignIn": {
          "description": "user's last sign in time",
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1UserStatusLoginMode": {
      "type": "object",
      "properties": {
        "loginMode": {
          "type": "string",
          "enum": [
            "dev",
            "devops"
          ]
        }
      }
    },
    "v1UserSummary": {
      "description": "User summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1UserStatus"
        }
      }
    },
    "v1UserSummarySortFields": {
      "type": "string",
      "enum": [
        "name",
        "creationTimestamp"
      ],
      "x-nullable": true
    },
    "v1UserSummarySortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1UserSummarySortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1UserToken": {
      "description": "Returns the Authorization token. To be used for further api calls",
      "type": "object",
      "properties": {
        "Authorization": {
          "description": "Describes the authentication token in jwt format.",
          "type": "string"
        },
        "isMfa": {
          "description": "Indicates the authentication flow using MFA",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1UserUpdateEntity": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserUpdateSpecEntity"
        }
      }
    },
    "v1UserUpdateSpecEntity": {
      "description": "User Entity input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "description": "Deprecated. Use 'v1/users/{uid}/roles' API to assign roles.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Users": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1User"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1UsersFilterSpec": {
      "description": "Users filter spec",
      "properties": {
        "emailId": {
          "$ref": "#/definitions/v1FilterString"
        },
        "name": {
          "$ref": "#/definitions/v1FilterString"
        }
      }
    },
    "v1UsersMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserMetaEntity"
          }
        }
      }
    },
    "v1UsersSummaryList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserSummary"
          }
        }
      }
    },
    "v1UsersSummarySpec": {
      "description": "Users filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1UsersFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserSummarySortSpec"
          }
        }
      }
    },
    "v1VMAddVolumeEntity": {
      "type": "object",
      "required": [
        "addVolumeOptions"
      ],
      "properties": {
        "addVolumeOptions": {
          "description": "Parameters required to add volume to virtual machine/virtual machine instance",
          "$ref": "#/definitions/v1VmAddVolumeOptions"
        },
        "dataVolumeTemplate": {
          "description": "dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.",
          "$ref": "#/definitions/v1VmDataVolumeTemplateSpec"
        },
        "persist": {
          "description": "If 'true' add the disk to the Virtual Machine \u0026 Virtual Machine Instance, else add the disk to the Virtual Machine Instance only",
          "type": "boolean"
        }
      }
    },
    "v1VMCluster": {
      "description": "VM Dashboard enabled Spectro cluster",
      "type": "object",
      "properties": {
        "metadata": {
          "properties": {
            "name": {
              "type": "string"
            },
            "projectUid": {
              "type": "string"
            },
            "uid": {
              "type": "string"
            }
          }
        },
        "spec": {
          "description": "Spectro cluster spec",
          "type": "object",
          "properties": {
            "cloudType": {
              "type": "string"
            }
          }
        },
        "status": {
          "description": "Spectro cluster status",
          "properties": {
            "clusterState": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1VMClusters": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1VMCluster"
          }
        }
      }
    },
    "v1VMRemoveVolumeEntity": {
      "type": "object",
      "required": [
        "removeVolumeOptions"
      ],
      "properties": {
        "persist": {
          "description": "If 'true' remove the disk from the Virtual Machine \u0026 Virtual Machine Instance, else remove the disk from the Virtual Machine Instance only",
          "type": "boolean"
        },
        "removeVolumeOptions": {
          "description": "Parameters required to remove volume from virtual machine/virtual machine instance",
          "$ref": "#/definitions/v1VmRemoveVolumeOptions"
        }
      }
    },
    "v1Variable": {
      "description": "Unique variable field with schema definition",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "defaultValue": {
          "description": "The default value of the variable",
          "type": "string",
          "x-omitempty": false
        },
        "description": {
          "description": "Variable description",
          "type": "string"
        },
        "displayName": {
          "description": "Unique display name of the variable",
          "type": "string"
        },
        "format": {
          "$ref": "#/definitions/v1VariableFormat"
        },
        "hidden": {
          "description": "If true, then variable will be hidden for overriding the value. By default the hidden flag will be set to false",
          "type": "boolean",
          "x-omitempty": false
        },
        "immutable": {
          "description": "If true, then variable value can't be editable. By default the immutable flag will be set to false",
          "type": "boolean",
          "x-omitempty": false
        },
        "inputType": {
          "description": "Input type for the variable - text or dropdown. Defaults to text for backward compatibility",
          "$ref": "#/definitions/v1VariableInputType"
        },
        "isSensitive": {
          "description": "If true, then default value will be masked. By default the isSensitive flag will be set to false",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "Variable name",
          "type": "string"
        },
        "options": {
          "description": "Available options for dropdown input type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VariableOption"
          }
        },
        "regex": {
          "description": "Regular expression pattern which the variable value must match",
          "type": "string"
        },
        "required": {
          "description": "Flag to specify if the variable is optional or mandatory. If it is mandatory then default value must be provided",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1VariableFormat": {
      "description": "Format type of the variable value",
      "type": "string",
      "default": "string",
      "enum": [
        "string",
        "number",
        "boolean",
        "ipv4",
        "ipv4cidr",
        "ipv6",
        "version",
        "base64"
      ]
    },
    "v1VariableInputType": {
      "description": "Input type for the variable",
      "type": "string",
      "default": "text",
      "enum": [
        "text",
        "dropdown",
        "multiline"
      ]
    },
    "v1VariableNames": {
      "required": [
        "variables"
      ],
      "properties": {
        "variables": {
          "description": "Array of variable names",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VariableOption": {
      "description": "Option for dropdown variable input type",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "default": {
          "description": "Mark this option as the default selection",
          "type": "boolean",
          "x-omitempty": false
        },
        "description": {
          "description": "Optional tooltip/description for the option",
          "type": "string"
        },
        "label": {
          "description": "Display text for the option",
          "type": "string"
        },
        "value": {
          "description": "Actual value for the option",
          "type": "string"
        }
      }
    },
    "v1Variables": {
      "type": "object",
      "properties": {
        "variables": {
          "description": "List of unique variable fields with schema constraints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Variable"
          }
        }
      }
    },
    "v1Virtual": {
      "properties": {
        "appDeployments": {
          "description": "list of apps deployed on the virtual cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectResReference"
          }
        },
        "clusterGroup": {
          "description": "cluster group details of virtual cluster",
          "$ref": "#/definitions/v1ObjectResReference"
        },
        "hostCluster": {
          "description": "host cluster reference",
          "$ref": "#/definitions/v1ObjectResReference"
        },
        "lifecycleStatus": {
          "description": "cluster life cycle status of virtual cluster",
          "$ref": "#/definitions/v1LifecycleStatus"
        },
        "state": {
          "description": "cluster virtual host status",
          "type": "string"
        },
        "virtualClusters": {
          "description": "list of virtual clusters deployed on the cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectResReference"
          }
        }
      }
    },
    "v1VirtualCloudClusterConfigEntity": {
      "description": "Virtual cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1VirtualClusterConfig"
        }
      }
    },
    "v1VirtualCloudConfig": {
      "description": "VirtualCloudConfig is the Schema for the virtual cloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VirtualCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1NestedCloudConfigStatus"
        }
      }
    },
    "v1VirtualCloudConfigSpec": {
      "description": "VirtualCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec for cluster-api.",
      "type": "object",
      "required": [
        "clusterConfig",
        "hostClusterUid",
        "machinePoolConfig"
      ],
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1VirtualClusterConfig"
        },
        "hostClusterUid": {
          "type": "string"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VirtualMachinePoolConfig"
          }
        }
      }
    },
    "v1VirtualClusterConfig": {
      "description": "Cluster level configuration for virtual cluster",
      "type": "object",
      "properties": {
        "controlPlaneEndpoint": {
          "$ref": "#/definitions/v1APIEndpoint"
        },
        "helmRelease": {
          "$ref": "#/definitions/v1VirtualClusterHelmRelease"
        },
        "kubernetesVersion": {
          "type": "string",
          "default": ""
        }
      }
    },
    "v1VirtualClusterHelmChart": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "default": ""
        },
        "repo": {
          "type": "string",
          "default": ""
        },
        "version": {
          "type": "string",
          "default": ""
        }
      }
    },
    "v1VirtualClusterHelmRelease": {
      "type": "object",
      "properties": {
        "chart": {
          "$ref": "#/definitions/v1VirtualClusterHelmChart"
        },
        "values": {
          "type": "string",
          "default": ""
        }
      }
    },
    "v1VirtualClusterResize": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1VirtualInstanceType"
        }
      }
    },
    "v1VirtualInstanceType": {
      "type": "object",
      "properties": {
        "maxCPU": {
          "description": "Maximum CPU cores",
          "type": "integer",
          "format": "int32"
        },
        "maxMemInMiB": {
          "description": "Maximum memory in MiB",
          "type": "integer",
          "format": "int32"
        },
        "maxStorageGiB": {
          "description": "Maximum storage in GiB",
          "type": "integer",
          "format": "int32"
        },
        "minCPU": {
          "description": "Minimum CPU cores",
          "type": "integer",
          "format": "int32"
        },
        "minMemInMiB": {
          "description": "Minimum memory in MiB",
          "type": "integer",
          "format": "int32"
        },
        "minStorageGiB": {
          "description": "Minimum storage in GiB",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1VirtualMachine": {
      "description": "Virtual cloud machine definition",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VirtualMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1VirtualMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1VirtualInstanceType"
        }
      }
    },
    "v1VirtualMachinePoolConfig": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "InstanceType defines the required CPU, Memory",
          "$ref": "#/definitions/v1VirtualInstanceType"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "resourcePool": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1VirtualMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1VirtualMachinePoolCloudConfigEntity"
        }
      }
    },
    "v1VirtualMachineSnapshot": {
      "description": "VirtualMachineSnapshot defines the operation of snapshotting a VM",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1VmObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VirtualMachineSnapshotSpec"
        },
        "status": {
          "$ref": "#/definitions/v1VirtualMachineSnapshotStatus"
        }
      }
    },
    "v1VirtualMachineSnapshotList": {
      "description": "VirtualMachineSnapshotList is a list of VirtualMachineSnapshot resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VirtualMachineSnapshot"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1VmListMeta"
        }
      }
    },
    "v1VirtualMachineSnapshotSpec": {
      "description": "VirtualMachineSnapshotSpec is the spec for a VirtualMachineSnapshot resource",
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "deletionPolicy": {
          "type": "string"
        },
        "failureDeadline": {
          "$ref": "#/definitions/v1VmDuration"
        },
        "source": {
          "$ref": "#/definitions/v1VmTypedLocalObjectReference"
        }
      }
    },
    "v1VirtualMachineSnapshotStatus": {
      "description": "VirtualMachineSnapshotStatus is the status for a VirtualMachineSnapshot resource",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmCondition"
          }
        },
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "error": {
          "$ref": "#/definitions/v1VmError"
        },
        "indications": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        },
        "phase": {
          "type": "string"
        },
        "readyToUse": {
          "type": "boolean"
        },
        "snapshotVolumes": {
          "$ref": "#/definitions/v1VmSnapshotVolumesLists"
        },
        "sourceUID": {
          "type": "string"
        },
        "virtualMachineSnapshotContentName": {
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "v1VirtualMachineSpec": {
      "description": "Virtual cloud machine definition spec",
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string"
        }
      }
    },
    "v1VirtualMachines": {
      "description": "List of virtual machines",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1VirtualMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1VirtualNetwork": {
      "description": "Azure virtual network is the fundamental building block for your private network in Azure.",
      "type": "object",
      "properties": {
        "addressSpaces": {
          "description": "Location of the virtual network",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "The ID of the resource group",
          "type": "string"
        },
        "location": {
          "description": "Location of the virtual network",
          "type": "string"
        },
        "name": {
          "description": "Name of the virtual network",
          "type": "string"
        },
        "subnets": {
          "description": "List of subnets associated with Azure VPC",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Subnet"
          }
        },
        "type": {
          "description": "Type of the virtual network",
          "type": "string"
        }
      }
    },
    "v1VmAccessCredential": {
      "description": "AccessCredential represents a credential source that can be used to authorize remote access to the vm guest Only one of its members may be specified.",
      "type": "object",
      "properties": {
        "sshPublicKey": {
          "$ref": "#/definitions/v1VmSshPublicKeyAccessCredential"
        },
        "userPassword": {
          "$ref": "#/definitions/v1VmUserPasswordAccessCredential"
        }
      }
    },
    "v1VmAccessCredentialSecretSource": {
      "type": "object",
      "required": [
        "secretName"
      ],
      "properties": {
        "secretName": {
          "description": "SecretName represents the name of the secret in the VMI's namespace",
          "type": "string"
        }
      }
    },
    "v1VmAddVolumeOptions": {
      "description": "AddVolumeOptions is provided when dynamically hot plugging a volume and disk",
      "type": "object",
      "required": [
        "name",
        "disk",
        "volumeSource"
      ],
      "properties": {
        "disk": {
          "$ref": "#/definitions/v1VmDisk"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself.",
          "type": "string"
        },
        "volumeSource": {
          "$ref": "#/definitions/v1VmHotplugVolumeSource"
        }
      }
    },
    "v1VmAffinity": {
      "description": "Affinity is a group of affinity scheduling rules.",
      "type": "object",
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/v1VmNodeAffinity"
        },
        "podAffinity": {
          "$ref": "#/definitions/v1VmPodAffinity"
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/v1PodAntiAffinity"
        }
      }
    },
    "v1VmBIOS": {
      "description": "If set (default), BIOS will be used.",
      "type": "object",
      "properties": {
        "useSerial": {
          "description": "If set, the BIOS output will be transmitted over serial",
          "type": "boolean"
        }
      }
    },
    "v1VmBlockSize": {
      "description": "BlockSize provides the option to change the block size presented to the VM for a disk. Only one of its members may be specified.",
      "type": "object",
      "properties": {
        "custom": {
          "$ref": "#/definitions/v1VmCustomBlockSize"
        },
        "matchVolume": {
          "$ref": "#/definitions/v1VmFeatureState"
        }
      }
    },
    "v1VmBootloader": {
      "description": "Represents the firmware blob used to assist in the domain creation process. Used for setting the QEMU BIOS file path for the libvirt domain.",
      "type": "object",
      "properties": {
        "bios": {
          "$ref": "#/definitions/v1VmBIOS"
        },
        "efi": {
          "$ref": "#/definitions/v1VmEFI"
        }
      }
    },
    "v1VmCDRomTarget": {
      "type": "object",
      "properties": {
        "bus": {
          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.",
          "type": "string"
        },
        "readonly": {
          "description": "ReadOnly. Defaults to true.",
          "type": "boolean"
        },
        "tray": {
          "description": "Tray indicates if the tray of the device is open or closed. Allowed values are \"open\" and \"closed\". Defaults to closed.",
          "type": "string"
        }
      }
    },
    "v1VmChassis": {
      "description": "Chassis specifies the chassis info passed to the domain.",
      "type": "object",
      "properties": {
        "asset": {
          "type": "string"
        },
        "manufacturer": {
          "type": "string"
        },
        "serial": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1VmClientPassthroughDevices": {
      "description": "Represent a subset of client devices that can be accessed by VMI. At the moment only, USB devices using Usbredir's library and tooling. Another fit would be a smartcard with libcacard.\n\nThe struct is currently empty as there is no immediate request for user-facing APIs. This structure simply turns on USB redirection of UsbClientPassthroughMaxNumberOf devices.",
      "type": "object"
    },
    "v1VmClock": {
      "description": "Represents the clock and timers of a vmi.",
      "type": "object",
      "properties": {
        "timer": {
          "$ref": "#/definitions/v1VmTimer"
        },
        "timezone": {
          "description": "Timezone sets the guest clock to the specified timezone. Zone name follows the TZ environment variable format (e.g. 'America/New_York').",
          "type": "string"
        },
        "utc": {
          "$ref": "#/definitions/v1VmClockOffsetUTC"
        }
      }
    },
    "v1VmClockOffsetUTC": {
      "description": "UTC sets the guest clock to UTC on each boot.",
      "type": "object",
      "properties": {
        "offsetSeconds": {
          "description": "OffsetSeconds specifies an offset in seconds, relative to UTC. If set, guest changes to the clock will be kept during reboots and not reset.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1VmCloudInitConfigDriveSource": {
      "description": "Represents a cloud-init config drive user data source. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html",
      "type": "object",
      "properties": {
        "networkData": {
          "description": "NetworkData contains config drive inline cloud-init networkdata.",
          "type": "string"
        },
        "networkDataBase64": {
          "description": "NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.",
          "type": "string"
        },
        "networkDataSecretRef": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        },
        "secretRef": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        },
        "userData": {
          "description": "UserData contains config drive inline cloud-init userdata.",
          "type": "string"
        },
        "userDataBase64": {
          "description": "UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.",
          "type": "string"
        }
      }
    },
    "v1VmCloudInitNoCloudSource": {
      "description": "Represents a cloud-init nocloud user data source. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html",
      "type": "object",
      "properties": {
        "networkData": {
          "description": "NetworkData contains NoCloud inline cloud-init networkdata.",
          "type": "string"
        },
        "networkDataBase64": {
          "description": "NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.",
          "type": "string"
        },
        "networkDataSecretRef": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        },
        "secretRef": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        },
        "userData": {
          "description": "UserData contains NoCloud inline cloud-init userdata.",
          "type": "string"
        },
        "userDataBase64": {
          "description": "UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.",
          "type": "string"
        }
      }
    },
    "v1VmCondition": {
      "description": "Condition defines conditions",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "type": "string"
        },
        "lastTransitionTime": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1VmConfigDriveSshPublicKeyAccessCredentialPropagation": {
      "type": "object"
    },
    "v1VmConfigMapVolumeSource": {
      "description": "ConfigMapVolumeSource adapts a ConfigMap into a volume. More info: https://kubernetes.io/docs/concepts/storage/volumes/#configmap",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or it's keys must be defined",
          "type": "boolean"
        },
        "volumeLabel": {
          "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
          "type": "string"
        }
      }
    },
    "v1VmContainerDiskSource": {
      "description": "Represents a docker image with an embedded disk.",
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "description": "Image is the name of the image with the embedded disk.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "imagePullSecret": {
          "description": "ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.",
          "type": "string"
        },
        "path": {
          "description": "Path defines the path to disk file in the container",
          "type": "string"
        }
      }
    },
    "v1VmCoreDataVolumeSource": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default.",
          "type": "string"
        }
      }
    },
    "v1VmCoreResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "type": "object",
      "properties": {
        "limits": {
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1VmQuantity"
          }
        },
        "requests": {
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1VmQuantity"
          }
        }
      }
    },
    "v1VmCpu": {
      "description": "CPU allows specifying the CPU topology.",
      "type": "object",
      "properties": {
        "cores": {
          "description": "Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.",
          "type": "integer",
          "format": "int64"
        },
        "dedicatedCpuPlacement": {
          "description": "DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.",
          "type": "boolean"
        },
        "features": {
          "description": "Features specifies the CPU features list inside the VMI.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmCpuFeature"
          }
        },
        "isolateEmulatorThread": {
          "description": "IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.",
          "type": "boolean"
        },
        "model": {
          "description": "Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \"host-passthrough\" to get the same CPU as the node and \"host-model\" to get CPU closest to the node one. Defaults to host-model.",
          "type": "string"
        },
        "numa": {
          "$ref": "#/definitions/v1VmNUMA"
        },
        "realtime": {
          "$ref": "#/definitions/v1VmRealtime"
        },
        "sockets": {
          "description": "Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.",
          "type": "integer",
          "format": "int64"
        },
        "threads": {
          "description": "Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1VmCpuFeature": {
      "description": "CPUFeature allows specifying a CPU feature.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the CPU feature",
          "type": "string"
        },
        "policy": {
          "description": "Policy is the CPU feature attribute which can have the following attributes: force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU. require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it. optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU. disable  - The feature will not be supported by virtual CPU. forbid   - Guest creation will fail if the feature is supported by host CPU. Defaults to require",
          "type": "string"
        }
      }
    },
    "v1VmCustomBlockSize": {
      "description": "CustomBlockSize represents the desired logical and physical block size for a VM disk.",
      "type": "object",
      "required": [
        "logical",
        "physical"
      ],
      "properties": {
        "logical": {
          "type": "integer",
          "format": "int32"
        },
        "physical": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1VmDHCPOptions": {
      "description": "Extra DHCP options to use in the interface.",
      "type": "object",
      "properties": {
        "bootFileName": {
          "description": "If specified will pass option 67 to interface's DHCP server",
          "type": "string"
        },
        "ntpServers": {
          "description": "If specified will pass the configured NTP server to the VM via DHCP option 042.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "privateOptions": {
          "description": "If specified will pass extra DHCP options for private use, range: 224-254",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmDHCPPrivateOptions"
          }
        },
        "tftpServerName": {
          "description": "If specified will pass option 66 to interface's DHCP server",
          "type": "string"
        }
      }
    },
    "v1VmDHCPPrivateOptions": {
      "description": "DHCPExtraOptions defines Extra DHCP options for a VM.",
      "type": "object",
      "required": [
        "option",
        "value"
      ],
      "properties": {
        "option": {
          "description": "Option is an Integer value from 224-254 Required.",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value is a String value for the Option provided Required.",
          "type": "string"
        }
      }
    },
    "v1VmDataVolumeBlankImage": {
      "description": "DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC",
      "type": "object"
    },
    "v1VmDataVolumeCheckpoint": {
      "description": "DataVolumeCheckpoint defines a stage in a warm migration.",
      "type": "object",
      "required": [
        "previous",
        "current"
      ],
      "properties": {
        "current": {
          "description": "Current is the identifier of the snapshot created for this checkpoint.",
          "type": "string"
        },
        "previous": {
          "description": "Previous is the identifier of the snapshot from the previous checkpoint.",
          "type": "string"
        }
      }
    },
    "v1VmDataVolumeSource": {
      "description": "DataVolumeSource represents the source for our Data Volume, this can be HTTP, Imageio, S3, Registry or an existing PVC",
      "type": "object",
      "properties": {
        "blank": {
          "$ref": "#/definitions/v1VmDataVolumeBlankImage"
        },
        "http": {
          "$ref": "#/definitions/v1VmDataVolumeSourceHttp"
        },
        "imageio": {
          "$ref": "#/definitions/v1VmDataVolumeSourceImageIO"
        },
        "pvc": {
          "$ref": "#/definitions/v1VmDataVolumeSourcePVC"
        },
        "registry": {
          "$ref": "#/definitions/v1VmDataVolumeSourceRegistry"
        },
        "s3": {
          "$ref": "#/definitions/v1VmDataVolumeSourceS3"
        },
        "upload": {
          "$ref": "#/definitions/v1VmDataVolumeSourceUpload"
        },
        "vddk": {
          "$ref": "#/definitions/v1VmDataVolumeSourceVDDK"
        }
      }
    },
    "v1VmDataVolumeSourceHttp": {
      "description": "DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "certConfigMap": {
          "description": "CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate",
          "type": "string"
        },
        "extraHeaders": {
          "description": "ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretExtraHeaders": {
          "description": "SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretRef": {
          "description": "SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded",
          "type": "string"
        },
        "url": {
          "description": "URL is the URL of the http(s) endpoint",
          "type": "string"
        }
      }
    },
    "v1VmDataVolumeSourceImageIO": {
      "description": "DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source",
      "type": "object",
      "required": [
        "url",
        "diskId"
      ],
      "properties": {
        "certConfigMap": {
          "description": "CertConfigMap provides a reference to the CA cert",
          "type": "string"
        },
        "diskId": {
          "description": "DiskID provides id of a disk to be imported",
          "type": "string"
        },
        "secretRef": {
          "description": "SecretRef provides the secret reference needed to access the ovirt-engine",
          "type": "string"
        },
        "url": {
          "description": "URL is the URL of the ovirt-engine",
          "type": "string"
        }
      }
    },
    "v1VmDataVolumeSourcePVC": {
      "description": "DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC",
      "type": "object",
      "required": [
        "namespace",
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the source PVC",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the source PVC",
          "type": "string"
        }
      }
    },
    "v1VmDataVolumeSourceRef": {
      "description": "DataVolumeSourceRef defines an indirect reference to the source of data for the DataVolume",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "kind": {
          "description": "The kind of the source reference, currently only \"DataSource\" is supported",
          "type": "string"
        },
        "name": {
          "description": "The name of the source reference",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the source reference, defaults to the DataVolume namespace",
          "type": "string"
        }
      }
    },
    "v1VmDataVolumeSourceRegistry": {
      "description": "DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source",
      "type": "object",
      "properties": {
        "certConfigMap": {
          "description": "CertConfigMap provides a reference to the Registry certs",
          "type": "string"
        },
        "imageStream": {
          "description": "ImageStream is the name of image stream for import",
          "type": "string"
        },
        "pullMethod": {
          "description": "PullMethod can be either \"pod\" (default import), or \"node\" (node docker cache based import)",
          "type": "string"
        },
        "secretRef": {
          "description": "SecretRef provides the secret reference needed to access the Registry source",
          "type": "string"
        },
        "url": {
          "description": "URL is the url of the registry source (starting with the scheme: docker, oci-archive)",
          "type": "string"
        }
      }
    },
    "v1VmDataVolumeSourceS3": {
      "description": "DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "certConfigMap": {
          "description": "CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate",
          "type": "string"
        },
        "secretRef": {
          "description": "SecretRef provides the secret reference needed to access the S3 source",
          "type": "string"
        },
        "url": {
          "description": "URL is the url of the S3 source",
          "type": "string"
        }
      }
    },
    "v1VmDataVolumeSourceUpload": {
      "description": "DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source",
      "type": "object"
    },
    "v1VmDataVolumeSourceVDDK": {
      "description": "DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source",
      "type": "object",
      "properties": {
        "backingFile": {
          "description": "BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi",
          "type": "string"
        },
        "initImageURL": {
          "description": "InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map",
          "type": "string"
        },
        "secretRef": {
          "description": "SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host",
          "type": "string"
        },
        "thumbprint": {
          "description": "Thumbprint is the certificate thumbprint of the vCenter or ESXi host",
          "type": "string"
        },
        "url": {
          "description": "URL is the URL of the vCenter or ESXi host with the VM to migrate",
          "type": "string"
        },
        "uuid": {
          "description": "UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi",
          "type": "string"
        }
      }
    },
    "v1VmDataVolumeSpec": {
      "description": "DataVolumeSpec defines the DataVolume type specification",
      "type": "object",
      "properties": {
        "checkpoints": {
          "description": "Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmDataVolumeCheckpoint"
          }
        },
        "contentType": {
          "description": "DataVolumeContentType options: \"kubevirt\", \"archive\"",
          "type": "string"
        },
        "finalCheckpoint": {
          "description": "FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.",
          "type": "boolean"
        },
        "preallocation": {
          "description": "Preallocation controls whether storage for DataVolumes should be allocated in advance.",
          "type": "boolean"
        },
        "priorityClassName": {
          "description": "PriorityClassName for Importer, Cloner and Uploader pod",
          "type": "string"
        },
        "pvc": {
          "$ref": "#/definitions/v1VmPersistentVolumeClaimSpec"
        },
        "source": {
          "$ref": "#/definitions/v1VmDataVolumeSource"
        },
        "sourceRef": {
          "$ref": "#/definitions/v1VmDataVolumeSourceRef"
        },
        "storage": {
          "$ref": "#/definitions/v1VmStorageSpec"
        }
      }
    },
    "v1VmDataVolumeTemplateSpec": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1VmObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VmDataVolumeSpec"
        }
      }
    },
    "v1VmDevices": {
      "type": "object",
      "properties": {
        "autoattachGraphicsDevice": {
          "description": "Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true.",
          "type": "boolean"
        },
        "autoattachInputDevice": {
          "description": "Whether to attach an Input Device. Defaults to false.",
          "type": "boolean"
        },
        "autoattachMemBalloon": {
          "description": "Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true.",
          "type": "boolean"
        },
        "autoattachPodInterface": {
          "description": "Whether to attach a pod network interface. Defaults to true.",
          "type": "boolean"
        },
        "autoattachSerialConsole": {
          "description": "Whether to attach the default serial console or not. Serial console access will not be available if set to false. Defaults to true.",
          "type": "boolean"
        },
        "autoattachVSOCK": {
          "description": "Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false.",
          "type": "boolean"
        },
        "blockMultiQueue": {
          "description": "Whether or not to enable virtio multi-queue for block devices. Defaults to false.",
          "type": "boolean"
        },
        "clientPassthrough": {
          "$ref": "#/definitions/v1VmClientPassthroughDevices"
        },
        "disableHotplug": {
          "description": "DisableHotplug disabled the ability to hotplug disks.",
          "type": "boolean"
        },
        "disks": {
          "description": "Disks describes disks, cdroms and luns which are connected to the vmi.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmDisk"
          }
        },
        "downwardMetrics": {
          "description": "DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi.",
          "type": "object"
        },
        "filesystems": {
          "description": "Filesystems describes filesystem which is connected to the vmi.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmFilesystem"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "gpus": {
          "description": "Whether to attach a GPU device to the vmi.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmGPU"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "hostDevices": {
          "description": "Whether to attach a host device to the vmi.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmHostDevice"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "inputs": {
          "description": "Inputs describe input devices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmInput"
          }
        },
        "interfaces": {
          "description": "Interfaces describe network interfaces which are added to the vmi.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmInterface"
          }
        },
        "logSerialConsole": {
          "description": "Whether to log the auto-attached default serial console or not. Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'. Not relevant if autoattachSerialConsole is disabled. Defaults to cluster wide setting on VirtualMachineOptions.",
          "type": "boolean"
        },
        "networkInterfaceMultiqueue": {
          "description": "If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.",
          "type": "boolean"
        },
        "rng": {
          "$ref": "#/definitions/v1VmRng"
        },
        "sound": {
          "$ref": "#/definitions/v1VmSoundDevice"
        },
        "tpm": {
          "$ref": "#/definitions/v1VmTPMDevice"
        },
        "useVirtioTransitional": {
          "description": "Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0).",
          "type": "boolean"
        },
        "watchdog": {
          "$ref": "#/definitions/v1VmWatchdog"
        }
      }
    },
    "v1VmDisk": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "blockSize": {
          "$ref": "#/definitions/v1VmBlockSize"
        },
        "bootOrder": {
          "description": "BootOrder is an integer value \u003e 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.",
          "type": "integer",
          "format": "int32"
        },
        "cache": {
          "description": "Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.",
          "type": "string"
        },
        "cdrom": {
          "$ref": "#/definitions/v1VmCDRomTarget"
        },
        "dedicatedIOThread": {
          "description": "dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.",
          "type": "boolean"
        },
        "disk": {
          "$ref": "#/definitions/v1VmDiskTarget"
        },
        "io": {
          "description": "IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.",
          "type": "string"
        },
        "lun": {
          "$ref": "#/definitions/v1VmLunTarget"
        },
        "name": {
          "description": "Name is the device name",
          "type": "string"
        },
        "serial": {
          "description": "Serial provides the ability to specify a serial number for the disk device.",
          "type": "string"
        },
        "shareable": {
          "description": "If specified the disk is made sharable and multiple write from different VMs are permitted",
          "type": "boolean"
        },
        "tag": {
          "description": "If specified, disk address and its tag will be provided to the guest via config drive metadata",
          "type": "string"
        }
      }
    },
    "v1VmDiskTarget": {
      "type": "object",
      "properties": {
        "bus": {
          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb.",
          "type": "string"
        },
        "pciAddress": {
          "description": "If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10",
          "type": "string"
        },
        "readonly": {
          "description": "ReadOnly. Defaults to false.",
          "type": "boolean"
        }
      }
    },
    "v1VmDomainSpec": {
      "type": "object",
      "required": [
        "devices"
      ],
      "properties": {
        "chassis": {
          "$ref": "#/definitions/v1VmChassis"
        },
        "clock": {
          "$ref": "#/definitions/v1VmClock"
        },
        "cpu": {
          "$ref": "#/definitions/v1VmCpu"
        },
        "devices": {
          "$ref": "#/definitions/v1VmDevices"
        },
        "features": {
          "$ref": "#/definitions/v1VmFeatures"
        },
        "firmware": {
          "$ref": "#/definitions/v1VmFirmware"
        },
        "ioThreads": {
          "description": "IOThreads specifies the IOThreads options.",
          "type": "object",
          "properties": {
            "supplementalPoolThreadCount": {
              "description": "SupplementalPoolThreadCount specifies how many iothreads are allocated for the supplementalPool policy.",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "ioThreadsPolicy": {
          "description": "Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy disables use of IOThreads. One of: shared, auto",
          "type": "string"
        },
        "launchSecurity": {
          "$ref": "#/definitions/v1VmLaunchSecurity"
        },
        "machine": {
          "$ref": "#/definitions/v1VmMachine"
        },
        "memory": {
          "$ref": "#/definitions/v1VmMemory"
        },
        "resources": {
          "$ref": "#/definitions/v1VmResourceRequirements"
        }
      }
    },
    "v1VmDownwardApiVolumeFile": {
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/v1VmObjectFieldSelector"
        },
        "mode": {
          "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/v1VmResourceFieldSelector"
        }
      }
    },
    "v1VmDownwardApiVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info.",
      "type": "object",
      "properties": {
        "fields": {
          "description": "Fields is a list of downward API volume file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmDownwardApiVolumeFile"
          }
        },
        "volumeLabel": {
          "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
          "type": "string"
        }
      }
    },
    "v1VmDownwardMetricsVolumeSource": {
      "description": "DownwardMetricsVolumeSource adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.",
      "type": "object"
    },
    "v1VmDuration": {
      "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
      "type": "string"
    },
    "v1VmEFI": {
      "description": "If set, EFI will be used instead of BIOS.",
      "type": "object",
      "properties": {
        "secureBoot": {
          "description": "If set, SecureBoot will be enabled and the OVMF roms will be swapped for SecureBoot-enabled ones. Requires SMM to be enabled. Defaults to true",
          "type": "boolean"
        }
      }
    },
    "v1VmEmptyDiskSource": {
      "description": "EmptyDisk represents a temporary disk which shares the vmis lifecycle.",
      "type": "object",
      "required": [
        "capacity"
      ],
      "properties": {
        "capacity": {
          "$ref": "#/definitions/v1VmQuantity"
        }
      }
    },
    "v1VmEphemeralVolumeSource": {
      "type": "object",
      "properties": {
        "persistentVolumeClaim": {
          "$ref": "#/definitions/v1VmPersistentVolumeClaimVolumeSource"
        }
      }
    },
    "v1VmError": {
      "description": "Error is the last error encountered during the snapshot/restore",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1VmExecAction": {
      "description": "ExecAction describes a \"run in container\" action.",
      "type": "object",
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VmFeatureApiC": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        },
        "endOfInterrupt": {
          "description": "EndOfInterrupt enables the end of interrupt notification in the guest. Defaults to false.",
          "type": "boolean"
        }
      }
    },
    "v1VmFeatureHyperv": {
      "description": "Hyperv specific features.",
      "type": "object",
      "properties": {
        "evmcs": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "frequencies": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "ipi": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "reenlightenment": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "relaxed": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "reset": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "runtime": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "spinlocks": {
          "$ref": "#/definitions/v1VmFeatureSpinlocks"
        },
        "synic": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "synictimer": {
          "$ref": "#/definitions/v1VmSyNICTimer"
        },
        "tlbflush": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "vapic": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "vendorid": {
          "$ref": "#/definitions/v1VmFeatureVendorId"
        },
        "vpindex": {
          "$ref": "#/definitions/v1VmFeatureState"
        }
      }
    },
    "v1VmFeatureKVm": {
      "type": "object",
      "properties": {
        "hidden": {
          "description": "Hide the KVM hypervisor from standard MSR based discovery. Defaults to false",
          "type": "boolean"
        }
      }
    },
    "v1VmFeatureSpinlocks": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        },
        "spinlocks": {
          "description": "Retries indicates the number of retries. Must be a value greater or equal 4096. Defaults to 4096.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1VmFeatureState": {
      "description": "Represents if a feature is enabled or disabled.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        }
      }
    },
    "v1VmFeatureVendorId": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        },
        "vendorid": {
          "description": "VendorID sets the hypervisor vendor id, visible to the vmi. String up to twelve characters.",
          "type": "string"
        }
      }
    },
    "v1VmFeatures": {
      "type": "object",
      "properties": {
        "acpi": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "apic": {
          "$ref": "#/definitions/v1VmFeatureApiC"
        },
        "hyperv": {
          "$ref": "#/definitions/v1VmFeatureHyperv"
        },
        "kvm": {
          "$ref": "#/definitions/v1VmFeatureKVm"
        },
        "pvspinlock": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "smm": {
          "$ref": "#/definitions/v1VmFeatureState"
        }
      }
    },
    "v1VmFieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map 'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item 'i:\\\u003cindex\u003e', where \\\u003cindex\u003e is position of a item in a list 'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object",
      "properties": {
        "Raw": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "v1VmFilesystem": {
      "type": "object",
      "required": [
        "name",
        "virtiofs"
      ],
      "properties": {
        "name": {
          "description": "Name is the device name",
          "type": "string"
        },
        "virtiofs": {
          "$ref": "#/definitions/v1VmFilesystemVirtiofs"
        }
      }
    },
    "v1VmFilesystemVirtiofs": {
      "type": "object"
    },
    "v1VmFirmware": {
      "type": "object",
      "properties": {
        "bootloader": {
          "$ref": "#/definitions/v1VmBootloader"
        },
        "kernelBoot": {
          "$ref": "#/definitions/v1VmKernelBoot"
        },
        "serial": {
          "description": "The system-serial-number in SMBIOS",
          "type": "string"
        },
        "uuid": {
          "description": "UUID reported by the vmi bios. Defaults to a random generated uid.",
          "type": "string"
        }
      }
    },
    "v1VmGPU": {
      "type": "object",
      "required": [
        "name",
        "deviceName"
      ],
      "properties": {
        "deviceName": {
          "type": "string"
        },
        "name": {
          "description": "Name of the GPU device as exposed by a device plugin",
          "type": "string"
        },
        "tag": {
          "description": "If specified, the virtual network interface address and its tag will be provided to the guest via config drive",
          "type": "string"
        },
        "virtualGPUOptions": {
          "$ref": "#/definitions/v1VmVGPUOptions"
        }
      }
    },
    "v1VmGuestAgentPing": {
      "description": "GuestAgentPing configures the guest-agent based ping probe",
      "type": "object"
    },
    "v1VmHPETTimer": {
      "type": "object",
      "properties": {
        "present": {
          "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
          "type": "boolean"
        },
        "tickPolicy": {
          "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \"delay\", \"catchup\", \"merge\", \"discard\".",
          "type": "string"
        }
      }
    },
    "v1VmHostDevice": {
      "type": "object",
      "required": [
        "name",
        "deviceName"
      ],
      "properties": {
        "deviceName": {
          "description": "DeviceName is the resource name of the host device exposed by a device plugin",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tag": {
          "description": "If specified, the virtual network interface address and its tag will be provided to the guest via config drive",
          "type": "string"
        }
      }
    },
    "v1VmHostDisk": {
      "description": "Represents a disk created on the cluster level",
      "type": "object",
      "required": [
        "path",
        "type"
      ],
      "properties": {
        "capacity": {
          "$ref": "#/definitions/v1VmQuantity"
        },
        "path": {
          "description": "The path to HostDisk image located on the cluster",
          "type": "string"
        },
        "shared": {
          "description": "Shared indicate whether the path is shared between nodes",
          "type": "boolean"
        },
        "type": {
          "description": "Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate'",
          "type": "string"
        }
      }
    },
    "v1VmHotplugVolumeSource": {
      "description": "HotplugVolumeSource Represents the source of a volume to mount which are capable of being hotplugged on a live running VMI. Only one of its members may be specified.",
      "type": "object",
      "properties": {
        "dataVolume": {
          "$ref": "#/definitions/v1VmCoreDataVolumeSource"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/v1VmPersistentVolumeClaimVolumeSource"
        }
      }
    },
    "v1VmHttpGetAction": {
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmHttpHeader"
          }
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "type": "string"
        },
        "port": {
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
          "type": [
            "string",
            "number"
          ]
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
          "type": "string"
        }
      }
    },
    "v1VmHttpHeader": {
      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "The header field name",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      }
    },
    "v1VmHugepages": {
      "description": "Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.",
      "type": "object",
      "properties": {
        "pageSize": {
          "description": "PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.",
          "type": "string"
        }
      }
    },
    "v1VmHypervTimer": {
      "type": "object",
      "properties": {
        "present": {
          "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
          "type": "boolean"
        }
      }
    },
    "v1VmI6300ESBWatchdog": {
      "description": "i6300esb watchdog device.",
      "type": "object",
      "properties": {
        "action": {
          "description": "The action to take. Valid values are poweroff, reset, shutdown. Defaults to reset.",
          "type": "string"
        }
      }
    },
    "v1VmInput": {
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "bus": {
          "description": "Bus indicates the bus of input device to emulate. Supported values: virtio, usb.",
          "type": "string"
        },
        "name": {
          "description": "Name is the device name",
          "type": "string"
        },
        "type": {
          "description": "Type indicated the type of input device. Supported values: tablet.",
          "type": "string"
        }
      }
    },
    "v1VmInstancetypeMatcher": {
      "description": "InstancetypeMatcher references a instancetype that is used to fill fields in the VMI template.",
      "type": "object",
      "properties": {
        "inferFromVolume": {
          "description": "InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher this field is removed.",
          "type": "string"
        },
        "kind": {
          "description": "Kind specifies which instancetype resource is referenced. Allowed values are: \"VirtualMachineInstancetype\" and \"VirtualMachineClusterInstancetype\". If not specified, \"VirtualMachineClusterInstancetype\" is used by default.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype",
          "type": "string"
        },
        "revisionName": {
          "description": "RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance.",
          "type": "string"
        }
      }
    },
    "v1VmInterface": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "acpiIndex": {
          "description": "If specified, the ACPI index is used to provide network interface device naming, that is stable across changes in PCI addresses assigned to the device. This value is required to be unique across all devices and be between 1 and (16*1024-1).",
          "type": "integer",
          "format": "int32"
        },
        "bootOrder": {
          "description": "BootOrder is an integer value \u003e 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried.",
          "type": "integer",
          "format": "int32"
        },
        "bridge": {
          "$ref": "#/definitions/v1VmInterfaceBridge"
        },
        "dhcpOptions": {
          "$ref": "#/definitions/v1VmDHCPOptions"
        },
        "macAddress": {
          "description": "Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.",
          "type": "string"
        },
        "macvtap": {
          "$ref": "#/definitions/v1VmInterfaceMacvtap"
        },
        "masquerade": {
          "$ref": "#/definitions/v1VmInterfaceMasquerade"
        },
        "model": {
          "description": "Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio.",
          "type": "string"
        },
        "name": {
          "description": "Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network.",
          "type": "string"
        },
        "passt": {
          "$ref": "#/definitions/v1VmInterfacePasst"
        },
        "pciAddress": {
          "description": "If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to be forwarded to the virtual machine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmPort"
          }
        },
        "slirp": {
          "$ref": "#/definitions/v1VmInterfaceSlirp"
        },
        "sriov": {
          "$ref": "#/definitions/v1VmInterfaceSRIOV"
        },
        "tag": {
          "description": "If specified, the virtual network interface address and its tag will be provided to the guest via config drive",
          "type": "string"
        }
      }
    },
    "v1VmInterfaceBridge": {
      "description": "InterfaceBridge connects to a given network via a linux bridge.",
      "type": "object"
    },
    "v1VmInterfaceMacvtap": {
      "description": "InterfaceMacvtap connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface.",
      "type": "object"
    },
    "v1VmInterfaceMasquerade": {
      "description": "InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.",
      "type": "object"
    },
    "v1VmInterfacePasst": {
      "description": "InterfacePasst connects to a given network.",
      "type": "object"
    },
    "v1VmInterfaceSRIOV": {
      "description": "InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.",
      "type": "object"
    },
    "v1VmInterfaceSlirp": {
      "description": "InterfaceSlirp connects to a given network using QEMU user networking mode.",
      "type": "object"
    },
    "v1VmKVmTimer": {
      "type": "object",
      "properties": {
        "present": {
          "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
          "type": "boolean"
        }
      }
    },
    "v1VmKernelBoot": {
      "description": "Represents the firmware blob used to assist in the kernel boot process. Used for setting the kernel, initrd and command line arguments",
      "type": "object",
      "properties": {
        "container": {
          "$ref": "#/definitions/v1VmKernelBootContainer"
        },
        "kernelArgs": {
          "description": "Arguments to be passed to the kernel at boot time",
          "type": "string"
        }
      }
    },
    "v1VmKernelBootContainer": {
      "description": "If set, the VM will be booted from the defined kernel / initrd.",
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "description": "Image that contains initrd / kernel files.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "imagePullSecret": {
          "description": "ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.",
          "type": "string"
        },
        "initrdPath": {
          "description": "the fully-qualified path to the ramdisk image in the host OS",
          "type": "string"
        },
        "kernelPath": {
          "description": "The fully-qualified path to the kernel image in the host OS",
          "type": "string"
        }
      }
    },
    "v1VmLabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmLabelSelectorRequirement"
          }
        },
        "matchLabels": {
          "description": "matchLabels is a map of key-value pairs. A single key-value in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1VmLabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VmLaunchSecurity": {
      "type": "object",
      "properties": {
        "sev": {
          "$ref": "#/definitions/v1VmSEV"
        }
      }
    },
    "v1VmListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only.",
          "type": "string"
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        }
      }
    },
    "v1VmLocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      }
    },
    "v1VmLunTarget": {
      "type": "object",
      "properties": {
        "bus": {
          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.",
          "type": "string"
        },
        "readonly": {
          "description": "ReadOnly. Defaults to false.",
          "type": "boolean"
        }
      }
    },
    "v1VmMachine": {
      "type": "object",
      "properties": {
        "type": {
          "description": "QEMU machine type is the actual chipset of the VirtualMachineInstance.",
          "type": "string"
        }
      }
    },
    "v1VmManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "$ref": "#/definitions/v1VmFieldsV1"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1VmMemory": {
      "description": "Memory allows specifying the VirtualMachineInstance memory features.",
      "type": "object",
      "properties": {
        "guest": {
          "$ref": "#/definitions/v1VmQuantity"
        },
        "hugepages": {
          "$ref": "#/definitions/v1VmHugepages"
        }
      }
    },
    "v1VmMemoryDumpVolumeSource": {
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "readOnly": {
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      }
    },
    "v1VmMultusNetwork": {
      "description": "Represents the multus cni network.",
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "default": {
          "description": "Select the default network and add it to the multus-cni.io/default-network annotation.",
          "type": "boolean"
        },
        "networkName": {
          "description": "References to a NetworkAttachmentDefinition CRD object. Format: \u003cnetworkName\u003e, \u003cnamespace\u003e/\u003cnetworkName\u003e. If namespace is not specified, VMI namespace is assumed.",
          "type": "string"
        }
      }
    },
    "v1VmNUMA": {
      "type": "object",
      "properties": {
        "guestMappingPassthrough": {
          "$ref": "#/definitions/v1VmNUMAGuestMappingPassthrough"
        }
      }
    },
    "v1VmNUMAGuestMappingPassthrough": {
      "description": "NUMAGuestMappingPassthrough instructs kubevirt to model numa topology which is compatible with the CPU pinning on the guest. This will result in a subset of the node numa topology being passed through, ensuring that virtual numa nodes and their memory never cross boundaries coming from the node numa mapping.",
      "type": "object"
    },
    "v1VmNetwork": {
      "description": "Network represents a network type and a resource that should be connected to the vm.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "multus": {
          "$ref": "#/definitions/v1VmMultusNetwork"
        },
        "name": {
          "description": "Network name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "pod": {
          "$ref": "#/definitions/v1VmPodNetwork"
        }
      }
    },
    "v1VmNodeAffinity": {
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "type": "object",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmPreferredSchedulingTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/v1VmNodeSelector"
        }
      }
    },
    "v1VmNodeSelector": {
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "type": "object",
      "required": [
        "nodeSelectorTerms"
      ],
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmNodeSelectorTerm"
          }
        }
      }
    },
    "v1VmNodeSelectorRequirement": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VmNodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmNodeSelectorRequirement"
          }
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmNodeSelectorRequirement"
          }
        }
      }
    },
    "v1VmObjectFieldSelector": {
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "type": "object",
      "required": [
        "fieldPath"
      ],
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      }
    },
    "v1VmObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmManagedFieldsEntry"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\nMust be a DNS_LABEL. Cannot be updated.",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmOwnerReference"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\nPopulated by the system. Read-only. Value must be treated as opaque by clients.",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\nPopulated by the system. Read-only.",
          "type": "string"
        }
      }
    },
    "v1VmOwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1VmPITTimer": {
      "type": "object",
      "properties": {
        "present": {
          "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
          "type": "boolean"
        },
        "tickPolicy": {
          "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \"delay\", \"catchup\", \"discard\".",
          "type": "string"
        }
      }
    },
    "v1VmPersistentVolumeClaimSpec": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "type": "object",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataSource": {
          "$ref": "#/definitions/v1VmTypedLocalObjectReference"
        },
        "dataSourceRef": {
          "$ref": "#/definitions/v1VmTypedLocalObjectReference"
        },
        "resources": {
          "$ref": "#/definitions/v1VmCoreResourceRequirements"
        },
        "selector": {
          "$ref": "#/definitions/v1VmLabelSelector"
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
          "type": "string"
        },
        "volumeName": {
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      }
    },
    "v1VmPersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "readOnly": {
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      }
    },
    "v1VmPodAffinity": {
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "type": "object",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmWeightedPodAffinityTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmPodAffinityTerm"
          }
        }
      }
    },
    "v1VmPodAffinityTerm": {
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running",
      "type": "object",
      "required": [
        "topologyKey"
      ],
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/v1VmLabelSelector"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/v1VmLabelSelector"
        },
        "namespaces": {
          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      }
    },
    "v1VmPodDnsConfig": {
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
      "type": "object",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmPodDnsConfigOption"
          }
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VmPodDnsConfigOption": {
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required.",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1VmPodNetwork": {
      "description": "Represents the stock pod network interface.",
      "type": "object",
      "properties": {
        "vmIPv6NetworkCIDR": {
          "description": "IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if not specified.",
          "type": "string"
        },
        "vmNetworkCIDR": {
          "description": "CIDR for vm network. Default 10.0.2.0/24 if not specified.",
          "type": "string"
        }
      }
    },
    "v1VmPort": {
      "description": "Port represents a port to expose from the virtual machine. Default protocol TCP. The port field is mandatory",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
          "type": "string"
        },
        "port": {
          "description": "Number of port to expose for the virtual machine. This must be a valid port number, 0 \u003c x \u003c 65536.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".",
          "type": "string"
        }
      }
    },
    "v1VmPreferenceMatcher": {
      "description": "PreferenceMatcher references a set of preference that is used to fill fields in the VMI template.",
      "type": "object",
      "properties": {
        "inferFromVolume": {
          "description": "InferFromVolume lists the name of a volume that should be used to infer or discover the preference to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher this field is removed.",
          "type": "string"
        },
        "kind": {
          "description": "Kind specifies which preference resource is referenced. Allowed values are: \"VirtualMachinePreference\" and \"VirtualMachineClusterPreference\". If not specified, \"VirtualMachineClusterPreference\" is used by default.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference",
          "type": "string"
        },
        "revisionName": {
          "description": "RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance.",
          "type": "string"
        }
      }
    },
    "v1VmPreferredSchedulingTerm": {
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "type": "object",
      "required": [
        "weight",
        "preference"
      ],
      "properties": {
        "preference": {
          "$ref": "#/definitions/v1VmNodeSelectorTerm"
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1VmProbe": {
      "description": "Probe describes a health check to be performed against a VirtualMachineInstance to determine whether it is alive or ready to receive traffic.",
      "type": "object",
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1VmExecAction"
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "guestAgentPing": {
          "$ref": "#/definitions/v1VmGuestAgentPing"
        },
        "httpGet": {
          "$ref": "#/definitions/v1VmHttpGetAction"
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": "integer",
          "format": "int32"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1VmTcpSocketAction"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1VmQemuGuestAgentSshPublicKeyAccessCredentialPropagation": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "description": "Users represents a list of guest users that should have the ssh public keys added to their authorized_keys file.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        }
      }
    },
    "v1VmQemuGuestAgentUserPasswordAccessCredentialPropagation": {
      "type": "object"
    },
    "v1VmQuantity": {
      "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n\u003cquantity\u003e        ::= \u003csignedNumber\u003e\u003csuffix\u003e\n  (Note that \u003csuffix\u003e may be empty, from the \"\" case in \u003cdecimalSI\u003e.)\n\u003cdigit\u003e           ::= 0 | 1 | ... | 9 \u003cdigits\u003e          ::= \u003cdigit\u003e | \u003cdigit\u003e\u003cdigits\u003e \u003cnumber\u003e          ::= \u003cdigits\u003e | \u003cdigits\u003e.\u003cdigits\u003e | \u003cdigits\u003e. | .\u003cdigits\u003e \u003csign\u003e            ::= \"+\" | \"-\" \u003csignedNumber\u003e    ::= \u003cnumber\u003e | \u003csign\u003e\u003cnumber\u003e \u003csuffix\u003e          ::= \u003cbinarySI\u003e | \u003cdecimalExponent\u003e | \u003cdecimalSI\u003e \u003cbinarySI\u003e        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\u003cdecimalSI\u003e       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\u003cdecimalExponent\u003e ::= \"e\" \u003csignedNumber\u003e | \"E\" \u003csignedNumber\u003e\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
      "type": "string"
    },
    "v1VmRTCTimer": {
      "type": "object",
      "properties": {
        "present": {
          "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
          "type": "boolean"
        },
        "tickPolicy": {
          "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \"delay\", \"catchup\".",
          "type": "string"
        },
        "track": {
          "description": "Track the guest or the wall clock.",
          "type": "string"
        }
      }
    },
    "v1VmRealtime": {
      "description": "Realtime holds the tuning knobs specific for realtime workloads.",
      "type": "object",
      "properties": {
        "mask": {
          "description": "Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions. Example: \"0-3,^1\",\"0,2,3\",\"2-3\"",
          "type": "string"
        }
      }
    },
    "v1VmRemoveVolumeOptions": {
      "description": "RemoveVolumeOptions is provided when dynamically hot unplugging volume and disk",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name represents the name that maps to both the disk and volume that should be removed",
          "type": "string"
        }
      }
    },
    "v1VmResourceFieldSelector": {
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "type": "object",
      "required": [
        "resource"
      ],
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "$ref": "#/definitions/v1VmQuantity"
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      }
    },
    "v1VmResourceRequirements": {
      "type": "object",
      "properties": {
        "limits": {
          "description": "Limits describes the maximum amount of compute resources allowed. Valid resource keys are \"memory\" and \"cpu\".",
          "type": "object"
        },
        "overcommitGuestOverhead": {
          "description": "Don't ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container's memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false.",
          "type": "boolean"
        },
        "requests": {
          "description": "Requests is a description of the initial vmi resources. Valid resource keys are \"memory\" and \"cpu\".",
          "type": "object"
        }
      }
    },
    "v1VmRng": {
      "description": "Rng represents the random device passed from host",
      "type": "object"
    },
    "v1VmSEV": {
      "type": "object"
    },
    "v1VmSecretVolumeSource": {
      "description": "SecretVolumeSource adapts a Secret into a volume.",
      "type": "object",
      "properties": {
        "optional": {
          "description": "Specify whether the Secret or it's keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        },
        "volumeLabel": {
          "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
          "type": "string"
        }
      }
    },
    "v1VmServiceAccountVolumeSource": {
      "description": "ServiceAccountVolumeSource adapts a ServiceAccount into a volume.",
      "type": "object",
      "properties": {
        "serviceAccountName": {
          "description": "Name of the service account in the pod's namespace to use. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        }
      }
    },
    "v1VmSnapshotVolumesLists": {
      "description": "SnapshotVolumesLists includes the list of volumes which were included in the snapshot and volumes which were excluded from the snapshot",
      "type": "object",
      "properties": {
        "excludedVolumes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        },
        "includedVolumes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        }
      }
    },
    "v1VmSoundDevice": {
      "description": "Represents the user's configuration to emulate sound cards in the VMI.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "model": {
          "description": "We only support ich9 or ac97. If SoundDevice is not set: No sound card is emulated. If SoundDevice is set but Model is not: ich9",
          "type": "string"
        },
        "name": {
          "description": "User's defined name for this sound device",
          "type": "string"
        }
      }
    },
    "v1VmSshPublicKeyAccessCredential": {
      "description": "SSHPublicKeyAccessCredential represents a source and propagation method for injecting ssh public keys into a vm guest",
      "type": "object",
      "required": [
        "source",
        "propagationMethod"
      ],
      "properties": {
        "propagationMethod": {
          "$ref": "#/definitions/v1VmSshPublicKeyAccessCredentialPropagationMethod"
        },
        "source": {
          "$ref": "#/definitions/v1VmSshPublicKeyAccessCredentialSource"
        }
      }
    },
    "v1VmSshPublicKeyAccessCredentialPropagationMethod": {
      "description": "SSHPublicKeyAccessCredentialPropagationMethod represents the method used to inject a ssh public key into the vm guest. Only one of its members may be specified.",
      "type": "object",
      "properties": {
        "configDrive": {
          "$ref": "#/definitions/v1VmConfigDriveSshPublicKeyAccessCredentialPropagation"
        },
        "qemuGuestAgent": {
          "$ref": "#/definitions/v1VmQemuGuestAgentSshPublicKeyAccessCredentialPropagation"
        }
      }
    },
    "v1VmSshPublicKeyAccessCredentialSource": {
      "description": "SSHPublicKeyAccessCredentialSource represents where to retrieve the ssh key credentials Only one of its members may be specified.",
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/v1VmAccessCredentialSecretSource"
        }
      }
    },
    "v1VmStorageSpec": {
      "description": "StorageSpec defines the Storage type specification",
      "type": "object",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataSource": {
          "$ref": "#/definitions/v1VmTypedLocalObjectReference"
        },
        "resources": {
          "$ref": "#/definitions/v1VmCoreResourceRequirements"
        },
        "selector": {
          "$ref": "#/definitions/v1VmLabelSelector"
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
          "type": "string"
        },
        "volumeName": {
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      }
    },
    "v1VmSyNICTimer": {
      "type": "object",
      "properties": {
        "direct": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "v1VmSysprepSource": {
      "description": "Represents a Sysprep volume source.",
      "type": "object",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        },
        "secret": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        }
      }
    },
    "v1VmTPMDevice": {
      "type": "object"
    },
    "v1VmTcpSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
          "type": [
            "string",
            "number"
          ]
        }
      }
    },
    "v1VmTimer": {
      "description": "Represents all available timers in a vmi.",
      "type": "object",
      "properties": {
        "hpet": {
          "$ref": "#/definitions/v1VmHPETTimer"
        },
        "hyperv": {
          "$ref": "#/definitions/v1VmHypervTimer"
        },
        "kvm": {
          "$ref": "#/definitions/v1VmKVmTimer"
        },
        "pit": {
          "$ref": "#/definitions/v1VmPITTimer"
        },
        "rtc": {
          "$ref": "#/definitions/v1VmRTCTimer"
        }
      }
    },
    "v1VmToleration": {
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
      "type": "object",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      }
    },
    "v1VmTopologySpreadConstraint": {
      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
      "type": "object",
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/v1VmLabelSelector"
        },
        "maxSkew": {
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
          "type": "integer",
          "format": "int32"
        },
        "topologyKey": {
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
          "type": "string"
        }
      }
    },
    "v1VmTypedLocalObjectReference": {
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      }
    },
    "v1VmUserPasswordAccessCredential": {
      "description": "UserPasswordAccessCredential represents a source and propagation method for injecting user passwords into a vm guest Only one of its members may be specified.",
      "type": "object",
      "required": [
        "source",
        "propagationMethod"
      ],
      "properties": {
        "propagationMethod": {
          "$ref": "#/definitions/v1VmUserPasswordAccessCredentialPropagationMethod"
        },
        "source": {
          "$ref": "#/definitions/v1VmUserPasswordAccessCredentialSource"
        }
      }
    },
    "v1VmUserPasswordAccessCredentialPropagationMethod": {
      "description": "UserPasswordAccessCredentialPropagationMethod represents the method used to inject a user passwords into the vm guest. Only one of its members may be specified.",
      "type": "object",
      "properties": {
        "qemuGuestAgent": {
          "$ref": "#/definitions/v1VmQemuGuestAgentUserPasswordAccessCredentialPropagation"
        }
      }
    },
    "v1VmUserPasswordAccessCredentialSource": {
      "description": "UserPasswordAccessCredentialSource represents where to retrieve the user password credentials Only one of its members may be specified.",
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/v1VmAccessCredentialSecretSource"
        }
      }
    },
    "v1VmVGPUDisplayOptions": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        },
        "ramFB": {
          "$ref": "#/definitions/v1VmFeatureState"
        }
      }
    },
    "v1VmVGPUOptions": {
      "type": "object",
      "properties": {
        "display": {
          "$ref": "#/definitions/v1VmVGPUDisplayOptions"
        }
      }
    },
    "v1VmVirtualMachineCondition": {
      "description": "VirtualMachineCondition represents the state of VirtualMachine",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "type": "string"
        },
        "lastTransitionTime": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1VmVirtualMachineInstanceSpec": {
      "description": "VirtualMachineInstanceSpec is a description of a VirtualMachineInstance.",
      "type": "object",
      "required": [
        "domain"
      ],
      "properties": {
        "accessCredentials": {
          "description": "Specifies a set of public keys to inject into the vm guest",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmAccessCredential"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "affinity": {
          "$ref": "#/definitions/v1VmAffinity"
        },
        "architecture": {
          "description": "Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components",
          "type": "string"
        },
        "dnsConfig": {
          "$ref": "#/definitions/v1VmPodDnsConfig"
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/v1VmDomainSpec"
        },
        "evictionStrategy": {
          "description": "EvictionStrategy can be set to \"LiveMigrate\" if the VirtualMachineInstance should be migrated instead of shut-off in case of a node drain.",
          "type": "string"
        },
        "hostname": {
          "description": "Specifies the hostname of the vmi If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.",
          "type": "string"
        },
        "livenessProbe": {
          "$ref": "#/definitions/v1VmProbe"
        },
        "networks": {
          "description": "List of networks that can be attached to a vm's virtual interface.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmNetwork"
          }
        },
        "nodeSelector": {
          "description": "NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels for the vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessProbe": {
          "$ref": "#/definitions/v1VmProbe"
        },
        "schedulerName": {
          "description": "If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default scheduler.",
          "type": "string"
        },
        "startStrategy": {
          "description": "StartStrategy can be set to \"Paused\" if Virtual Machine should be started in paused state.",
          "type": "string"
        },
        "subdomain": {
          "description": "If specified, the fully qualified vmi hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\". If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi, no matter if the vmi itself can pick up a hostname.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "description": "Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.",
          "type": "integer",
          "format": "int64"
        },
        "tolerations": {
          "description": "If toleration is specified, obey all the toleration rules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmToleration"
          }
        },
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmTopologySpreadConstraint"
          },
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by disks belonging to the vmi.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VmVolume"
          }
        }
      }
    },
    "v1VmVirtualMachineInstanceTemplateSpec": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1VmObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VmVirtualMachineInstanceSpec"
        }
      }
    },
    "v1VmVirtualMachineMemoryDumpRequest": {
      "description": "VirtualMachineMemoryDumpRequest represent the memory dump request phase and info",
      "type": "object",
      "required": [
        "claimName",
        "phase"
      ],
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of the pvc that will contain the memory dump",
          "type": "string"
        },
        "endTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "fileName": {
          "description": "FileName represents the name of the output file",
          "type": "string"
        },
        "message": {
          "description": "Message is a detailed message about failure of the memory dump",
          "type": "string"
        },
        "phase": {
          "description": "Phase represents the memory dump phase",
          "type": "string"
        },
        "remove": {
          "description": "Remove represents request of dissociating the memory dump pvc",
          "type": "boolean"
        },
        "startTimestamp": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1VmVirtualMachineStartFailure": {
      "description": "VirtualMachineStartFailure tracks VMIs which failed to transition successfully to running using the VM status",
      "type": "object",
      "properties": {
        "consecutiveFailCount": {
          "type": "integer",
          "format": "int32"
        },
        "lastFailedVMIUID": {
          "type": "string"
        },
        "retryAfterTimestamp": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1VmVirtualMachineStateChangeRequest": {
      "type": "object",
      "required": [
        "action"
      ],
      "properties": {
        "action": {
          "description": "Indicates the type of action that is requested. e.g. Start or Stop",
          "type": "string"
        },
        "data": {
          "description": "Provides additional data in order to perform the Action",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uid": {
          "description": "Indicates the UUID of an existing Virtual Machine Instance that this change request applies to -- if applicable",
          "type": "string"
        }
      }
    },
    "v1VmVirtualMachineVolumeRequest": {
      "type": "object",
      "properties": {
        "addVolumeOptions": {
          "$ref": "#/definitions/v1VmAddVolumeOptions"
        },
        "removeVolumeOptions": {
          "$ref": "#/definitions/v1VmRemoveVolumeOptions"
        }
      }
    },
    "v1VmVolume": {
      "description": "Volume represents a named volume in a vmi.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "cloudInitConfigDrive": {
          "$ref": "#/definitions/v1VmCloudInitConfigDriveSource"
        },
        "cloudInitNoCloud": {
          "$ref": "#/definitions/v1VmCloudInitNoCloudSource"
        },
        "configMap": {
          "$ref": "#/definitions/v1VmConfigMapVolumeSource"
        },
        "containerDisk": {
          "$ref": "#/definitions/v1VmContainerDiskSource"
        },
        "dataVolume": {
          "$ref": "#/definitions/v1VmCoreDataVolumeSource"
        },
        "downwardAPI": {
          "$ref": "#/definitions/v1VmDownwardApiVolumeSource"
        },
        "downwardMetrics": {
          "$ref": "#/definitions/v1VmDownwardMetricsVolumeSource"
        },
        "emptyDisk": {
          "$ref": "#/definitions/v1VmEmptyDiskSource"
        },
        "ephemeral": {
          "$ref": "#/definitions/v1VmEphemeralVolumeSource"
        },
        "hostDisk": {
          "$ref": "#/definitions/v1VmHostDisk"
        },
        "memoryDump": {
          "$ref": "#/definitions/v1VmMemoryDumpVolumeSource"
        },
        "name": {
          "description": "Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/v1VmPersistentVolumeClaimVolumeSource"
        },
        "secret": {
          "$ref": "#/definitions/v1VmSecretVolumeSource"
        },
        "serviceAccount": {
          "$ref": "#/definitions/v1VmServiceAccountVolumeSource"
        },
        "sysprep": {
          "$ref": "#/definitions/v1VmSysprepSource"
        }
      }
    },
    "v1VmVolumeSnapshotStatus": {
      "type": "object",
      "required": [
        "name",
        "enabled"
      ],
      "properties": {
        "enabled": {
          "description": "True if the volume supports snapshotting",
          "type": "boolean"
        },
        "name": {
          "description": "Volume name",
          "type": "string"
        },
        "reason": {
          "description": "Empty if snapshotting is enabled, contains reason otherwise",
          "type": "string"
        }
      }
    },
    "v1VmWatchdog": {
      "description": "Named watchdog device.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "i6300esb": {
          "$ref": "#/definitions/v1VmI6300ESBWatchdog"
        },
        "name": {
          "description": "Name of the watchdog.",
          "type": "string"
        }
      }
    },
    "v1VmWeightedPodAffinityTerm": {
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "type": "object",
      "required": [
        "weight",
        "podAffinityTerm"
      ],
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/v1VmPodAffinityTerm"
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1VsphereAccount": {
      "description": "VSphere account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1VsphereAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1VsphereAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1VsphereCloudAccount": {
      "type": "object",
      "required": [
        "vcenterServer",
        "username",
        "password"
      ],
      "properties": {
        "insecure": {
          "description": "Insecure is a flag that controls whether or not to validate the vSphere server's certificate.",
          "type": "boolean",
          "x-omitempty": false
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      }
    },
    "v1VsphereCloudClusterConfigEntity": {
      "description": "vSphere cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1VsphereClusterConfigEntity"
        }
      }
    },
    "v1VsphereCloudConfig": {
      "description": "VsphereCloudConfig is the Schema for the vspherecloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1VsphereCloudConfigStatus"
        }
      }
    },
    "v1VsphereCloudConfigSpec": {
      "description": "VsphereCloudConfigSpec defines the desired state of VsphereCloudConfig",
      "type": "object",
      "required": [
        "clusterConfig",
        "machinePoolConfig"
      ],
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains VsphereCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1VsphereClusterConfig"
        },
        "edgeHostRef": {
          "description": "Appliance (Edge Host) uid for Edge env",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereMachinePoolConfig"
          }
        }
      }
    },
    "v1VsphereCloudConfigStatus": {
      "description": "VsphereCloudConfigStatus defines the observed state of VsphereCloudConfig",
      "type": "object",
      "properties": {
        "ansibleDigest": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "lastOVACreated": {
          "type": "string"
        },
        "lastVMExported": {
          "type": "string"
        },
        "nodeImage": {
          "$ref": "#/definitions/v1VsphereImage"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "uploadOvaS3": {
          "description": "UploadOVAS3 will hold last image name which uploaded to S3",
          "type": "string"
        },
        "useCapiImage": {
          "description": "If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1VsphereCloudDatacenter": {
      "description": "Vsphere datacenter",
      "type": "object",
      "properties": {
        "computeClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereComputeCluster"
          }
        },
        "folders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1VsphereClusterConfig": {
      "type": "object",
      "required": [
        "placement"
      ],
      "properties": {
        "controlPlaneEndpoint": {
          "description": "The optional control plane endpoint, which can be an IP or FQDN",
          "$ref": "#/definitions/v1ControlPlaneEndPoint"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration Placement config in ClusterConfig serve as default values for each MachinePool",
          "$ref": "#/definitions/v1VspherePlacementConfig"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      }
    },
    "v1VsphereClusterConfigEntity": {
      "type": "object",
      "required": [
        "placement"
      ],
      "properties": {
        "controlPlaneEndpoint": {
          "description": "The optional control plane endpoint, which can be an IP or FQDN",
          "$ref": "#/definitions/v1ControlPlaneEndPoint"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration Placement config in ClusterConfig serve as default values for each MachinePool",
          "$ref": "#/definitions/v1VspherePlacementConfigEntity"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      }
    },
    "v1VsphereComputeCluster": {
      "description": "Vsphere compute cluster",
      "type": "object",
      "properties": {
        "datastores": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "networks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "resourcePools": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VsphereComputeClusterResources": {
      "description": "Datacenter and its resources like datastore, resoucepool, folders",
      "type": "object",
      "properties": {
        "computecluster": {
          "$ref": "#/definitions/v1VsphereComputeCluster"
        },
        "datacenter": {
          "description": "Name of the datacenter",
          "type": "string"
        }
      }
    },
    "v1VsphereDatacenter": {
      "description": "List of Datacenter with computeclusters",
      "type": "object",
      "properties": {
        "computeclusters": {
          "description": "List  of the VSphere compute clusters in datacenter",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "datacenter": {
          "description": "name of the datacenter of the VSphere",
          "type": "string"
        },
        "folders": {
          "description": "List  of the VSphere folders in datacenter",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VsphereDatacenters": {
      "description": "List of Datacenters with computeclusters",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of associated datacenters",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1VsphereDatacenter"
          }
        }
      }
    },
    "v1VsphereDnsMapping": {
      "description": "VSphere DNS Mapping",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereDnsMappingSpec"
        }
      }
    },
    "v1VsphereDnsMappingSpec": {
      "description": "VSphere DNS Mapping Spec",
      "type": "object",
      "required": [
        "privateGatewayUid",
        "datacenter",
        "network",
        "dnsName"
      ],
      "properties": {
        "datacenter": {
          "description": "VSphere datacenter name",
          "type": "string"
        },
        "dnsName": {
          "description": "VSphere DNS name",
          "type": "string"
        },
        "network": {
          "description": "VSphere network name",
          "type": "string"
        },
        "networkUrl": {
          "description": "VSphere network URL",
          "type": "string",
          "readOnly": true
        },
        "privateGatewayUid": {
          "description": "VSphere private gateway uid",
          "type": "string"
        }
      }
    },
    "v1VsphereDnsMappings": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of vSphere DNS mapping",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1VsphereDnsMapping"
          }
        }
      }
    },
    "v1VsphereEnv": {
      "description": "Vsphere environment entity",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version of vsphere environment",
          "type": "string"
        }
      }
    },
    "v1VsphereImage": {
      "description": "A generated Image should always be a template which resides inside vsphere Will not generate a OVA file out of the image OVA can be used as a base input of the os pack, that's internal to the pack",
      "type": "object",
      "properties": {
        "fullPath": {
          "description": "full path of the image template location it contains datacenter/folder/templatename etc eg: /mydc/vm/template/spectro/workerpool-1-centos",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1VsphereInstanceType": {
      "type": "object",
      "required": [
        "numCPUs",
        "memoryMiB",
        "diskGiB"
      ],
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int64"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1VsphereMachine": {
      "description": "vSphere cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1VsphereMachinePoolCloudConfigEntity": {
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1VsphereInstanceType"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VspherePlacementConfigEntity"
          }
        }
      }
    },
    "v1VsphereMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane",
        "instanceType"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "InstanceType defines the required CPU, Memory, Storage",
          "$ref": "#/definitions/v1VsphereInstanceType"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "type": "integer",
          "format": "int32"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VspherePlacementConfig"
          }
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "taints": {
          "description": "control plane or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1VsphereMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1VsphereMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1VsphereMachineSpec": {
      "description": "vSphere cloud VM definition spec",
      "type": "object",
      "required": [
        "vcenterServer",
        "nics",
        "placement"
      ],
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereImage"
          }
        },
        "instanceType": {
          "$ref": "#/definitions/v1VsphereInstanceType"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereNic"
          }
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration",
          "$ref": "#/definitions/v1VspherePlacementConfig"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      }
    },
    "v1VsphereMachines": {
      "description": "vSphere machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1VsphereMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1VsphereNetworkConfig": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "ipPool": {
          "description": "when staticIP=true, need to provide IPPool",
          "$ref": "#/definitions/v1IPPool"
        },
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolRef": {
          "description": "ParentPoolRef reference to the ParentPool which allocates IPs for this IPPool",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean"
        }
      }
    },
    "v1VsphereNetworkConfigEntity": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolUid": {
          "description": "ParentPoolRef Uid to the ParentPool which allocates IPs for this IPPool",
          "type": "string"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean"
        }
      }
    },
    "v1VsphereNic": {
      "description": "vSphere network interface",
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "macAddress": {
          "type": "string"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VsphereOverlordClusterConfigEntity": {
      "type": "object",
      "properties": {
        "controlPlaneEndpoint": {
          "description": "The optional control plane endpoint, which can be an IP or FQDN",
          "$ref": "#/definitions/v1ControlPlaneEndPoint"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VspherePlacementConfigEntity"
          }
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      }
    },
    "v1VspherePlacementConfig": {
      "description": "Both ClusterConfig and MachinePoolConfig will have PlacementConfig MachinePoolconfig.Placements will overwrite values defined in ClusterConfig Currently the convention is: Datacenter / Folder / ImageTemplateFolder / Network should be defined at ClusterConfig Cluster / ResourcePool / Datastore / Network is defined at MachinePool ClusterConfig Network should only indicate use DHCP or not MachinePool Network should contain the actual network and IPPool",
      "type": "object",
      "properties": {
        "cluster": {
          "description": "Cluster is the computecluster in vsphere",
          "type": "string"
        },
        "datacenter": {
          "description": "Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.",
          "type": "string"
        },
        "datastore": {
          "description": "Datastore is the datastore in which VMs are created/located.",
          "type": "string"
        },
        "folder": {
          "description": "Folder is the folder in which VMs are created/located.",
          "type": "string"
        },
        "imageTemplateFolder": {
          "description": "ImageTemplateFolder is the folder in which VMs templates are created/located. if empty will use default value spectro-templates",
          "type": "string"
        },
        "network": {
          "description": "network info",
          "$ref": "#/definitions/v1VsphereNetworkConfig"
        },
        "resourcePool": {
          "description": "ResourcePool is the resource pool within the above computecluster Cluster",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "StoragePolicyName of the storage policy to use with this Virtual Machine",
          "type": "string"
        },
        "uid": {
          "description": "UID for this placement",
          "type": "string"
        }
      }
    },
    "v1VspherePlacementConfigEntity": {
      "description": "Both ClusterConfig and MachinePoolConfig will have PlacementConfig MachinePoolconfig.Placements will overwrite values defined in ClusterConfig Currently the convention is: Datacenter / Folder / ImageTemplateFolder / Network should be defined at ClusterConfig Cluster / ResourcePool / Datastore / Network is defined at MachinePool ClusterConfig Network should only indicate use DHCP or not MachinePool Network should contain the actual network and IPPool",
      "type": "object",
      "properties": {
        "cluster": {
          "description": "Cluster is the computecluster in vsphere",
          "type": "string"
        },
        "datacenter": {
          "description": "Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.",
          "type": "string"
        },
        "datastore": {
          "description": "Datastore is the datastore in which VMs are created/located.",
          "type": "string"
        },
        "folder": {
          "description": "Folder is the folder in which VMs are created/located.",
          "type": "string"
        },
        "imageTemplateFolder": {
          "description": "ImageTemplateFolder is the folder in which VMs templates are created/located. if empty will use default value spectro-templates",
          "type": "string"
        },
        "network": {
          "description": "network info",
          "$ref": "#/definitions/v1VsphereNetworkConfigEntity"
        },
        "resourcePool": {
          "description": "ResourcePool is the resource pool within the above computecluster Cluster",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "StoragePolicyName of the storage policy to use with this Virtual Machine",
          "type": "string"
        },
        "uid": {
          "description": "UID for this placement",
          "type": "string"
        }
      }
    },
    "v1Workspace": {
      "description": "Workspace information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1WorkspaceStatus"
        }
      }
    },
    "v1WorkspaceBackup": {
      "description": "Workspace backup",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceBackupSpec"
        },
        "status": {
          "$ref": "#/definitions/v1WorkspaceBackupStatus"
        }
      }
    },
    "v1WorkspaceBackupClusterRef": {
      "description": "Workspace backup cluster ref",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupConfig": {
      "description": "Workspace backup config",
      "properties": {
        "backupConfig": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        },
        "clusterUids": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeAllClusters": {
          "type": "boolean"
        }
      }
    },
    "v1WorkspaceBackupConfigEntity": {
      "description": "Cluster backup config",
      "properties": {
        "backupConfig": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        },
        "clusterUids": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeAllClusters": {
          "type": "boolean"
        }
      }
    },
    "v1WorkspaceBackupDeleteEntity": {
      "description": "Cluster backup delete config",
      "properties": {
        "clusterConfigs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceBackupClusterRef"
          }
        },
        "requestUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupSpec": {
      "description": "Workspace backup spec",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1WorkspaceBackupConfig"
        },
        "workspaceUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupState": {
      "description": "Workspace backup state",
      "properties": {
        "deleteState": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupStatus": {
      "description": "Workspace backup status",
      "properties": {
        "workspaceBackupStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceBackupStatusMeta"
          }
        }
      }
    },
    "v1WorkspaceBackupStatusConfig": {
      "description": "Workspace backup status config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "durationInHours": {
          "type": "number",
          "format": "int64"
        },
        "includeAllDisks": {
          "type": "boolean"
        },
        "includeClusterResourceMode": {
          "$ref": "#/definitions/v1IncludeClusterResourceMode"
        },
        "includeClusterResources": {
          "description": "Deprecated. Use includeClusterResourceMode",
          "type": "boolean"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1WorkspaceBackupStatusMeta": {
      "description": "Workspace backup status meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "requestUid": {
          "type": "string"
        },
        "workspaceBackupConfig": {
          "$ref": "#/definitions/v1WorkspaceClusterBackupConfig"
        }
      }
    },
    "v1WorkspaceClusterBackupConfig": {
      "description": "Workspace cluster backup config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "backupState": {
          "$ref": "#/definitions/v1WorkspaceBackupState"
        },
        "backupTime": {
          "$ref": "#/definitions/v1Time"
        },
        "clusterBackupRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterBackupResponse"
          }
        },
        "config": {
          "$ref": "#/definitions/v1WorkspaceBackupStatusConfig"
        },
        "requestTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1WorkspaceClusterBackupResponse": {
      "description": "Workspace cluster backup response",
      "properties": {
        "backupStatusMeta": {
          "$ref": "#/definitions/v1BackupStatusMeta"
        },
        "backupUid": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterNamespace": {
      "description": "Workspace cluster namespace",
      "properties": {
        "image": {
          "$ref": "#/definitions/v1WorkspaceNamespaceImage"
        },
        "isRegex": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "namespaceResourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceNamespaceResourceAllocation"
        }
      }
    },
    "v1WorkspaceClusterNamespacesEntity": {
      "description": "Workspace cluster namespaces update entity",
      "properties": {
        "clusterNamespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterNamespace"
          }
        },
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterRef"
          }
        },
        "quota": {
          "$ref": "#/definitions/v1WorkspaceQuota"
        }
      }
    },
    "v1WorkspaceClusterRef": {
      "description": "Workspace cluster reference",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterRestoreConfig": {
      "description": "Workspace cluster restore config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "clusterRestoreRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterRestoreResponse"
          }
        },
        "restoreState": {
          "$ref": "#/definitions/v1WorkspaceRestoreState"
        },
        "restoreTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1WorkspaceClusterRestoreResponse": {
      "description": "Workspace cluster restore response",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        },
        "restoreStatusMeta": {
          "$ref": "#/definitions/v1WorkspaceClusterRestoreState"
        },
        "restoreUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterRestoreState": {
      "description": "Workspace cluster restore state",
      "properties": {
        "msg": {
          "type": "string"
        },
        "restoreTime": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterWorkloadCronJobs": {
      "description": "Workspace cluster workload cronjobs summary",
      "type": "object",
      "properties": {
        "cronjobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCronJob"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1WorkspaceClusterWorkloadDaemonSets": {
      "description": "Workspace cluster workload daemonsets summary",
      "type": "object",
      "properties": {
        "daemonSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDaemonSet"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1WorkspaceClusterWorkloadDeployments": {
      "description": "Workspace cluster workload deployments summary",
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDeployment"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1WorkspaceClusterWorkloadJobs": {
      "description": "Workspace cluster workload jobs summary",
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadJob"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1WorkspaceClusterWorkloadNamespaces": {
      "description": "Workspace cluster workload namespaces summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadNamespace"
          }
        }
      }
    },
    "v1WorkspaceClusterWorkloadPods": {
      "description": "Workspace cluster workload pods summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "pods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPod"
          }
        }
      }
    },
    "v1WorkspaceClusterWorkloadRoleBindings": {
      "description": "Workspace cluster workload rbac bindings summary",
      "type": "object",
      "properties": {
        "bindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRoleBinding"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1WorkspaceClusterWorkloadStatefulSets": {
      "description": "Workspace cluster workload statefulsets summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "statefulSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadStatefulSet"
          }
        }
      }
    },
    "v1WorkspaceClustersWorkloadCronJobs": {
      "description": "Workspace clusters workload cronjobs summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadCronJobs"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadDaemonSets": {
      "description": "Workspace clusters workload statefulsets summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadDaemonSets"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadDeployments": {
      "description": "Workspace clusters workload deployments summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadDeployments"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadJobs": {
      "description": "Workspace clusters workload jobs summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadJobs"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadNamespaces": {
      "description": "Workspace clusters workload namespaces summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadNamespaces"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadPods": {
      "description": "Workspace clusters workload pods summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadPods"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadRoleBindings": {
      "description": "Workspace clusters workload rbac bindings summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadRoleBindings"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadStatefulSets": {
      "description": "Workspace clusters workload statefulsets summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadStatefulSets"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceEntity": {
      "description": "Workspace information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceSpec"
        }
      }
    },
    "v1WorkspaceError": {
      "description": "Workspace error",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceNamespaceImage": {
      "description": "Workspace namespace image information",
      "properties": {
        "blackListedImages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1WorkspaceNamespaceResourceAllocation": {
      "description": "Workspace namespace resource allocation",
      "properties": {
        "clusterResourceAllocations": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterResourceAllocation"
          }
        },
        "defaultResourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceResourceAllocation"
        }
      }
    },
    "v1WorkspacePolicies": {
      "description": "Workspace policies",
      "properties": {
        "backupPolicy": {
          "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
        }
      }
    },
    "v1WorkspaceQuota": {
      "description": "Workspace resource quota",
      "properties": {
        "resourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceResourceAllocation"
        }
      }
    },
    "v1WorkspaceResourceAllocation": {
      "description": "Workspace resource allocation",
      "properties": {
        "cpuCores": {
          "type": "number",
          "minimum": -1,
          "x-omitempty": false
        },
        "gpuConfig": {
          "$ref": "#/definitions/v1GpuConfig"
        },
        "memoryMiB": {
          "type": "number",
          "minimum": -1,
          "x-omitempty": false
        }
      }
    },
    "v1WorkspaceRestore": {
      "description": "Workspace restore",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceRestoreSpec"
        },
        "status": {
          "$ref": "#/definitions/v1WorkspaceRestoreStatus"
        }
      }
    },
    "v1WorkspaceRestoreConfig": {
      "description": "Workspace cluster restore config",
      "required": [
        "backupName",
        "sourceClusterUid"
      ],
      "properties": {
        "backupName": {
          "type": "string"
        },
        "includeClusterResourceMode": {
          "$ref": "#/definitions/v1IncludeClusterResourceMode"
        },
        "includeClusterResources": {
          "description": "Deprecated. Use includeClusterResourceMode",
          "type": "boolean"
        },
        "includeNamespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "preserveNodePorts": {
          "type": "boolean"
        },
        "restorePVs": {
          "type": "boolean"
        },
        "sourceClusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRestoreConfigEntity": {
      "description": "Cluster restore config",
      "required": [
        "backupRequestUid"
      ],
      "properties": {
        "backupRequestUid": {
          "type": "string"
        },
        "restoreConfigs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceRestoreConfig"
          }
        }
      }
    },
    "v1WorkspaceRestoreSpec": {
      "description": "Workspace restore spec",
      "properties": {
        "workspaceUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRestoreState": {
      "description": "Workspace restore state",
      "properties": {
        "deleteState": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRestoreStatus": {
      "description": "Workspace restore status",
      "properties": {
        "workspaceRestoreStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRestoreStatusMeta"
          }
        }
      }
    },
    "v1WorkspaceRestoreStatusMeta": {
      "description": "Workspace restore status meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "requestUid": {
          "type": "string"
        },
        "workspaceRestoreConfig": {
          "$ref": "#/definitions/v1WorkspaceClusterRestoreConfig"
        }
      }
    },
    "v1WorkspaceRolesPatch": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRolesUidSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceScopeRoles": {
      "description": "List all workspaces with the roles assigned to the users",
      "properties": {
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProjectsWorkspaces"
          }
        }
      }
    },
    "v1WorkspaceSpec": {
      "description": "Workspace specifications",
      "properties": {
        "clusterNamespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterNamespace"
          }
        },
        "clusterRbacs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbac"
          }
        },
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterRef"
          }
        },
        "policies": {
          "$ref": "#/definitions/v1WorkspacePolicies"
        },
        "quota": {
          "$ref": "#/definitions/v1WorkspaceQuota"
        }
      }
    },
    "v1WorkspaceStatus": {
      "description": "Workspace status",
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceError"
          }
        }
      }
    },
    "v1WorkspaceWorkloadsFilter": {
      "description": "Workspace workloads filter",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1WorkspaceWorkloadsSpec": {
      "description": "Workspace workloads spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1WorkspaceWorkloadsFilter"
        }
      }
    },
    "v1WorkspacesRoles": {
      "description": "Workspace users and their roles",
      "properties": {
        "inheritedRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRolesUidSummary"
          }
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRolesUidSummary"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1WorkspacesRolesPatch": {
      "type": "object",
      "properties": {
        "workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRolesPatch"
          }
        }
      }
    },
    "v1ZoneEntity": {
      "description": "Azure availability zone entity",
      "type": "object",
      "properties": {
        "id": {
          "description": "Azure availability zone id",
          "type": "string"
        }
      }
    },
    "v1k8CertificateAuthority": {
      "description": "K8 Certificate Authority",
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Certificate"
          }
        },
        "expiry": {
          "description": "Certificate expiry time",
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "description": "API key authorization where API key can be generated from Palette console under Profile \u003e My API Keys",
      "type": "apiKey",
      "name": "ApiKey",
      "in": "header"
    },
    "Authorization": {
      "description": "JWT token authorization obtained using /v1/auth/authenticate api",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}