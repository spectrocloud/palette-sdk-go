// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1KubeHunterEntity KubeHunter response
//
// swagger:model v1KubeHunterEntity
type V1KubeHunterEntity struct {

	// reports
	// Required: true
	Reports map[string]V1KubeHunterReportEntity `json:"reports"`

	// request Uid
	// Required: true
	RequestUID *string `json:"requestUid"`

	// status
	// Required: true
	// Enum: [Completed InProgress Failed Initiated]
	Status *string `json:"status"`
}

// Validate validates this v1 kube hunter entity
func (m *V1KubeHunterEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1KubeHunterEntity) validateReports(formats strfmt.Registry) error {

	for k := range m.Reports {

		if err := validate.Required("reports"+"."+k, "body", m.Reports[k]); err != nil {
			return err
		}
		if val, ok := m.Reports[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1KubeHunterEntity) validateRequestUID(formats strfmt.Registry) error {

	if err := validate.Required("requestUid", "body", m.RequestUID); err != nil {
		return err
	}

	return nil
}

var v1KubeHunterEntityTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Completed","InProgress","Failed","Initiated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1KubeHunterEntityTypeStatusPropEnum = append(v1KubeHunterEntityTypeStatusPropEnum, v)
	}
}

const (

	// V1KubeHunterEntityStatusCompleted captures enum value "Completed"
	V1KubeHunterEntityStatusCompleted string = "Completed"

	// V1KubeHunterEntityStatusInProgress captures enum value "InProgress"
	V1KubeHunterEntityStatusInProgress string = "InProgress"

	// V1KubeHunterEntityStatusFailed captures enum value "Failed"
	V1KubeHunterEntityStatusFailed string = "Failed"

	// V1KubeHunterEntityStatusInitiated captures enum value "Initiated"
	V1KubeHunterEntityStatusInitiated string = "Initiated"
)

// prop value enum
func (m *V1KubeHunterEntity) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1KubeHunterEntityTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1KubeHunterEntity) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1KubeHunterEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1KubeHunterEntity) UnmarshalBinary(b []byte) error {
	var res V1KubeHunterEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
