// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1BasicOciRegistrySpec Basic oci registry spec
//
// swagger:model v1BasicOciRegistrySpec
type V1BasicOciRegistrySpec struct {

	// auth
	// Required: true
	Auth *V1RegistryAuth `json:"auth"`

	// OCI registry content base path
	BaseContentPath string `json:"baseContentPath,omitempty"`

	// OCI registry api base path
	BasePath string `json:"basePath,omitempty"`

	// contains spectro manifest
	ContainsSpectroManifest bool `json:"containsSpectroManifest"`

	// OCI registry endpoint
	// Required: true
	Endpoint *string `json:"endpoint"`

	// is sync supported
	IsSyncSupported bool `json:"isSyncSupported,omitempty"`

	// provider type
	// Enum: ["helm","zarf","pack"]
	ProviderType *string `json:"providerType,omitempty"`

	// Basic oci registry uid
	RegistryUID string `json:"registryUid,omitempty"`

	// scope
	Scope string `json:"scope,omitempty"`
}

// Validate validates this v1 basic oci registry spec
func (m *V1BasicOciRegistrySpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BasicOciRegistrySpec) validateAuth(formats strfmt.Registry) error {

	if err := validate.Required("auth", "body", m.Auth); err != nil {
		return err
	}

	if m.Auth != nil {
		if err := m.Auth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth")
			}
			return err
		}
	}

	return nil
}

func (m *V1BasicOciRegistrySpec) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

var v1BasicOciRegistrySpecTypeProviderTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["helm","zarf","pack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1BasicOciRegistrySpecTypeProviderTypePropEnum = append(v1BasicOciRegistrySpecTypeProviderTypePropEnum, v)
	}
}

const (

	// V1BasicOciRegistrySpecProviderTypeHelm captures enum value "helm"
	V1BasicOciRegistrySpecProviderTypeHelm string = "helm"

	// V1BasicOciRegistrySpecProviderTypeZarf captures enum value "zarf"
	V1BasicOciRegistrySpecProviderTypeZarf string = "zarf"

	// V1BasicOciRegistrySpecProviderTypePack captures enum value "pack"
	V1BasicOciRegistrySpecProviderTypePack string = "pack"
)

// prop value enum
func (m *V1BasicOciRegistrySpec) validateProviderTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1BasicOciRegistrySpecTypeProviderTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1BasicOciRegistrySpec) validateProviderType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProviderType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderTypeEnum("providerType", "body", *m.ProviderType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 basic oci registry spec based on the context it is used
func (m *V1BasicOciRegistrySpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BasicOciRegistrySpec) contextValidateAuth(ctx context.Context, formats strfmt.Registry) error {

	if m.Auth != nil {

		if err := m.Auth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1BasicOciRegistrySpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1BasicOciRegistrySpec) UnmarshalBinary(b []byte) error {
	var res V1BasicOciRegistrySpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
