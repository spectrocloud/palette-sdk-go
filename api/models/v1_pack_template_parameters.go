// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1PackTemplateParameters Pack template parameters
//
// swagger:model v1PackTemplateParameters
type V1PackTemplateParameters struct {

	// Pack template input parameters array
	InputParameters []*V1PackTemplateParameter `json:"inputParameters"`

	// Pack template output parameters array
	OutputParameters []*V1PackTemplateParameter `json:"outputParameters"`
}

// Validate validates this v1 pack template parameters
func (m *V1PackTemplateParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PackTemplateParameters) validateInputParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.InputParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.InputParameters); i++ {
		if swag.IsZero(m.InputParameters[i]) { // not required
			continue
		}

		if m.InputParameters[i] != nil {
			if err := m.InputParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PackTemplateParameters) validateOutputParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.OutputParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputParameters); i++ {
		if swag.IsZero(m.OutputParameters[i]) { // not required
			continue
		}

		if m.OutputParameters[i] != nil {
			if err := m.OutputParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PackTemplateParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PackTemplateParameters) UnmarshalBinary(b []byte) error {
	var res V1PackTemplateParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
