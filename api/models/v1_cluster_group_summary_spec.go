// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterGroupSummarySpec Cluster group summay spec
//
// swagger:model v1ClusterGroupSummarySpec
type V1ClusterGroupSummarySpec struct {

	// cluster profile templates
	ClusterProfileTemplates []*V1ClusterProfileTemplateMeta `json:"clusterProfileTemplates"`

	// Deprecated
	CPU *V1ClusterGroupResource `json:"cpu,omitempty"`

	// endpoint type
	// Enum: [Ingress LoadBalancer]
	EndpointType string `json:"endpointType,omitempty"`

	// host clusters
	// Unique: true
	HostClusters []*V1ObjectResReference `json:"hostClusters"`

	// host clusters count
	HostClustersCount int64 `json:"hostClustersCount"`

	// kubernetes distro type
	KubernetesDistroType V1ClusterKubernetesDistroType `json:"kubernetesDistroType,omitempty"`

	// Deprecated
	Memory *V1ClusterGroupResource `json:"memory,omitempty"`

	// scope
	Scope string `json:"scope,omitempty"`

	// virtual clusters count
	VirtualClustersCount int64 `json:"virtualClustersCount"`
}

// Validate validates this v1 cluster group summary spec
func (m *V1ClusterGroupSummarySpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterProfileTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpointType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesDistroType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterGroupSummarySpec) validateClusterProfileTemplates(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterProfileTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterProfileTemplates); i++ {
		if swag.IsZero(m.ClusterProfileTemplates[i]) { // not required
			continue
		}

		if m.ClusterProfileTemplates[i] != nil {
			if err := m.ClusterProfileTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterProfileTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterGroupSummarySpec) validateCPU(formats strfmt.Registry) error {

	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

var v1ClusterGroupSummarySpecTypeEndpointTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Ingress","LoadBalancer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterGroupSummarySpecTypeEndpointTypePropEnum = append(v1ClusterGroupSummarySpecTypeEndpointTypePropEnum, v)
	}
}

const (

	// V1ClusterGroupSummarySpecEndpointTypeIngress captures enum value "Ingress"
	V1ClusterGroupSummarySpecEndpointTypeIngress string = "Ingress"

	// V1ClusterGroupSummarySpecEndpointTypeLoadBalancer captures enum value "LoadBalancer"
	V1ClusterGroupSummarySpecEndpointTypeLoadBalancer string = "LoadBalancer"
)

// prop value enum
func (m *V1ClusterGroupSummarySpec) validateEndpointTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterGroupSummarySpecTypeEndpointTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterGroupSummarySpec) validateEndpointType(formats strfmt.Registry) error {

	if swag.IsZero(m.EndpointType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEndpointTypeEnum("endpointType", "body", m.EndpointType); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterGroupSummarySpec) validateHostClusters(formats strfmt.Registry) error {

	if swag.IsZero(m.HostClusters) { // not required
		return nil
	}

	if err := validate.UniqueItems("hostClusters", "body", m.HostClusters); err != nil {
		return err
	}

	for i := 0; i < len(m.HostClusters); i++ {
		if swag.IsZero(m.HostClusters[i]) { // not required
			continue
		}

		if m.HostClusters[i] != nil {
			if err := m.HostClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterGroupSummarySpec) validateKubernetesDistroType(formats strfmt.Registry) error {

	if swag.IsZero(m.KubernetesDistroType) { // not required
		return nil
	}

	if err := m.KubernetesDistroType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("kubernetesDistroType")
		}
		return err
	}

	return nil
}

func (m *V1ClusterGroupSummarySpec) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {
		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterGroupSummarySpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterGroupSummarySpec) UnmarshalBinary(b []byte) error {
	var res V1ClusterGroupSummarySpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
