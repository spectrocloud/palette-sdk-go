// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterTemplateProfileVariables Profile variables with grouped resolved and unresolved variables
//
// swagger:model v1ClusterTemplateProfileVariables
type V1ClusterTemplateProfileVariables struct {

	// Profile name
	Name string `json:"name,omitempty"`

	// Profile UID
	// Required: true
	UID *string `json:"uid"`

	// variables
	Variables *V1ClusterTemplateProfileVariablesVariables `json:"variables,omitempty"`
}

// Validate validates this v1 cluster template profile variables
func (m *V1ClusterTemplateProfileVariables) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterTemplateProfileVariables) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterTemplateProfileVariables) validateVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	if m.Variables != nil {
		if err := m.Variables.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variables")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variables")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 cluster template profile variables based on the context it is used
func (m *V1ClusterTemplateProfileVariables) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterTemplateProfileVariables) contextValidateVariables(ctx context.Context, formats strfmt.Registry) error {

	if m.Variables != nil {

		if swag.IsZero(m.Variables) { // not required
			return nil
		}

		if err := m.Variables.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variables")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variables")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterTemplateProfileVariables) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterTemplateProfileVariables) UnmarshalBinary(b []byte) error {
	var res V1ClusterTemplateProfileVariables
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1ClusterTemplateProfileVariablesVariables List of resolved and unresolved variables belonging to a cluster launched from template
//
// swagger:model V1ClusterTemplateProfileVariablesVariables
type V1ClusterTemplateProfileVariablesVariables struct {

	// List of resolved variables
	ResolvedVariables []*V1SpectroClusterVariable `json:"resolvedVariables"`

	// List of unresolved variables
	UnResolvedVariables []*V1SpectroClusterVariable `json:"unResolvedVariables"`
}

// Validate validates this v1 cluster template profile variables variables
func (m *V1ClusterTemplateProfileVariablesVariables) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResolvedVariables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnResolvedVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterTemplateProfileVariablesVariables) validateResolvedVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.ResolvedVariables) { // not required
		return nil
	}

	for i := 0; i < len(m.ResolvedVariables); i++ {
		if swag.IsZero(m.ResolvedVariables[i]) { // not required
			continue
		}

		if m.ResolvedVariables[i] != nil {
			if err := m.ResolvedVariables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + "resolvedVariables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + "resolvedVariables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterTemplateProfileVariablesVariables) validateUnResolvedVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.UnResolvedVariables) { // not required
		return nil
	}

	for i := 0; i < len(m.UnResolvedVariables); i++ {
		if swag.IsZero(m.UnResolvedVariables[i]) { // not required
			continue
		}

		if m.UnResolvedVariables[i] != nil {
			if err := m.UnResolvedVariables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + "unResolvedVariables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + "unResolvedVariables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 cluster template profile variables variables based on the context it is used
func (m *V1ClusterTemplateProfileVariablesVariables) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResolvedVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnResolvedVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterTemplateProfileVariablesVariables) contextValidateResolvedVariables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResolvedVariables); i++ {

		if m.ResolvedVariables[i] != nil {

			if swag.IsZero(m.ResolvedVariables[i]) { // not required
				return nil
			}

			if err := m.ResolvedVariables[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + "resolvedVariables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + "resolvedVariables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterTemplateProfileVariablesVariables) contextValidateUnResolvedVariables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UnResolvedVariables); i++ {

		if m.UnResolvedVariables[i] != nil {

			if swag.IsZero(m.UnResolvedVariables[i]) { // not required
				return nil
			}

			if err := m.UnResolvedVariables[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + "unResolvedVariables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + "unResolvedVariables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterTemplateProfileVariablesVariables) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterTemplateProfileVariablesVariables) UnmarshalBinary(b []byte) error {
	var res V1ClusterTemplateProfileVariablesVariables
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
