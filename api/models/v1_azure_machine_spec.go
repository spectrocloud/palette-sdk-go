// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AzureMachineSpec Azure cloud VM definition spec
//
// swagger:model v1AzureMachineSpec
type V1AzureMachineSpec struct {

	// additional tags
	AdditionalTags map[string]string `json:"additionalTags,omitempty"`

	// allocate public IP
	AllocatePublicIP bool `json:"allocatePublicIP,omitempty"`

	// availability zone
	AvailabilityZone *V1AzureMachineSpecAvailabilityZone `json:"availabilityZone,omitempty"`

	// image
	Image *V1AzureMachineSpecImage `json:"image,omitempty"`

	// instance type
	// Required: true
	InstanceType *string `json:"instanceType"`

	// location
	// Required: true
	Location *string `json:"location"`

	// nics
	Nics []*V1AzureNic `json:"nics"`

	// os disk
	// Required: true
	OsDisk *V1AzureOSDisk `json:"osDisk"`

	// ssh public key
	SSHPublicKey string `json:"sshPublicKey,omitempty"`
}

// Validate validates this v1 azure machine spec
func (m *V1AzureMachineSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsDisk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AzureMachineSpec) validateAvailabilityZone(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailabilityZone) { // not required
		return nil
	}

	if m.AvailabilityZone != nil {
		if err := m.AvailabilityZone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilityZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilityZone")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureMachineSpec) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureMachineSpec) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	return nil
}

func (m *V1AzureMachineSpec) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *V1AzureMachineSpec) validateNics(formats strfmt.Registry) error {
	if swag.IsZero(m.Nics) { // not required
		return nil
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1AzureMachineSpec) validateOsDisk(formats strfmt.Registry) error {

	if err := validate.Required("osDisk", "body", m.OsDisk); err != nil {
		return err
	}

	if m.OsDisk != nil {
		if err := m.OsDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("osDisk")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 azure machine spec based on the context it is used
func (m *V1AzureMachineSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailabilityZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AzureMachineSpec) contextValidateAvailabilityZone(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailabilityZone != nil {

		if swag.IsZero(m.AvailabilityZone) { // not required
			return nil
		}

		if err := m.AvailabilityZone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilityZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilityZone")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureMachineSpec) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if m.Image != nil {

		if swag.IsZero(m.Image) { // not required
			return nil
		}

		if err := m.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureMachineSpec) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nics); i++ {

		if m.Nics[i] != nil {

			if swag.IsZero(m.Nics[i]) { // not required
				return nil
			}

			if err := m.Nics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1AzureMachineSpec) contextValidateOsDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.OsDisk != nil {

		if err := m.OsDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("osDisk")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AzureMachineSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AzureMachineSpec) UnmarshalBinary(b []byte) error {
	var res V1AzureMachineSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
