// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VMDisk v1 Vm disk
//
// swagger:model v1VmDisk
type V1VMDisk struct {

	// block size
	BlockSize *V1VMBlockSize `json:"blockSize,omitempty"`

	// BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.
	BootOrder int32 `json:"bootOrder,omitempty"`

	// Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.
	Cache string `json:"cache,omitempty"`

	// cdrom
	Cdrom *V1VMCDRomTarget `json:"cdrom,omitempty"`

	// dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.
	DedicatedIOThread bool `json:"dedicatedIOThread,omitempty"`

	// disk
	Disk *V1VMDiskTarget `json:"disk,omitempty"`

	// IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.
	Io string `json:"io,omitempty"`

	// lun
	Lun *V1VMLunTarget `json:"lun,omitempty"`

	// Name is the device name
	// Required: true
	Name *string `json:"name"`

	// Serial provides the ability to specify a serial number for the disk device.
	Serial string `json:"serial,omitempty"`

	// If specified the disk is made sharable and multiple write from different VMs are permitted
	Shareable bool `json:"shareable,omitempty"`

	// If specified, disk address and its tag will be provided to the guest via config drive metadata
	Tag string `json:"tag,omitempty"`
}

// Validate validates this v1 Vm disk
func (m *V1VMDisk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMDisk) validateBlockSize(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockSize) { // not required
		return nil
	}

	if m.BlockSize != nil {
		if err := m.BlockSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blockSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blockSize")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDisk) validateCdrom(formats strfmt.Registry) error {
	if swag.IsZero(m.Cdrom) { // not required
		return nil
	}

	if m.Cdrom != nil {
		if err := m.Cdrom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdrom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdrom")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDisk) validateDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.Disk) { // not required
		return nil
	}

	if m.Disk != nil {
		if err := m.Disk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDisk) validateLun(formats strfmt.Registry) error {
	if swag.IsZero(m.Lun) { // not required
		return nil
	}

	if m.Lun != nil {
		if err := m.Lun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lun")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDisk) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 Vm disk based on the context it is used
func (m *V1VMDisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCdrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMDisk) contextValidateBlockSize(ctx context.Context, formats strfmt.Registry) error {

	if m.BlockSize != nil {

		if swag.IsZero(m.BlockSize) { // not required
			return nil
		}

		if err := m.BlockSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blockSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blockSize")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDisk) contextValidateCdrom(ctx context.Context, formats strfmt.Registry) error {

	if m.Cdrom != nil {

		if swag.IsZero(m.Cdrom) { // not required
			return nil
		}

		if err := m.Cdrom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdrom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdrom")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDisk) contextValidateDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.Disk != nil {

		if swag.IsZero(m.Disk) { // not required
			return nil
		}

		if err := m.Disk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDisk) contextValidateLun(ctx context.Context, formats strfmt.Registry) error {

	if m.Lun != nil {

		if swag.IsZero(m.Lun) { // not required
			return nil
		}

		if err := m.Lun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lun")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VMDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMDisk) UnmarshalBinary(b []byte) error {
	var res V1VMDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
