// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SearchFilterDateConditionMatch v1 search filter date condition match
//
// swagger:model v1SearchFilterDateConditionMatch
type V1SearchFilterDateConditionMatch struct {

	// conjunction
	Conjunction *V1SearchFilterConjunctionOperator `json:"conjunction,omitempty"`

	// values
	// Unique: true
	Values []V1Time `json:"values"`
}

// Validate validates this v1 search filter date condition match
func (m *V1SearchFilterDateConditionMatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConjunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SearchFilterDateConditionMatch) validateConjunction(formats strfmt.Registry) error {

	if swag.IsZero(m.Conjunction) { // not required
		return nil
	}

	if m.Conjunction != nil {
		if err := m.Conjunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conjunction")
			}
			return err
		}
	}

	return nil
}

func (m *V1SearchFilterDateConditionMatch) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	if err := validate.UniqueItems("values", "body", m.Values); err != nil {
		return err
	}

	for i := 0; i < len(m.Values); i++ {

		if err := m.Values[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SearchFilterDateConditionMatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SearchFilterDateConditionMatch) UnmarshalBinary(b []byte) error {
	var res V1SearchFilterDateConditionMatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
