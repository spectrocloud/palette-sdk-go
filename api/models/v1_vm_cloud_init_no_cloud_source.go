// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1VMCloudInitNoCloudSource Represents a cloud-init nocloud user data source. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
//
// swagger:model v1VmCloudInitNoCloudSource
type V1VMCloudInitNoCloudSource struct {

	// NetworkData contains NoCloud inline cloud-init networkdata.
	NetworkData string `json:"networkData,omitempty"`

	// NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.
	NetworkDataBase64 string `json:"networkDataBase64,omitempty"`

	// network data secret ref
	NetworkDataSecretRef *V1VMLocalObjectReference `json:"networkDataSecretRef,omitempty"`

	// secret ref
	SecretRef *V1VMLocalObjectReference `json:"secretRef,omitempty"`

	// UserData contains NoCloud inline cloud-init userdata.
	UserData string `json:"userData,omitempty"`

	// UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
	UserDataBase64 string `json:"userDataBase64,omitempty"`
}

// Validate validates this v1 Vm cloud init no cloud source
func (m *V1VMCloudInitNoCloudSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkDataSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMCloudInitNoCloudSource) validateNetworkDataSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkDataSecretRef) { // not required
		return nil
	}

	if m.NetworkDataSecretRef != nil {
		if err := m.NetworkDataSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkDataSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkDataSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMCloudInitNoCloudSource) validateSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretRef) { // not required
		return nil
	}

	if m.SecretRef != nil {
		if err := m.SecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secretRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 Vm cloud init no cloud source based on the context it is used
func (m *V1VMCloudInitNoCloudSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkDataSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMCloudInitNoCloudSource) contextValidateNetworkDataSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkDataSecretRef != nil {

		if swag.IsZero(m.NetworkDataSecretRef) { // not required
			return nil
		}

		if err := m.NetworkDataSecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkDataSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkDataSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMCloudInitNoCloudSource) contextValidateSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.SecretRef != nil {

		if swag.IsZero(m.SecretRef) { // not required
			return nil
		}

		if err := m.SecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secretRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VMCloudInitNoCloudSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMCloudInitNoCloudSource) UnmarshalBinary(b []byte) error {
	var res V1VMCloudInitNoCloudSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
