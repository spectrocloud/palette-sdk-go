// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1MachineHealthCheckConfig v1 machine health check config
//
// swagger:model v1MachineHealthCheckConfig
type V1MachineHealthCheckConfig struct {

	// HealthCheckMaxUnhealthy is the value above which, if current nodes are unhealthy remediation will not be triggered Can be an absolute int64 number or a percentage string Default value is 100%, i.e by default it is disabled
	HealthCheckMaxUnhealthy string `json:"healthCheckMaxUnhealthy,omitempty"`

	// NetworkReadyHealthCheckDuration is the timeout to check for the network availability. If the network is not available in the given available time, beyond the timeout check a node will be killed and a new node will be created. Default time is 10m
	NetworkReadyHealthCheckDuration string `json:"networkReadyHealthCheckDuration,omitempty"`

	// NodeReadyHealthCheckDuration is the timeout to check for the node ready state. If the node is not ready within the time out set, the node will be deleted and a new node will be launched. Default time is 10m
	NodeReadyHealthCheckDuration string `json:"nodeReadyHealthCheckDuration,omitempty"`
}

// Validate validates this v1 machine health check config
func (m *V1MachineHealthCheckConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v1 machine health check config based on context it is used
func (m *V1MachineHealthCheckConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineHealthCheckConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineHealthCheckConfig) UnmarshalBinary(b []byte) error {
	var res V1MachineHealthCheckConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
