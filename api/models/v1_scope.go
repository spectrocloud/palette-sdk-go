// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1Scope v1 scope
//
// swagger:model v1Scope
type V1Scope string

func NewV1Scope(value V1Scope) *V1Scope {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1Scope.
func (m V1Scope) Pointer() *V1Scope {
	return &m
}

const (

	// V1ScopeSystem captures enum value "system"
	V1ScopeSystem V1Scope = "system"

	// V1ScopeTenant captures enum value "tenant"
	V1ScopeTenant V1Scope = "tenant"

	// V1ScopeProject captures enum value "project"
	V1ScopeProject V1Scope = "project"

	// V1ScopeResource captures enum value "resource"
	V1ScopeResource V1Scope = "resource"
)

// for schema
var v1ScopeEnum []interface{}

func init() {
	var res []V1Scope
	if err := json.Unmarshal([]byte(`["system","tenant","project","resource"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ScopeEnum = append(v1ScopeEnum, v)
	}
}

func (m V1Scope) validateV1ScopeEnum(path, location string, value V1Scope) error {
	if err := validate.EnumCase(path, location, value, v1ScopeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 scope
func (m V1Scope) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ScopeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 scope based on context it is used
func (m V1Scope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
