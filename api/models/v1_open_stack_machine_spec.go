// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1OpenStackMachineSpec OpenStack cloud VM definition spec
//
// swagger:model v1OpenStackMachineSpec
type V1OpenStackMachineSpec struct {

	// az
	Az string `json:"az,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// Instance flavor of the machine with cpu and memory info
	// Required: true
	InstanceType *V1GenericInstanceType `json:"instanceType"`

	// nics
	// Required: true
	Nics []*V1OpenStackNic `json:"nics"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// security groups
	SecurityGroups []string `json:"securityGroups"`

	// ssh key name
	SSHKeyName string `json:"sshKeyName,omitempty"`
}

// Validate validates this v1 open stack machine spec
func (m *V1OpenStackMachineSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1OpenStackMachineSpec) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	if m.InstanceType != nil {
		if err := m.InstanceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceType")
			}
			return err
		}
	}

	return nil
}

func (m *V1OpenStackMachineSpec) validateNics(formats strfmt.Registry) error {

	if err := validate.Required("nics", "body", m.Nics); err != nil {
		return err
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1OpenStackMachineSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1OpenStackMachineSpec) UnmarshalBinary(b []byte) error {
	var res V1OpenStackMachineSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
