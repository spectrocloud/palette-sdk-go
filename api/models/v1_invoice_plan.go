// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1InvoicePlan Invoice plan object
//
// swagger:model v1InvoicePlan
type V1InvoicePlan struct {

	// List of free credits
	FreeCredits []*V1InvoicePlanCredit `json:"freeCredits"`

	// plantype
	// Enum: ["Trial","MonthlyOnDemand","AnnualSubscription"]
	Plantype string `json:"plantype,omitempty"`

	// List of SLA credits
	SLACredits []*V1InvoicePlanCredit `json:"slaCredits"`
}

// Validate validates this v1 invoice plan
func (m *V1InvoicePlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFreeCredits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlantype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSLACredits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1InvoicePlan) validateFreeCredits(formats strfmt.Registry) error {
	if swag.IsZero(m.FreeCredits) { // not required
		return nil
	}

	for i := 0; i < len(m.FreeCredits); i++ {
		if swag.IsZero(m.FreeCredits[i]) { // not required
			continue
		}

		if m.FreeCredits[i] != nil {
			if err := m.FreeCredits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("freeCredits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("freeCredits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var v1InvoicePlanTypePlantypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Trial","MonthlyOnDemand","AnnualSubscription"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1InvoicePlanTypePlantypePropEnum = append(v1InvoicePlanTypePlantypePropEnum, v)
	}
}

const (

	// V1InvoicePlanPlantypeTrial captures enum value "Trial"
	V1InvoicePlanPlantypeTrial string = "Trial"

	// V1InvoicePlanPlantypeMonthlyOnDemand captures enum value "MonthlyOnDemand"
	V1InvoicePlanPlantypeMonthlyOnDemand string = "MonthlyOnDemand"

	// V1InvoicePlanPlantypeAnnualSubscription captures enum value "AnnualSubscription"
	V1InvoicePlanPlantypeAnnualSubscription string = "AnnualSubscription"
)

// prop value enum
func (m *V1InvoicePlan) validatePlantypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1InvoicePlanTypePlantypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1InvoicePlan) validatePlantype(formats strfmt.Registry) error {
	if swag.IsZero(m.Plantype) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlantypeEnum("plantype", "body", m.Plantype); err != nil {
		return err
	}

	return nil
}

func (m *V1InvoicePlan) validateSLACredits(formats strfmt.Registry) error {
	if swag.IsZero(m.SLACredits) { // not required
		return nil
	}

	for i := 0; i < len(m.SLACredits); i++ {
		if swag.IsZero(m.SLACredits[i]) { // not required
			continue
		}

		if m.SLACredits[i] != nil {
			if err := m.SLACredits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slaCredits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slaCredits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 invoice plan based on the context it is used
func (m *V1InvoicePlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFreeCredits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSLACredits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1InvoicePlan) contextValidateFreeCredits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FreeCredits); i++ {

		if m.FreeCredits[i] != nil {

			if swag.IsZero(m.FreeCredits[i]) { // not required
				return nil
			}

			if err := m.FreeCredits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("freeCredits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("freeCredits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1InvoicePlan) contextValidateSLACredits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SLACredits); i++ {

		if m.SLACredits[i] != nil {

			if swag.IsZero(m.SLACredits[i]) { // not required
				return nil
			}

			if err := m.SLACredits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slaCredits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slaCredits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1InvoicePlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1InvoicePlan) UnmarshalBinary(b []byte) error {
	var res V1InvoicePlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
