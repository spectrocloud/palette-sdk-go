// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1SpectroClusterMetaSpec Spectro cluster meta summary
//
// swagger:model v1SpectroClusterMetaSpec
type V1SpectroClusterMetaSpec struct {

	// Architecture type of the cluster
	ArchType []V1ArchType `json:"archType"`

	// Unique identifier for the cloud account used by this cluster
	CloudAccountUID string `json:"cloudAccountUid,omitempty"`

	// Geographic region where the cluster is deployed
	CloudRegion string `json:"cloudRegion,omitempty"`

	// Infrastructure provider type for the cluster
	CloudType string `json:"cloudType,omitempty"`

	// Type classification of the cluster
	ClusterType string `json:"clusterType,omitempty"`

	// Geographical location metadata for the cluster
	Location *V1ClusterMetaSpecLocation `json:"location,omitempty"`

	// User-defined labels associated with this cluster
	Tags []string `json:"tags"`
}

// Validate validates this v1 spectro cluster meta spec
func (m *V1SpectroClusterMetaSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterMetaSpec) validateArchType(formats strfmt.Registry) error {

	if swag.IsZero(m.ArchType) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchType); i++ {

		if err := m.ArchType[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archType" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V1SpectroClusterMetaSpec) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterMetaSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterMetaSpec) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterMetaSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
