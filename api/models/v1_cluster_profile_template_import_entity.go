// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterProfileTemplateImportEntity Cluster profile import template
//
// swagger:model v1ClusterProfileTemplateImportEntity
type V1ClusterProfileTemplateImportEntity struct {

	// Cluster profile cloud type
	CloudType string `json:"cloudType,omitempty"`

	// Cluster profile packs array
	// Unique: true
	Packs []*V1PackImportEntity `json:"packs"`

	// Cluster profile type [ "cluster", "infra", "add-on", "system" ]
	Type string `json:"type,omitempty"`
}

// Validate validates this v1 cluster profile template import entity
func (m *V1ClusterProfileTemplateImportEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePacks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterProfileTemplateImportEntity) validatePacks(formats strfmt.Registry) error {
	if swag.IsZero(m.Packs) { // not required
		return nil
	}

	if err := validate.UniqueItems("packs", "body", m.Packs); err != nil {
		return err
	}

	for i := 0; i < len(m.Packs); i++ {
		if swag.IsZero(m.Packs[i]) { // not required
			continue
		}

		if m.Packs[i] != nil {
			if err := m.Packs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 cluster profile template import entity based on the context it is used
func (m *V1ClusterProfileTemplateImportEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePacks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterProfileTemplateImportEntity) contextValidatePacks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Packs); i++ {

		if m.Packs[i] != nil {

			if swag.IsZero(m.Packs[i]) { // not required
				return nil
			}

			if err := m.Packs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterProfileTemplateImportEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterProfileTemplateImportEntity) UnmarshalBinary(b []byte) error {
	var res V1ClusterProfileTemplateImportEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
