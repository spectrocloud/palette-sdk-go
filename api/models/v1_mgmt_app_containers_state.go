// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1MgmtAppContainersState v1 mgmt app containers state
//
// swagger:model v1MgmtAppContainersState
type V1MgmtAppContainersState struct {

	// running
	Running *V1MgmtAppContainersStateRunning `json:"running,omitempty"`

	// terminated
	Terminated *V1MgmtAppContainersStateTerminated `json:"terminated,omitempty"`

	// waiting
	Waiting *V1MgmtAppContainersStateWaiting `json:"waiting,omitempty"`
}

// Validate validates this v1 mgmt app containers state
func (m *V1MgmtAppContainersState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MgmtAppContainersState) validateRunning(formats strfmt.Registry) error {

	if swag.IsZero(m.Running) { // not required
		return nil
	}

	if m.Running != nil {
		if err := m.Running.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("running")
			}
			return err
		}
	}

	return nil
}

func (m *V1MgmtAppContainersState) validateTerminated(formats strfmt.Registry) error {

	if swag.IsZero(m.Terminated) { // not required
		return nil
	}

	if m.Terminated != nil {
		if err := m.Terminated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terminated")
			}
			return err
		}
	}

	return nil
}

func (m *V1MgmtAppContainersState) validateWaiting(formats strfmt.Registry) error {

	if swag.IsZero(m.Waiting) { // not required
		return nil
	}

	if m.Waiting != nil {
		if err := m.Waiting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("waiting")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MgmtAppContainersState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MgmtAppContainersState) UnmarshalBinary(b []byte) error {
	var res V1MgmtAppContainersState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1MgmtAppContainersStateRunning v1 mgmt app containers state running
//
// swagger:model V1MgmtAppContainersStateRunning
type V1MgmtAppContainersStateRunning struct {

	// started at
	// Format: date-time
	StartedAt V1Time `json:"startedAt,omitempty"`
}

// Validate validates this v1 mgmt app containers state running
func (m *V1MgmtAppContainersStateRunning) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MgmtAppContainersStateRunning) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := m.StartedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("running" + "." + "startedAt")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MgmtAppContainersStateRunning) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MgmtAppContainersStateRunning) UnmarshalBinary(b []byte) error {
	var res V1MgmtAppContainersStateRunning
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1MgmtAppContainersStateTerminated v1 mgmt app containers state terminated
//
// swagger:model V1MgmtAppContainersStateTerminated
type V1MgmtAppContainersStateTerminated struct {

	// exit code
	ExitCode int64 `json:"exitCode,omitempty"`

	// finished at
	// Format: date-time
	FinishedAt V1Time `json:"finishedAt,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// signal
	Signal int64 `json:"signal,omitempty"`

	// started at
	// Format: date-time
	StartedAt V1Time `json:"startedAt,omitempty"`
}

// Validate validates this v1 mgmt app containers state terminated
func (m *V1MgmtAppContainersStateTerminated) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MgmtAppContainersStateTerminated) validateFinishedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishedAt) { // not required
		return nil
	}

	if err := m.FinishedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("terminated" + "." + "finishedAt")
		}
		return err
	}

	return nil
}

func (m *V1MgmtAppContainersStateTerminated) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := m.StartedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("terminated" + "." + "startedAt")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MgmtAppContainersStateTerminated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MgmtAppContainersStateTerminated) UnmarshalBinary(b []byte) error {
	var res V1MgmtAppContainersStateTerminated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1MgmtAppContainersStateWaiting v1 mgmt app containers state waiting
//
// swagger:model V1MgmtAppContainersStateWaiting
type V1MgmtAppContainersStateWaiting struct {

	// reason
	Reason string `json:"reason,omitempty"`
}

// Validate validates this v1 mgmt app containers state waiting
func (m *V1MgmtAppContainersStateWaiting) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1MgmtAppContainersStateWaiting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MgmtAppContainersStateWaiting) UnmarshalBinary(b []byte) error {
	var res V1MgmtAppContainersStateWaiting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
