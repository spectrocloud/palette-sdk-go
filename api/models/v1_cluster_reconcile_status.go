// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterReconcileStatus Cluster reconcile status
//
// swagger:model v1ClusterReconcileStatus
type V1ClusterReconcileStatus struct {

	// Timestamp when reconciliation was last applied
	// Format: date-time
	LastAppliedTimestamp strfmt.DateTime `json:"lastAppliedTimestamp,omitempty"`

	// Status message
	Message string `json:"message,omitempty"`

	// Current reconciliation state
	// Enum: ["Created","Pending","InProgress","Applied","Failed"]
	State string `json:"state,omitempty"`

	// List of reconciliation update logs
	UpdateLogs []*V1ClusterReconcileLog `json:"updateLogs"`

	// variable status
	VariableStatus *V1ClusterVariableReconcileStatus `json:"variableStatus,omitempty"`
}

// Validate validates this v1 cluster reconcile status
func (m *V1ClusterReconcileStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastAppliedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterReconcileStatus) validateLastAppliedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.LastAppliedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("lastAppliedTimestamp", "body", "date-time", m.LastAppliedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var v1ClusterReconcileStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Created","Pending","InProgress","Applied","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterReconcileStatusTypeStatePropEnum = append(v1ClusterReconcileStatusTypeStatePropEnum, v)
	}
}

const (

	// V1ClusterReconcileStatusStateCreated captures enum value "Created"
	V1ClusterReconcileStatusStateCreated string = "Created"

	// V1ClusterReconcileStatusStatePending captures enum value "Pending"
	V1ClusterReconcileStatusStatePending string = "Pending"

	// V1ClusterReconcileStatusStateInProgress captures enum value "InProgress"
	V1ClusterReconcileStatusStateInProgress string = "InProgress"

	// V1ClusterReconcileStatusStateApplied captures enum value "Applied"
	V1ClusterReconcileStatusStateApplied string = "Applied"

	// V1ClusterReconcileStatusStateFailed captures enum value "Failed"
	V1ClusterReconcileStatusStateFailed string = "Failed"
)

// prop value enum
func (m *V1ClusterReconcileStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterReconcileStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterReconcileStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterReconcileStatus) validateUpdateLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.UpdateLogs); i++ {
		if swag.IsZero(m.UpdateLogs[i]) { // not required
			continue
		}

		if m.UpdateLogs[i] != nil {
			if err := m.UpdateLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterReconcileStatus) validateVariableStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.VariableStatus) { // not required
		return nil
	}

	if m.VariableStatus != nil {
		if err := m.VariableStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variableStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variableStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 cluster reconcile status based on the context it is used
func (m *V1ClusterReconcileStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUpdateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariableStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterReconcileStatus) contextValidateUpdateLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UpdateLogs); i++ {

		if m.UpdateLogs[i] != nil {

			if swag.IsZero(m.UpdateLogs[i]) { // not required
				return nil
			}

			if err := m.UpdateLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterReconcileStatus) contextValidateVariableStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.VariableStatus != nil {

		if swag.IsZero(m.VariableStatus) { // not required
			return nil
		}

		if err := m.VariableStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variableStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variableStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterReconcileStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterReconcileStatus) UnmarshalBinary(b []byte) error {
	var res V1ClusterReconcileStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
