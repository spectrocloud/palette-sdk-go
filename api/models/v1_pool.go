// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Pool Pool defines IP ranges or with CIDR for available IPs Gateway, Prefix and Nameserver if provided, will overwrite values in IPPool
//
// swagger:model v1Pool
type V1Pool struct {

	// End is the last IP address that can be rendered. It is used as a validation that the rendered IP is in bound.
	End string `json:"end,omitempty"`

	// Gateway is the gateway ip address
	Gateway string `json:"gateway,omitempty"`

	// Nameserver provide information for dns resolvation
	Nameserver *V1Nameserver `json:"nameserver,omitempty"`

	// Prefix is the mask of the network as integer (max 128)
	Prefix int32 `json:"prefix,omitempty"`

	// Start is the first ip address that can be rendered
	Start string `json:"start,omitempty"`

	// Subnet is used to validate that the rendered IP is in bounds. eg: 192.168.0.0/24 If Start value is not given, start value is derived from the subnet ip incremented by 1 (start value is `192.168.0.1` for subnet `192.168.0.0/24`)
	Subnet string `json:"subnet,omitempty"`
}

// Validate validates this v1 pool
func (m *V1Pool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNameserver(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Pool) validateNameserver(formats strfmt.Registry) error {

	if swag.IsZero(m.Nameserver) { // not required
		return nil
	}

	if m.Nameserver != nil {
		if err := m.Nameserver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nameserver")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Pool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Pool) UnmarshalBinary(b []byte) error {
	var res V1Pool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
