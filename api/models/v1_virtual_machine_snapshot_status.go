// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1VirtualMachineSnapshotStatus VirtualMachineSnapshotStatus is the status for a VirtualMachineSnapshot resource
//
// swagger:model v1VirtualMachineSnapshotStatus
type V1VirtualMachineSnapshotStatus struct {

	// conditions
	Conditions []*V1VMCondition `json:"conditions"`

	// creation time
	// Format: date-time
	CreationTime V1Time `json:"creationTime,omitempty"`

	// error
	Error *V1VMError `json:"error,omitempty"`

	// indications
	Indications []string `json:"indications"`

	// phase
	Phase string `json:"phase,omitempty"`

	// ready to use
	ReadyToUse bool `json:"readyToUse,omitempty"`

	// snapshot volumes
	SnapshotVolumes *V1VMSnapshotVolumesLists `json:"snapshotVolumes,omitempty"`

	// source UID
	SourceUID string `json:"sourceUID,omitempty"`

	// virtual machine snapshot content name
	VirtualMachineSnapshotContentName string `json:"virtualMachineSnapshotContentName,omitempty"`
}

// Validate validates this v1 virtual machine snapshot status
func (m *V1VirtualMachineSnapshotStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VirtualMachineSnapshotStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1VirtualMachineSnapshotStatus) validateCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := m.CreationTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("creationTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("creationTime")
		}
		return err
	}

	return nil
}

func (m *V1VirtualMachineSnapshotStatus) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *V1VirtualMachineSnapshotStatus) validateSnapshotVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotVolumes) { // not required
		return nil
	}

	if m.SnapshotVolumes != nil {
		if err := m.SnapshotVolumes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotVolumes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotVolumes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 virtual machine snapshot status based on the context it is used
func (m *V1VirtualMachineSnapshotStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreationTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VirtualMachineSnapshotStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1VirtualMachineSnapshotStatus) contextValidateCreationTime(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := m.CreationTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("creationTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("creationTime")
		}
		return err
	}

	return nil
}

func (m *V1VirtualMachineSnapshotStatus) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *V1VirtualMachineSnapshotStatus) contextValidateSnapshotVolumes(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotVolumes != nil {

		if swag.IsZero(m.SnapshotVolumes) { // not required
			return nil
		}

		if err := m.SnapshotVolumes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotVolumes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotVolumes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VirtualMachineSnapshotStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VirtualMachineSnapshotStatus) UnmarshalBinary(b []byte) error {
	var res V1VirtualMachineSnapshotStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
