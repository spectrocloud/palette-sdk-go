// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MaasMachinePoolCloudConfigEntity v1 maas machine pool cloud config entity
//
// swagger:model v1MaasMachinePoolCloudConfigEntity
type V1MaasMachinePoolCloudConfigEntity struct {

	// azs
	Azs []string `json:"azs"`

	// instance type
	// Required: true
	InstanceType *V1MaasInstanceType `json:"instanceType"`

	// network info
	Network *V1MaasNetworkConfigEntity `json:"network,omitempty"`

	// the resource pool
	// Required: true
	ResourcePool *string `json:"resourcePool"`

	// Tags in maas environment
	Tags []string `json:"tags"`

	// useLxdVm enables on-demand LXD VM provisioning for this machine pool (workload clusters only).
	// When true, machines in this pool are created as MAAS LXD-backed VMs instead of bare metal.
	UseLxdVM bool `json:"useLxdVm"`
}

// Validate validates this v1 maas machine pool cloud config entity
func (m *V1MaasMachinePoolCloudConfigEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MaasMachinePoolCloudConfigEntity) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	if m.InstanceType != nil {
		if err := m.InstanceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceType")
			}
			return err
		}
	}

	return nil
}

func (m *V1MaasMachinePoolCloudConfigEntity) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *V1MaasMachinePoolCloudConfigEntity) validateResourcePool(formats strfmt.Registry) error {

	if err := validate.Required("resourcePool", "body", m.ResourcePool); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 maas machine pool cloud config entity based on the context it is used
func (m *V1MaasMachinePoolCloudConfigEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MaasMachinePoolCloudConfigEntity) contextValidateInstanceType(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceType != nil {

		if err := m.InstanceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceType")
			}
			return err
		}
	}

	return nil
}

func (m *V1MaasMachinePoolCloudConfigEntity) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {

		if swag.IsZero(m.Network) { // not required
			return nil
		}

		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MaasMachinePoolCloudConfigEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MaasMachinePoolCloudConfigEntity) UnmarshalBinary(b []byte) error {
	var res V1MaasMachinePoolCloudConfigEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
