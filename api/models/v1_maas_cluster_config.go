// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MaasClusterConfig Cluster level configuration for MAAS cloud and applicable for all the machine pools
//
// swagger:model v1MaasClusterConfig
type V1MaasClusterConfig struct {

	// Domain name of the cluster to be provisioned
	// Required: true
	Domain *string `json:"domain"`

	// enableLxdVm controls MaaS KVM host enablement for the Host ControlPlane cluster only.
	// When true, Palette configures MaasMachineTemplate LXD settings so LXD initialization
	// is triggered on nodes of this (host) cluster. This does not affect workload clusters.
	// Cannot be enabled for clusters where useLxdVm is enabled for any of the control plane machine pool configs.
	EnableLxdVM bool `json:"enableLxdVm"`

	// NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.
	NtpServers []string `json:"ntpServers"`

	// SSH keys specifies a list of ssh authorized keys for the 'spectro' user
	SSHKeys []string `json:"sshKeys"`

	// whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name
	StaticIP bool `json:"staticIp"`
}

// Validate validates this v1 maas cluster config
func (m *V1MaasClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MaasClusterConfig) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 maas cluster config based on context it is used
func (m *V1MaasClusterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1MaasClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MaasClusterConfig) UnmarshalBinary(b []byte) error {
	var res V1MaasClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
