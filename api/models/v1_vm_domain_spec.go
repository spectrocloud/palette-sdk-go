// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VMDomainSpec v1 Vm domain spec
//
// swagger:model v1VmDomainSpec
type V1VMDomainSpec struct {

	// chassis
	Chassis *V1VMChassis `json:"chassis,omitempty"`

	// clock
	Clock *V1VMClock `json:"clock,omitempty"`

	// cpu
	CPU *V1VMCPU `json:"cpu,omitempty"`

	// devices
	// Required: true
	Devices *V1VMDevices `json:"devices"`

	// features
	Features *V1VMFeatures `json:"features,omitempty"`

	// firmware
	Firmware *V1VMFirmware `json:"firmware,omitempty"`

	// io threads
	IoThreads *V1VMDomainSpecIoThreads `json:"ioThreads,omitempty"`

	// Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy disables use of IOThreads. One of: shared, auto
	IoThreadsPolicy string `json:"ioThreadsPolicy,omitempty"`

	// launch security
	LaunchSecurity *V1VMLaunchSecurity `json:"launchSecurity,omitempty"`

	// machine
	Machine *V1VMMachine `json:"machine,omitempty"`

	// memory
	Memory *V1VMMemory `json:"memory,omitempty"`

	// resources
	Resources *V1VMResourceRequirements `json:"resources,omitempty"`
}

// Validate validates this v1 Vm domain spec
func (m *V1VMDomainSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChassis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoThreads(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaunchSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMDomainSpec) validateChassis(formats strfmt.Registry) error {
	if swag.IsZero(m.Chassis) { // not required
		return nil
	}

	if m.Chassis != nil {
		if err := m.Chassis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chassis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chassis")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) validateClock(formats strfmt.Registry) error {
	if swag.IsZero(m.Clock) { // not required
		return nil
	}

	if m.Clock != nil {
		if err := m.Clock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clock")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) validateCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) validateDevices(formats strfmt.Registry) error {

	if err := validate.Required("devices", "body", m.Devices); err != nil {
		return err
	}

	if m.Devices != nil {
		if err := m.Devices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("devices")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) validateFeatures(formats strfmt.Registry) error {
	if swag.IsZero(m.Features) { // not required
		return nil
	}

	if m.Features != nil {
		if err := m.Features.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) validateFirmware(formats strfmt.Registry) error {
	if swag.IsZero(m.Firmware) { // not required
		return nil
	}

	if m.Firmware != nil {
		if err := m.Firmware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firmware")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) validateIoThreads(formats strfmt.Registry) error {
	if swag.IsZero(m.IoThreads) { // not required
		return nil
	}

	if m.IoThreads != nil {
		if err := m.IoThreads.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ioThreads")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ioThreads")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) validateLaunchSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.LaunchSecurity) { // not required
		return nil
	}

	if m.LaunchSecurity != nil {
		if err := m.LaunchSecurity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("launchSecurity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("launchSecurity")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) validateMachine(formats strfmt.Registry) error {
	if swag.IsZero(m.Machine) { // not required
		return nil
	}

	if m.Machine != nil {
		if err := m.Machine.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machine")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("machine")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) validateMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {
		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 Vm domain spec based on the context it is used
func (m *V1VMDomainSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChassis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIoThreads(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLaunchSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMachine(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMDomainSpec) contextValidateChassis(ctx context.Context, formats strfmt.Registry) error {

	if m.Chassis != nil {

		if swag.IsZero(m.Chassis) { // not required
			return nil
		}

		if err := m.Chassis.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chassis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chassis")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) contextValidateClock(ctx context.Context, formats strfmt.Registry) error {

	if m.Clock != nil {

		if swag.IsZero(m.Clock) { // not required
			return nil
		}

		if err := m.Clock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clock")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) contextValidateCPU(ctx context.Context, formats strfmt.Registry) error {

	if m.CPU != nil {

		if swag.IsZero(m.CPU) { // not required
			return nil
		}

		if err := m.CPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	if m.Devices != nil {

		if err := m.Devices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("devices")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) contextValidateFeatures(ctx context.Context, formats strfmt.Registry) error {

	if m.Features != nil {

		if swag.IsZero(m.Features) { // not required
			return nil
		}

		if err := m.Features.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) contextValidateFirmware(ctx context.Context, formats strfmt.Registry) error {

	if m.Firmware != nil {

		if swag.IsZero(m.Firmware) { // not required
			return nil
		}

		if err := m.Firmware.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firmware")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) contextValidateIoThreads(ctx context.Context, formats strfmt.Registry) error {

	if m.IoThreads != nil {

		if swag.IsZero(m.IoThreads) { // not required
			return nil
		}

		if err := m.IoThreads.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ioThreads")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ioThreads")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) contextValidateLaunchSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.LaunchSecurity != nil {

		if swag.IsZero(m.LaunchSecurity) { // not required
			return nil
		}

		if err := m.LaunchSecurity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("launchSecurity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("launchSecurity")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) contextValidateMachine(ctx context.Context, formats strfmt.Registry) error {

	if m.Machine != nil {

		if swag.IsZero(m.Machine) { // not required
			return nil
		}

		if err := m.Machine.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machine")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("machine")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) contextValidateMemory(ctx context.Context, formats strfmt.Registry) error {

	if m.Memory != nil {

		if swag.IsZero(m.Memory) { // not required
			return nil
		}

		if err := m.Memory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDomainSpec) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {

		if swag.IsZero(m.Resources) { // not required
			return nil
		}

		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VMDomainSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMDomainSpec) UnmarshalBinary(b []byte) error {
	var res V1VMDomainSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1VMDomainSpecIoThreads IOThreads specifies the IOThreads options.
//
// swagger:model V1VMDomainSpecIoThreads
type V1VMDomainSpecIoThreads struct {

	// SupplementalPoolThreadCount specifies how many iothreads are allocated for the supplementalPool policy.
	SupplementalPoolThreadCount int32 `json:"supplementalPoolThreadCount,omitempty"`
}

// Validate validates this v1 VM domain spec io threads
func (m *V1VMDomainSpecIoThreads) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v1 VM domain spec io threads based on context it is used
func (m *V1VMDomainSpecIoThreads) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1VMDomainSpecIoThreads) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMDomainSpecIoThreads) UnmarshalBinary(b []byte) error {
	var res V1VMDomainSpecIoThreads
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
