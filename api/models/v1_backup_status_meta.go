// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1BackupStatusMeta Backup  status meta
//
// swagger:model v1BackupStatusMeta
type V1BackupStatusMeta struct {

	// backup name
	BackupName string `json:"backupName,omitempty"`

	// backup state
	BackupState *V1BackupState `json:"backupState,omitempty"`

	// backuped namespaces
	// Unique: true
	BackupedNamespaces []string `json:"backupedNamespaces"`

	// expiry date
	// Format: date-time
	ExpiryDate V1Time `json:"expiryDate,omitempty"`
}

// Validate validates this v1 backup status meta
func (m *V1BackupStatusMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupedNamespaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BackupStatusMeta) validateBackupState(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupState) { // not required
		return nil
	}

	if m.BackupState != nil {
		if err := m.BackupState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupState")
			}
			return err
		}
	}

	return nil
}

func (m *V1BackupStatusMeta) validateBackupedNamespaces(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupedNamespaces) { // not required
		return nil
	}

	if err := validate.UniqueItems("backupedNamespaces", "body", m.BackupedNamespaces); err != nil {
		return err
	}

	return nil
}

func (m *V1BackupStatusMeta) validateExpiryDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiryDate) { // not required
		return nil
	}

	if err := m.ExpiryDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expiryDate")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1BackupStatusMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1BackupStatusMeta) UnmarshalBinary(b []byte) error {
	var res V1BackupStatusMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
