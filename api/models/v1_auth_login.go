// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AuthLogin Describes the credential details required for authentication
//
// swagger:model v1AuthLogin
type V1AuthLogin struct {

	// Describes the email id required for the user to authenticate
	EmailID string `json:"emailId,omitempty"`

	// Describes the user's organization name to login
	Org string `json:"org,omitempty"`

	// Describes the password required for the user to authenticate
	// Format: password
	Password strfmt.Password `json:"password,omitempty"`
}

// Validate validates this v1 auth login
func (m *V1AuthLogin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AuthLogin) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.FormatOf("password", "body", "password", m.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 auth login based on context it is used
func (m *V1AuthLogin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1AuthLogin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AuthLogin) UnmarshalBinary(b []byte) error {
	var res V1AuthLogin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
