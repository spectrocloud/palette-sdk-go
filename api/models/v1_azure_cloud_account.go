// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AzureCloudAccount v1 azure cloud account
//
// swagger:model v1AzureCloudAccount
type V1AzureCloudAccount struct {

	// Contains configuration for Azure cloud
	// Enum: [AzureChinaCloud AzurePublicCloud AzureUSGovernment AzureUSGovernmentCloud]
	AzureEnvironment *string `json:"azureEnvironment,omitempty"`

	// Client ID(Directory ID) is a unique identifier generated by Azure AD that is tied to an application
	// Required: true
	ClientID *string `json:"clientId"`

	// ClientSecret is the secret associated with Client
	// Required: true
	ClientSecret *string `json:"clientSecret"`

	// Palette internal cloud settings
	Settings *V1CloudAccountSettings `json:"settings,omitempty"`

	// Tenant ID is the ID for the Azure AD tenant that the user belongs to.
	// Required: true
	TenantID *string `json:"tenantId"`

	// Tenant ID is the ID for the Azure AD tenant that the user belongs to.
	TenantName string `json:"tenantName,omitempty"`
}

// Validate validates this v1 azure cloud account
func (m *V1AzureCloudAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzureEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1AzureCloudAccountTypeAzureEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AzureChinaCloud","AzurePublicCloud","AzureUSGovernment","AzureUSGovernmentCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1AzureCloudAccountTypeAzureEnvironmentPropEnum = append(v1AzureCloudAccountTypeAzureEnvironmentPropEnum, v)
	}
}

const (

	// V1AzureCloudAccountAzureEnvironmentAzureChinaCloud captures enum value "AzureChinaCloud"
	V1AzureCloudAccountAzureEnvironmentAzureChinaCloud string = "AzureChinaCloud"

	// V1AzureCloudAccountAzureEnvironmentAzurePublicCloud captures enum value "AzurePublicCloud"
	V1AzureCloudAccountAzureEnvironmentAzurePublicCloud string = "AzurePublicCloud"

	// V1AzureCloudAccountAzureEnvironmentAzureUSGovernment captures enum value "AzureUSGovernment"
	V1AzureCloudAccountAzureEnvironmentAzureUSGovernment string = "AzureUSGovernment"

	// V1AzureCloudAccountAzureEnvironmentAzureUSGovernmentCloud captures enum value "AzureUSGovernmentCloud"
	V1AzureCloudAccountAzureEnvironmentAzureUSGovernmentCloud string = "AzureUSGovernmentCloud"
)

// prop value enum
func (m *V1AzureCloudAccount) validateAzureEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1AzureCloudAccountTypeAzureEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1AzureCloudAccount) validateAzureEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.AzureEnvironment) { // not required
		return nil
	}

	// value enum
	if err := m.validateAzureEnvironmentEnum("azureEnvironment", "body", *m.AzureEnvironment); err != nil {
		return err
	}

	return nil
}

func (m *V1AzureCloudAccount) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("clientId", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *V1AzureCloudAccount) validateClientSecret(formats strfmt.Registry) error {

	if err := validate.Required("clientSecret", "body", m.ClientSecret); err != nil {
		return err
	}

	return nil
}

func (m *V1AzureCloudAccount) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureCloudAccount) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AzureCloudAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AzureCloudAccount) UnmarshalBinary(b []byte) error {
	var res V1AzureCloudAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
