// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AuditSpec Audit specifications
//
// swagger:model v1AuditSpec
type V1AuditSpec struct {

	// Audit action message
	ActionMsg string `json:"actionMsg,omitempty"`

	// action type
	// Enum: [create update delete publish deploy]
	ActionType string `json:"actionType,omitempty"`

	// actor
	Actor *V1AuditActor `json:"actor,omitempty"`

	// Audit content message
	ContentMsg string `json:"contentMsg,omitempty"`

	// resource
	Resource *V1AuditResourceReference `json:"resource,omitempty"`

	// Audit user message
	UserMsg string `json:"userMsg,omitempty"`
}

// Validate validates this v1 audit spec
func (m *V1AuditSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1AuditSpecTypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["create","update","delete","publish","deploy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1AuditSpecTypeActionTypePropEnum = append(v1AuditSpecTypeActionTypePropEnum, v)
	}
}

const (

	// V1AuditSpecActionTypeCreate captures enum value "create"
	V1AuditSpecActionTypeCreate string = "create"

	// V1AuditSpecActionTypeUpdate captures enum value "update"
	V1AuditSpecActionTypeUpdate string = "update"

	// V1AuditSpecActionTypeDelete captures enum value "delete"
	V1AuditSpecActionTypeDelete string = "delete"

	// V1AuditSpecActionTypePublish captures enum value "publish"
	V1AuditSpecActionTypePublish string = "publish"

	// V1AuditSpecActionTypeDeploy captures enum value "deploy"
	V1AuditSpecActionTypeDeploy string = "deploy"
)

// prop value enum
func (m *V1AuditSpec) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1AuditSpecTypeActionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1AuditSpec) validateActionType(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionTypeEnum("actionType", "body", m.ActionType); err != nil {
		return err
	}

	return nil
}

func (m *V1AuditSpec) validateActor(formats strfmt.Registry) error {

	if swag.IsZero(m.Actor) { // not required
		return nil
	}

	if m.Actor != nil {
		if err := m.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actor")
			}
			return err
		}
	}

	return nil
}

func (m *V1AuditSpec) validateResource(formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AuditSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AuditSpec) UnmarshalBinary(b []byte) error {
	var res V1AuditSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
