// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterTemplateVariableClusterAssignment Cluster variable assignment information
//
// swagger:model v1ClusterTemplateVariableClusterAssignment
type V1ClusterTemplateVariableClusterAssignment struct {

	// Value assigned to the variable
	AssignedValue string `json:"assignedValue,omitempty"`

	// State of the variable assignment
	// Required: true
	// Enum: ["Pending","Assigned"]
	AssignmentState *string `json:"assignmentState"`

	// Cluster UID
	// Required: true
	UID *string `json:"uid"`

	// Current running value of the variable
	Value string `json:"value,omitempty"`
}

// Validate validates this v1 cluster template variable cluster assignment
func (m *V1ClusterTemplateVariableClusterAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignmentState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1ClusterTemplateVariableClusterAssignmentTypeAssignmentStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Assigned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterTemplateVariableClusterAssignmentTypeAssignmentStatePropEnum = append(v1ClusterTemplateVariableClusterAssignmentTypeAssignmentStatePropEnum, v)
	}
}

const (

	// V1ClusterTemplateVariableClusterAssignmentAssignmentStatePending captures enum value "Pending"
	V1ClusterTemplateVariableClusterAssignmentAssignmentStatePending string = "Pending"

	// V1ClusterTemplateVariableClusterAssignmentAssignmentStateAssigned captures enum value "Assigned"
	V1ClusterTemplateVariableClusterAssignmentAssignmentStateAssigned string = "Assigned"
)

// prop value enum
func (m *V1ClusterTemplateVariableClusterAssignment) validateAssignmentStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterTemplateVariableClusterAssignmentTypeAssignmentStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterTemplateVariableClusterAssignment) validateAssignmentState(formats strfmt.Registry) error {

	if err := validate.Required("assignmentState", "body", m.AssignmentState); err != nil {
		return err
	}

	// value enum
	if err := m.validateAssignmentStateEnum("assignmentState", "body", *m.AssignmentState); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterTemplateVariableClusterAssignment) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 cluster template variable cluster assignment based on context it is used
func (m *V1ClusterTemplateVariableClusterAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterTemplateVariableClusterAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterTemplateVariableClusterAssignment) UnmarshalBinary(b []byte) error {
	var res V1ClusterTemplateVariableClusterAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
