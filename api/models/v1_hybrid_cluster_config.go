// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1HybridClusterConfig v1 hybrid cluster config
//
// swagger:model v1HybridClusterConfig
type V1HybridClusterConfig struct {

	// Parent cluster uid. Provided for hybrid (child) clusters only.
	ClusterUID string `json:"clusterUid,omitempty"`

	// Flag differentiating if the cluster is an hybrid cluster or not. True for a cluster with hybrid mode enabled, false for the actual hybrid (child) clusters
	Enable bool `json:"enable,omitempty"`

	// References to hybrid (child) clusters deployed within the hybrid cluster
	HybridMachinePoolClusterRefs []*V1HybridPoolClusterRef `json:"hybridMachinePoolClusterRefs"`
}

// Validate validates this v1 hybrid cluster config
func (m *V1HybridClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHybridMachinePoolClusterRefs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1HybridClusterConfig) validateHybridMachinePoolClusterRefs(formats strfmt.Registry) error {

	if swag.IsZero(m.HybridMachinePoolClusterRefs) { // not required
		return nil
	}

	for i := 0; i < len(m.HybridMachinePoolClusterRefs); i++ {
		if swag.IsZero(m.HybridMachinePoolClusterRefs[i]) { // not required
			continue
		}

		if m.HybridMachinePoolClusterRefs[i] != nil {
			if err := m.HybridMachinePoolClusterRefs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hybridMachinePoolClusterRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1HybridClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1HybridClusterConfig) UnmarshalBinary(b []byte) error {
	var res V1HybridClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
