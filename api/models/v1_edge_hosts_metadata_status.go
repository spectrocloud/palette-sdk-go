// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1EdgeHostsMetadataStatus v1 edge hosts metadata status
//
// swagger:model v1EdgeHostsMetadataStatus
type V1EdgeHostsMetadataStatus struct {

	// health
	Health *V1EdgeHostHealth `json:"health,omitempty"`

	// Deprecated. Use inUseClustersRef
	InUseClusters []*V1ObjectEntity `json:"inUseClusters"`

	// in use clusters ref
	InUseClustersRef []*V1EdgeClusterObjectEntity `json:"inUseClustersRef"`

	// state
	State V1EdgeHostState `json:"state,omitempty"`
}

// Validate validates this v1 edge hosts metadata status
func (m *V1EdgeHostsMetadataStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInUseClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInUseClustersRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeHostsMetadataStatus) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *V1EdgeHostsMetadataStatus) validateInUseClusters(formats strfmt.Registry) error {

	if swag.IsZero(m.InUseClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.InUseClusters); i++ {
		if swag.IsZero(m.InUseClusters[i]) { // not required
			continue
		}

		if m.InUseClusters[i] != nil {
			if err := m.InUseClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inUseClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1EdgeHostsMetadataStatus) validateInUseClustersRef(formats strfmt.Registry) error {

	if swag.IsZero(m.InUseClustersRef) { // not required
		return nil
	}

	for i := 0; i < len(m.InUseClustersRef); i++ {
		if swag.IsZero(m.InUseClustersRef[i]) { // not required
			continue
		}

		if m.InUseClustersRef[i] != nil {
			if err := m.InUseClustersRef[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inUseClustersRef" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1EdgeHostsMetadataStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EdgeHostsMetadataStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EdgeHostsMetadataStatus) UnmarshalBinary(b []byte) error {
	var res V1EdgeHostsMetadataStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
