// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VsphereComputeCluster Vsphere compute cluster
//
// swagger:model v1VsphereComputeCluster
type V1VsphereComputeCluster struct {

	// datastores
	// Unique: true
	Datastores []string `json:"datastores"`

	// name
	Name string `json:"name,omitempty"`

	// networks
	// Unique: true
	Networks []string `json:"networks"`

	// resource pools
	// Unique: true
	ResourcePools []string `json:"resourcePools"`
}

// Validate validates this v1 vsphere compute cluster
func (m *V1VsphereComputeCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePools(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VsphereComputeCluster) validateDatastores(formats strfmt.Registry) error {
	if swag.IsZero(m.Datastores) { // not required
		return nil
	}

	if err := validate.UniqueItems("datastores", "body", m.Datastores); err != nil {
		return err
	}

	return nil
}

func (m *V1VsphereComputeCluster) validateNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	if err := validate.UniqueItems("networks", "body", m.Networks); err != nil {
		return err
	}

	return nil
}

func (m *V1VsphereComputeCluster) validateResourcePools(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePools) { // not required
		return nil
	}

	if err := validate.UniqueItems("resourcePools", "body", m.ResourcePools); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 vsphere compute cluster based on context it is used
func (m *V1VsphereComputeCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1VsphereComputeCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VsphereComputeCluster) UnmarshalBinary(b []byte) error {
	var res V1VsphereComputeCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
