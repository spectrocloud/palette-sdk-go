// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ClusterComplianceScanLogs Cluster compliance scan Logs
//
// swagger:model v1ClusterComplianceScanLogs
type V1ClusterComplianceScanLogs struct {

	// kube bench logs
	KubeBenchLogs []*V1ClusterScanLogKubeBench `json:"kubeBenchLogs"`

	// kube hunter logs
	KubeHunterLogs []*V1ClusterScanLogKubeHunter `json:"kubeHunterLogs"`

	// sonobuoy logs
	SonobuoyLogs []*V1ClusterScanLogSonobuoy `json:"sonobuoyLogs"`

	// syft logs
	SyftLogs []*V1ClusterScanLogSyft `json:"syftLogs"`
}

// Validate validates this v1 cluster compliance scan logs
func (m *V1ClusterComplianceScanLogs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubeBenchLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeHunterLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSonobuoyLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyftLogs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterComplianceScanLogs) validateKubeBenchLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.KubeBenchLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.KubeBenchLogs); i++ {
		if swag.IsZero(m.KubeBenchLogs[i]) { // not required
			continue
		}

		if m.KubeBenchLogs[i] != nil {
			if err := m.KubeBenchLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubeBenchLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterComplianceScanLogs) validateKubeHunterLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.KubeHunterLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.KubeHunterLogs); i++ {
		if swag.IsZero(m.KubeHunterLogs[i]) { // not required
			continue
		}

		if m.KubeHunterLogs[i] != nil {
			if err := m.KubeHunterLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubeHunterLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterComplianceScanLogs) validateSonobuoyLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.SonobuoyLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.SonobuoyLogs); i++ {
		if swag.IsZero(m.SonobuoyLogs[i]) { // not required
			continue
		}

		if m.SonobuoyLogs[i] != nil {
			if err := m.SonobuoyLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sonobuoyLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterComplianceScanLogs) validateSyftLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.SyftLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.SyftLogs); i++ {
		if swag.IsZero(m.SyftLogs[i]) { // not required
			continue
		}

		if m.SyftLogs[i] != nil {
			if err := m.SyftLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("syftLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterComplianceScanLogs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterComplianceScanLogs) UnmarshalBinary(b []byte) error {
	var res V1ClusterComplianceScanLogs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
