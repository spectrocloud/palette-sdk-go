// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1SearchFilterIntegerOperator v1 search filter integer operator
//
// swagger:model v1SearchFilterIntegerOperator
type V1SearchFilterIntegerOperator string

const (

	// V1SearchFilterIntegerOperatorEq captures enum value "eq"
	V1SearchFilterIntegerOperatorEq V1SearchFilterIntegerOperator = "eq"

	// V1SearchFilterIntegerOperatorGt captures enum value "gt"
	V1SearchFilterIntegerOperatorGt V1SearchFilterIntegerOperator = "gt"

	// V1SearchFilterIntegerOperatorGte captures enum value "gte"
	V1SearchFilterIntegerOperatorGte V1SearchFilterIntegerOperator = "gte"

	// V1SearchFilterIntegerOperatorLt captures enum value "lt"
	V1SearchFilterIntegerOperatorLt V1SearchFilterIntegerOperator = "lt"

	// V1SearchFilterIntegerOperatorLte captures enum value "lte"
	V1SearchFilterIntegerOperatorLte V1SearchFilterIntegerOperator = "lte"
)

// for schema
var v1SearchFilterIntegerOperatorEnum []interface{}

func init() {
	var res []V1SearchFilterIntegerOperator
	if err := json.Unmarshal([]byte(`["eq","gt","gte","lt","lte"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1SearchFilterIntegerOperatorEnum = append(v1SearchFilterIntegerOperatorEnum, v)
	}
}

func (m V1SearchFilterIntegerOperator) validateV1SearchFilterIntegerOperatorEnum(path, location string, value V1SearchFilterIntegerOperator) error {
	if err := validate.EnumCase(path, location, value, v1SearchFilterIntegerOperatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 search filter integer operator
func (m V1SearchFilterIntegerOperator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1SearchFilterIntegerOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
