// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PackEntity Pack object
//
// swagger:model v1PackEntity
type V1PackEntity struct {

	// Pack layer
	Layer string `json:"layer,omitempty"`

	// Pack name
	// Required: true
	Name *string `json:"name"`

	// Pack tag
	Tag string `json:"tag,omitempty"`

	// type
	Type V1PackType `json:"type,omitempty"`

	// Pack uid
	// Required: true
	UID *string `json:"uid"`

	// values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values
	Values string `json:"values,omitempty"`
}

// Validate validates this v1 pack entity
func (m *V1PackEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PackEntity) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1PackEntity) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *V1PackEntity) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PackEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PackEntity) UnmarshalBinary(b []byte) error {
	var res V1PackEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
