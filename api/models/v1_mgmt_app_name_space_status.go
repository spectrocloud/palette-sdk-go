// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MgmtAppNameSpaceStatus v1 mgmt app name space status
//
// swagger:model v1MgmtAppNameSpaceStatus
type V1MgmtAppNameSpaceStatus struct {

	// cron jobs
	CronJobs map[string]V1MgmtAppCronJobStatus `json:"cronJobs,omitempty"`

	// deployments
	Deployments map[string]V1MgmtAppObjectStatus `json:"deployments,omitempty"`

	// is healthy
	IsHealthy bool `json:"isHealthy"`

	// messages
	Messages []string `json:"messages"`

	// stateful sets
	StatefulSets map[string]V1MgmtAppObjectStatus `json:"statefulSets,omitempty"`
}

// Validate validates this v1 mgmt app name space status
func (m *V1MgmtAppNameSpaceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCronJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatefulSets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MgmtAppNameSpaceStatus) validateCronJobs(formats strfmt.Registry) error {

	if swag.IsZero(m.CronJobs) { // not required
		return nil
	}

	for k := range m.CronJobs {

		if err := validate.Required("cronJobs"+"."+k, "body", m.CronJobs[k]); err != nil {
			return err
		}
		if val, ok := m.CronJobs[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1MgmtAppNameSpaceStatus) validateDeployments(formats strfmt.Registry) error {

	if swag.IsZero(m.Deployments) { // not required
		return nil
	}

	for k := range m.Deployments {

		if err := validate.Required("deployments"+"."+k, "body", m.Deployments[k]); err != nil {
			return err
		}
		if val, ok := m.Deployments[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1MgmtAppNameSpaceStatus) validateStatefulSets(formats strfmt.Registry) error {

	if swag.IsZero(m.StatefulSets) { // not required
		return nil
	}

	for k := range m.StatefulSets {

		if err := validate.Required("statefulSets"+"."+k, "body", m.StatefulSets[k]); err != nil {
			return err
		}
		if val, ok := m.StatefulSets[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MgmtAppNameSpaceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MgmtAppNameSpaceStatus) UnmarshalBinary(b []byte) error {
	var res V1MgmtAppNameSpaceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
