// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1TierPrice tier price
//
// swagger:model v1TierPrice
type V1TierPrice struct {

	// alloy pricing
	// Unique: true
	AlloyPricing []*V1PriceRange `json:"alloyPricing"`

	// pure pricing
	// Unique: true
	PurePricing []*V1PriceRange `json:"purePricing"`
}

// Validate validates this v1 tier price
func (m *V1TierPrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlloyPricing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurePricing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TierPrice) validateAlloyPricing(formats strfmt.Registry) error {

	if swag.IsZero(m.AlloyPricing) { // not required
		return nil
	}

	if err := validate.UniqueItems("alloyPricing", "body", m.AlloyPricing); err != nil {
		return err
	}

	for i := 0; i < len(m.AlloyPricing); i++ {
		if swag.IsZero(m.AlloyPricing[i]) { // not required
			continue
		}

		if m.AlloyPricing[i] != nil {
			if err := m.AlloyPricing[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alloyPricing" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1TierPrice) validatePurePricing(formats strfmt.Registry) error {

	if swag.IsZero(m.PurePricing) { // not required
		return nil
	}

	if err := validate.UniqueItems("purePricing", "body", m.PurePricing); err != nil {
		return err
	}

	for i := 0; i < len(m.PurePricing); i++ {
		if swag.IsZero(m.PurePricing[i]) { // not required
			continue
		}

		if m.PurePricing[i] != nil {
			if err := m.PurePricing[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("purePricing" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TierPrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TierPrice) UnmarshalBinary(b []byte) error {
	var res V1TierPrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
