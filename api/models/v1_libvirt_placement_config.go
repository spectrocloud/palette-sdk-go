// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1LibvirtPlacementConfig v1 libvirt placement config
//
// swagger:model v1LibvirtPlacementConfig
type V1LibvirtPlacementConfig struct {

	// DataStoragePool is the storage pool from which additional disks are assigned
	DataStoragePool string `json:"dataStoragePool,omitempty"`

	// GPU Devices is the list of LibvirtHost GPU devices, to be used for this placement
	GpuDevices []*V1GPUDeviceSpec `json:"gpuDevices"`

	// HostAddress is a FQDN or IP address of the LibvirtHost
	// Required: true
	HostAddress *string `json:"hostAddress"`

	// HostIdentity is the identity to access the LibvirtHost
	HostIdentity *V1LibvirtHostIdentity `json:"hostIdentity,omitempty"`

	// HostUid is the ID of the LibvirtHost
	// Required: true
	HostUID *string `json:"hostUid"`

	// Networks defines the network specifications of the vms in the machine pool
	// Required: true
	Networks []*V1LibvirtNetworkSpec `json:"networks"`

	// SourceStoragePool is the storage pool for the vm image
	// Required: true
	SourceStoragePool *string `json:"sourceStoragePool"`

	// TargetStoragePool is the optional storage pool from which additional disks are assigned. If not specified, the sourceStoragePool is also used as the targetStoragePool
	TargetStoragePool string `json:"targetStoragePool,omitempty"`
}

// Validate validates this v1 libvirt placement config
func (m *V1LibvirtPlacementConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGpuDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceStoragePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1LibvirtPlacementConfig) validateGpuDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.GpuDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.GpuDevices); i++ {
		if swag.IsZero(m.GpuDevices[i]) { // not required
			continue
		}

		if m.GpuDevices[i] != nil {
			if err := m.GpuDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpuDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1LibvirtPlacementConfig) validateHostAddress(formats strfmt.Registry) error {

	if err := validate.Required("hostAddress", "body", m.HostAddress); err != nil {
		return err
	}

	return nil
}

func (m *V1LibvirtPlacementConfig) validateHostIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.HostIdentity) { // not required
		return nil
	}

	if m.HostIdentity != nil {
		if err := m.HostIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostIdentity")
			}
			return err
		}
	}

	return nil
}

func (m *V1LibvirtPlacementConfig) validateHostUID(formats strfmt.Registry) error {

	if err := validate.Required("hostUid", "body", m.HostUID); err != nil {
		return err
	}

	return nil
}

func (m *V1LibvirtPlacementConfig) validateNetworks(formats strfmt.Registry) error {

	if err := validate.Required("networks", "body", m.Networks); err != nil {
		return err
	}

	for i := 0; i < len(m.Networks); i++ {
		if swag.IsZero(m.Networks[i]) { // not required
			continue
		}

		if m.Networks[i] != nil {
			if err := m.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1LibvirtPlacementConfig) validateSourceStoragePool(formats strfmt.Registry) error {

	if err := validate.Required("sourceStoragePool", "body", m.SourceStoragePool); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1LibvirtPlacementConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1LibvirtPlacementConfig) UnmarshalBinary(b []byte) error {
	var res V1LibvirtPlacementConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
