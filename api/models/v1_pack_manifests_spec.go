// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1PackManifestsSpec Pack manifests spec
//
// swagger:model v1PackManifestsSpec
type V1PackManifestsSpec struct {

	// Pack add-on type such as logging, monitoring, security etc
	AddonType string `json:"addonType,omitempty"`

	// Pack annotations is used to allow pack to add more arbitrary configurations
	Annotations map[string]string `json:"annotations,omitempty"`

	// Pack supported cloud types
	CloudTypes []string `json:"cloudTypes"`

	// Pack digest
	Digest string `json:"digest,omitempty"`

	// Pack display name
	DisplayName string `json:"displayName,omitempty"`

	// Pack end of life, date format: yyyy-MM-dd
	Eol string `json:"eol,omitempty"`

	// Pack group
	Group string `json:"group,omitempty"`

	// layer
	Layer V1PackLayer `json:"layer,omitempty"`

	// Pack logo url
	LogoURL string `json:"logoUrl,omitempty"`

	// Pack manifests are additional content as part of the cluster profile
	Manifests []*V1ManifestSummary `json:"manifests"`

	// Pack name
	Name string `json:"name,omitempty"`

	// Pack presets are the set of configurations applied on user selection of presets
	Presets []*V1PackPreset `json:"presets"`

	// Pack registry uid
	RegistryUID string `json:"registryUid,omitempty"`

	// Pack schema contains constraints such as data type, format, hints for the pack values
	Schema []*V1PackSchema `json:"schema"`

	// type
	Type *V1PackType `json:"type,omitempty"`

	// Pack values
	Values string `json:"values,omitempty"`

	// Pack version
	Version string `json:"version,omitempty"`
}

// Validate validates this v1 pack manifests spec
func (m *V1PackManifestsSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManifests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PackManifestsSpec) validateLayer(formats strfmt.Registry) error {
	if swag.IsZero(m.Layer) { // not required
		return nil
	}

	if err := m.Layer.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("layer")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("layer")
		}
		return err
	}

	return nil
}

func (m *V1PackManifestsSpec) validateManifests(formats strfmt.Registry) error {
	if swag.IsZero(m.Manifests) { // not required
		return nil
	}

	for i := 0; i < len(m.Manifests); i++ {
		if swag.IsZero(m.Manifests[i]) { // not required
			continue
		}

		if m.Manifests[i] != nil {
			if err := m.Manifests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("manifests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("manifests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PackManifestsSpec) validatePresets(formats strfmt.Registry) error {
	if swag.IsZero(m.Presets) { // not required
		return nil
	}

	for i := 0; i < len(m.Presets); i++ {
		if swag.IsZero(m.Presets[i]) { // not required
			continue
		}

		if m.Presets[i] != nil {
			if err := m.Presets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("presets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("presets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PackManifestsSpec) validateSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.Schema) { // not required
		return nil
	}

	for i := 0; i < len(m.Schema); i++ {
		if swag.IsZero(m.Schema[i]) { // not required
			continue
		}

		if m.Schema[i] != nil {
			if err := m.Schema[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schema" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schema" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PackManifestsSpec) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 pack manifests spec based on the context it is used
func (m *V1PackManifestsSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLayer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManifests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePresets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PackManifestsSpec) contextValidateLayer(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Layer) { // not required
		return nil
	}

	if err := m.Layer.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("layer")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("layer")
		}
		return err
	}

	return nil
}

func (m *V1PackManifestsSpec) contextValidateManifests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Manifests); i++ {

		if m.Manifests[i] != nil {

			if swag.IsZero(m.Manifests[i]) { // not required
				return nil
			}

			if err := m.Manifests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("manifests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("manifests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PackManifestsSpec) contextValidatePresets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Presets); i++ {

		if m.Presets[i] != nil {

			if swag.IsZero(m.Presets[i]) { // not required
				return nil
			}

			if err := m.Presets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("presets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("presets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PackManifestsSpec) contextValidateSchema(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Schema); i++ {

		if m.Schema[i] != nil {

			if swag.IsZero(m.Schema[i]) { // not required
				return nil
			}

			if err := m.Schema[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schema" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schema" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PackManifestsSpec) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PackManifestsSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PackManifestsSpec) UnmarshalBinary(b []byte) error {
	var res V1PackManifestsSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
