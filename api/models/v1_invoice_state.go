// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1InvoiceState Invoice state object
//
// swagger:model v1InvoiceState
type V1InvoiceState struct {

	// Payment status message
	PaymentMsg string `json:"paymentMsg,omitempty"`

	// state
	// Enum: ["Paid","PaymentPending","PaymentInProgress","PaymentFailed"]
	State string `json:"state,omitempty"`

	// Time on which the state has been updated
	// Format: date-time
	Timestamp V1Time `json:"timestamp,omitempty"`
}

// Validate validates this v1 invoice state
func (m *V1InvoiceState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1InvoiceStateTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Paid","PaymentPending","PaymentInProgress","PaymentFailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1InvoiceStateTypeStatePropEnum = append(v1InvoiceStateTypeStatePropEnum, v)
	}
}

const (

	// V1InvoiceStateStatePaid captures enum value "Paid"
	V1InvoiceStateStatePaid string = "Paid"

	// V1InvoiceStateStatePaymentPending captures enum value "PaymentPending"
	V1InvoiceStateStatePaymentPending string = "PaymentPending"

	// V1InvoiceStateStatePaymentInProgress captures enum value "PaymentInProgress"
	V1InvoiceStateStatePaymentInProgress string = "PaymentInProgress"

	// V1InvoiceStateStatePaymentFailed captures enum value "PaymentFailed"
	V1InvoiceStateStatePaymentFailed string = "PaymentFailed"
)

// prop value enum
func (m *V1InvoiceState) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1InvoiceStateTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1InvoiceState) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *V1InvoiceState) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := m.Timestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timestamp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1 invoice state based on the context it is used
func (m *V1InvoiceState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1InvoiceState) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := m.Timestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1InvoiceState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1InvoiceState) UnmarshalBinary(b []byte) error {
	var res V1InvoiceState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
