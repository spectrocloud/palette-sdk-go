// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ArchType v1 arch type
//
// swagger:model v1ArchType
type V1ArchType string

func NewV1ArchType(value V1ArchType) *V1ArchType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1ArchType.
func (m V1ArchType) Pointer() *V1ArchType {
	return &m
}

const (

	// V1ArchTypeAmd64 captures enum value "amd64"
	V1ArchTypeAmd64 V1ArchType = "amd64"

	// V1ArchTypeArm64 captures enum value "arm64"
	V1ArchTypeArm64 V1ArchType = "arm64"
)

// for schema
var v1ArchTypeEnum []interface{}

func init() {
	var res []V1ArchType
	if err := json.Unmarshal([]byte(`["amd64","arm64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ArchTypeEnum = append(v1ArchTypeEnum, v)
	}
}

func (m V1ArchType) validateV1ArchTypeEnum(path, location string, value V1ArchType) error {
	if err := validate.EnumCase(path, location, value, v1ArchTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 arch type
func (m V1ArchType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ArchTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 arch type based on context it is used
func (m V1ArchType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
