// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1VMDataVolumeSourceVDDK DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source
//
// swagger:model v1VmDataVolumeSourceVDDK
type V1VMDataVolumeSourceVDDK struct {

	// BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi
	BackingFile string `json:"backingFile,omitempty"`

	// InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map
	InitImageURL string `json:"initImageURL,omitempty"`

	// SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host
	SecretRef string `json:"secretRef,omitempty"`

	// Thumbprint is the certificate thumbprint of the vCenter or ESXi host
	Thumbprint string `json:"thumbprint,omitempty"`

	// URL is the URL of the vCenter or ESXi host with the VM to migrate
	URL string `json:"url,omitempty"`

	// UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this v1 Vm data volume source v d d k
func (m *V1VMDataVolumeSourceVDDK) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v1 Vm data volume source v d d k based on context it is used
func (m *V1VMDataVolumeSourceVDDK) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1VMDataVolumeSourceVDDK) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMDataVolumeSourceVDDK) UnmarshalBinary(b []byte) error {
	var res V1VMDataVolumeSourceVDDK
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
