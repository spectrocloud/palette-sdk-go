// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1TransferJob transfer job details
//
// swagger:model v1TransferJob
type V1TransferJob struct {

	// finish time
	// Format: date-time
	FinishTime V1Time `json:"finishTime,omitempty"`

	// folder
	Folder string `json:"folder,omitempty"`

	// is completed
	IsCompleted bool `json:"isCompleted,omitempty"`

	// message
	Message []string `json:"message"`

	// start time
	// Format: date-time
	StartTime V1Time `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// status
	Status []string `json:"status"`
}

// Validate validates this v1 transfer job
func (m *V1TransferJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TransferJob) validateFinishTime(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishTime) { // not required
		return nil
	}

	if err := m.FinishTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("finishTime")
		}
		return err
	}

	return nil
}

func (m *V1TransferJob) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := m.StartTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startTime")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TransferJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TransferJob) UnmarshalBinary(b []byte) error {
	var res V1TransferJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
