// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SpectroClusterPackCondition v1 spectro cluster pack condition
//
// swagger:model v1SpectroClusterPackCondition
type V1SpectroClusterPackCondition struct {

	// message
	Message string `json:"message,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// type
	// Enum: ["ReadyForInstall","Installed","Ready","Error","UpgradeAvailable","WaitingForOtherLayers"]
	Type string `json:"type,omitempty"`
}

// Validate validates this v1 spectro cluster pack condition
func (m *V1SpectroClusterPackCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1SpectroClusterPackConditionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ReadyForInstall","Installed","Ready","Error","UpgradeAvailable","WaitingForOtherLayers"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1SpectroClusterPackConditionTypeTypePropEnum = append(v1SpectroClusterPackConditionTypeTypePropEnum, v)
	}
}

const (

	// V1SpectroClusterPackConditionTypeReadyForInstall captures enum value "ReadyForInstall"
	V1SpectroClusterPackConditionTypeReadyForInstall string = "ReadyForInstall"

	// V1SpectroClusterPackConditionTypeInstalled captures enum value "Installed"
	V1SpectroClusterPackConditionTypeInstalled string = "Installed"

	// V1SpectroClusterPackConditionTypeReady captures enum value "Ready"
	V1SpectroClusterPackConditionTypeReady string = "Ready"

	// V1SpectroClusterPackConditionTypeError captures enum value "Error"
	V1SpectroClusterPackConditionTypeError string = "Error"

	// V1SpectroClusterPackConditionTypeUpgradeAvailable captures enum value "UpgradeAvailable"
	V1SpectroClusterPackConditionTypeUpgradeAvailable string = "UpgradeAvailable"

	// V1SpectroClusterPackConditionTypeWaitingForOtherLayers captures enum value "WaitingForOtherLayers"
	V1SpectroClusterPackConditionTypeWaitingForOtherLayers string = "WaitingForOtherLayers"
)

// prop value enum
func (m *V1SpectroClusterPackCondition) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1SpectroClusterPackConditionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1SpectroClusterPackCondition) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 spectro cluster pack condition based on context it is used
func (m *V1SpectroClusterPackCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterPackCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterPackCondition) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterPackCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
