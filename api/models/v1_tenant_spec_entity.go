// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1TenantSpecEntity Tenant Entity input
//
// swagger:model v1TenantSpecEntity
type V1TenantSpecEntity struct {

	// address
	Address *V1Address `json:"address,omitempty"`

	// auth type
	AuthType string `json:"authType,omitempty"`

	// email Id
	EmailID string `json:"emailId,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// login mode
	// Enum: [dev devops]
	LoginMode *string `json:"loginMode,omitempty"`

	// org email Id
	OrgEmailID string `json:"orgEmailId,omitempty"`

	// org name
	OrgName string `json:"orgName,omitempty"`

	// roles
	// Unique: true
	Roles []string `json:"roles"`

	// sso app
	SsoApp string `json:"ssoApp,omitempty"`
}

// Validate validates this v1 tenant spec entity
func (m *V1TenantSpecEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TenantSpecEntity) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

var v1TenantSpecEntityTypeLoginModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dev","devops"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1TenantSpecEntityTypeLoginModePropEnum = append(v1TenantSpecEntityTypeLoginModePropEnum, v)
	}
}

const (

	// V1TenantSpecEntityLoginModeDev captures enum value "dev"
	V1TenantSpecEntityLoginModeDev string = "dev"

	// V1TenantSpecEntityLoginModeDevops captures enum value "devops"
	V1TenantSpecEntityLoginModeDevops string = "devops"
)

// prop value enum
func (m *V1TenantSpecEntity) validateLoginModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1TenantSpecEntityTypeLoginModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1TenantSpecEntity) validateLoginMode(formats strfmt.Registry) error {

	if swag.IsZero(m.LoginMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateLoginModeEnum("loginMode", "body", *m.LoginMode); err != nil {
		return err
	}

	return nil
}

func (m *V1TenantSpecEntity) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if err := validate.UniqueItems("roles", "body", m.Roles); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TenantSpecEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TenantSpecEntity) UnmarshalBinary(b []byte) error {
	var res V1TenantSpecEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
