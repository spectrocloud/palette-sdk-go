// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VirtualMachineSnapshotSpec VirtualMachineSnapshotSpec is the spec for a VirtualMachineSnapshot resource
//
// swagger:model v1VirtualMachineSnapshotSpec
type V1VirtualMachineSnapshotSpec struct {

	// deletion policy
	DeletionPolicy string `json:"deletionPolicy,omitempty"`

	// failure deadline
	FailureDeadline V1VMDuration `json:"failureDeadline,omitempty"`

	// source
	// Required: true
	Source *V1VMTypedLocalObjectReference `json:"source"`
}

// Validate validates this v1 virtual machine snapshot spec
func (m *V1VirtualMachineSnapshotSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VirtualMachineSnapshotSpec) validateFailureDeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.FailureDeadline) { // not required
		return nil
	}

	if err := m.FailureDeadline.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("failureDeadline")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("failureDeadline")
		}
		return err
	}

	return nil
}

func (m *V1VirtualMachineSnapshotSpec) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 virtual machine snapshot spec based on the context it is used
func (m *V1VirtualMachineSnapshotSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFailureDeadline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VirtualMachineSnapshotSpec) contextValidateFailureDeadline(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.FailureDeadline) { // not required
		return nil
	}

	if err := m.FailureDeadline.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("failureDeadline")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("failureDeadline")
		}
		return err
	}

	return nil
}

func (m *V1VirtualMachineSnapshotSpec) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VirtualMachineSnapshotSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VirtualMachineSnapshotSpec) UnmarshalBinary(b []byte) error {
	var res V1VirtualMachineSnapshotSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
