// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1TencentMachineSpec Tencent cloud VM definition spec
//
// swagger:model v1TencentMachineSpec
type V1TencentMachineSpec struct {

	// dns name
	DNSName string `json:"dnsName,omitempty"`

	// image Id
	// Required: true
	ImageID *string `json:"imageId"`

	// instance type
	// Required: true
	InstanceType *string `json:"instanceType"`

	// nics
	// Required: true
	Nics []*V1TencentNic `json:"nics"`

	// security groups
	SecurityGroups []string `json:"securityGroups"`

	// subnet Id
	SubnetID string `json:"subnetId,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// vpc Id
	VpcID string `json:"vpcId,omitempty"`

	// zone Id
	ZoneID string `json:"zoneId,omitempty"`
}

// Validate validates this v1 tencent machine spec
func (m *V1TencentMachineSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TencentMachineSpec) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("imageId", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *V1TencentMachineSpec) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	return nil
}

func (m *V1TencentMachineSpec) validateNics(formats strfmt.Registry) error {

	if err := validate.Required("nics", "body", m.Nics); err != nil {
		return err
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TencentMachineSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TencentMachineSpec) UnmarshalBinary(b []byte) error {
	var res V1TencentMachineSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
