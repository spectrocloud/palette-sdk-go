// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterTemplateVariable Cluster template variable
//
// swagger:model v1ClusterTemplateVariable
type V1ClusterTemplateVariable struct {

	// Assignment strategy for the variable
	// Enum: ["all","cluster"]
	AssignStrategy string `json:"assignStrategy,omitempty"`

	// List of clusters with the specific variable
	Clusters []*V1ClusterVariableValue `json:"clusters"`

	// Name of the variable
	Name string `json:"name,omitempty"`

	// Value of the variable to be applied to all clusters launched from this template. This value is specified when assignStrategy is set to all
	Value string `json:"value,omitempty"`
}

// Validate validates this v1 cluster template variable
func (m *V1ClusterTemplateVariable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1ClusterTemplateVariableTypeAssignStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","cluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterTemplateVariableTypeAssignStrategyPropEnum = append(v1ClusterTemplateVariableTypeAssignStrategyPropEnum, v)
	}
}

const (

	// V1ClusterTemplateVariableAssignStrategyAll captures enum value "all"
	V1ClusterTemplateVariableAssignStrategyAll string = "all"

	// V1ClusterTemplateVariableAssignStrategyCluster captures enum value "cluster"
	V1ClusterTemplateVariableAssignStrategyCluster string = "cluster"
)

// prop value enum
func (m *V1ClusterTemplateVariable) validateAssignStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterTemplateVariableTypeAssignStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterTemplateVariable) validateAssignStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateAssignStrategyEnum("assignStrategy", "body", m.AssignStrategy); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterTemplateVariable) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 cluster template variable based on the context it is used
func (m *V1ClusterTemplateVariable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterTemplateVariable) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {

			if swag.IsZero(m.Clusters[i]) { // not required
				return nil
			}

			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterTemplateVariable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterTemplateVariable) UnmarshalBinary(b []byte) error {
	var res V1ClusterTemplateVariable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
