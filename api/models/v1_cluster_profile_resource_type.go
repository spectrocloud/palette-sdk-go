// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ClusterProfileResourceType Filter cluster profiles by target resource type - 'spectrocluster' for profiles suitable to launch clusters, 'clustertemplate' for profiles suitable to create/edit cluster template
//
// swagger:model v1ClusterProfileResourceType
type V1ClusterProfileResourceType string

func NewV1ClusterProfileResourceType(value V1ClusterProfileResourceType) *V1ClusterProfileResourceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1ClusterProfileResourceType.
func (m V1ClusterProfileResourceType) Pointer() *V1ClusterProfileResourceType {
	return &m
}

const (

	// V1ClusterProfileResourceTypeSpectrocluster captures enum value "spectrocluster"
	V1ClusterProfileResourceTypeSpectrocluster V1ClusterProfileResourceType = "spectrocluster"

	// V1ClusterProfileResourceTypeClustertemplate captures enum value "clustertemplate"
	V1ClusterProfileResourceTypeClustertemplate V1ClusterProfileResourceType = "clustertemplate"
)

// for schema
var v1ClusterProfileResourceTypeEnum []interface{}

func init() {
	var res []V1ClusterProfileResourceType
	if err := json.Unmarshal([]byte(`["spectrocluster","clustertemplate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterProfileResourceTypeEnum = append(v1ClusterProfileResourceTypeEnum, v)
	}
}

func (m V1ClusterProfileResourceType) validateV1ClusterProfileResourceTypeEnum(path, location string, value V1ClusterProfileResourceType) error {
	if err := validate.EnumCase(path, location, value, v1ClusterProfileResourceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 cluster profile resource type
func (m V1ClusterProfileResourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ClusterProfileResourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 cluster profile resource type based on context it is used
func (m V1ClusterProfileResourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
