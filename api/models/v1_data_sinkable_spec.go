// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1DataSinkableSpec v1 data sinkable spec
//
// swagger:model v1DataSinkableSpec
type V1DataSinkableSpec struct {

	// cloud watch
	CloudWatch *V1CloudWatch `json:"cloudWatch,omitempty"`

	// type
	// Enum: ["cloudwatch"]
	Type string `json:"type,omitempty"`
}

// Validate validates this v1 data sinkable spec
func (m *V1DataSinkableSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudWatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DataSinkableSpec) validateCloudWatch(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudWatch) { // not required
		return nil
	}

	if m.CloudWatch != nil {
		if err := m.CloudWatch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudWatch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudWatch")
			}
			return err
		}
	}

	return nil
}

var v1DataSinkableSpecTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cloudwatch"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1DataSinkableSpecTypeTypePropEnum = append(v1DataSinkableSpecTypeTypePropEnum, v)
	}
}

const (

	// V1DataSinkableSpecTypeCloudwatch captures enum value "cloudwatch"
	V1DataSinkableSpecTypeCloudwatch string = "cloudwatch"
)

// prop value enum
func (m *V1DataSinkableSpec) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1DataSinkableSpecTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1DataSinkableSpec) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 data sinkable spec based on the context it is used
func (m *V1DataSinkableSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudWatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DataSinkableSpec) contextValidateCloudWatch(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudWatch != nil {

		if swag.IsZero(m.CloudWatch) { // not required
			return nil
		}

		if err := m.CloudWatch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudWatch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudWatch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1DataSinkableSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1DataSinkableSpec) UnmarshalBinary(b []byte) error {
	var res V1DataSinkableSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
