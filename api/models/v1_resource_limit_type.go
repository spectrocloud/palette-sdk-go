// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ResourceLimitType v1 resource limit type
//
// swagger:model v1ResourceLimitType
type V1ResourceLimitType string

func NewV1ResourceLimitType(value V1ResourceLimitType) *V1ResourceLimitType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1ResourceLimitType.
func (m V1ResourceLimitType) Pointer() *V1ResourceLimitType {
	return &m
}

const (

	// V1ResourceLimitTypeUser captures enum value "user"
	V1ResourceLimitTypeUser V1ResourceLimitType = "user"

	// V1ResourceLimitTypeProject captures enum value "project"
	V1ResourceLimitTypeProject V1ResourceLimitType = "project"

	// V1ResourceLimitTypeAPIKey captures enum value "apiKey"
	V1ResourceLimitTypeAPIKey V1ResourceLimitType = "apiKey"

	// V1ResourceLimitTypeTeam captures enum value "team"
	V1ResourceLimitTypeTeam V1ResourceLimitType = "team"

	// V1ResourceLimitTypeRole captures enum value "role"
	V1ResourceLimitTypeRole V1ResourceLimitType = "role"

	// V1ResourceLimitTypeCloudaccount captures enum value "cloudaccount"
	V1ResourceLimitTypeCloudaccount V1ResourceLimitType = "cloudaccount"

	// V1ResourceLimitTypeClusterprofile captures enum value "clusterprofile"
	V1ResourceLimitTypeClusterprofile V1ResourceLimitType = "clusterprofile"

	// V1ResourceLimitTypeWorkspace captures enum value "workspace"
	V1ResourceLimitTypeWorkspace V1ResourceLimitType = "workspace"

	// V1ResourceLimitTypeRegistry captures enum value "registry"
	V1ResourceLimitTypeRegistry V1ResourceLimitType = "registry"

	// V1ResourceLimitTypePrivategateway captures enum value "privategateway"
	V1ResourceLimitTypePrivategateway V1ResourceLimitType = "privategateway"

	// V1ResourceLimitTypeLocation captures enum value "location"
	V1ResourceLimitTypeLocation V1ResourceLimitType = "location"

	// V1ResourceLimitTypeCertificate captures enum value "certificate"
	V1ResourceLimitTypeCertificate V1ResourceLimitType = "certificate"

	// V1ResourceLimitTypeMacro captures enum value "macro"
	V1ResourceLimitTypeMacro V1ResourceLimitType = "macro"

	// V1ResourceLimitTypeSshkey captures enum value "sshkey"
	V1ResourceLimitTypeSshkey V1ResourceLimitType = "sshkey"

	// V1ResourceLimitTypeAlert captures enum value "alert"
	V1ResourceLimitTypeAlert V1ResourceLimitType = "alert"

	// V1ResourceLimitTypeSpectrocluster captures enum value "spectrocluster"
	V1ResourceLimitTypeSpectrocluster V1ResourceLimitType = "spectrocluster"

	// V1ResourceLimitTypeEdgehost captures enum value "edgehost"
	V1ResourceLimitTypeEdgehost V1ResourceLimitType = "edgehost"

	// V1ResourceLimitTypeAppprofile captures enum value "appprofile"
	V1ResourceLimitTypeAppprofile V1ResourceLimitType = "appprofile"

	// V1ResourceLimitTypeAppdeployment captures enum value "appdeployment"
	V1ResourceLimitTypeAppdeployment V1ResourceLimitType = "appdeployment"

	// V1ResourceLimitTypeEdgetoken captures enum value "edgetoken"
	V1ResourceLimitTypeEdgetoken V1ResourceLimitType = "edgetoken"

	// V1ResourceLimitTypeClustergroup captures enum value "clustergroup"
	V1ResourceLimitTypeClustergroup V1ResourceLimitType = "clustergroup"

	// V1ResourceLimitTypeFilter captures enum value "filter"
	V1ResourceLimitTypeFilter V1ResourceLimitType = "filter"

	// V1ResourceLimitTypeSystemadmin captures enum value "systemadmin"
	V1ResourceLimitTypeSystemadmin V1ResourceLimitType = "systemadmin"

	// V1ResourceLimitTypeSpcpolicy captures enum value "spcpolicy"
	V1ResourceLimitTypeSpcpolicy V1ResourceLimitType = "spcpolicy"

	// V1ResourceLimitTypeClustertemplate captures enum value "clustertemplate"
	V1ResourceLimitTypeClustertemplate V1ResourceLimitType = "clustertemplate"
)

// for schema
var v1ResourceLimitTypeEnum []interface{}

func init() {
	var res []V1ResourceLimitType
	if err := json.Unmarshal([]byte(`["user","project","apiKey","team","role","cloudaccount","clusterprofile","workspace","registry","privategateway","location","certificate","macro","sshkey","alert","spectrocluster","edgehost","appprofile","appdeployment","edgetoken","clustergroup","filter","systemadmin","spcpolicy","clustertemplate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ResourceLimitTypeEnum = append(v1ResourceLimitTypeEnum, v)
	}
}

func (m V1ResourceLimitType) validateV1ResourceLimitTypeEnum(path, location string, value V1ResourceLimitType) error {
	if err := validate.EnumCase(path, location, value, v1ResourceLimitTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 resource limit type
func (m V1ResourceLimitType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ResourceLimitTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 resource limit type based on context it is used
func (m V1ResourceLimitType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
