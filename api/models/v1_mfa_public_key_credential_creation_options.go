// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1MfaPublicKeyCredentialCreationOptions v1 mfa public key credential creation options
//
// swagger:model v1MfaPublicKeyCredentialCreationOptions
type V1MfaPublicKeyCredentialCreationOptions struct {

	// attestation
	Attestation V1MfaConveyancePreference `json:"attestation,omitempty"`

	// authenticator selection
	AuthenticatorSelection *V1MfaAuthenticatorSelection `json:"authenticatorSelection,omitempty"`

	// challenge
	Challenge URLEncodedBase64 `json:"challenge,omitempty"`

	// exclude credentials
	ExcludeCredentials []*V1MfaCredentialDescriptor `json:"excludeCredentials"`

	// extensions
	Extensions V1MfaAuthenticationExtensions `json:"extensions,omitempty"`

	// pub key cred params
	PubKeyCredParams []*V1MfaCredentialParameter `json:"pubKeyCredParams"`

	// rp
	Rp *V1MfaRelyingPartyEntity `json:"rp,omitempty"`

	// timeout
	Timeout int64 `json:"timeout,omitempty"`

	// user
	User *V1MfaUserEntity `json:"user,omitempty"`
}

// Validate validates this v1 mfa public key credential creation options
func (m *V1MfaPublicKeyCredentialCreationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttestation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticatorSelection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChallenge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePubKeyCredParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MfaPublicKeyCredentialCreationOptions) validateAttestation(formats strfmt.Registry) error {

	if swag.IsZero(m.Attestation) { // not required
		return nil
	}

	if err := m.Attestation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attestation")
		}
		return err
	}

	return nil
}

func (m *V1MfaPublicKeyCredentialCreationOptions) validateAuthenticatorSelection(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticatorSelection) { // not required
		return nil
	}

	if m.AuthenticatorSelection != nil {
		if err := m.AuthenticatorSelection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authenticatorSelection")
			}
			return err
		}
	}

	return nil
}

func (m *V1MfaPublicKeyCredentialCreationOptions) validateChallenge(formats strfmt.Registry) error {

	if swag.IsZero(m.Challenge) { // not required
		return nil
	}

	if err := m.Challenge.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("challenge")
		}
		return err
	}

	return nil
}

func (m *V1MfaPublicKeyCredentialCreationOptions) validateExcludeCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.ExcludeCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.ExcludeCredentials); i++ {
		if swag.IsZero(m.ExcludeCredentials[i]) { // not required
			continue
		}

		if m.ExcludeCredentials[i] != nil {
			if err := m.ExcludeCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excludeCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1MfaPublicKeyCredentialCreationOptions) validateExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	if err := m.Extensions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("extensions")
		}
		return err
	}

	return nil
}

func (m *V1MfaPublicKeyCredentialCreationOptions) validatePubKeyCredParams(formats strfmt.Registry) error {

	if swag.IsZero(m.PubKeyCredParams) { // not required
		return nil
	}

	for i := 0; i < len(m.PubKeyCredParams); i++ {
		if swag.IsZero(m.PubKeyCredParams[i]) { // not required
			continue
		}

		if m.PubKeyCredParams[i] != nil {
			if err := m.PubKeyCredParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pubKeyCredParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1MfaPublicKeyCredentialCreationOptions) validateRp(formats strfmt.Registry) error {

	if swag.IsZero(m.Rp) { // not required
		return nil
	}

	if m.Rp != nil {
		if err := m.Rp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rp")
			}
			return err
		}
	}

	return nil
}

func (m *V1MfaPublicKeyCredentialCreationOptions) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MfaPublicKeyCredentialCreationOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MfaPublicKeyCredentialCreationOptions) UnmarshalBinary(b []byte) error {
	var res V1MfaPublicKeyCredentialCreationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
