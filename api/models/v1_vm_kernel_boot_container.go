// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VMKernelBootContainer If set, the VM will be booted from the defined kernel / initrd.
//
// swagger:model v1VmKernelBootContainer
type V1VMKernelBootContainer struct {

	// Image that contains initrd / kernel files.
	// Required: true
	Image *string `json:"image"`

	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy string `json:"imagePullPolicy,omitempty"`

	// ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
	ImagePullSecret string `json:"imagePullSecret,omitempty"`

	// the fully-qualified path to the ramdisk image in the host OS
	InitrdPath string `json:"initrdPath,omitempty"`

	// The fully-qualified path to the kernel image in the host OS
	KernelPath string `json:"kernelPath,omitempty"`
}

// Validate validates this v1 Vm kernel boot container
func (m *V1VMKernelBootContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMKernelBootContainer) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 Vm kernel boot container based on context it is used
func (m *V1VMKernelBootContainer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1VMKernelBootContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMKernelBootContainer) UnmarshalBinary(b []byte) error {
	var res V1VMKernelBootContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
