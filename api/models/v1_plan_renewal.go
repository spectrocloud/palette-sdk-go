// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PlanRenewal Plan Renewal
//
// swagger:model v1PlanRenewal
type V1PlanRenewal struct {

	// credit expiry time
	// Required: true
	// Format: date-time
	Expiry V1Time `json:"expiry"`

	// plan limit
	PlanLimit *V1PlanLimit `json:"planLimit,omitempty"`

	// credit start time
	// Required: true
	// Format: date-time
	Start V1Time `json:"start"`

	// type
	// Required: true
	// Enum: [Trial MonthlyOnDemand AnnualSubscription]
	Type *string `json:"type"`
}

// Validate validates this v1 plan renewal
func (m *V1PlanRenewal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PlanRenewal) validateExpiry(formats strfmt.Registry) error {

	if err := m.Expiry.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expiry")
		}
		return err
	}

	return nil
}

func (m *V1PlanRenewal) validatePlanLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanLimit) { // not required
		return nil
	}

	if m.PlanLimit != nil {
		if err := m.PlanLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planLimit")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlanRenewal) validateStart(formats strfmt.Registry) error {

	if err := m.Start.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("start")
		}
		return err
	}

	return nil
}

var v1PlanRenewalTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Trial","MonthlyOnDemand","AnnualSubscription"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PlanRenewalTypeTypePropEnum = append(v1PlanRenewalTypeTypePropEnum, v)
	}
}

const (

	// V1PlanRenewalTypeTrial captures enum value "Trial"
	V1PlanRenewalTypeTrial string = "Trial"

	// V1PlanRenewalTypeMonthlyOnDemand captures enum value "MonthlyOnDemand"
	V1PlanRenewalTypeMonthlyOnDemand string = "MonthlyOnDemand"

	// V1PlanRenewalTypeAnnualSubscription captures enum value "AnnualSubscription"
	V1PlanRenewalTypeAnnualSubscription string = "AnnualSubscription"
)

// prop value enum
func (m *V1PlanRenewal) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1PlanRenewalTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1PlanRenewal) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PlanRenewal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PlanRenewal) UnmarshalBinary(b []byte) error {
	var res V1PlanRenewal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
