// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1LocationType Location type
//
// swagger:model v1LocationType
type V1LocationType string

func NewV1LocationType(value V1LocationType) *V1LocationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1LocationType.
func (m V1LocationType) Pointer() *V1LocationType {
	return &m
}

const (

	// V1LocationTypeS3 captures enum value "s3"
	V1LocationTypeS3 V1LocationType = "s3"

	// V1LocationTypeGcp captures enum value "gcp"
	V1LocationTypeGcp V1LocationType = "gcp"

	// V1LocationTypeMinio captures enum value "minio"
	V1LocationTypeMinio V1LocationType = "minio"
)

// for schema
var v1LocationTypeEnum []interface{}

func init() {
	var res []V1LocationType
	if err := json.Unmarshal([]byte(`["s3","gcp","minio"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1LocationTypeEnum = append(v1LocationTypeEnum, v)
	}
}

func (m V1LocationType) validateV1LocationTypeEnum(path, location string, value V1LocationType) error {
	if err := validate.EnumCase(path, location, value, v1LocationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 location type
func (m V1LocationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1LocationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 location type based on context it is used
func (m V1LocationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
