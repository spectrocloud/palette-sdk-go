// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1TenantCleanUpStatus Tenant CleanUp Status
//
// swagger:model v1TenantCleanUpStatus
type V1TenantCleanUpStatus struct {

	// clean up error
	CleanUpError string `json:"cleanUpError,omitempty"`

	// clean up stages
	CleanUpStages string `json:"cleanUpStages,omitempty"`

	// clean up timestamp
	// Format: date-time
	CleanUpTimestamp V1Time `json:"cleanUpTimestamp,omitempty"`

	// cleaned resources
	CleanedResources []string `json:"cleanedResources"`

	// is completed
	IsCompleted bool `json:"isCompleted"`

	// is in progress
	IsInProgress bool `json:"isInProgress"`
}

// Validate validates this v1 tenant clean up status
func (m *V1TenantCleanUpStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCleanUpTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TenantCleanUpStatus) validateCleanUpTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CleanUpTimestamp) { // not required
		return nil
	}

	if err := m.CleanUpTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cleanUpTimestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TenantCleanUpStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TenantCleanUpStatus) UnmarshalBinary(b []byte) error {
	var res V1TenantCleanUpStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
