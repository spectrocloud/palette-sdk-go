// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1EdgeHostHealth EdgeHostHealth defines the desired health state of EdgeHostDevice
//
// swagger:model v1EdgeHostHealth
type V1EdgeHostHealth struct {

	// agent version
	AgentVersion string `json:"agentVersion,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// state
	// Enum: ["healthy","unhealthy"]
	State string `json:"state,omitempty"`
}

// Validate validates this v1 edge host health
func (m *V1EdgeHostHealth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1EdgeHostHealthTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["healthy","unhealthy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1EdgeHostHealthTypeStatePropEnum = append(v1EdgeHostHealthTypeStatePropEnum, v)
	}
}

const (

	// V1EdgeHostHealthStateHealthy captures enum value "healthy"
	V1EdgeHostHealthStateHealthy string = "healthy"

	// V1EdgeHostHealthStateUnhealthy captures enum value "unhealthy"
	V1EdgeHostHealthStateUnhealthy string = "unhealthy"
)

// prop value enum
func (m *V1EdgeHostHealth) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1EdgeHostHealthTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1EdgeHostHealth) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 edge host health based on context it is used
func (m *V1EdgeHostHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1EdgeHostHealth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EdgeHostHealth) UnmarshalBinary(b []byte) error {
	var res V1EdgeHostHealth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
