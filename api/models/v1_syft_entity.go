// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SyftEntity Syft response
//
// swagger:model v1SyftEntity
type V1SyftEntity struct {

	// report
	// Required: true
	Report *V1SyftReportEntity `json:"report"`

	// request Uid
	// Required: true
	RequestUID *string `json:"requestUid"`

	// status
	// Required: true
	// Enum: ["Completed","InProgress","Failed","Initiated"]
	Status *string `json:"status"`
}

// Validate validates this v1 syft entity
func (m *V1SyftEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SyftEntity) validateReport(formats strfmt.Registry) error {

	if err := validate.Required("report", "body", m.Report); err != nil {
		return err
	}

	if m.Report != nil {
		if err := m.Report.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("report")
			}
			return err
		}
	}

	return nil
}

func (m *V1SyftEntity) validateRequestUID(formats strfmt.Registry) error {

	if err := validate.Required("requestUid", "body", m.RequestUID); err != nil {
		return err
	}

	return nil
}

var v1SyftEntityTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Completed","InProgress","Failed","Initiated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1SyftEntityTypeStatusPropEnum = append(v1SyftEntityTypeStatusPropEnum, v)
	}
}

const (

	// V1SyftEntityStatusCompleted captures enum value "Completed"
	V1SyftEntityStatusCompleted string = "Completed"

	// V1SyftEntityStatusInProgress captures enum value "InProgress"
	V1SyftEntityStatusInProgress string = "InProgress"

	// V1SyftEntityStatusFailed captures enum value "Failed"
	V1SyftEntityStatusFailed string = "Failed"

	// V1SyftEntityStatusInitiated captures enum value "Initiated"
	V1SyftEntityStatusInitiated string = "Initiated"
)

// prop value enum
func (m *V1SyftEntity) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1SyftEntityTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1SyftEntity) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 syft entity based on the context it is used
func (m *V1SyftEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SyftEntity) contextValidateReport(ctx context.Context, formats strfmt.Registry) error {

	if m.Report != nil {

		if err := m.Report.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("report")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SyftEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SyftEntity) UnmarshalBinary(b []byte) error {
	var res V1SyftEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
