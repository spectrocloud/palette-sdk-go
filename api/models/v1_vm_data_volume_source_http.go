// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VMDataVolumeSourceHTTP DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs
//
// swagger:model v1VmDataVolumeSourceHttp
type V1VMDataVolumeSourceHTTP struct {

	// CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
	CertConfigMap string `json:"certConfigMap,omitempty"`

	// ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests
	ExtraHeaders []string `json:"extraHeaders"`

	// SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information
	SecretExtraHeaders []string `json:"secretExtraHeaders"`

	// SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded
	SecretRef string `json:"secretRef,omitempty"`

	// URL is the URL of the http(s) endpoint
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this v1 Vm data volume source Http
func (m *V1VMDataVolumeSourceHTTP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMDataVolumeSourceHTTP) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VMDataVolumeSourceHTTP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMDataVolumeSourceHTTP) UnmarshalBinary(b []byte) error {
	var res V1VMDataVolumeSourceHTTP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
