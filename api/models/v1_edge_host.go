// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1EdgeHost EdgeHost is the underlying appliance
//
// swagger:model v1EdgeHost
type V1EdgeHost struct {

	// Set to true if auto register is disabled for the device
	DisableAutoRegister bool `json:"disableAutoRegister"`

	// HostAddress is a FQDN or IP address of the Host
	// Required: true
	HostAddress *string `json:"hostAddress"`

	// HostAuthToken to authorize auto registration
	HostAuthToken string `json:"hostAuthToken"`

	// HostChecksum is the checksum provided by the edge host, to be persisted in SaaS
	HostChecksum string `json:"hostChecksum"`

	// HostIdentity is the identity to access the edge host
	HostIdentity *V1EdgeHostIdentity `json:"hostIdentity,omitempty"`

	// HostPairingKey is the one-time pairing key to pair the edge host with the device registered in SaaS
	// Format: password
	HostPairingKey strfmt.Password `json:"hostPairingKey"`

	// HostUid is the ID of the EdgeHost
	// Required: true
	HostUID *string `json:"hostUid"`

	// Mac address of edgehost
	MacAddress string `json:"macAddress"`

	// ProjectUid where the edgehost will be placed during auto registration
	Project *V1ObjectEntity `json:"project,omitempty"`

	// RemoteSsh controls the remote SSH access for this edge host
	// Enum: ["enabled","disabled"]
	RemoteSSH *string `json:"remoteSsh"`
}

// Validate validates this v1 edge host
func (m *V1EdgeHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostPairingKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteSSH(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeHost) validateHostAddress(formats strfmt.Registry) error {

	if err := validate.Required("hostAddress", "body", m.HostAddress); err != nil {
		return err
	}

	return nil
}

func (m *V1EdgeHost) validateHostIdentity(formats strfmt.Registry) error {
	if swag.IsZero(m.HostIdentity) { // not required
		return nil
	}

	if m.HostIdentity != nil {
		if err := m.HostIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostIdentity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostIdentity")
			}
			return err
		}
	}

	return nil
}

func (m *V1EdgeHost) validateHostPairingKey(formats strfmt.Registry) error {
	if swag.IsZero(m.HostPairingKey) { // not required
		return nil
	}

	if err := validate.FormatOf("hostPairingKey", "body", "password", m.HostPairingKey.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1EdgeHost) validateHostUID(formats strfmt.Registry) error {

	if err := validate.Required("hostUid", "body", m.HostUID); err != nil {
		return err
	}

	return nil
}

func (m *V1EdgeHost) validateProject(formats strfmt.Registry) error {
	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

var v1EdgeHostTypeRemoteSSHPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1EdgeHostTypeRemoteSSHPropEnum = append(v1EdgeHostTypeRemoteSSHPropEnum, v)
	}
}

const (

	// V1EdgeHostRemoteSSHEnabled captures enum value "enabled"
	V1EdgeHostRemoteSSHEnabled string = "enabled"

	// V1EdgeHostRemoteSSHDisabled captures enum value "disabled"
	V1EdgeHostRemoteSSHDisabled string = "disabled"
)

// prop value enum
func (m *V1EdgeHost) validateRemoteSSHEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1EdgeHostTypeRemoteSSHPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1EdgeHost) validateRemoteSSH(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteSSH) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemoteSSHEnum("remoteSsh", "body", *m.RemoteSSH); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 edge host based on the context it is used
func (m *V1EdgeHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostIdentity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeHost) contextValidateHostIdentity(ctx context.Context, formats strfmt.Registry) error {

	if m.HostIdentity != nil {

		if swag.IsZero(m.HostIdentity) { // not required
			return nil
		}

		if err := m.HostIdentity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostIdentity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostIdentity")
			}
			return err
		}
	}

	return nil
}

func (m *V1EdgeHost) contextValidateProject(ctx context.Context, formats strfmt.Registry) error {

	if m.Project != nil {

		if swag.IsZero(m.Project) { // not required
			return nil
		}

		if err := m.Project.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EdgeHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EdgeHost) UnmarshalBinary(b []byte) error {
	var res V1EdgeHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
