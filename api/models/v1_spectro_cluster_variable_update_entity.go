// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SpectroClusterVariableUpdateEntity List of cluster variables to be updated with profile uid
//
// swagger:model v1SpectroClusterVariableUpdateEntity
type V1SpectroClusterVariableUpdateEntity struct {

	// Profile uid to which the variable belongs
	// Required: true
	ProfileUID *string `json:"profileUid"`

	// List of variables with updated values
	// Unique: true
	Variables []*V1SpectroClusterVariable `json:"variables"`
}

// Validate validates this v1 spectro cluster variable update entity
func (m *V1SpectroClusterVariableUpdateEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProfileUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterVariableUpdateEntity) validateProfileUID(formats strfmt.Registry) error {

	if err := validate.Required("profileUid", "body", m.ProfileUID); err != nil {
		return err
	}

	return nil
}

func (m *V1SpectroClusterVariableUpdateEntity) validateVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	if err := validate.UniqueItems("variables", "body", m.Variables); err != nil {
		return err
	}

	for i := 0; i < len(m.Variables); i++ {
		if swag.IsZero(m.Variables[i]) { // not required
			continue
		}

		if m.Variables[i] != nil {
			if err := m.Variables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterVariableUpdateEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterVariableUpdateEntity) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterVariableUpdateEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
