// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SpectroMgmtStatus spectro management status information
//
// swagger:model v1SpectroMgmtStatus
type V1SpectroMgmtStatus struct {

	// app versions
	// Unique: true
	AppVersions []*V1AppVersion `json:"appVersions"`

	// is failed
	IsFailed bool `json:"isFailed"`

	// last updated time
	// Format: date-time
	LastUpdatedTime V1Time `json:"lastUpdatedTime,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// message logs
	MessageLogs []string `json:"messageLogs"`

	// state
	State string `json:"state,omitempty"`

	// upgrade history
	// Unique: true
	UpgradeHistory []*V1SpectroMgmtUpgrade `json:"upgradeHistory"`
}

// Validate validates this v1 spectro mgmt status
func (m *V1SpectroMgmtStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeHistory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroMgmtStatus) validateAppVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.AppVersions) { // not required
		return nil
	}

	if err := validate.UniqueItems("appVersions", "body", m.AppVersions); err != nil {
		return err
	}

	for i := 0; i < len(m.AppVersions); i++ {
		if swag.IsZero(m.AppVersions[i]) { // not required
			continue
		}

		if m.AppVersions[i] != nil {
			if err := m.AppVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpectroMgmtStatus) validateLastUpdatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedTime) { // not required
		return nil
	}

	if err := m.LastUpdatedTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastUpdatedTime")
		}
		return err
	}

	return nil
}

func (m *V1SpectroMgmtStatus) validateUpgradeHistory(formats strfmt.Registry) error {

	if swag.IsZero(m.UpgradeHistory) { // not required
		return nil
	}

	if err := validate.UniqueItems("upgradeHistory", "body", m.UpgradeHistory); err != nil {
		return err
	}

	for i := 0; i < len(m.UpgradeHistory); i++ {
		if swag.IsZero(m.UpgradeHistory[i]) { // not required
			continue
		}

		if m.UpgradeHistory[i] != nil {
			if err := m.UpgradeHistory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upgradeHistory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroMgmtStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroMgmtStatus) UnmarshalBinary(b []byte) error {
	var res V1SpectroMgmtStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
