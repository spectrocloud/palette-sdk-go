// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VMAddVolumeOptions AddVolumeOptions is provided when dynamically hot plugging a volume and disk
//
// swagger:model v1VmAddVolumeOptions
type V1VMAddVolumeOptions struct {

	// disk
	// Required: true
	Disk *V1VMDisk `json:"disk"`

	// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
	DryRun []string `json:"dryRun"`

	// Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself.
	// Required: true
	Name *string `json:"name"`

	// volume source
	// Required: true
	VolumeSource *V1VMHotplugVolumeSource `json:"volumeSource"`
}

// Validate validates this v1 Vm add volume options
func (m *V1VMAddVolumeOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMAddVolumeOptions) validateDisk(formats strfmt.Registry) error {

	if err := validate.Required("disk", "body", m.Disk); err != nil {
		return err
	}

	if m.Disk != nil {
		if err := m.Disk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMAddVolumeOptions) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1VMAddVolumeOptions) validateVolumeSource(formats strfmt.Registry) error {

	if err := validate.Required("volumeSource", "body", m.VolumeSource); err != nil {
		return err
	}

	if m.VolumeSource != nil {
		if err := m.VolumeSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VMAddVolumeOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMAddVolumeOptions) UnmarshalBinary(b []byte) error {
	var res V1VMAddVolumeOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
