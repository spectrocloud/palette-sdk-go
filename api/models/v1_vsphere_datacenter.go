// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VsphereDatacenter List of Datacenter with computeclusters
//
// swagger:model v1VsphereDatacenter
type V1VsphereDatacenter struct {

	// List  of the VSphere compute clusters in datacenter
	// Unique: true
	Computeclusters []string `json:"computeclusters"`

	// name of the datacenter of the VSphere
	Datacenter string `json:"datacenter,omitempty"`

	// List  of the VSphere folders in datacenter
	// Unique: true
	Folders []string `json:"folders"`
}

// Validate validates this v1 vsphere datacenter
func (m *V1VsphereDatacenter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputeclusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VsphereDatacenter) validateComputeclusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Computeclusters) { // not required
		return nil
	}

	if err := validate.UniqueItems("computeclusters", "body", m.Computeclusters); err != nil {
		return err
	}

	return nil
}

func (m *V1VsphereDatacenter) validateFolders(formats strfmt.Registry) error {
	if swag.IsZero(m.Folders) { // not required
		return nil
	}

	if err := validate.UniqueItems("folders", "body", m.Folders); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 vsphere datacenter based on context it is used
func (m *V1VsphereDatacenter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1VsphereDatacenter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VsphereDatacenter) UnmarshalBinary(b []byte) error {
	var res V1VsphereDatacenter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
