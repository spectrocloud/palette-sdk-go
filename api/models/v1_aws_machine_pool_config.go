// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AwsMachinePoolConfig v1 aws machine pool config
//
// swagger:model v1AwsMachinePoolConfig
type V1AwsMachinePoolConfig struct {

	// additionalLabels
	AdditionalLabels map[string]string `json:"additionalLabels,omitempty"`

	// Additional Security groups
	AdditionalSecurityGroups []*V1AwsResourceReference `json:"additionalSecurityGroups"`

	// AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole
	AdditionalTags map[string]string `json:"additionalTags,omitempty"`

	// AZs is only used for dynamic placement
	Azs []string `json:"azs"`

	// EC2 instance capacity type
	// Enum: [on-demand spot]
	CapacityType *string `json:"capacityType,omitempty"`

	// instance config
	InstanceConfig *V1InstanceConfig `json:"instanceConfig,omitempty"`

	// instance type
	InstanceType string `json:"instanceType,omitempty"`

	// whether this pool is for control plane
	// Required: true
	IsControlPlane *bool `json:"isControlPlane"`

	// labels for this pool, example: control-plane/worker, gpu, windows
	Labels []string `json:"labels"`

	// machine pool properties
	MachinePoolProperties *V1MachinePoolProperties `json:"machinePoolProperties,omitempty"`

	// max size of the pool, for scaling
	MaxSize int32 `json:"maxSize,omitempty"`

	// min size of the pool, for scaling
	MinSize int32 `json:"minSize,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster
	NodeRepaveInterval int32 `json:"nodeRepaveInterval,omitempty"`

	// rootDeviceSize in GBs
	RootDeviceSize int64 `json:"rootDeviceSize,omitempty"`

	// size of the pool, number of machines
	Size int32 `json:"size,omitempty"`

	// SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.
	SpotMarketOptions *V1SpotMarketOptions `json:"spotMarketOptions,omitempty"`

	// AZ to subnet mapping filled by ally from hubble SubnetIDs ["us-west-2d"] = "subnet-079b6061" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment
	SubnetIds map[string]string `json:"subnetIds,omitempty"`

	// control plane or worker taints
	// Unique: true
	Taints []*V1Taint `json:"taints"`

	// rolling update strategy for this machinepool if not specified, will use ScaleOut
	UpdateStrategy *V1UpdateStrategy `json:"updateStrategy,omitempty"`

	// if IsControlPlane==true && useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools
	UseControlPlaneAsWorker bool `json:"useControlPlaneAsWorker"`
}

// Validate validates this v1 aws machine pool config
func (m *V1AwsMachinePoolConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapacityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsControlPlane(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePoolProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpotMarketOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AwsMachinePoolConfig) validateAdditionalSecurityGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalSecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalSecurityGroups); i++ {
		if swag.IsZero(m.AdditionalSecurityGroups[i]) { // not required
			continue
		}

		if m.AdditionalSecurityGroups[i] != nil {
			if err := m.AdditionalSecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var v1AwsMachinePoolConfigTypeCapacityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on-demand","spot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1AwsMachinePoolConfigTypeCapacityTypePropEnum = append(v1AwsMachinePoolConfigTypeCapacityTypePropEnum, v)
	}
}

const (

	// V1AwsMachinePoolConfigCapacityTypeOnDemand captures enum value "on-demand"
	V1AwsMachinePoolConfigCapacityTypeOnDemand string = "on-demand"

	// V1AwsMachinePoolConfigCapacityTypeSpot captures enum value "spot"
	V1AwsMachinePoolConfigCapacityTypeSpot string = "spot"
)

// prop value enum
func (m *V1AwsMachinePoolConfig) validateCapacityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1AwsMachinePoolConfigTypeCapacityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1AwsMachinePoolConfig) validateCapacityType(formats strfmt.Registry) error {

	if swag.IsZero(m.CapacityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapacityTypeEnum("capacityType", "body", *m.CapacityType); err != nil {
		return err
	}

	return nil
}

func (m *V1AwsMachinePoolConfig) validateInstanceConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceConfig) { // not required
		return nil
	}

	if m.InstanceConfig != nil {
		if err := m.InstanceConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1AwsMachinePoolConfig) validateIsControlPlane(formats strfmt.Registry) error {

	if err := validate.Required("isControlPlane", "body", m.IsControlPlane); err != nil {
		return err
	}

	return nil
}

func (m *V1AwsMachinePoolConfig) validateMachinePoolProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePoolProperties) { // not required
		return nil
	}

	if m.MachinePoolProperties != nil {
		if err := m.MachinePoolProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machinePoolProperties")
			}
			return err
		}
	}

	return nil
}

func (m *V1AwsMachinePoolConfig) validateSpotMarketOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.SpotMarketOptions) { // not required
		return nil
	}

	if m.SpotMarketOptions != nil {
		if err := m.SpotMarketOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spotMarketOptions")
			}
			return err
		}
	}

	return nil
}

func (m *V1AwsMachinePoolConfig) validateTaints(formats strfmt.Registry) error {

	if swag.IsZero(m.Taints) { // not required
		return nil
	}

	if err := validate.UniqueItems("taints", "body", m.Taints); err != nil {
		return err
	}

	for i := 0; i < len(m.Taints); i++ {
		if swag.IsZero(m.Taints[i]) { // not required
			continue
		}

		if m.Taints[i] != nil {
			if err := m.Taints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1AwsMachinePoolConfig) validateUpdateStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateStrategy) { // not required
		return nil
	}

	if m.UpdateStrategy != nil {
		if err := m.UpdateStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateStrategy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AwsMachinePoolConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AwsMachinePoolConfig) UnmarshalBinary(b []byte) error {
	var res V1AwsMachinePoolConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
