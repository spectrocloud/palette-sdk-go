// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1EdgeHostMeta v1 edge host meta
//
// swagger:model v1EdgeHostMeta
type V1EdgeHostMeta struct {

	// arch type
	ArchType *V1ArchType `json:"archType,omitempty"`

	// edge host type
	// Enum: ["edge-native","vsphere"]
	EdgeHostType string `json:"edgeHostType,omitempty"`

	// health state
	HealthState string `json:"healthState,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this v1 edge host meta
func (m *V1EdgeHostMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeHostType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeHostMeta) validateArchType(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchType) { // not required
		return nil
	}

	if m.ArchType != nil {
		if err := m.ArchType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archType")
			}
			return err
		}
	}

	return nil
}

var v1EdgeHostMetaTypeEdgeHostTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["edge-native","vsphere"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1EdgeHostMetaTypeEdgeHostTypePropEnum = append(v1EdgeHostMetaTypeEdgeHostTypePropEnum, v)
	}
}

const (

	// V1EdgeHostMetaEdgeHostTypeEdgeDashNative captures enum value "edge-native"
	V1EdgeHostMetaEdgeHostTypeEdgeDashNative string = "edge-native"

	// V1EdgeHostMetaEdgeHostTypeVsphere captures enum value "vsphere"
	V1EdgeHostMetaEdgeHostTypeVsphere string = "vsphere"
)

// prop value enum
func (m *V1EdgeHostMeta) validateEdgeHostTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1EdgeHostMetaTypeEdgeHostTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1EdgeHostMeta) validateEdgeHostType(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeHostType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEdgeHostTypeEnum("edgeHostType", "body", m.EdgeHostType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 edge host meta based on the context it is used
func (m *V1EdgeHostMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeHostMeta) contextValidateArchType(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchType != nil {

		if swag.IsZero(m.ArchType) { // not required
			return nil
		}

		if err := m.ArchType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EdgeHostMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EdgeHostMeta) UnmarshalBinary(b []byte) error {
	var res V1EdgeHostMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
