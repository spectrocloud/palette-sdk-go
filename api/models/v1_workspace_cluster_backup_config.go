// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1WorkspaceClusterBackupConfig Workspace cluster backup config
//
// swagger:model v1WorkspaceClusterBackupConfig
type V1WorkspaceClusterBackupConfig struct {

	// backup name
	BackupName string `json:"backupName,omitempty"`

	// backup state
	BackupState *V1WorkspaceBackupState `json:"backupState,omitempty"`

	// backup time
	// Format: date-time
	BackupTime V1Time `json:"backupTime,omitempty"`

	// cluster backup refs
	ClusterBackupRefs []*V1WorkspaceClusterBackupResponse `json:"clusterBackupRefs"`

	// config
	Config *V1WorkspaceBackupStatusConfig `json:"config,omitempty"`

	// request time
	// Format: date-time
	RequestTime V1Time `json:"requestTime,omitempty"`
}

// Validate validates this v1 workspace cluster backup config
func (m *V1WorkspaceClusterBackupConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterBackupRefs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WorkspaceClusterBackupConfig) validateBackupState(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupState) { // not required
		return nil
	}

	if m.BackupState != nil {
		if err := m.BackupState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupState")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkspaceClusterBackupConfig) validateBackupTime(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupTime) { // not required
		return nil
	}

	if err := m.BackupTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("backupTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("backupTime")
		}
		return err
	}

	return nil
}

func (m *V1WorkspaceClusterBackupConfig) validateClusterBackupRefs(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterBackupRefs) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterBackupRefs); i++ {
		if swag.IsZero(m.ClusterBackupRefs[i]) { // not required
			continue
		}

		if m.ClusterBackupRefs[i] != nil {
			if err := m.ClusterBackupRefs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterBackupRefs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterBackupRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1WorkspaceClusterBackupConfig) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkspaceClusterBackupConfig) validateRequestTime(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestTime) { // not required
		return nil
	}

	if err := m.RequestTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("requestTime")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1 workspace cluster backup config based on the context it is used
func (m *V1WorkspaceClusterBackupConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterBackupRefs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WorkspaceClusterBackupConfig) contextValidateBackupState(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupState != nil {

		if swag.IsZero(m.BackupState) { // not required
			return nil
		}

		if err := m.BackupState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupState")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkspaceClusterBackupConfig) contextValidateBackupTime(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.BackupTime) { // not required
		return nil
	}

	if err := m.BackupTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("backupTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("backupTime")
		}
		return err
	}

	return nil
}

func (m *V1WorkspaceClusterBackupConfig) contextValidateClusterBackupRefs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterBackupRefs); i++ {

		if m.ClusterBackupRefs[i] != nil {

			if swag.IsZero(m.ClusterBackupRefs[i]) { // not required
				return nil
			}

			if err := m.ClusterBackupRefs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterBackupRefs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterBackupRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1WorkspaceClusterBackupConfig) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkspaceClusterBackupConfig) contextValidateRequestTime(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RequestTime) { // not required
		return nil
	}

	if err := m.RequestTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("requestTime")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1WorkspaceClusterBackupConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1WorkspaceClusterBackupConfig) UnmarshalBinary(b []byte) error {
	var res V1WorkspaceClusterBackupConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
