// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1LibvirtNetworkSpec LibvirtNetworkSpec defines the network configuration for a virtual machine
//
// swagger:model v1LibvirtNetworkSpec
type V1LibvirtNetworkSpec struct {

	// NetworkName of the libvirt network where this machine will be connected
	// Required: true
	NetworkName *string `json:"networkName"`

	// NetworkType  specifies the type of network
	// Required: true
	// Enum: [default bridge]
	NetworkType *string `json:"networkType"`
}

// Validate validates this v1 libvirt network spec
func (m *V1LibvirtNetworkSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1LibvirtNetworkSpec) validateNetworkName(formats strfmt.Registry) error {

	if err := validate.Required("networkName", "body", m.NetworkName); err != nil {
		return err
	}

	return nil
}

var v1LibvirtNetworkSpecTypeNetworkTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","bridge"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1LibvirtNetworkSpecTypeNetworkTypePropEnum = append(v1LibvirtNetworkSpecTypeNetworkTypePropEnum, v)
	}
}

const (

	// V1LibvirtNetworkSpecNetworkTypeDefault captures enum value "default"
	V1LibvirtNetworkSpecNetworkTypeDefault string = "default"

	// V1LibvirtNetworkSpecNetworkTypeBridge captures enum value "bridge"
	V1LibvirtNetworkSpecNetworkTypeBridge string = "bridge"
)

// prop value enum
func (m *V1LibvirtNetworkSpec) validateNetworkTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1LibvirtNetworkSpecTypeNetworkTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1LibvirtNetworkSpec) validateNetworkType(formats strfmt.Registry) error {

	if err := validate.Required("networkType", "body", m.NetworkType); err != nil {
		return err
	}

	// value enum
	if err := m.validateNetworkTypeEnum("networkType", "body", *m.NetworkType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1LibvirtNetworkSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1LibvirtNetworkSpec) UnmarshalBinary(b []byte) error {
	var res V1LibvirtNetworkSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
