// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1AwsAccountSts AWS cloud account sts
//
// swagger:model V1AwsAccountSts
type V1AwsAccountSts struct {

	// A 12-digit number, such as 123456789012, that uniquely identifies an AWS account
	AccountID string `json:"accountId,omitempty"`

	// It can be passed to the AssumeRole API of the STS. It can be used in the condition element in a role's trust policy, allowing the role to be assumed only when a certain value is present in the external ID
	ExternalID string `json:"externalId,omitempty"`

	// partition
	Partition *V1AwsPartition `json:"partition,omitempty"`
}

// Validate validates this v1 aws account sts
func (m *V1AwsAccountSts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AwsAccountSts) validatePartition(formats strfmt.Registry) error {
	if swag.IsZero(m.Partition) { // not required
		return nil
	}

	if m.Partition != nil {
		if err := m.Partition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partition")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 aws account sts based on the context it is used
func (m *V1AwsAccountSts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePartition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AwsAccountSts) contextValidatePartition(ctx context.Context, formats strfmt.Registry) error {

	if m.Partition != nil {

		if swag.IsZero(m.Partition) { // not required
			return nil
		}

		if err := m.Partition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AwsAccountSts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AwsAccountSts) UnmarshalBinary(b []byte) error {
	var res V1AwsAccountSts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
