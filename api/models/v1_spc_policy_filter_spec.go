// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SpcPolicyFilterSpec Spc policy filter spec
//
// swagger:model v1SpcPolicyFilterSpec
type V1SpcPolicyFilterSpec struct {

	// policy name
	PolicyName *V1FilterString `json:"policyName,omitempty"`

	// policy type
	// Unique: true
	PolicyType []*V1SpcPolicyType `json:"policyType"`

	// tags
	Tags *V1FilterArray `json:"tags,omitempty"`
}

// Validate validates this v1 spc policy filter spec
func (m *V1SpcPolicyFilterSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpcPolicyFilterSpec) validatePolicyName(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyName) { // not required
		return nil
	}

	if m.PolicyName != nil {
		if err := m.PolicyName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyName")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpcPolicyFilterSpec) validatePolicyType(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyType) { // not required
		return nil
	}

	if err := validate.UniqueItems("policyType", "body", m.PolicyType); err != nil {
		return err
	}

	for i := 0; i < len(m.PolicyType); i++ {
		if swag.IsZero(m.PolicyType[i]) { // not required
			continue
		}

		if m.PolicyType[i] != nil {
			if err := m.PolicyType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyType" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpcPolicyFilterSpec) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if m.Tags != nil {
		if err := m.Tags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 spc policy filter spec based on the context it is used
func (m *V1SpcPolicyFilterSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicyName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpcPolicyFilterSpec) contextValidatePolicyName(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyName != nil {

		if swag.IsZero(m.PolicyName) { // not required
			return nil
		}

		if err := m.PolicyName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyName")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpcPolicyFilterSpec) contextValidatePolicyType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyType); i++ {

		if m.PolicyType[i] != nil {

			if swag.IsZero(m.PolicyType[i]) { // not required
				return nil
			}

			if err := m.PolicyType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyType" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpcPolicyFilterSpec) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if m.Tags != nil {

		if swag.IsZero(m.Tags) { // not required
			return nil
		}

		if err := m.Tags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpcPolicyFilterSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpcPolicyFilterSpec) UnmarshalBinary(b []byte) error {
	var res V1SpcPolicyFilterSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
