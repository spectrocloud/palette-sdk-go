// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1HybridPoolClusterCloudType Flag to indicate whether the pool is deployed in any cloud or an edge environment
//
// swagger:model v1HybridPoolClusterCloudType
type V1HybridPoolClusterCloudType string

func NewV1HybridPoolClusterCloudType(value V1HybridPoolClusterCloudType) *V1HybridPoolClusterCloudType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1HybridPoolClusterCloudType.
func (m V1HybridPoolClusterCloudType) Pointer() *V1HybridPoolClusterCloudType {
	return &m
}

const (

	// V1HybridPoolClusterCloudTypeEdgeDashNative captures enum value "edge-native"
	V1HybridPoolClusterCloudTypeEdgeDashNative V1HybridPoolClusterCloudType = "edge-native"
)

// for schema
var v1HybridPoolClusterCloudTypeEnum []interface{}

func init() {
	var res []V1HybridPoolClusterCloudType
	if err := json.Unmarshal([]byte(`["edge-native"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1HybridPoolClusterCloudTypeEnum = append(v1HybridPoolClusterCloudTypeEnum, v)
	}
}

func (m V1HybridPoolClusterCloudType) validateV1HybridPoolClusterCloudTypeEnum(path, location string, value V1HybridPoolClusterCloudType) error {
	if err := validate.EnumCase(path, location, value, v1HybridPoolClusterCloudTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 hybrid pool cluster cloud type
func (m V1HybridPoolClusterCloudType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1HybridPoolClusterCloudTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 hybrid pool cluster cloud type based on context it is used
func (m V1HybridPoolClusterCloudType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
