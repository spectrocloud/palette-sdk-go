// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1LibvirtMachinePoolCloudConfigEntity v1 libvirt machine pool cloud config entity
//
// swagger:model v1LibvirtMachinePoolCloudConfigEntity
type V1LibvirtMachinePoolCloudConfigEntity struct {

	// instance type
	// Required: true
	InstanceType *V1LibvirtInstanceType `json:"instanceType"`

	// NonRootDisksInGB is the list of additional disks, if required, in GB
	NonRootDisksInGB []*V1LibvirtDiskSpec `json:"nonRootDisksInGB"`

	// Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster
	// Required: true
	// Unique: true
	Placements []*V1LibvirtPlacementEntity `json:"placements"`

	// RootDiskInGB is the size of a vm's root disk, in GiB
	// Required: true
	RootDiskInGB *int32 `json:"rootDiskInGB"`

	// XSLTemplate defines a base64-encoded raw xsl template which will be included in the machine definition
	XslTemplate string `json:"xslTemplate,omitempty"`
}

// Validate validates this v1 libvirt machine pool cloud config entity
func (m *V1LibvirtMachinePoolCloudConfigEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonRootDisksInGB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootDiskInGB(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1LibvirtMachinePoolCloudConfigEntity) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	if m.InstanceType != nil {
		if err := m.InstanceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceType")
			}
			return err
		}
	}

	return nil
}

func (m *V1LibvirtMachinePoolCloudConfigEntity) validateNonRootDisksInGB(formats strfmt.Registry) error {

	if swag.IsZero(m.NonRootDisksInGB) { // not required
		return nil
	}

	for i := 0; i < len(m.NonRootDisksInGB); i++ {
		if swag.IsZero(m.NonRootDisksInGB[i]) { // not required
			continue
		}

		if m.NonRootDisksInGB[i] != nil {
			if err := m.NonRootDisksInGB[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nonRootDisksInGB" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1LibvirtMachinePoolCloudConfigEntity) validatePlacements(formats strfmt.Registry) error {

	if err := validate.Required("placements", "body", m.Placements); err != nil {
		return err
	}

	if err := validate.UniqueItems("placements", "body", m.Placements); err != nil {
		return err
	}

	for i := 0; i < len(m.Placements); i++ {
		if swag.IsZero(m.Placements[i]) { // not required
			continue
		}

		if m.Placements[i] != nil {
			if err := m.Placements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("placements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1LibvirtMachinePoolCloudConfigEntity) validateRootDiskInGB(formats strfmt.Registry) error {

	if err := validate.Required("rootDiskInGB", "body", m.RootDiskInGB); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1LibvirtMachinePoolCloudConfigEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1LibvirtMachinePoolCloudConfigEntity) UnmarshalBinary(b []byte) error {
	var res V1LibvirtMachinePoolCloudConfigEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
