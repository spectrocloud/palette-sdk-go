// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1GcpClusterConfig Cluster level configuration for gcp cloud and applicable for all the machine pools
//
// swagger:model v1GcpClusterConfig
type V1GcpClusterConfig struct {

	// managed cluster config
	ManagedClusterConfig *V1GcpManagedClusterConfig `json:"managedClusterConfig,omitempty"`

	// NetworkName if empty would create VPC Network in auto mode. If provided, custom VPC network will be used
	Network string `json:"network,omitempty"`

	// Name of the project in which cluster is to be deployed
	// Required: true
	Project *string `json:"project"`

	// GCP region for the cluster
	// Required: true
	Region *string `json:"region"`
}

// Validate validates this v1 gcp cluster config
func (m *V1GcpClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagedClusterConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GcpClusterConfig) validateManagedClusterConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagedClusterConfig) { // not required
		return nil
	}

	if m.ManagedClusterConfig != nil {
		if err := m.ManagedClusterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managedClusterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1GcpClusterConfig) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("project", "body", m.Project); err != nil {
		return err
	}

	return nil
}

func (m *V1GcpClusterConfig) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1GcpClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1GcpClusterConfig) UnmarshalBinary(b []byte) error {
	var res V1GcpClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
