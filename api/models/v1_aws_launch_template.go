// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AwsLaunchTemplate AWSLaunchTemplate specifies the launch template to use to create the managed node group
//
// swagger:model v1AwsLaunchTemplate
type V1AwsLaunchTemplate struct {

	// AdditionalSecurityGroups is an array of references to security groups that should be applied to the instances
	// Unique: true
	AdditionalSecurityGroups []*V1AwsResourceReference `json:"additionalSecurityGroups"`

	// ami
	Ami *V1AwsAmiReference `json:"ami,omitempty"`

	// ImageLookupBaseOS is the name of the base operating system to use for image lookup the AMI is not set
	ImageLookupBaseOS string `json:"imageLookupBaseOS,omitempty"`

	// ImageLookupFormat is the AMI naming format to look up the image
	ImageLookupFormat string `json:"imageLookupFormat,omitempty"`

	// ImageLookupOrg is the AWS Organization ID to use for image lookup if AMI is not set
	ImageLookupOrg string `json:"imageLookupOrg,omitempty"`

	// root volume
	RootVolume *V1AwsRootVolume `json:"rootVolume,omitempty"`
}

// Validate validates this v1 aws launch template
func (m *V1AwsLaunchTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AwsLaunchTemplate) validateAdditionalSecurityGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalSecurityGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("additionalSecurityGroups", "body", m.AdditionalSecurityGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.AdditionalSecurityGroups); i++ {
		if swag.IsZero(m.AdditionalSecurityGroups[i]) { // not required
			continue
		}

		if m.AdditionalSecurityGroups[i] != nil {
			if err := m.AdditionalSecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalSecurityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additionalSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1AwsLaunchTemplate) validateAmi(formats strfmt.Registry) error {
	if swag.IsZero(m.Ami) { // not required
		return nil
	}

	if m.Ami != nil {
		if err := m.Ami.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ami")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ami")
			}
			return err
		}
	}

	return nil
}

func (m *V1AwsLaunchTemplate) validateRootVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.RootVolume) { // not required
		return nil
	}

	if m.RootVolume != nil {
		if err := m.RootVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootVolume")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 aws launch template based on the context it is used
func (m *V1AwsLaunchTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalSecurityGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAmi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AwsLaunchTemplate) contextValidateAdditionalSecurityGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalSecurityGroups); i++ {

		if m.AdditionalSecurityGroups[i] != nil {

			if swag.IsZero(m.AdditionalSecurityGroups[i]) { // not required
				return nil
			}

			if err := m.AdditionalSecurityGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalSecurityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additionalSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1AwsLaunchTemplate) contextValidateAmi(ctx context.Context, formats strfmt.Registry) error {

	if m.Ami != nil {

		if swag.IsZero(m.Ami) { // not required
			return nil
		}

		if err := m.Ami.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ami")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ami")
			}
			return err
		}
	}

	return nil
}

func (m *V1AwsLaunchTemplate) contextValidateRootVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.RootVolume != nil {

		if swag.IsZero(m.RootVolume) { // not required
			return nil
		}

		if err := m.RootVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootVolume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AwsLaunchTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AwsLaunchTemplate) UnmarshalBinary(b []byte) error {
	var res V1AwsLaunchTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
