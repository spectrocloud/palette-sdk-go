// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1MgmtUpgradeState v1 mgmt upgrade state
//
// swagger:model v1MgmtUpgradeState
type V1MgmtUpgradeState struct {

	// description
	Description string `json:"description"`

	// details
	Details []string `json:"details"`

	// end timestamp
	// Format: date-time
	EndTimestamp V1Time `json:"endTimestamp,omitempty"`

	// is completed
	IsCompleted bool `json:"isCompleted"`

	// message
	Message string `json:"message"`

	// start timestamp
	// Format: date-time
	StartTimestamp V1Time `json:"startTimestamp,omitempty"`
}

// Validate validates this v1 mgmt upgrade state
func (m *V1MgmtUpgradeState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MgmtUpgradeState) validateEndTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := m.EndTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endTimestamp")
		}
		return err
	}

	return nil
}

func (m *V1MgmtUpgradeState) validateStartTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := m.StartTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startTimestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MgmtUpgradeState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MgmtUpgradeState) UnmarshalBinary(b []byte) error {
	var res V1MgmtUpgradeState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
