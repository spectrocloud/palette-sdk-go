// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SpectroClusterProfileSpec Cluster profile spec response
//
// swagger:model v1SpectroClusterProfileSpec
type V1SpectroClusterProfileSpec struct {

	// Cluster profile cloud type
	CloudType string `json:"cloudType,omitempty"`

	// Cluster profile packs array
	// Unique: true
	Packs []*V1ClusterProfilePacksEntity `json:"packs"`

	// RelatedObject refers to the type of object(clustergroup, cluster or edgeHost) the cluster profile is associated with
	RelatedObject *V1ObjectReference `json:"relatedObject,omitempty"`

	// Cluster profile type [ "cluster", "infra", "add-on", "system" ]
	Type string `json:"type,omitempty"`

	// Cluster profile version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this v1 spectro cluster profile spec
func (m *V1SpectroClusterProfileSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePacks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterProfileSpec) validatePacks(formats strfmt.Registry) error {

	if swag.IsZero(m.Packs) { // not required
		return nil
	}

	if err := validate.UniqueItems("packs", "body", m.Packs); err != nil {
		return err
	}

	for i := 0; i < len(m.Packs); i++ {
		if swag.IsZero(m.Packs[i]) { // not required
			continue
		}

		if m.Packs[i] != nil {
			if err := m.Packs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpectroClusterProfileSpec) validateRelatedObject(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedObject) { // not required
		return nil
	}

	if m.RelatedObject != nil {
		if err := m.RelatedObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterProfileSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterProfileSpec) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterProfileSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
