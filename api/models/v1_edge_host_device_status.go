// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1EdgeHostDeviceStatus EdgeHostDeviceStatus defines the observed state of EdgeHostDevice
//
// swagger:model v1EdgeHostDeviceStatus
type V1EdgeHostDeviceStatus struct {

	// health
	Health *V1EdgeHostHealth `json:"health,omitempty"`

	// Deprecated. Use inUseClustersRef
	InUseClusters []*V1ObjectEntity `json:"inUseClusters"`

	// in use clusters ref
	InUseClustersRef []*V1EdgeClusterObjectEntity `json:"inUseClustersRef"`

	// packs
	Packs []*V1ClusterPackStatus `json:"packs"`

	// profile status
	ProfileStatus *V1ProfileStatus `json:"profileStatus,omitempty"`

	// service auth token
	ServiceAuthToken string `json:"serviceAuthToken,omitempty"`

	// state
	// Enum: [ready unpaired in-use]
	State string `json:"state,omitempty"`

	// tunnel status
	TunnelStatus *V1SpectroTunnelStatus `json:"tunnelStatus,omitempty"`
}

// Validate validates this v1 edge host device status
func (m *V1EdgeHostDeviceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInUseClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInUseClustersRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePacks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunnelStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeHostDeviceStatus) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *V1EdgeHostDeviceStatus) validateInUseClusters(formats strfmt.Registry) error {

	if swag.IsZero(m.InUseClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.InUseClusters); i++ {
		if swag.IsZero(m.InUseClusters[i]) { // not required
			continue
		}

		if m.InUseClusters[i] != nil {
			if err := m.InUseClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inUseClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1EdgeHostDeviceStatus) validateInUseClustersRef(formats strfmt.Registry) error {

	if swag.IsZero(m.InUseClustersRef) { // not required
		return nil
	}

	for i := 0; i < len(m.InUseClustersRef); i++ {
		if swag.IsZero(m.InUseClustersRef[i]) { // not required
			continue
		}

		if m.InUseClustersRef[i] != nil {
			if err := m.InUseClustersRef[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inUseClustersRef" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1EdgeHostDeviceStatus) validatePacks(formats strfmt.Registry) error {

	if swag.IsZero(m.Packs) { // not required
		return nil
	}

	for i := 0; i < len(m.Packs); i++ {
		if swag.IsZero(m.Packs[i]) { // not required
			continue
		}

		if m.Packs[i] != nil {
			if err := m.Packs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1EdgeHostDeviceStatus) validateProfileStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfileStatus) { // not required
		return nil
	}

	if m.ProfileStatus != nil {
		if err := m.ProfileStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profileStatus")
			}
			return err
		}
	}

	return nil
}

var v1EdgeHostDeviceStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ready","unpaired","in-use"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1EdgeHostDeviceStatusTypeStatePropEnum = append(v1EdgeHostDeviceStatusTypeStatePropEnum, v)
	}
}

const (

	// V1EdgeHostDeviceStatusStateReady captures enum value "ready"
	V1EdgeHostDeviceStatusStateReady string = "ready"

	// V1EdgeHostDeviceStatusStateUnpaired captures enum value "unpaired"
	V1EdgeHostDeviceStatusStateUnpaired string = "unpaired"

	// V1EdgeHostDeviceStatusStateInUse captures enum value "in-use"
	V1EdgeHostDeviceStatusStateInUse string = "in-use"
)

// prop value enum
func (m *V1EdgeHostDeviceStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1EdgeHostDeviceStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1EdgeHostDeviceStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *V1EdgeHostDeviceStatus) validateTunnelStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TunnelStatus) { // not required
		return nil
	}

	if m.TunnelStatus != nil {
		if err := m.TunnelStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnelStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EdgeHostDeviceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EdgeHostDeviceStatus) UnmarshalBinary(b []byte) error {
	var res V1EdgeHostDeviceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
