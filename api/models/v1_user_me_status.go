// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1UserMeStatus User status with permissions
//
// swagger:model v1UserMeStatus
type V1UserMeStatus struct {

	// Contains activation link for the user
	ActivationLink string `json:"activationLink,omitempty"`

	// Specifies if user account is active/disabled
	IsActive bool `json:"isActive,omitempty"`

	// Specifies if user account has accepted the contract
	IsContractAccepted bool `json:"isContractAccepted"`

	// User's login Mode
	LoginMode string `json:"loginMode,omitempty"`

	// project permissions
	ProjectPermissions map[string][]string `json:"projectPermissions,omitempty"`

	// users's tenant information
	Tenant *V1UserMeTenant `json:"tenant,omitempty"`

	// tenant permissions
	TenantPermissions map[string][]string `json:"tenantPermissions,omitempty"`
}

// Validate validates this v1 user me status
func (m *V1UserMeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1UserMeStatus) validateTenant(formats strfmt.Registry) error {

	if swag.IsZero(m.Tenant) { // not required
		return nil
	}

	if m.Tenant != nil {
		if err := m.Tenant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenant")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1UserMeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1UserMeStatus) UnmarshalBinary(b []byte) error {
	var res V1UserMeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
