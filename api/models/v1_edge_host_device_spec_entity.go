// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1EdgeHostDeviceSpecEntity Edge host device spec
//
// swagger:model v1EdgeHostDeviceSpecEntity
type V1EdgeHostDeviceSpecEntity struct {

	// arch type
	ArchType V1ArchType `json:"archType,omitempty"`

	// host pairing key
	// Format: password
	HostPairingKey strfmt.Password `json:"hostPairingKey,omitempty"`

	// tunnel config
	TunnelConfig *V1SpectroTunnelConfig `json:"tunnelConfig,omitempty"`
}

// Validate validates this v1 edge host device spec entity
func (m *V1EdgeHostDeviceSpecEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostPairingKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunnelConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeHostDeviceSpecEntity) validateArchType(formats strfmt.Registry) error {

	if swag.IsZero(m.ArchType) { // not required
		return nil
	}

	if err := m.ArchType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("archType")
		}
		return err
	}

	return nil
}

func (m *V1EdgeHostDeviceSpecEntity) validateHostPairingKey(formats strfmt.Registry) error {

	if swag.IsZero(m.HostPairingKey) { // not required
		return nil
	}

	if err := validate.FormatOf("hostPairingKey", "body", "password", m.HostPairingKey.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1EdgeHostDeviceSpecEntity) validateTunnelConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.TunnelConfig) { // not required
		return nil
	}

	if m.TunnelConfig != nil {
		if err := m.TunnelConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnelConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EdgeHostDeviceSpecEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EdgeHostDeviceSpecEntity) UnmarshalBinary(b []byte) error {
	var res V1EdgeHostDeviceSpecEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
