// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1PlanLimit Monthly Plan Limit
//
// swagger:model v1PlanLimit
type V1PlanLimit struct {

	// alloy
	Alloy *V1PlanLimitSpec `json:"alloy,omitempty"`

	// is onDemand plan and has no limit
	IsOnDemand bool `json:"isOnDemand"`

	// is unlimited cpu core hours
	IsUnlimited bool `json:"isUnlimited"`

	// pure
	Pure *V1PlanLimitSpec `json:"pure,omitempty"`
}

// Validate validates this v1 plan limit
func (m *V1PlanLimit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlloy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePure(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PlanLimit) validateAlloy(formats strfmt.Registry) error {

	if swag.IsZero(m.Alloy) { // not required
		return nil
	}

	if m.Alloy != nil {
		if err := m.Alloy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alloy")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlanLimit) validatePure(formats strfmt.Registry) error {

	if swag.IsZero(m.Pure) { // not required
		return nil
	}

	if m.Pure != nil {
		if err := m.Pure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pure")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PlanLimit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PlanLimit) UnmarshalBinary(b []byte) error {
	var res V1PlanLimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
