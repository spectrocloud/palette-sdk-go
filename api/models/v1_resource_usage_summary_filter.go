// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ResourceUsageSummaryFilter Resource usage summary filter
//
// swagger:model v1ResourceUsageSummaryFilter
type V1ResourceUsageSummaryFilter struct {

	// clouds
	// Unique: true
	Clouds []string `json:"clouds"`

	// clusters
	// Unique: true
	Clusters []string `json:"clusters"`

	// end time
	// Format: date-time
	EndTime V1Time `json:"endTime,omitempty"`

	// include control plane machines
	IncludeControlPlaneMachines bool `json:"includeControlPlaneMachines,omitempty"`

	// Deprecated. Use includeControlPlaneMachines
	IncludeMasterMachines bool `json:"includeMasterMachines,omitempty"`

	// namespaces
	// Unique: true
	Namespaces []string `json:"namespaces"`

	// pods
	// Unique: true
	Pods []string `json:"pods"`

	// projects
	// Unique: true
	Projects []string `json:"projects"`

	// start time
	// Format: date-time
	StartTime V1Time `json:"startTime,omitempty"`

	// workload
	Workload *V1ResourceWorkloadFilter `json:"workload,omitempty"`

	// workspaces
	// Unique: true
	Workspaces []string `json:"workspaces"`
}

// Validate validates this v1 resource usage summary filter
func (m *V1ResourceUsageSummaryFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ResourceUsageSummaryFilter) validateClouds(formats strfmt.Registry) error {
	if swag.IsZero(m.Clouds) { // not required
		return nil
	}

	if err := validate.UniqueItems("clouds", "body", m.Clouds); err != nil {
		return err
	}

	return nil
}

func (m *V1ResourceUsageSummaryFilter) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	if err := validate.UniqueItems("clusters", "body", m.Clusters); err != nil {
		return err
	}

	return nil
}

func (m *V1ResourceUsageSummaryFilter) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := m.EndTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("endTime")
		}
		return err
	}

	return nil
}

func (m *V1ResourceUsageSummaryFilter) validateNamespaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Namespaces) { // not required
		return nil
	}

	if err := validate.UniqueItems("namespaces", "body", m.Namespaces); err != nil {
		return err
	}

	return nil
}

func (m *V1ResourceUsageSummaryFilter) validatePods(formats strfmt.Registry) error {
	if swag.IsZero(m.Pods) { // not required
		return nil
	}

	if err := validate.UniqueItems("pods", "body", m.Pods); err != nil {
		return err
	}

	return nil
}

func (m *V1ResourceUsageSummaryFilter) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	if err := validate.UniqueItems("projects", "body", m.Projects); err != nil {
		return err
	}

	return nil
}

func (m *V1ResourceUsageSummaryFilter) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := m.StartTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("startTime")
		}
		return err
	}

	return nil
}

func (m *V1ResourceUsageSummaryFilter) validateWorkload(formats strfmt.Registry) error {
	if swag.IsZero(m.Workload) { // not required
		return nil
	}

	if m.Workload != nil {
		if err := m.Workload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workload")
			}
			return err
		}
	}

	return nil
}

func (m *V1ResourceUsageSummaryFilter) validateWorkspaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Workspaces) { // not required
		return nil
	}

	if err := validate.UniqueItems("workspaces", "body", m.Workspaces); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 resource usage summary filter based on the context it is used
func (m *V1ResourceUsageSummaryFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ResourceUsageSummaryFilter) contextValidateEndTime(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := m.EndTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("endTime")
		}
		return err
	}

	return nil
}

func (m *V1ResourceUsageSummaryFilter) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := m.StartTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("startTime")
		}
		return err
	}

	return nil
}

func (m *V1ResourceUsageSummaryFilter) contextValidateWorkload(ctx context.Context, formats strfmt.Registry) error {

	if m.Workload != nil {

		if swag.IsZero(m.Workload) { // not required
			return nil
		}

		if err := m.Workload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ResourceUsageSummaryFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ResourceUsageSummaryFilter) UnmarshalBinary(b []byte) error {
	var res V1ResourceUsageSummaryFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
