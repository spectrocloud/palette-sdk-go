// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1CoxEdgeCloudAccount CoxEdge cloud account
//
// swagger:model v1CoxEdgeCloudAccount
type V1CoxEdgeCloudAccount struct {

	// The base url - used to make api calls
	// Required: true
	APIBaseURL *string `json:"apiBaseUrl"`

	// CoxEdge cloud account ApiKey
	// Required: true
	APIKey *string `json:"apiKey"`

	// The environment belonging to the organization
	Environment string `json:"environment,omitempty"`

	// The Id of organization
	OrganizationID string `json:"organizationId,omitempty"`

	// The service for which the organization is allowed to provision resources
	Service string `json:"service,omitempty"`
}

// Validate validates this v1 cox edge cloud account
func (m *V1CoxEdgeCloudAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIBaseURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CoxEdgeCloudAccount) validateAPIBaseURL(formats strfmt.Registry) error {

	if err := validate.Required("apiBaseUrl", "body", m.APIBaseURL); err != nil {
		return err
	}

	return nil
}

func (m *V1CoxEdgeCloudAccount) validateAPIKey(formats strfmt.Registry) error {

	if err := validate.Required("apiKey", "body", m.APIKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CoxEdgeCloudAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CoxEdgeCloudAccount) UnmarshalBinary(b []byte) error {
	var res V1CoxEdgeCloudAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
