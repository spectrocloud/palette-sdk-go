// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1VsphereCloudConfigStatus VsphereCloudConfigStatus defines the observed state of VsphereCloudConfig
//
// swagger:model v1VsphereCloudConfigStatus
type V1VsphereCloudConfigStatus struct {

	// ansible digest
	AnsibleDigest string `json:"ansibleDigest,omitempty"`

	// conditions
	Conditions []*V1ClusterCondition `json:"conditions"`

	// addon layers present in spc
	IsAddonLayer bool `json:"isAddonLayer,omitempty"`

	// last o v a created
	LastOVACreated string `json:"lastOVACreated,omitempty"`

	// last VM exported
	LastVMExported string `json:"lastVMExported,omitempty"`

	// node image
	NodeImage *V1VsphereImage `json:"nodeImage,omitempty"`

	// this map will be for ansible roles present in eack pack
	RoleDigest map[string]string `json:"roleDigest,omitempty"`

	// sourceImageId, it can be from packref's annotations or from pack.json
	SourceImageID string `json:"sourceImageId,omitempty"`

	// UploadOVAS3 will hold last image name which uploaded to S3
	UploadOvaS3 string `json:"uploadOvaS3,omitempty"`

	// If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add
	UseCapiImage bool `json:"useCapiImage,omitempty"`
}

// Validate validates this v1 vsphere cloud config status
func (m *V1VsphereCloudConfigStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VsphereCloudConfigStatus) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1VsphereCloudConfigStatus) validateNodeImage(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeImage) { // not required
		return nil
	}

	if m.NodeImage != nil {
		if err := m.NodeImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeImage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VsphereCloudConfigStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VsphereCloudConfigStatus) UnmarshalBinary(b []byte) error {
	var res V1VsphereCloudConfigStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
