// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1CloudStackNetworkSpec Enhanced network configuration for CloudStack
//
// swagger:model v1CloudStackNetworkSpec
type V1CloudStackNetworkSpec struct {

	// Gateway IP address for the network
	Gateway string `json:"gateway,omitempty"`

	// Network name
	Name string `json:"name,omitempty"`

	// Network mask for the network
	Netmask string `json:"netmask,omitempty"`

	// Network offering name
	Offering string `json:"offering,omitempty"`

	// Routing mode for the network
	RoutingMode string `json:"routingMode,omitempty"`

	// Network type: Isolated, Shared, etc.
	Type string `json:"type,omitempty"`

	// VPC configuration (optional, for VPC networks)
	Vpc *V1CloudStackVPCSpec `json:"vpc,omitempty"`
}

// Validate validates this v1 cloud stack network spec
func (m *V1CloudStackNetworkSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CloudStackNetworkSpec) validateVpc(formats strfmt.Registry) error {
	if swag.IsZero(m.Vpc) { // not required
		return nil
	}

	if m.Vpc != nil {
		if err := m.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 cloud stack network spec based on the context it is used
func (m *V1CloudStackNetworkSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVpc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CloudStackNetworkSpec) contextValidateVpc(ctx context.Context, formats strfmt.Registry) error {

	if m.Vpc != nil {

		if swag.IsZero(m.Vpc) { // not required
			return nil
		}

		if err := m.Vpc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CloudStackNetworkSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CloudStackNetworkSpec) UnmarshalBinary(b []byte) error {
	var res V1CloudStackNetworkSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
