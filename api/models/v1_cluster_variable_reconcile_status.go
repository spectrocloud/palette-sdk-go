// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterVariableReconcileStatus Cluster variable reconciliation status
//
// swagger:model v1ClusterVariableReconcileStatus
type V1ClusterVariableReconcileStatus struct {

	// Variable reconciliation state
	// Enum: ["Resolved","Unresolved"]
	State string `json:"state,omitempty"`
}

// Validate validates this v1 cluster variable reconcile status
func (m *V1ClusterVariableReconcileStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1ClusterVariableReconcileStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Resolved","Unresolved"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterVariableReconcileStatusTypeStatePropEnum = append(v1ClusterVariableReconcileStatusTypeStatePropEnum, v)
	}
}

const (

	// V1ClusterVariableReconcileStatusStateResolved captures enum value "Resolved"
	V1ClusterVariableReconcileStatusStateResolved string = "Resolved"

	// V1ClusterVariableReconcileStatusStateUnresolved captures enum value "Unresolved"
	V1ClusterVariableReconcileStatusStateUnresolved string = "Unresolved"
)

// prop value enum
func (m *V1ClusterVariableReconcileStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterVariableReconcileStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterVariableReconcileStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 cluster variable reconcile status based on context it is used
func (m *V1ClusterVariableReconcileStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterVariableReconcileStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterVariableReconcileStatus) UnmarshalBinary(b []byte) error {
	var res V1ClusterVariableReconcileStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
