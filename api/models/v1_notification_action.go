// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1NotificationAction Describes actions for the notification
//
// swagger:model v1NotificationAction
type V1NotificationAction struct {

	// Describes the acknowledgement status for the notification
	Ack bool `json:"ack"`

	// Describes information related to notification action
	ActionMessage string `json:"actionMessage,omitempty"`

	// Describes action type for the notification. Possible Values [NotifyActionPacksUpdate, NotifyActionClusterProfileUpdate, NotifyActionPackRegistryUpdate, NotifyActionClusterUpdate, NotifyActionNone]
	// Enum: ["NotifyActionPacksUpdate","NotifyActionClusterProfileUpdate","NotifyActionPackRegistryUpdate","NotifyActionClusterUpdate","NotifyActionNone"]
	ActionType string `json:"actionType,omitempty"`

	// Describes the events happened for the notifications
	Events map[string]map[string]string `json:"events,omitempty"`

	// Describes the "Done" status for the notification
	IsDone bool `json:"isDone"`

	// Describes the notification as a information
	IsInfo bool `json:"isInfo"`

	// link
	Link string `json:"link,omitempty"`
}

// Validate validates this v1 notification action
func (m *V1NotificationAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1NotificationActionTypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotifyActionPacksUpdate","NotifyActionClusterProfileUpdate","NotifyActionPackRegistryUpdate","NotifyActionClusterUpdate","NotifyActionNone"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1NotificationActionTypeActionTypePropEnum = append(v1NotificationActionTypeActionTypePropEnum, v)
	}
}

const (

	// V1NotificationActionActionTypeNotifyActionPacksUpdate captures enum value "NotifyActionPacksUpdate"
	V1NotificationActionActionTypeNotifyActionPacksUpdate string = "NotifyActionPacksUpdate"

	// V1NotificationActionActionTypeNotifyActionClusterProfileUpdate captures enum value "NotifyActionClusterProfileUpdate"
	V1NotificationActionActionTypeNotifyActionClusterProfileUpdate string = "NotifyActionClusterProfileUpdate"

	// V1NotificationActionActionTypeNotifyActionPackRegistryUpdate captures enum value "NotifyActionPackRegistryUpdate"
	V1NotificationActionActionTypeNotifyActionPackRegistryUpdate string = "NotifyActionPackRegistryUpdate"

	// V1NotificationActionActionTypeNotifyActionClusterUpdate captures enum value "NotifyActionClusterUpdate"
	V1NotificationActionActionTypeNotifyActionClusterUpdate string = "NotifyActionClusterUpdate"

	// V1NotificationActionActionTypeNotifyActionNone captures enum value "NotifyActionNone"
	V1NotificationActionActionTypeNotifyActionNone string = "NotifyActionNone"
)

// prop value enum
func (m *V1NotificationAction) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1NotificationActionTypeActionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1NotificationAction) validateActionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionTypeEnum("actionType", "body", m.ActionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 notification action based on context it is used
func (m *V1NotificationAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1NotificationAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1NotificationAction) UnmarshalBinary(b []byte) error {
	var res V1NotificationAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
