// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ClusterRepaveState v1 cluster repave state
//
// swagger:model v1ClusterRepaveState
type V1ClusterRepaveState string

const (

	// V1ClusterRepaveStatePending captures enum value "Pending"
	V1ClusterRepaveStatePending V1ClusterRepaveState = "Pending"

	// V1ClusterRepaveStateApproved captures enum value "Approved"
	V1ClusterRepaveStateApproved V1ClusterRepaveState = "Approved"

	// V1ClusterRepaveStateReverted captures enum value "Reverted"
	V1ClusterRepaveStateReverted V1ClusterRepaveState = "Reverted"
)

// for schema
var v1ClusterRepaveStateEnum []interface{}

func init() {
	var res []V1ClusterRepaveState
	if err := json.Unmarshal([]byte(`["Pending","Approved","Reverted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterRepaveStateEnum = append(v1ClusterRepaveStateEnum, v)
	}
}

func (m V1ClusterRepaveState) validateV1ClusterRepaveStateEnum(path, location string, value V1ClusterRepaveState) error {
	if err := validate.EnumCase(path, location, value, v1ClusterRepaveStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 cluster repave state
func (m V1ClusterRepaveState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ClusterRepaveStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
