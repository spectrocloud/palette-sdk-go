// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterGroupSpecEntity Cluster group specifications request entity
//
// swagger:model v1ClusterGroupSpecEntity
type V1ClusterGroupSpecEntity struct {

	// cluster refs
	// Unique: true
	ClusterRefs []*V1ClusterGroupClusterRef `json:"clusterRefs"`

	// clusters config
	ClustersConfig *V1ClusterGroupClustersConfig `json:"clustersConfig,omitempty"`

	// profiles
	Profiles []*V1SpectroClusterProfileEntity `json:"profiles"`

	// type
	// Enum: ["hostCluster"]
	Type string `json:"type,omitempty"`
}

// Validate validates this v1 cluster group spec entity
func (m *V1ClusterGroupSpecEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterRefs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterGroupSpecEntity) validateClusterRefs(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterRefs) { // not required
		return nil
	}

	if err := validate.UniqueItems("clusterRefs", "body", m.ClusterRefs); err != nil {
		return err
	}

	for i := 0; i < len(m.ClusterRefs); i++ {
		if swag.IsZero(m.ClusterRefs[i]) { // not required
			continue
		}

		if m.ClusterRefs[i] != nil {
			if err := m.ClusterRefs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterRefs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterGroupSpecEntity) validateClustersConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersConfig) { // not required
		return nil
	}

	if m.ClustersConfig != nil {
		if err := m.ClustersConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clustersConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clustersConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterGroupSpecEntity) validateProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	for i := 0; i < len(m.Profiles); i++ {
		if swag.IsZero(m.Profiles[i]) { // not required
			continue
		}

		if m.Profiles[i] != nil {
			if err := m.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var v1ClusterGroupSpecEntityTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hostCluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterGroupSpecEntityTypeTypePropEnum = append(v1ClusterGroupSpecEntityTypeTypePropEnum, v)
	}
}

const (

	// V1ClusterGroupSpecEntityTypeHostCluster captures enum value "hostCluster"
	V1ClusterGroupSpecEntityTypeHostCluster string = "hostCluster"
)

// prop value enum
func (m *V1ClusterGroupSpecEntity) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterGroupSpecEntityTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterGroupSpecEntity) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 cluster group spec entity based on the context it is used
func (m *V1ClusterGroupSpecEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterRefs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterGroupSpecEntity) contextValidateClusterRefs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterRefs); i++ {

		if m.ClusterRefs[i] != nil {

			if swag.IsZero(m.ClusterRefs[i]) { // not required
				return nil
			}

			if err := m.ClusterRefs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterRefs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterGroupSpecEntity) contextValidateClustersConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersConfig != nil {

		if swag.IsZero(m.ClustersConfig) { // not required
			return nil
		}

		if err := m.ClustersConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clustersConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clustersConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterGroupSpecEntity) contextValidateProfiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Profiles); i++ {

		if m.Profiles[i] != nil {

			if swag.IsZero(m.Profiles[i]) { // not required
				return nil
			}

			if err := m.Profiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterGroupSpecEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterGroupSpecEntity) UnmarshalBinary(b []byte) error {
	var res V1ClusterGroupSpecEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
