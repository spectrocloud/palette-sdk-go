// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1GpuConfig GPU configuration for resource allocation
//
// swagger:model v1GpuConfig
type V1GpuConfig struct {

	// GPU resource limit
	// Minimum: -1
	Limit int32 `json:"limit"`

	// GPU provider (only nvidia is supported currently)
	// Enum: ["nvidia"]
	Provider *string `json:"provider,omitempty"`
}

// Validate validates this v1 gpu config
func (m *V1GpuConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GpuConfig) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", int64(m.Limit), -1, false); err != nil {
		return err
	}

	return nil
}

var v1GpuConfigTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nvidia"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1GpuConfigTypeProviderPropEnum = append(v1GpuConfigTypeProviderPropEnum, v)
	}
}

const (

	// V1GpuConfigProviderNvidia captures enum value "nvidia"
	V1GpuConfigProviderNvidia string = "nvidia"
)

// prop value enum
func (m *V1GpuConfig) validateProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1GpuConfigTypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1GpuConfig) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", *m.Provider); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 gpu config based on context it is used
func (m *V1GpuConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1GpuConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1GpuConfig) UnmarshalBinary(b []byte) error {
	var res V1GpuConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
