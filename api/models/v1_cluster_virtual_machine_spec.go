// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterVirtualMachineSpec VirtualMachineSpec describes how the proper VirtualMachine should look like
//
// swagger:model v1ClusterVirtualMachineSpec
type V1ClusterVirtualMachineSpec struct {

	// dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.
	DataVolumeTemplates []*V1VMDataVolumeTemplateSpec `json:"dataVolumeTemplates"`

	// instancetype
	Instancetype *V1VMInstancetypeMatcher `json:"instancetype,omitempty"`

	// preference
	Preference *V1VMPreferenceMatcher `json:"preference,omitempty"`

	// Running state indicates the requested running state of the VirtualMachineInstance mutually exclusive with Running
	RunStrategy string `json:"runStrategy,omitempty"`

	// Running controls whether the associatied VirtualMachineInstance is created or not Mutually exclusive with RunStrategy
	Running bool `json:"running,omitempty"`

	// template
	// Required: true
	Template *V1VMVirtualMachineInstanceTemplateSpec `json:"template"`
}

// Validate validates this v1 cluster virtual machine spec
func (m *V1ClusterVirtualMachineSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataVolumeTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstancetype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterVirtualMachineSpec) validateDataVolumeTemplates(formats strfmt.Registry) error {

	if swag.IsZero(m.DataVolumeTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.DataVolumeTemplates); i++ {
		if swag.IsZero(m.DataVolumeTemplates[i]) { // not required
			continue
		}

		if m.DataVolumeTemplates[i] != nil {
			if err := m.DataVolumeTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataVolumeTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterVirtualMachineSpec) validateInstancetype(formats strfmt.Registry) error {

	if swag.IsZero(m.Instancetype) { // not required
		return nil
	}

	if m.Instancetype != nil {
		if err := m.Instancetype.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instancetype")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterVirtualMachineSpec) validatePreference(formats strfmt.Registry) error {

	if swag.IsZero(m.Preference) { // not required
		return nil
	}

	if m.Preference != nil {
		if err := m.Preference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preference")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterVirtualMachineSpec) validateTemplate(formats strfmt.Registry) error {

	if err := validate.Required("template", "body", m.Template); err != nil {
		return err
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterVirtualMachineSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterVirtualMachineSpec) UnmarshalBinary(b []byte) error {
	var res V1ClusterVirtualMachineSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
