// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ClusterState v1 cluster state
//
// swagger:model v1ClusterState
type V1ClusterState string

const (

	// V1ClusterStatePending captures enum value "Pending"
	V1ClusterStatePending V1ClusterState = "Pending"

	// V1ClusterStateProvisioning captures enum value "Provisioning"
	V1ClusterStateProvisioning V1ClusterState = "Provisioning"

	// V1ClusterStateRunning captures enum value "Running"
	V1ClusterStateRunning V1ClusterState = "Running"

	// V1ClusterStateDeleting captures enum value "Deleting"
	V1ClusterStateDeleting V1ClusterState = "Deleting"

	// V1ClusterStateDeleted captures enum value "Deleted"
	V1ClusterStateDeleted V1ClusterState = "Deleted"

	// V1ClusterStateError captures enum value "Error"
	V1ClusterStateError V1ClusterState = "Error"

	// V1ClusterStateImporting captures enum value "Importing"
	V1ClusterStateImporting V1ClusterState = "Importing"
)

// for schema
var v1ClusterStateEnum []interface{}

func init() {
	var res []V1ClusterState
	if err := json.Unmarshal([]byte(`["Pending","Provisioning","Running","Deleting","Deleted","Error","Importing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterStateEnum = append(v1ClusterStateEnum, v)
	}
}

func (m V1ClusterState) validateV1ClusterStateEnum(path, location string, value V1ClusterState) error {
	if err := validate.EnumCase(path, location, value, v1ClusterStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 cluster state
func (m V1ClusterState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ClusterStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
