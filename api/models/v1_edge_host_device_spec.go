// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1EdgeHostDeviceSpec EdgeHostDeviceSpec defines the desired state of EdgeHostDevice
//
// swagger:model v1EdgeHostDeviceSpec
type V1EdgeHostDeviceSpec struct {

	// cloud properties
	CloudProperties *V1EdgeHostCloudProperties `json:"cloudProperties,omitempty"`

	// cluster profile templates
	ClusterProfileTemplates []*V1ClusterProfileTemplate `json:"clusterProfileTemplates"`

	// device
	Device *V1DeviceSpec `json:"device,omitempty"`

	// host
	Host *V1EdgeHost `json:"host,omitempty"`

	// properties
	Properties *V1EdgeHostProperties `json:"properties,omitempty"`

	// service
	Service *V1ServiceSpec `json:"service,omitempty"`

	// tunnel config
	TunnelConfig *V1SpectroTunnelConfig `json:"tunnelConfig,omitempty"`

	// Deprecated. Cloudtype of the provisioned edge host
	// Enum: [vsphere edge-native]
	Type string `json:"type,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this v1 edge host device spec
func (m *V1EdgeHostDeviceSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterProfileTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunnelConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeHostDeviceSpec) validateCloudProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudProperties) { // not required
		return nil
	}

	if m.CloudProperties != nil {
		if err := m.CloudProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudProperties")
			}
			return err
		}
	}

	return nil
}

func (m *V1EdgeHostDeviceSpec) validateClusterProfileTemplates(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterProfileTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterProfileTemplates); i++ {
		if swag.IsZero(m.ClusterProfileTemplates[i]) { // not required
			continue
		}

		if m.ClusterProfileTemplates[i] != nil {
			if err := m.ClusterProfileTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterProfileTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1EdgeHostDeviceSpec) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *V1EdgeHostDeviceSpec) validateHost(formats strfmt.Registry) error {

	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *V1EdgeHostDeviceSpec) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *V1EdgeHostDeviceSpec) validateService(formats strfmt.Registry) error {

	if swag.IsZero(m.Service) { // not required
		return nil
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *V1EdgeHostDeviceSpec) validateTunnelConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.TunnelConfig) { // not required
		return nil
	}

	if m.TunnelConfig != nil {
		if err := m.TunnelConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnelConfig")
			}
			return err
		}
	}

	return nil
}

var v1EdgeHostDeviceSpecTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vsphere","edge-native"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1EdgeHostDeviceSpecTypeTypePropEnum = append(v1EdgeHostDeviceSpecTypeTypePropEnum, v)
	}
}

const (

	// V1EdgeHostDeviceSpecTypeVsphere captures enum value "vsphere"
	V1EdgeHostDeviceSpecTypeVsphere string = "vsphere"

	// V1EdgeHostDeviceSpecTypeEdgeNative captures enum value "edge-native"
	V1EdgeHostDeviceSpecTypeEdgeNative string = "edge-native"
)

// prop value enum
func (m *V1EdgeHostDeviceSpec) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1EdgeHostDeviceSpecTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1EdgeHostDeviceSpec) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EdgeHostDeviceSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EdgeHostDeviceSpec) UnmarshalBinary(b []byte) error {
	var res V1EdgeHostDeviceSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
