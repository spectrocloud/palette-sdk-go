// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SSHTunnelStatus v1 Ssh tunnel status
//
// swagger:model v1SshTunnelStatus
type V1SSHTunnelStatus struct {

	// LastModifiedTime is the last modified time of the SSH tunnel
	// Format: date-time
	LastModifiedTime V1Time `json:"lastModifiedTime,omitempty"`

	// Message is the status message of the SSH tunnel
	Message string `json:"message,omitempty"`

	// State is the state of the SSH tunnel
	// Enum: ["Initiating","Created","Deleting","Deleted","Failed"]
	State string `json:"state,omitempty"`

	// User is the temporary user of the SSH tunnel
	User *V1SSHUserStatus `json:"user,omitempty"`
}

// Validate validates this v1 Ssh tunnel status
func (m *V1SSHTunnelStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastModifiedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SSHTunnelStatus) validateLastModifiedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedTime) { // not required
		return nil
	}

	if err := m.LastModifiedTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastModifiedTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastModifiedTime")
		}
		return err
	}

	return nil
}

var v1SshTunnelStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Initiating","Created","Deleting","Deleted","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1SshTunnelStatusTypeStatePropEnum = append(v1SshTunnelStatusTypeStatePropEnum, v)
	}
}

const (

	// V1SSHTunnelStatusStateInitiating captures enum value "Initiating"
	V1SSHTunnelStatusStateInitiating string = "Initiating"

	// V1SSHTunnelStatusStateCreated captures enum value "Created"
	V1SSHTunnelStatusStateCreated string = "Created"

	// V1SSHTunnelStatusStateDeleting captures enum value "Deleting"
	V1SSHTunnelStatusStateDeleting string = "Deleting"

	// V1SSHTunnelStatusStateDeleted captures enum value "Deleted"
	V1SSHTunnelStatusStateDeleted string = "Deleted"

	// V1SSHTunnelStatusStateFailed captures enum value "Failed"
	V1SSHTunnelStatusStateFailed string = "Failed"
)

// prop value enum
func (m *V1SSHTunnelStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1SshTunnelStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1SSHTunnelStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *V1SSHTunnelStatus) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 Ssh tunnel status based on the context it is used
func (m *V1SSHTunnelStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastModifiedTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SSHTunnelStatus) contextValidateLastModifiedTime(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedTime) { // not required
		return nil
	}

	if err := m.LastModifiedTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastModifiedTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastModifiedTime")
		}
		return err
	}

	return nil
}

func (m *V1SSHTunnelStatus) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SSHTunnelStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SSHTunnelStatus) UnmarshalBinary(b []byte) error {
	var res V1SSHTunnelStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
