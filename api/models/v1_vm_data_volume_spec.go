// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1VMDataVolumeSpec DataVolumeSpec defines the DataVolume type specification
//
// swagger:model v1VmDataVolumeSpec
type V1VMDataVolumeSpec struct {

	// Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.
	Checkpoints []*V1VMDataVolumeCheckpoint `json:"checkpoints"`

	// DataVolumeContentType options: "kubevirt", "archive"
	ContentType string `json:"contentType,omitempty"`

	// FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.
	FinalCheckpoint bool `json:"finalCheckpoint,omitempty"`

	// Preallocation controls whether storage for DataVolumes should be allocated in advance.
	Preallocation bool `json:"preallocation,omitempty"`

	// PriorityClassName for Importer, Cloner and Uploader pod
	PriorityClassName string `json:"priorityClassName,omitempty"`

	// pvc
	Pvc *V1VMPersistentVolumeClaimSpec `json:"pvc,omitempty"`

	// source
	Source *V1VMDataVolumeSource `json:"source,omitempty"`

	// source ref
	SourceRef *V1VMDataVolumeSourceRef `json:"sourceRef,omitempty"`

	// storage
	Storage *V1VMStorageSpec `json:"storage,omitempty"`
}

// Validate validates this v1 Vm data volume spec
func (m *V1VMDataVolumeSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePvc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMDataVolumeSpec) validateCheckpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.Checkpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.Checkpoints); i++ {
		if swag.IsZero(m.Checkpoints[i]) { // not required
			continue
		}

		if m.Checkpoints[i] != nil {
			if err := m.Checkpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checkpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1VMDataVolumeSpec) validatePvc(formats strfmt.Registry) error {

	if swag.IsZero(m.Pvc) { // not required
		return nil
	}

	if m.Pvc != nil {
		if err := m.Pvc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pvc")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDataVolumeSpec) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDataVolumeSpec) validateSourceRef(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceRef) { // not required
		return nil
	}

	if m.SourceRef != nil {
		if err := m.SourceRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMDataVolumeSpec) validateStorage(formats strfmt.Registry) error {

	if swag.IsZero(m.Storage) { // not required
		return nil
	}

	if m.Storage != nil {
		if err := m.Storage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VMDataVolumeSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMDataVolumeSpec) UnmarshalBinary(b []byte) error {
	var res V1VMDataVolumeSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
