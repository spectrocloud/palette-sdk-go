// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1HelmRegistrySpecEntity Helm registry credentials spec
//
// swagger:model v1HelmRegistrySpecEntity
type V1HelmRegistrySpecEntity struct {

	// auth
	// Required: true
	Auth *V1RegistryAuth `json:"auth"`

	// create option
	CreateOption *V1HelmRegistryCreateOption `json:"createOption,omitempty"`

	// endpoint
	// Required: true
	Endpoint *string `json:"endpoint"`

	// is private
	IsPrivate bool `json:"isPrivate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// scope
	Scope string `json:"scope,omitempty"`
}

// Validate validates this v1 helm registry spec entity
func (m *V1HelmRegistrySpecEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1HelmRegistrySpecEntity) validateAuth(formats strfmt.Registry) error {

	if err := validate.Required("auth", "body", m.Auth); err != nil {
		return err
	}

	if m.Auth != nil {
		if err := m.Auth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth")
			}
			return err
		}
	}

	return nil
}

func (m *V1HelmRegistrySpecEntity) validateCreateOption(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateOption) { // not required
		return nil
	}

	if m.CreateOption != nil {
		if err := m.CreateOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOption")
			}
			return err
		}
	}

	return nil
}

func (m *V1HelmRegistrySpecEntity) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1HelmRegistrySpecEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1HelmRegistrySpecEntity) UnmarshalBinary(b []byte) error {
	var res V1HelmRegistrySpecEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
