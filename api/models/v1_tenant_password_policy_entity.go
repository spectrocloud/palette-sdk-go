// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1TenantPasswordPolicyEntity Tenant Password Policy Entity
//
// swagger:model v1TenantPasswordPolicyEntity
type V1TenantPasswordPolicyEntity struct {

	// creation timestamp
	// Format: date-time
	CreationTimestamp V1Time `json:"creationTimestamp,omitempty"`

	// expiry duration in days
	ExpiryDurationInDays int64 `json:"expiryDurationInDays,omitempty"`

	// first reminder in days
	FirstReminderInDays int64 `json:"firstReminderInDays,omitempty"`

	// is regex
	IsRegex bool `json:"isRegex,omitempty"`

	// max length
	MaxLength int64 `json:"maxLength,omitempty"`

	// min length
	MinLength int64 `json:"minLength,omitempty"`

	// min num of block letters
	MinNumOfBlockLetters int64 `json:"minNumOfBlockLetters,omitempty"`

	// min num of digits
	MinNumOfDigits int64 `json:"minNumOfDigits,omitempty"`

	// min num of small letters
	MinNumOfSmallLetters int64 `json:"minNumOfSmallLetters,omitempty"`

	// min num of special characters
	MinNumOfSpecialCharacters int64 `json:"minNumOfSpecialCharacters,omitempty"`

	// regex
	Regex string `json:"regex,omitempty"`

	// update timestamp
	// Format: date-time
	UpdateTimestamp V1Time `json:"updateTimestamp,omitempty"`
}

// Validate validates this v1 tenant password policy entity
func (m *V1TenantPasswordPolicyEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TenantPasswordPolicyEntity) validateCreationTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := m.CreationTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("creationTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("creationTimestamp")
		}
		return err
	}

	return nil
}

func (m *V1TenantPasswordPolicyEntity) validateUpdateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTimestamp) { // not required
		return nil
	}

	if err := m.UpdateTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updateTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updateTimestamp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1 tenant password policy entity based on the context it is used
func (m *V1TenantPasswordPolicyEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreationTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TenantPasswordPolicyEntity) contextValidateCreationTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := m.CreationTimestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("creationTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("creationTimestamp")
		}
		return err
	}

	return nil
}

func (m *V1TenantPasswordPolicyEntity) contextValidateUpdateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateTimestamp) { // not required
		return nil
	}

	if err := m.UpdateTimestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updateTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updateTimestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TenantPasswordPolicyEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TenantPasswordPolicyEntity) UnmarshalBinary(b []byte) error {
	var res V1TenantPasswordPolicyEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
