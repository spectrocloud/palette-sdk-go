// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1HybridMachinePool Metadata information related to a hybrid machine pool launched as part of an hybrid cluster
//
// swagger:model v1HybridMachinePool
type V1HybridMachinePool struct {

	// Cloud config uid associated with the hybrid machine pool
	CloudConfigUID string `json:"cloudConfigUid,omitempty"`

	// Cloud type of the hybrid machine pool
	CloudType string `json:"cloudType,omitempty"`

	// Uid of the hybrid machine pool cluster
	ClusterUID string `json:"clusterUid,omitempty"`

	// Name of the hybrid machine pool
	Name string `json:"name,omitempty"`

	// status
	Status *V1HybridMachinePoolStatus `json:"status,omitempty"`

	// Uid of the hybrid machine pool
	UID string `json:"uid,omitempty"`
}

// Validate validates this v1 hybrid machine pool
func (m *V1HybridMachinePool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1HybridMachinePool) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1HybridMachinePool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1HybridMachinePool) UnmarshalBinary(b []byte) error {
	var res V1HybridMachinePool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
