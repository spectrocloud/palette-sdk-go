// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1TenantSamlSpec Tenant
//
// swagger:model v1TenantSamlSpec
type V1TenantSamlSpec struct {

	// acs Url
	AcsURL string `json:"acsUrl,omitempty"`

	// attributes
	Attributes []*V1TenantSamlSpecAttribute `json:"attributes"`

	// same as entity id
	AudienceURL string `json:"audienceUrl,omitempty"`

	// certificate for slo
	Certificate string `json:"certificate,omitempty"`

	// default teams
	DefaultTeams []string `json:"defaultTeams"`

	// entity Id
	EntityID string `json:"entityId,omitempty"`

	// federation metadata
	FederationMetadata string `json:"federationMetadata,omitempty"`

	// identity provider
	IdentityProvider string `json:"identityProvider,omitempty"`

	// is single logout enabled
	IsSingleLogoutEnabled bool `json:"isSingleLogoutEnabled"`

	// is sso enabled
	IsSsoEnabled bool `json:"isSsoEnabled"`

	// same as entity id
	Issuer string `json:"issuer,omitempty"`

	// name Id format
	NameIDFormat string `json:"nameIdFormat,omitempty"`

	// service provider metadata
	ServiceProviderMetadata string `json:"serviceProviderMetadata,omitempty"`

	// slo url
	SingleLogoutURL string `json:"singleLogoutUrl"`

	// When syncSsoTeams is set to true, all the teams from the OIDC configuration are pulled and saved in palette whereas when set to false, only the teams which are part of palette are pulled and saved
	SyncSsoTeams bool `json:"syncSsoTeams"`
}

// Validate validates this v1 tenant saml spec
func (m *V1TenantSamlSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TenantSamlSpec) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TenantSamlSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TenantSamlSpec) UnmarshalBinary(b []byte) error {
	var res V1TenantSamlSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
