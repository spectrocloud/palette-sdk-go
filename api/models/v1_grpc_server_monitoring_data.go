// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1GrpcServerMonitoringData v1 grpc server monitoring data
//
// swagger:model v1GrpcServerMonitoringData
type V1GrpcServerMonitoringData struct {

	// clients
	Clients map[string]V1GrpcClientMonitoringData `json:"clients,omitempty"`

	// is error
	IsError bool `json:"isError,omitempty"`

	// message logs
	MessageLogs []string `json:"messageLogs"`

	// subjects
	Subjects map[string]V1GrpcSubjectMonitoringData `json:"subjects,omitempty"`

	// total clients
	TotalClients int64 `json:"totalClients,omitempty"`

	// total subjects
	TotalSubjects int64 `json:"totalSubjects,omitempty"`
}

// Validate validates this v1 grpc server monitoring data
func (m *V1GrpcServerMonitoringData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GrpcServerMonitoringData) validateClients(formats strfmt.Registry) error {

	if swag.IsZero(m.Clients) { // not required
		return nil
	}

	for k := range m.Clients {

		if err := validate.Required("clients"+"."+k, "body", m.Clients[k]); err != nil {
			return err
		}
		if val, ok := m.Clients[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1GrpcServerMonitoringData) validateSubjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Subjects) { // not required
		return nil
	}

	for k := range m.Subjects {

		if err := validate.Required("subjects"+"."+k, "body", m.Subjects[k]); err != nil {
			return err
		}
		if val, ok := m.Subjects[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1GrpcServerMonitoringData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1GrpcServerMonitoringData) UnmarshalBinary(b []byte) error {
	var res V1GrpcServerMonitoringData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
