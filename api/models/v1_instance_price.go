// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1InstancePrice Cloud instance price
//
// swagger:model v1InstancePrice
type V1InstancePrice struct {

	// OnDemand price of instance
	OnDemand float64 `json:"onDemand,omitempty"`

	// Os associated with instance price. Allowed values - [linux, windows]
	// Enum: [linux windows]
	Os string `json:"os,omitempty"`

	// Spot price of instance
	Spot float64 `json:"spot,omitempty"`
}

// Validate validates this v1 instance price
func (m *V1InstancePrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1InstancePriceTypeOsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["linux","windows"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1InstancePriceTypeOsPropEnum = append(v1InstancePriceTypeOsPropEnum, v)
	}
}

const (

	// V1InstancePriceOsLinux captures enum value "linux"
	V1InstancePriceOsLinux string = "linux"

	// V1InstancePriceOsWindows captures enum value "windows"
	V1InstancePriceOsWindows string = "windows"
)

// prop value enum
func (m *V1InstancePrice) validateOsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1InstancePriceTypeOsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1InstancePrice) validateOs(formats strfmt.Registry) error {

	if swag.IsZero(m.Os) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsEnum("os", "body", m.Os); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1InstancePrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1InstancePrice) UnmarshalBinary(b []byte) error {
	var res V1InstancePrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
