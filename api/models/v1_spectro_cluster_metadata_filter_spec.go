// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1SpectroClusterMetadataFilterSpec Spectro cluster filter spec
//
// swagger:model v1SpectroClusterMetadataFilterSpec
type V1SpectroClusterMetadataFilterSpec struct {

	// environment
	Environment string `json:"environment,omitempty"`

	// include virtual
	IncludeVirtual *bool `json:"includeVirtual,omitempty"`

	// isAlloy is renamed to isImported
	IsAlloy *bool `json:"isAlloy,omitempty"`

	// is import read only
	IsImportReadOnly *bool `json:"isImportReadOnly,omitempty"`

	// is imported
	IsImported *bool `json:"isImported,omitempty"`

	// name
	Name *V1FilterString `json:"name,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this v1 spectro cluster metadata filter spec
func (m *V1SpectroClusterMetadataFilterSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterMetadataFilterSpec) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterMetadataFilterSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterMetadataFilterSpec) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterMetadataFilterSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
