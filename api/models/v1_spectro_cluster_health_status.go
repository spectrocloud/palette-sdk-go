// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SpectroClusterHealthStatus Spectro cluster health status
//
// swagger:model v1SpectroClusterHealthStatus
type V1SpectroClusterHealthStatus struct {

	// agent version
	AgentVersion string `json:"agentVersion,omitempty"`

	// conditions
	// Unique: true
	Conditions []*V1SpectroClusterHealthCondition `json:"conditions"`

	// last heart beat timestamp
	// Format: date-time
	LastHeartBeatTimestamp V1Time `json:"lastHeartBeatTimestamp,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this v1 spectro cluster health status
func (m *V1SpectroClusterHealthStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastHeartBeatTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterHealthStatus) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	if err := validate.UniqueItems("conditions", "body", m.Conditions); err != nil {
		return err
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SpectroClusterHealthStatus) validateLastHeartBeatTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.LastHeartBeatTimestamp) { // not required
		return nil
	}

	if err := m.LastHeartBeatTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastHeartBeatTimestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterHealthStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterHealthStatus) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterHealthStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
