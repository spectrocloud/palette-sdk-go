// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1EdgeNativeHybridClusterConfig EdgeNativeHybridClusterConfig defines Edge Native Cluster specific specification
//
// swagger:model v1EdgeNativeHybridClusterConfig
type V1EdgeNativeHybridClusterConfig struct {

	// ControlPlaneEndpoint is the control plane endpoint, which can be an IP or FQDN
	ControlPlaneEndpoint *V1EdgeNativeControlPlaneEndPoint `json:"controlPlaneEndpoint,omitempty"`

	// NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list
	NtpServers []string `json:"ntpServers"`

	// SSHKeys specifies a list of ssh authorized keys to access the vms as a 'spectro' user
	SSHKeys []string `json:"sshKeys"`
}

// Validate validates this v1 edge native hybrid cluster config
func (m *V1EdgeNativeHybridClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControlPlaneEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeNativeHybridClusterConfig) validateControlPlaneEndpoint(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlPlaneEndpoint) { // not required
		return nil
	}

	if m.ControlPlaneEndpoint != nil {
		if err := m.ControlPlaneEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlPlaneEndpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controlPlaneEndpoint")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 edge native hybrid cluster config based on the context it is used
func (m *V1EdgeNativeHybridClusterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControlPlaneEndpoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeNativeHybridClusterConfig) contextValidateControlPlaneEndpoint(ctx context.Context, formats strfmt.Registry) error {

	if m.ControlPlaneEndpoint != nil {

		if swag.IsZero(m.ControlPlaneEndpoint) { // not required
			return nil
		}

		if err := m.ControlPlaneEndpoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlPlaneEndpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controlPlaneEndpoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EdgeNativeHybridClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EdgeNativeHybridClusterConfig) UnmarshalBinary(b []byte) error {
	var res V1EdgeNativeHybridClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
