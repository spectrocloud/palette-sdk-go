// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ClusterReconcileStatusCounts Cluster reconcile metadata
//
// swagger:model v1ClusterReconcileStatusCounts
type V1ClusterReconcileStatusCounts struct {

	// clusters
	Clusters *V1ClusterReconcileStatusCountsClusters `json:"clusters,omitempty"`
}

// Validate validates this v1 cluster reconcile status counts
func (m *V1ClusterReconcileStatusCounts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterReconcileStatusCounts) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	if m.Clusters != nil {
		if err := m.Clusters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 cluster reconcile status counts based on the context it is used
func (m *V1ClusterReconcileStatusCounts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterReconcileStatusCounts) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	if m.Clusters != nil {

		if swag.IsZero(m.Clusters) { // not required
			return nil
		}

		if err := m.Clusters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterReconcileStatusCounts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterReconcileStatusCounts) UnmarshalBinary(b []byte) error {
	var res V1ClusterReconcileStatusCounts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1ClusterReconcileStatusCountsClusters Clusters grouped by reconciliation status
//
// swagger:model V1ClusterReconcileStatusCountsClusters
type V1ClusterReconcileStatusCountsClusters struct {

	// List of UIDs for clusters in applied state
	Applied []string `json:"applied"`

	// List of UIDs for clusters in failed state
	Failed []string `json:"failed"`

	// List of UIDs for clusters in pending state
	Pending []string `json:"pending"`
}

// Validate validates this v1 cluster reconcile status counts clusters
func (m *V1ClusterReconcileStatusCountsClusters) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v1 cluster reconcile status counts clusters based on context it is used
func (m *V1ClusterReconcileStatusCountsClusters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterReconcileStatusCountsClusters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterReconcileStatusCountsClusters) UnmarshalBinary(b []byte) error {
	var res V1ClusterReconcileStatusCountsClusters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
