// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Schedule Information about a schedule for the policy
//
// swagger:model v1Schedule
type V1Schedule struct {

	// Specifies the time window in hours during which the system is allowed to start upgrades on eligible clusters. Actual upgrade completion may vary due to cluster-specific factors like bandwidth, capacity, or environment.
	// Required: true
	// Maximum: 24
	// Minimum: 1
	DurationHrs *int64 `json:"durationHrs"`

	// Name of the upgrade schedule
	// Required: true
	Name *string `json:"name"`

	// Cron expression for the start time of the schedule
	// Required: true
	StartCron *string `json:"startCron"`
}

// Validate validates this v1 schedule
func (m *V1Schedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationHrs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartCron(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Schedule) validateDurationHrs(formats strfmt.Registry) error {

	if err := validate.Required("durationHrs", "body", m.DurationHrs); err != nil {
		return err
	}

	if err := validate.MinimumInt("durationHrs", "body", *m.DurationHrs, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("durationHrs", "body", *m.DurationHrs, 24, false); err != nil {
		return err
	}

	return nil
}

func (m *V1Schedule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1Schedule) validateStartCron(formats strfmt.Registry) error {

	if err := validate.Required("startCron", "body", m.StartCron); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 schedule based on context it is used
func (m *V1Schedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1Schedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Schedule) UnmarshalBinary(b []byte) error {
	var res V1Schedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
