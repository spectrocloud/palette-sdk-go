// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Event Describes the component event details
//
// swagger:model v1Event
type V1Event struct {

	// Describes object involved in event generation
	InvolvedObject *V1ObjectReference `json:"involvedObject,omitempty"`

	// Describes message associated with the event
	Message string `json:"message,omitempty"`

	// metadata
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`

	// Describes the reason for the event
	Reason string `json:"reason,omitempty"`

	// Describes object related to the event
	RelatedObject *V1EventRelatedObject `json:"relatedObject,omitempty"`

	// Describes the gravitas for the event
	Severity string `json:"severity,omitempty"`

	// Describes the origin for the event
	Source *V1EventSource `json:"source,omitempty"`
}

// Validate validates this v1 event
func (m *V1Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvolvedObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Event) validateInvolvedObject(formats strfmt.Registry) error {
	if swag.IsZero(m.InvolvedObject) { // not required
		return nil
	}

	if m.InvolvedObject != nil {
		if err := m.InvolvedObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("involvedObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("involvedObject")
			}
			return err
		}
	}

	return nil
}

func (m *V1Event) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1Event) validateRelatedObject(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedObject) { // not required
		return nil
	}

	if m.RelatedObject != nil {
		if err := m.RelatedObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedObject")
			}
			return err
		}
	}

	return nil
}

func (m *V1Event) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 event based on the context it is used
func (m *V1Event) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvolvedObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Event) contextValidateInvolvedObject(ctx context.Context, formats strfmt.Registry) error {

	if m.InvolvedObject != nil {

		if swag.IsZero(m.InvolvedObject) { // not required
			return nil
		}

		if err := m.InvolvedObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("involvedObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("involvedObject")
			}
			return err
		}
	}

	return nil
}

func (m *V1Event) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if swag.IsZero(m.Metadata) { // not required
			return nil
		}

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1Event) contextValidateRelatedObject(ctx context.Context, formats strfmt.Registry) error {

	if m.RelatedObject != nil {

		if swag.IsZero(m.RelatedObject) { // not required
			return nil
		}

		if err := m.RelatedObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedObject")
			}
			return err
		}
	}

	return nil
}

func (m *V1Event) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Event) UnmarshalBinary(b []byte) error {
	var res V1Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
