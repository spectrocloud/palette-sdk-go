// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1MgmtDbCollectionInfo Database info
//
// swagger:model v1MgmtDbCollectionInfo
type V1MgmtDbCollectionInfo struct {

	// count
	Count int64 `json:"count,omitempty"`

	// indexes
	Indexes []*V1MgmtDbCollectionIndexInfo `json:"indexes"`

	// is capped
	IsCapped bool `json:"isCapped,omitempty"`

	// is read only
	IsReadOnly bool `json:"isReadOnly,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// storage size
	StorageSize int64 `json:"storageSize,omitempty"`

	// total index size
	TotalIndexSize int64 `json:"totalIndexSize,omitempty"`
}

// Validate validates this v1 mgmt db collection info
func (m *V1MgmtDbCollectionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndexes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MgmtDbCollectionInfo) validateIndexes(formats strfmt.Registry) error {

	if swag.IsZero(m.Indexes) { // not required
		return nil
	}

	for i := 0; i < len(m.Indexes); i++ {
		if swag.IsZero(m.Indexes[i]) { // not required
			continue
		}

		if m.Indexes[i] != nil {
			if err := m.Indexes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("indexes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MgmtDbCollectionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MgmtDbCollectionInfo) UnmarshalBinary(b []byte) error {
	var res V1MgmtDbCollectionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
