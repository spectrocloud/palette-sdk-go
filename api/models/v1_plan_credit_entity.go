// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PlanCreditEntity Plan Credit entity for create/update request
//
// swagger:model v1PlanCreditEntity
type V1PlanCreditEntity struct {

	// cpu core hours
	CPUCoreHours int64 `json:"cpuCoreHours"`

	// expiry
	// Format: date-time
	Expiry V1Time `json:"expiry,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start
	// Format: date-time
	Start V1Time `json:"start,omitempty"`

	// type
	// Required: true
	// Enum: [Pure Alloy]
	Type *string `json:"type"`
}

// Validate validates this v1 plan credit entity
func (m *V1PlanCreditEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PlanCreditEntity) validateExpiry(formats strfmt.Registry) error {

	if swag.IsZero(m.Expiry) { // not required
		return nil
	}

	if err := m.Expiry.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expiry")
		}
		return err
	}

	return nil
}

func (m *V1PlanCreditEntity) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := m.Start.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("start")
		}
		return err
	}

	return nil
}

var v1PlanCreditEntityTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pure","Alloy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PlanCreditEntityTypeTypePropEnum = append(v1PlanCreditEntityTypeTypePropEnum, v)
	}
}

const (

	// V1PlanCreditEntityTypePure captures enum value "Pure"
	V1PlanCreditEntityTypePure string = "Pure"

	// V1PlanCreditEntityTypeAlloy captures enum value "Alloy"
	V1PlanCreditEntityTypeAlloy string = "Alloy"
)

// prop value enum
func (m *V1PlanCreditEntity) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1PlanCreditEntityTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1PlanCreditEntity) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PlanCreditEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PlanCreditEntity) UnmarshalBinary(b []byte) error {
	var res V1PlanCreditEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
