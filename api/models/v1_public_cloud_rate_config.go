// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1PublicCloudRateConfig Public cloud rate config
//
// swagger:model v1PublicCloudRateConfig
type V1PublicCloudRateConfig struct {

	// compute optimized
	ComputeOptimized *V1CloudInstanceRateConfig `json:"computeOptimized,omitempty"`

	// memory optimized
	MemoryOptimized *V1CloudInstanceRateConfig `json:"memoryOptimized,omitempty"`
}

// Validate validates this v1 public cloud rate config
func (m *V1PublicCloudRateConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputeOptimized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryOptimized(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PublicCloudRateConfig) validateComputeOptimized(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputeOptimized) { // not required
		return nil
	}

	if m.ComputeOptimized != nil {
		if err := m.ComputeOptimized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeOptimized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeOptimized")
			}
			return err
		}
	}

	return nil
}

func (m *V1PublicCloudRateConfig) validateMemoryOptimized(formats strfmt.Registry) error {
	if swag.IsZero(m.MemoryOptimized) { // not required
		return nil
	}

	if m.MemoryOptimized != nil {
		if err := m.MemoryOptimized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryOptimized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memoryOptimized")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 public cloud rate config based on the context it is used
func (m *V1PublicCloudRateConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputeOptimized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemoryOptimized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PublicCloudRateConfig) contextValidateComputeOptimized(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputeOptimized != nil {

		if swag.IsZero(m.ComputeOptimized) { // not required
			return nil
		}

		if err := m.ComputeOptimized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeOptimized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeOptimized")
			}
			return err
		}
	}

	return nil
}

func (m *V1PublicCloudRateConfig) contextValidateMemoryOptimized(ctx context.Context, formats strfmt.Registry) error {

	if m.MemoryOptimized != nil {

		if swag.IsZero(m.MemoryOptimized) { // not required
			return nil
		}

		if err := m.MemoryOptimized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryOptimized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memoryOptimized")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PublicCloudRateConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PublicCloudRateConfig) UnmarshalBinary(b []byte) error {
	var res V1PublicCloudRateConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
