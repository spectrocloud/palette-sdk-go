// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PlanMonthlyUsage Plan monthly usage entity
//
// swagger:model v1PlanMonthlyUsage
type V1PlanMonthlyUsage struct {

	// daily usages
	// Unique: true
	DailyUsages []*V1ResourceUsage `json:"dailyUsages"`

	// usage month
	// Format: date-time
	Month V1Time `json:"month,omitempty"`

	// plan limit
	PlanLimit *V1PlanLimit `json:"planLimit,omitempty"`

	// plan type
	// Enum: [Trial MonthlyOnDemand AnnualSubscription]
	PlanType string `json:"planType,omitempty"`

	// plan Uid
	PlanUID string `json:"planUid,omitempty"`

	// total monthly usage
	TotalMonthlyUsage *V1TotalResourceUsage `json:"totalMonthlyUsage,omitempty"`
}

// Validate validates this v1 plan monthly usage
func (m *V1PlanMonthlyUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDailyUsages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalMonthlyUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PlanMonthlyUsage) validateDailyUsages(formats strfmt.Registry) error {

	if swag.IsZero(m.DailyUsages) { // not required
		return nil
	}

	if err := validate.UniqueItems("dailyUsages", "body", m.DailyUsages); err != nil {
		return err
	}

	for i := 0; i < len(m.DailyUsages); i++ {
		if swag.IsZero(m.DailyUsages[i]) { // not required
			continue
		}

		if m.DailyUsages[i] != nil {
			if err := m.DailyUsages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dailyUsages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PlanMonthlyUsage) validateMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.Month) { // not required
		return nil
	}

	if err := m.Month.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("month")
		}
		return err
	}

	return nil
}

func (m *V1PlanMonthlyUsage) validatePlanLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanLimit) { // not required
		return nil
	}

	if m.PlanLimit != nil {
		if err := m.PlanLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planLimit")
			}
			return err
		}
	}

	return nil
}

var v1PlanMonthlyUsageTypePlanTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Trial","MonthlyOnDemand","AnnualSubscription"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PlanMonthlyUsageTypePlanTypePropEnum = append(v1PlanMonthlyUsageTypePlanTypePropEnum, v)
	}
}

const (

	// V1PlanMonthlyUsagePlanTypeTrial captures enum value "Trial"
	V1PlanMonthlyUsagePlanTypeTrial string = "Trial"

	// V1PlanMonthlyUsagePlanTypeMonthlyOnDemand captures enum value "MonthlyOnDemand"
	V1PlanMonthlyUsagePlanTypeMonthlyOnDemand string = "MonthlyOnDemand"

	// V1PlanMonthlyUsagePlanTypeAnnualSubscription captures enum value "AnnualSubscription"
	V1PlanMonthlyUsagePlanTypeAnnualSubscription string = "AnnualSubscription"
)

// prop value enum
func (m *V1PlanMonthlyUsage) validatePlanTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1PlanMonthlyUsageTypePlanTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1PlanMonthlyUsage) validatePlanType(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlanTypeEnum("planType", "body", m.PlanType); err != nil {
		return err
	}

	return nil
}

func (m *V1PlanMonthlyUsage) validateTotalMonthlyUsage(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalMonthlyUsage) { // not required
		return nil
	}

	if m.TotalMonthlyUsage != nil {
		if err := m.TotalMonthlyUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalMonthlyUsage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PlanMonthlyUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PlanMonthlyUsage) UnmarshalBinary(b []byte) error {
	var res V1PlanMonthlyUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
