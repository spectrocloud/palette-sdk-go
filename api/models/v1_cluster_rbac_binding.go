// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterRbacBinding Cluster RBAC binding
//
// swagger:model v1ClusterRbacBinding
type V1ClusterRbacBinding struct {

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// role
	Role *V1ClusterRoleRef `json:"role,omitempty"`

	// subjects
	// Unique: true
	Subjects []*V1ClusterRbacSubjects `json:"subjects"`

	// type
	// Enum: [RoleBinding ClusterRoleBinding]
	Type string `json:"type,omitempty"`
}

// Validate validates this v1 cluster rbac binding
func (m *V1ClusterRbacBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterRbacBinding) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterRbacBinding) validateSubjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Subjects) { // not required
		return nil
	}

	if err := validate.UniqueItems("subjects", "body", m.Subjects); err != nil {
		return err
	}

	for i := 0; i < len(m.Subjects); i++ {
		if swag.IsZero(m.Subjects[i]) { // not required
			continue
		}

		if m.Subjects[i] != nil {
			if err := m.Subjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var v1ClusterRbacBindingTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RoleBinding","ClusterRoleBinding"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterRbacBindingTypeTypePropEnum = append(v1ClusterRbacBindingTypeTypePropEnum, v)
	}
}

const (

	// V1ClusterRbacBindingTypeRoleBinding captures enum value "RoleBinding"
	V1ClusterRbacBindingTypeRoleBinding string = "RoleBinding"

	// V1ClusterRbacBindingTypeClusterRoleBinding captures enum value "ClusterRoleBinding"
	V1ClusterRbacBindingTypeClusterRoleBinding string = "ClusterRoleBinding"
)

// prop value enum
func (m *V1ClusterRbacBinding) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterRbacBindingTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterRbacBinding) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterRbacBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterRbacBinding) UnmarshalBinary(b []byte) error {
	var res V1ClusterRbacBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
