// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1LibvirtMachineSpec libvirt cloud VM definition spec
//
// swagger:model v1LibvirtMachineSpec
type V1LibvirtMachineSpec struct {

	// disks
	Disks []*V1LibvirtDiskSpec `json:"disks"`

	// edge host Uid
	EdgeHostUID string `json:"edgeHostUid,omitempty"`

	// failure domain
	FailureDomain string `json:"failureDomain,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// instance type
	InstanceType *V1LibvirtInstanceType `json:"instanceType,omitempty"`

	// nics
	Nics []*V1LibvirtNicSpec `json:"nics"`

	// target storage pool
	TargetStoragePool string `json:"targetStoragePool,omitempty"`
}

// Validate validates this v1 libvirt machine spec
func (m *V1LibvirtMachineSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1LibvirtMachineSpec) validateDisks(formats strfmt.Registry) error {

	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1LibvirtMachineSpec) validateInstanceType(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceType) { // not required
		return nil
	}

	if m.InstanceType != nil {
		if err := m.InstanceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceType")
			}
			return err
		}
	}

	return nil
}

func (m *V1LibvirtMachineSpec) validateNics(formats strfmt.Registry) error {

	if swag.IsZero(m.Nics) { // not required
		return nil
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1LibvirtMachineSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1LibvirtMachineSpec) UnmarshalBinary(b []byte) error {
	var res V1LibvirtMachineSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
