// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ClusterProfileStatusSummary ClusterProfileStatusSummary defines the observed state of ClusterProfile
//
// swagger:model v1ClusterProfileStatusSummary
type V1ClusterProfileStatusSummary struct {

	// fips
	Fips *V1ClusterProfileFips `json:"fips,omitempty"`

	// Deprecated. Use inUseClusters
	InUseClusterUids []string `json:"inUseClusterUids"`

	// in use clusters
	InUseClusters []*V1ObjectEntity `json:"inUseClusters"`

	// is published
	IsPublished bool `json:"isPublished"`

	// pack
	Pack *V1ClusterProfilePackSummary `json:"pack,omitempty"`
}

// Validate validates this v1 cluster profile status summary
func (m *V1ClusterProfileStatusSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFips(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInUseClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePack(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterProfileStatusSummary) validateFips(formats strfmt.Registry) error {

	if swag.IsZero(m.Fips) { // not required
		return nil
	}

	if m.Fips != nil {
		if err := m.Fips.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fips")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterProfileStatusSummary) validateInUseClusters(formats strfmt.Registry) error {

	if swag.IsZero(m.InUseClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.InUseClusters); i++ {
		if swag.IsZero(m.InUseClusters[i]) { // not required
			continue
		}

		if m.InUseClusters[i] != nil {
			if err := m.InUseClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inUseClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterProfileStatusSummary) validatePack(formats strfmt.Registry) error {

	if swag.IsZero(m.Pack) { // not required
		return nil
	}

	if m.Pack != nil {
		if err := m.Pack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pack")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterProfileStatusSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterProfileStatusSummary) UnmarshalBinary(b []byte) error {
	var res V1ClusterProfileStatusSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
