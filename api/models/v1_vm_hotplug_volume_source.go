// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1VMHotplugVolumeSource HotplugVolumeSource Represents the source of a volume to mount which are capable of being hotplugged on a live running VMI. Only one of its members may be specified.
//
// swagger:model v1VmHotplugVolumeSource
type V1VMHotplugVolumeSource struct {

	// data volume
	DataVolume *V1VMCoreDataVolumeSource `json:"dataVolume,omitempty"`

	// persistent volume claim
	PersistentVolumeClaim *V1VMPersistentVolumeClaimVolumeSource `json:"persistentVolumeClaim,omitempty"`
}

// Validate validates this v1 Vm hotplug volume source
func (m *V1VMHotplugVolumeSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentVolumeClaim(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMHotplugVolumeSource) validateDataVolume(formats strfmt.Registry) error {

	if swag.IsZero(m.DataVolume) { // not required
		return nil
	}

	if m.DataVolume != nil {
		if err := m.DataVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataVolume")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMHotplugVolumeSource) validatePersistentVolumeClaim(formats strfmt.Registry) error {

	if swag.IsZero(m.PersistentVolumeClaim) { // not required
		return nil
	}

	if m.PersistentVolumeClaim != nil {
		if err := m.PersistentVolumeClaim.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistentVolumeClaim")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VMHotplugVolumeSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMHotplugVolumeSource) UnmarshalBinary(b []byte) error {
	var res V1VMHotplugVolumeSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
