// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1SpectroClusterOidcSpec v1 spectro cluster oidc spec
//
// swagger:model v1SpectroClusterOidcSpec
type V1SpectroClusterOidcSpec struct {

	// client Id
	ClientID string `json:"clientId"`

	// client secret
	ClientSecret string `json:"clientSecret"`

	// issuer Tls
	IssuerTLS *V1SpectroClusterOidcIssuerTLSSpec `json:"issuerTls,omitempty"`

	// the issuer is the URL identifier for the service
	IssuerURL string `json:"issuerUrl"`

	// required claims
	RequiredClaims *V1SpectroClusterOidcClaims `json:"requiredClaims,omitempty"`

	// scopes
	Scopes []string `json:"scopes"`
}

// Validate validates this v1 spectro cluster oidc spec
func (m *V1SpectroClusterOidcSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssuerTLS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredClaims(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterOidcSpec) validateIssuerTLS(formats strfmt.Registry) error {
	if swag.IsZero(m.IssuerTLS) { // not required
		return nil
	}

	if m.IssuerTLS != nil {
		if err := m.IssuerTLS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuerTls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuerTls")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterOidcSpec) validateRequiredClaims(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredClaims) { // not required
		return nil
	}

	if m.RequiredClaims != nil {
		if err := m.RequiredClaims.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requiredClaims")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requiredClaims")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 spectro cluster oidc spec based on the context it is used
func (m *V1SpectroClusterOidcSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIssuerTLS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequiredClaims(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterOidcSpec) contextValidateIssuerTLS(ctx context.Context, formats strfmt.Registry) error {

	if m.IssuerTLS != nil {

		if swag.IsZero(m.IssuerTLS) { // not required
			return nil
		}

		if err := m.IssuerTLS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuerTls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuerTls")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterOidcSpec) contextValidateRequiredClaims(ctx context.Context, formats strfmt.Registry) error {

	if m.RequiredClaims != nil {

		if swag.IsZero(m.RequiredClaims) { // not required
			return nil
		}

		if err := m.RequiredClaims.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requiredClaims")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requiredClaims")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterOidcSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterOidcSpec) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterOidcSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
