// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1AwsSecretSpec AWS cloud account which includes access key and secret key in case of 'secret' credentials type. It includes policyARNS, ARN and externalId in case of sts. Partition is a group of AWS Region and Service objects
//
// swagger:model v1AwsSecretSpec
type V1AwsSecretSpec struct {

	// AWS secret accountName; only for aws-iso-b environment
	AccountName string `json:"accountName,omitempty"`

	// AWS secret agency
	Agency string `json:"agency,omitempty"`

	// Flag to rotate the secret region credentials
	IsCapValidationEnabled bool `json:"isCapValidationEnabled,omitempty"`

	// AWS secret mission; only for aws-iso environment
	Mission string `json:"mission,omitempty"`

	// Policy Boundary
	NamePrefix string `json:"namePrefix,omitempty"`

	// Role or Policy Prefix
	PermissionBoundary string `json:"permissionBoundary,omitempty"`

	// AWS secret policy; JSON string
	Policy string `json:"policy,omitempty"`

	// AWS secret role
	Role string `json:"role,omitempty"`

	// TLS configuration for the AWS secret
	TLS *V1AwsSecretTLSConfig `json:"tls,omitempty"`
}

// Validate validates this v1 aws secret spec
func (m *V1AwsSecretSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTLS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AwsSecretSpec) validateTLS(formats strfmt.Registry) error {

	if swag.IsZero(m.TLS) { // not required
		return nil
	}

	if m.TLS != nil {
		if err := m.TLS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tls")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AwsSecretSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AwsSecretSpec) UnmarshalBinary(b []byte) error {
	var res V1AwsSecretSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
