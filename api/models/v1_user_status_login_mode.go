// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1UserStatusLoginMode v1 user status login mode
//
// swagger:model v1UserStatusLoginMode
type V1UserStatusLoginMode struct {

	// login mode
	// Enum: ["dev","devops"]
	LoginMode string `json:"loginMode,omitempty"`
}

// Validate validates this v1 user status login mode
func (m *V1UserStatusLoginMode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoginMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1UserStatusLoginModeTypeLoginModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dev","devops"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1UserStatusLoginModeTypeLoginModePropEnum = append(v1UserStatusLoginModeTypeLoginModePropEnum, v)
	}
}

const (

	// V1UserStatusLoginModeLoginModeDev captures enum value "dev"
	V1UserStatusLoginModeLoginModeDev string = "dev"

	// V1UserStatusLoginModeLoginModeDevops captures enum value "devops"
	V1UserStatusLoginModeLoginModeDevops string = "devops"
)

// prop value enum
func (m *V1UserStatusLoginMode) validateLoginModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1UserStatusLoginModeTypeLoginModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1UserStatusLoginMode) validateLoginMode(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateLoginModeEnum("loginMode", "body", m.LoginMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 user status login mode based on context it is used
func (m *V1UserStatusLoginMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1UserStatusLoginMode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1UserStatusLoginMode) UnmarshalBinary(b []byte) error {
	var res V1UserStatusLoginMode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
