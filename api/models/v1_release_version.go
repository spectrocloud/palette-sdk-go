// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ReleaseVersion spectro application management release version information
//
// swagger:model v1ReleaseVersion
type V1ReleaseVersion struct {

	// date
	// Format: date-time
	Date V1Time `json:"date,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// release notes
	ReleaseNotes []*V1ReleaseDescription `json:"releaseNotes"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this v1 release version
func (m *V1ReleaseVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseNotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ReleaseVersion) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := m.Date.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("date")
		}
		return err
	}

	return nil
}

func (m *V1ReleaseVersion) validateReleaseNotes(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseNotes) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseNotes); i++ {
		if swag.IsZero(m.ReleaseNotes[i]) { // not required
			continue
		}

		if m.ReleaseNotes[i] != nil {
			if err := m.ReleaseNotes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("releaseNotes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ReleaseVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ReleaseVersion) UnmarshalBinary(b []byte) error {
	var res V1ReleaseVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
