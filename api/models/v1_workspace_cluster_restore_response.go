// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1WorkspaceClusterRestoreResponse Workspace cluster restore response
//
// swagger:model v1WorkspaceClusterRestoreResponse
type V1WorkspaceClusterRestoreResponse struct {

	// backup name
	BackupName string `json:"backupName,omitempty"`

	// cluster name
	ClusterName string `json:"clusterName,omitempty"`

	// cluster Uid
	ClusterUID string `json:"clusterUid,omitempty"`

	// restore status meta
	RestoreStatusMeta *V1WorkspaceClusterRestoreState `json:"restoreStatusMeta,omitempty"`

	// restore Uid
	RestoreUID string `json:"restoreUid,omitempty"`
}

// Validate validates this v1 workspace cluster restore response
func (m *V1WorkspaceClusterRestoreResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestoreStatusMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WorkspaceClusterRestoreResponse) validateRestoreStatusMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.RestoreStatusMeta) { // not required
		return nil
	}

	if m.RestoreStatusMeta != nil {
		if err := m.RestoreStatusMeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreStatusMeta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1WorkspaceClusterRestoreResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1WorkspaceClusterRestoreResponse) UnmarshalBinary(b []byte) error {
	var res V1WorkspaceClusterRestoreResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
