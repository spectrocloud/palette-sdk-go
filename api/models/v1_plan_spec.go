// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PlanSpec Plan specifications
//
// swagger:model v1PlanSpec
type V1PlanSpec struct {

	// cost
	Cost *V1PlanCost `json:"cost,omitempty"`

	// developer credits
	DeveloperCredits *V1DeveloperCredit `json:"developerCredits,omitempty"`

	// plan expiry time
	// Required: true
	// Format: date-time
	Expiry V1Time `json:"expiry"`

	// free credits
	FreeCredits []*V1PlanCredit `json:"freeCredits"`

	// plan limit
	PlanLimit *V1PlanLimit `json:"planLimit,omitempty"`

	// renewal
	Renewal *V1PlanRenewal `json:"renewal,omitempty"`

	// sla credits
	SLACredits []*V1PlanCredit `json:"slaCredits"`

	// plan start time
	// Required: true
	// Format: date-time
	Start V1Time `json:"start"`

	// tier pricing
	TierPricing *V1TierPrice `json:"tierPricing,omitempty"`

	// type
	// Required: true
	// Enum: [Trial MonthlyOnDemand AnnualSubscription]
	Type *string `json:"type"`
}

// Validate validates this v1 plan spec
func (m *V1PlanSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeveloperCredits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreeCredits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenewal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSLACredits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierPricing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PlanSpec) validateCost(formats strfmt.Registry) error {

	if swag.IsZero(m.Cost) { // not required
		return nil
	}

	if m.Cost != nil {
		if err := m.Cost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlanSpec) validateDeveloperCredits(formats strfmt.Registry) error {

	if swag.IsZero(m.DeveloperCredits) { // not required
		return nil
	}

	if m.DeveloperCredits != nil {
		if err := m.DeveloperCredits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("developerCredits")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlanSpec) validateExpiry(formats strfmt.Registry) error {

	if err := m.Expiry.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expiry")
		}
		return err
	}

	return nil
}

func (m *V1PlanSpec) validateFreeCredits(formats strfmt.Registry) error {

	if swag.IsZero(m.FreeCredits) { // not required
		return nil
	}

	for i := 0; i < len(m.FreeCredits); i++ {
		if swag.IsZero(m.FreeCredits[i]) { // not required
			continue
		}

		if m.FreeCredits[i] != nil {
			if err := m.FreeCredits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("freeCredits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PlanSpec) validatePlanLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanLimit) { // not required
		return nil
	}

	if m.PlanLimit != nil {
		if err := m.PlanLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planLimit")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlanSpec) validateRenewal(formats strfmt.Registry) error {

	if swag.IsZero(m.Renewal) { // not required
		return nil
	}

	if m.Renewal != nil {
		if err := m.Renewal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renewal")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlanSpec) validateSLACredits(formats strfmt.Registry) error {

	if swag.IsZero(m.SLACredits) { // not required
		return nil
	}

	for i := 0; i < len(m.SLACredits); i++ {
		if swag.IsZero(m.SLACredits[i]) { // not required
			continue
		}

		if m.SLACredits[i] != nil {
			if err := m.SLACredits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slaCredits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PlanSpec) validateStart(formats strfmt.Registry) error {

	if err := m.Start.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("start")
		}
		return err
	}

	return nil
}

func (m *V1PlanSpec) validateTierPricing(formats strfmt.Registry) error {

	if swag.IsZero(m.TierPricing) { // not required
		return nil
	}

	if m.TierPricing != nil {
		if err := m.TierPricing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tierPricing")
			}
			return err
		}
	}

	return nil
}

var v1PlanSpecTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Trial","MonthlyOnDemand","AnnualSubscription"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PlanSpecTypeTypePropEnum = append(v1PlanSpecTypeTypePropEnum, v)
	}
}

const (

	// V1PlanSpecTypeTrial captures enum value "Trial"
	V1PlanSpecTypeTrial string = "Trial"

	// V1PlanSpecTypeMonthlyOnDemand captures enum value "MonthlyOnDemand"
	V1PlanSpecTypeMonthlyOnDemand string = "MonthlyOnDemand"

	// V1PlanSpecTypeAnnualSubscription captures enum value "AnnualSubscription"
	V1PlanSpecTypeAnnualSubscription string = "AnnualSubscription"
)

// prop value enum
func (m *V1PlanSpec) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1PlanSpecTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1PlanSpec) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PlanSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PlanSpec) UnmarshalBinary(b []byte) error {
	var res V1PlanSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
