// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterGroupClustersConfig Clusters config of cluster group
//
// swagger:model v1ClusterGroupClustersConfig
type V1ClusterGroupClustersConfig struct {

	// Host cluster endpoint type
	// Enum: ["Ingress","LoadBalancer"]
	EndpointType string `json:"endpointType,omitempty"`

	// host clusters config
	// Unique: true
	HostClustersConfig []*V1ClusterGroupHostClusterConfig `json:"hostClustersConfig"`

	// kubernetes distro type
	KubernetesDistroType *V1ClusterKubernetesDistroType `json:"kubernetesDistroType,omitempty"`

	// limit config
	LimitConfig *V1ClusterGroupLimitConfig `json:"limitConfig,omitempty"`

	// values
	Values string `json:"values,omitempty"`
}

// Validate validates this v1 cluster group clusters config
func (m *V1ClusterGroupClustersConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostClustersConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesDistroType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1ClusterGroupClustersConfigTypeEndpointTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Ingress","LoadBalancer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterGroupClustersConfigTypeEndpointTypePropEnum = append(v1ClusterGroupClustersConfigTypeEndpointTypePropEnum, v)
	}
}

const (

	// V1ClusterGroupClustersConfigEndpointTypeIngress captures enum value "Ingress"
	V1ClusterGroupClustersConfigEndpointTypeIngress string = "Ingress"

	// V1ClusterGroupClustersConfigEndpointTypeLoadBalancer captures enum value "LoadBalancer"
	V1ClusterGroupClustersConfigEndpointTypeLoadBalancer string = "LoadBalancer"
)

// prop value enum
func (m *V1ClusterGroupClustersConfig) validateEndpointTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterGroupClustersConfigTypeEndpointTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterGroupClustersConfig) validateEndpointType(formats strfmt.Registry) error {
	if swag.IsZero(m.EndpointType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEndpointTypeEnum("endpointType", "body", m.EndpointType); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterGroupClustersConfig) validateHostClustersConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.HostClustersConfig) { // not required
		return nil
	}

	if err := validate.UniqueItems("hostClustersConfig", "body", m.HostClustersConfig); err != nil {
		return err
	}

	for i := 0; i < len(m.HostClustersConfig); i++ {
		if swag.IsZero(m.HostClustersConfig[i]) { // not required
			continue
		}

		if m.HostClustersConfig[i] != nil {
			if err := m.HostClustersConfig[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostClustersConfig" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostClustersConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterGroupClustersConfig) validateKubernetesDistroType(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesDistroType) { // not required
		return nil
	}

	if m.KubernetesDistroType != nil {
		if err := m.KubernetesDistroType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesDistroType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesDistroType")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterGroupClustersConfig) validateLimitConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.LimitConfig) { // not required
		return nil
	}

	if m.LimitConfig != nil {
		if err := m.LimitConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("limitConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("limitConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 cluster group clusters config based on the context it is used
func (m *V1ClusterGroupClustersConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostClustersConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesDistroType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLimitConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterGroupClustersConfig) contextValidateHostClustersConfig(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostClustersConfig); i++ {

		if m.HostClustersConfig[i] != nil {

			if swag.IsZero(m.HostClustersConfig[i]) { // not required
				return nil
			}

			if err := m.HostClustersConfig[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostClustersConfig" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostClustersConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterGroupClustersConfig) contextValidateKubernetesDistroType(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesDistroType != nil {

		if swag.IsZero(m.KubernetesDistroType) { // not required
			return nil
		}

		if err := m.KubernetesDistroType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesDistroType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesDistroType")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterGroupClustersConfig) contextValidateLimitConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.LimitConfig != nil {

		if swag.IsZero(m.LimitConfig) { // not required
			return nil
		}

		if err := m.LimitConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("limitConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("limitConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterGroupClustersConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterGroupClustersConfig) UnmarshalBinary(b []byte) error {
	var res V1ClusterGroupClustersConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
