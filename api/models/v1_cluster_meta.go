// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ClusterMeta Active cluster meta
//
// swagger:model v1ClusterMeta
type V1ClusterMeta struct {

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// cluster type
	ClusterType string `json:"clusterType,omitempty"`

	// creation timestamp
	// Format: date-time
	CreationTimestamp V1Time `json:"creationTimestamp,omitempty"`

	// duration
	Duration string `json:"duration,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// state
	State V1ClusterState `json:"state,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this v1 cluster meta
func (m *V1ClusterMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterMeta) validateCreationTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := m.CreationTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("creationTimestamp")
		}
		return err
	}

	return nil
}

func (m *V1ClusterMeta) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterMeta) UnmarshalBinary(b []byte) error {
	var res V1ClusterMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
