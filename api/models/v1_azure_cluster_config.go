// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AzureClusterConfig Cluster level configuration for Azure cloud and applicable for all the machine pools
//
// swagger:model v1AzureClusterConfig
type V1AzureClusterConfig struct {

	// AadProfile is Azure Active Directory configuration to integrate with AKS for aad authentication.
	AadProfile *V1AADProfile `json:"aadProfile,omitempty"`

	// APIServerAccessProfile is the access profile for AKS API server.
	APIServerAccessProfile *V1APIServerAccessProfile `json:"apiServerAccessProfile,omitempty"`

	// container name
	ContainerName string `json:"containerName,omitempty"`

	// Subnet for Kubernetes control-plane node
	ControlPlaneSubnet *V1Subnet `json:"controlPlaneSubnet,omitempty"`

	// Deprecated. use apiServerAccessProfile.enablePrivateCluster
	EnablePrivateCluster bool `json:"enablePrivateCluster,omitempty"`

	// APIServerLB is the configuration for the control-plane load balancer.
	InfraLBConfig *V1InfraLBConfig `json:"infraLBConfig,omitempty"`

	// Location is the Azure datacenter location
	// Required: true
	Location *string `json:"location"`

	// resource group
	ResourceGroup string `json:"resourceGroup,omitempty"`

	// ssh key
	// Required: true
	SSHKey *string `json:"sshKey"`

	// storage account name
	StorageAccountName string `json:"storageAccountName,omitempty"`

	// Subscription ID is unique identifier for the subscription used to access Azure services
	// Required: true
	SubscriptionID *string `json:"subscriptionId"`

	// vnet cidr block
	VnetCidrBlock string `json:"vnetCidrBlock,omitempty"`

	// VNETName is the virtual network in which the cluster is to be provisioned.
	VnetName string `json:"vnetName,omitempty"`

	// vnet resource group
	VnetResourceGroup string `json:"vnetResourceGroup,omitempty"`

	// Subnet for Kubernetes worker node
	WorkerSubnet *V1Subnet `json:"workerSubnet,omitempty"`
}

// Validate validates this v1 azure cluster config
func (m *V1AzureClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAadProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIServerAccessProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControlPlaneSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfraLBConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AzureClusterConfig) validateAadProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.AadProfile) { // not required
		return nil
	}

	if m.AadProfile != nil {
		if err := m.AadProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aadProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aadProfile")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureClusterConfig) validateAPIServerAccessProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.APIServerAccessProfile) { // not required
		return nil
	}

	if m.APIServerAccessProfile != nil {
		if err := m.APIServerAccessProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiServerAccessProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiServerAccessProfile")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureClusterConfig) validateControlPlaneSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlPlaneSubnet) { // not required
		return nil
	}

	if m.ControlPlaneSubnet != nil {
		if err := m.ControlPlaneSubnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlPlaneSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controlPlaneSubnet")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureClusterConfig) validateInfraLBConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraLBConfig) { // not required
		return nil
	}

	if m.InfraLBConfig != nil {
		if err := m.InfraLBConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infraLBConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("infraLBConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureClusterConfig) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *V1AzureClusterConfig) validateSSHKey(formats strfmt.Registry) error {

	if err := validate.Required("sshKey", "body", m.SSHKey); err != nil {
		return err
	}

	return nil
}

func (m *V1AzureClusterConfig) validateSubscriptionID(formats strfmt.Registry) error {

	if err := validate.Required("subscriptionId", "body", m.SubscriptionID); err != nil {
		return err
	}

	return nil
}

func (m *V1AzureClusterConfig) validateWorkerSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkerSubnet) { // not required
		return nil
	}

	if m.WorkerSubnet != nil {
		if err := m.WorkerSubnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workerSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workerSubnet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 azure cluster config based on the context it is used
func (m *V1AzureClusterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAadProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPIServerAccessProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControlPlaneSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfraLBConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkerSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AzureClusterConfig) contextValidateAadProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.AadProfile != nil {

		if swag.IsZero(m.AadProfile) { // not required
			return nil
		}

		if err := m.AadProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aadProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aadProfile")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureClusterConfig) contextValidateAPIServerAccessProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.APIServerAccessProfile != nil {

		if swag.IsZero(m.APIServerAccessProfile) { // not required
			return nil
		}

		if err := m.APIServerAccessProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiServerAccessProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiServerAccessProfile")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureClusterConfig) contextValidateControlPlaneSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.ControlPlaneSubnet != nil {

		if swag.IsZero(m.ControlPlaneSubnet) { // not required
			return nil
		}

		if err := m.ControlPlaneSubnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlPlaneSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controlPlaneSubnet")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureClusterConfig) contextValidateInfraLBConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.InfraLBConfig != nil {

		if swag.IsZero(m.InfraLBConfig) { // not required
			return nil
		}

		if err := m.InfraLBConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infraLBConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("infraLBConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1AzureClusterConfig) contextValidateWorkerSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkerSubnet != nil {

		if swag.IsZero(m.WorkerSubnet) { // not required
			return nil
		}

		if err := m.WorkerSubnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workerSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workerSubnet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AzureClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AzureClusterConfig) UnmarshalBinary(b []byte) error {
	var res V1AzureClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
