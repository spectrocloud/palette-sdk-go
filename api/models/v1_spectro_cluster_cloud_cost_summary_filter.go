// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SpectroClusterCloudCostSummaryFilter Spectro cluster cloud cost summary filter
//
// swagger:model v1SpectroClusterCloudCostSummaryFilter
type V1SpectroClusterCloudCostSummaryFilter struct {

	// clouds
	// Unique: true
	Clouds []string `json:"clouds"`

	// end time
	// Format: date-time
	EndTime V1Time `json:"endTime,omitempty"`

	// projects
	// Unique: true
	Projects []string `json:"projects"`

	// start time
	// Format: date-time
	StartTime V1Time `json:"startTime,omitempty"`

	// workspaces
	// Unique: true
	Workspaces []string `json:"workspaces"`
}

// Validate validates this v1 spectro cluster cloud cost summary filter
func (m *V1SpectroClusterCloudCostSummaryFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterCloudCostSummaryFilter) validateClouds(formats strfmt.Registry) error {

	if swag.IsZero(m.Clouds) { // not required
		return nil
	}

	if err := validate.UniqueItems("clouds", "body", m.Clouds); err != nil {
		return err
	}

	return nil
}

func (m *V1SpectroClusterCloudCostSummaryFilter) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := m.EndTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endTime")
		}
		return err
	}

	return nil
}

func (m *V1SpectroClusterCloudCostSummaryFilter) validateProjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	if err := validate.UniqueItems("projects", "body", m.Projects); err != nil {
		return err
	}

	return nil
}

func (m *V1SpectroClusterCloudCostSummaryFilter) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := m.StartTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startTime")
		}
		return err
	}

	return nil
}

func (m *V1SpectroClusterCloudCostSummaryFilter) validateWorkspaces(formats strfmt.Registry) error {

	if swag.IsZero(m.Workspaces) { // not required
		return nil
	}

	if err := validate.UniqueItems("workspaces", "body", m.Workspaces); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterCloudCostSummaryFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterCloudCostSummaryFilter) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterCloudCostSummaryFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
