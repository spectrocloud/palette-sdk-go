// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1EdgeMachineSpec Edge cloud VM definition spec
//
// swagger:model v1EdgeMachineSpec
type V1EdgeMachineSpec struct {

	// bootstrapped
	Bootstrapped bool `json:"bootstrapped,omitempty"`

	// custom image
	CustomImage string `json:"customImage,omitempty"`

	// edge host Uid
	EdgeHostUID string `json:"edgeHostUid,omitempty"`

	// instance type
	InstanceType *V1EdgeInstanceType `json:"instanceType,omitempty"`

	// load balancer configured
	LoadBalancerConfigured bool `json:"loadBalancerConfigured,omitempty"`

	// mounts
	// Unique: true
	Mounts []*V1EdgeMount `json:"mounts"`
}

// Validate validates this v1 edge machine spec
func (m *V1EdgeMachineSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMounts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EdgeMachineSpec) validateInstanceType(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceType) { // not required
		return nil
	}

	if m.InstanceType != nil {
		if err := m.InstanceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceType")
			}
			return err
		}
	}

	return nil
}

func (m *V1EdgeMachineSpec) validateMounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Mounts) { // not required
		return nil
	}

	if err := validate.UniqueItems("mounts", "body", m.Mounts); err != nil {
		return err
	}

	for i := 0; i < len(m.Mounts); i++ {
		if swag.IsZero(m.Mounts[i]) { // not required
			continue
		}

		if m.Mounts[i] != nil {
			if err := m.Mounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EdgeMachineSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EdgeMachineSpec) UnmarshalBinary(b []byte) error {
	var res V1EdgeMachineSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
