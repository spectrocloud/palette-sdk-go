// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AwsSecretSpecInputEntity AWS Secret spec input entity
//
// swagger:model v1AwsSecretSpecInputEntity
type V1AwsSecretSpecInputEntity struct {

	// AWS accounts are scoped to a single partition. Allowed values [aws-iso, aws-iso-b], Default values
	// Enum: ["aws-iso","aws-iso-b"]
	Partition *string `json:"partition,omitempty"`

	// AWS secret spec entity
	SecretSpec *V1AwsSecretSpec `json:"secretSpec,omitempty"`
}

// Validate validates this v1 aws secret spec input entity
func (m *V1AwsSecretSpecInputEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1AwsSecretSpecInputEntityTypePartitionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aws-iso","aws-iso-b"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1AwsSecretSpecInputEntityTypePartitionPropEnum = append(v1AwsSecretSpecInputEntityTypePartitionPropEnum, v)
	}
}

const (

	// V1AwsSecretSpecInputEntityPartitionAwsDashIso captures enum value "aws-iso"
	V1AwsSecretSpecInputEntityPartitionAwsDashIso string = "aws-iso"

	// V1AwsSecretSpecInputEntityPartitionAwsDashIsoDashb captures enum value "aws-iso-b"
	V1AwsSecretSpecInputEntityPartitionAwsDashIsoDashb string = "aws-iso-b"
)

// prop value enum
func (m *V1AwsSecretSpecInputEntity) validatePartitionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1AwsSecretSpecInputEntityTypePartitionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1AwsSecretSpecInputEntity) validatePartition(formats strfmt.Registry) error {
	if swag.IsZero(m.Partition) { // not required
		return nil
	}

	// value enum
	if err := m.validatePartitionEnum("partition", "body", *m.Partition); err != nil {
		return err
	}

	return nil
}

func (m *V1AwsSecretSpecInputEntity) validateSecretSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretSpec) { // not required
		return nil
	}

	if m.SecretSpec != nil {
		if err := m.SecretSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secretSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 aws secret spec input entity based on the context it is used
func (m *V1AwsSecretSpecInputEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecretSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AwsSecretSpecInputEntity) contextValidateSecretSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.SecretSpec != nil {

		if swag.IsZero(m.SecretSpec) { // not required
			return nil
		}

		if err := m.SecretSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secretSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AwsSecretSpecInputEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AwsSecretSpecInputEntity) UnmarshalBinary(b []byte) error {
	var res V1AwsSecretSpecInputEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
