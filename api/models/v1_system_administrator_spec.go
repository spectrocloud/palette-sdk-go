// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SystemAdministratorSpec System Administrator Entity Specification
//
// swagger:model v1SystemAdministratorSpec
type V1SystemAdministratorSpec struct {

	// admin type
	// Required: true
	// Enum: [AccountAdmin OperationAdmin]
	AdminType *string `json:"adminType"`

	// email Id
	// Required: true
	EmailID *string `json:"emailId"`

	// first name
	// Required: true
	FirstName *string `json:"firstName"`

	// last name
	// Required: true
	LastName *string `json:"lastName"`

	// mfa
	Mfa *V1SystemAdminMfa `json:"mfa,omitempty"`
}

// Validate validates this v1 system administrator spec
func (m *V1SystemAdministratorSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMfa(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1SystemAdministratorSpecTypeAdminTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountAdmin","OperationAdmin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1SystemAdministratorSpecTypeAdminTypePropEnum = append(v1SystemAdministratorSpecTypeAdminTypePropEnum, v)
	}
}

const (

	// V1SystemAdministratorSpecAdminTypeAccountAdmin captures enum value "AccountAdmin"
	V1SystemAdministratorSpecAdminTypeAccountAdmin string = "AccountAdmin"

	// V1SystemAdministratorSpecAdminTypeOperationAdmin captures enum value "OperationAdmin"
	V1SystemAdministratorSpecAdminTypeOperationAdmin string = "OperationAdmin"
)

// prop value enum
func (m *V1SystemAdministratorSpec) validateAdminTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1SystemAdministratorSpecTypeAdminTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1SystemAdministratorSpec) validateAdminType(formats strfmt.Registry) error {

	if err := validate.Required("adminType", "body", m.AdminType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAdminTypeEnum("adminType", "body", *m.AdminType); err != nil {
		return err
	}

	return nil
}

func (m *V1SystemAdministratorSpec) validateEmailID(formats strfmt.Registry) error {

	if err := validate.Required("emailId", "body", m.EmailID); err != nil {
		return err
	}

	return nil
}

func (m *V1SystemAdministratorSpec) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *V1SystemAdministratorSpec) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *V1SystemAdministratorSpec) validateMfa(formats strfmt.Registry) error {

	if swag.IsZero(m.Mfa) { // not required
		return nil
	}

	if m.Mfa != nil {
		if err := m.Mfa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mfa")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SystemAdministratorSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SystemAdministratorSpec) UnmarshalBinary(b []byte) error {
	var res V1SystemAdministratorSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
