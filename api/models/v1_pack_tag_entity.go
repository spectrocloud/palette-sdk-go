// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1PackTagEntity Pack object
//
// swagger:model v1PackTagEntity
type V1PackTagEntity struct {

	// Pack add-on sub type such as monitoring, db etc
	AddonSubType string `json:"addonSubType,omitempty"`

	// Pack add-on type such as logging, monitoring, security etc
	AddonType string `json:"addonType,omitempty"`

	// Pack supported cloud types
	CloudTypes []string `json:"cloudTypes"`

	// Pack display name
	DisplayName string `json:"displayName,omitempty"`

	// layer
	Layer V1PackLayer `json:"layer,omitempty"`

	// Pack logo url
	LogoURL string `json:"logoUrl,omitempty"`

	// Pack name
	Name string `json:"name,omitempty"`

	// Pack values array
	PackValues []*V1PackUIDValues `json:"packValues"`

	// Pack registry uid
	RegistryUID string `json:"registryUid,omitempty"`

	// Pack version tags array
	Tags []*V1PackTags `json:"tags"`
}

// Validate validates this v1 pack tag entity
func (m *V1PackTagEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PackTagEntity) validateLayer(formats strfmt.Registry) error {
	if swag.IsZero(m.Layer) { // not required
		return nil
	}

	if err := m.Layer.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("layer")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("layer")
		}
		return err
	}

	return nil
}

func (m *V1PackTagEntity) validatePackValues(formats strfmt.Registry) error {
	if swag.IsZero(m.PackValues) { // not required
		return nil
	}

	for i := 0; i < len(m.PackValues); i++ {
		if swag.IsZero(m.PackValues[i]) { // not required
			continue
		}

		if m.PackValues[i] != nil {
			if err := m.PackValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PackTagEntity) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 pack tag entity based on the context it is used
func (m *V1PackTagEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLayer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PackTagEntity) contextValidateLayer(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Layer) { // not required
		return nil
	}

	if err := m.Layer.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("layer")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("layer")
		}
		return err
	}

	return nil
}

func (m *V1PackTagEntity) contextValidatePackValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PackValues); i++ {

		if m.PackValues[i] != nil {

			if swag.IsZero(m.PackValues[i]) { // not required
				return nil
			}

			if err := m.PackValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PackTagEntity) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PackTagEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PackTagEntity) UnmarshalBinary(b []byte) error {
	var res V1PackTagEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
