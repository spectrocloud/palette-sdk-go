// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ClusterConfigEntity v1 cluster config entity
//
// swagger:model v1ClusterConfigEntity
type V1ClusterConfigEntity struct {

	// ClusterMetaAttribute can be used to set additional cluster metadata information.
	ClusterMetaAttribute string `json:"clusterMetaAttribute,omitempty"`

	// control plane health check timeout
	ControlPlaneHealthCheckTimeout string `json:"controlPlaneHealthCheckTimeout,omitempty"`

	// host cluster config
	HostClusterConfig *V1HostClusterConfig `json:"hostClusterConfig,omitempty"`

	// lifecycle config
	LifecycleConfig *V1LifecycleConfig `json:"lifecycleConfig,omitempty"`

	// location
	Location *V1ClusterLocation `json:"location,omitempty"`

	// machine management config
	MachineManagementConfig *V1MachineManagementConfig `json:"machineManagementConfig,omitempty"`

	// resources
	Resources *V1ClusterResourcesEntity `json:"resources,omitempty"`

	// update worker pools in parallel
	UpdateWorkerPoolsInParallel bool `json:"updateWorkerPoolsInParallel,omitempty"`
}

// Validate validates this v1 cluster config entity
func (m *V1ClusterConfigEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostClusterConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineManagementConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterConfigEntity) validateHostClusterConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.HostClusterConfig) { // not required
		return nil
	}

	if m.HostClusterConfig != nil {
		if err := m.HostClusterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostClusterConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostClusterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterConfigEntity) validateLifecycleConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.LifecycleConfig) { // not required
		return nil
	}

	if m.LifecycleConfig != nil {
		if err := m.LifecycleConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifecycleConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lifecycleConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterConfigEntity) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterConfigEntity) validateMachineManagementConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MachineManagementConfig) { // not required
		return nil
	}

	if m.MachineManagementConfig != nil {
		if err := m.MachineManagementConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machineManagementConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("machineManagementConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterConfigEntity) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 cluster config entity based on the context it is used
func (m *V1ClusterConfigEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostClusterConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLifecycleConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMachineManagementConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterConfigEntity) contextValidateHostClusterConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.HostClusterConfig != nil {

		if swag.IsZero(m.HostClusterConfig) { // not required
			return nil
		}

		if err := m.HostClusterConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostClusterConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostClusterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterConfigEntity) contextValidateLifecycleConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.LifecycleConfig != nil {

		if swag.IsZero(m.LifecycleConfig) { // not required
			return nil
		}

		if err := m.LifecycleConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifecycleConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lifecycleConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterConfigEntity) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterConfigEntity) contextValidateMachineManagementConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MachineManagementConfig != nil {

		if swag.IsZero(m.MachineManagementConfig) { // not required
			return nil
		}

		if err := m.MachineManagementConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machineManagementConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("machineManagementConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterConfigEntity) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {

		if swag.IsZero(m.Resources) { // not required
			return nil
		}

		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterConfigEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterConfigEntity) UnmarshalBinary(b []byte) error {
	var res V1ClusterConfigEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
