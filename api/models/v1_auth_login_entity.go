// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AuthLoginEntity Auth login entity
//
// swagger:model v1AuthLoginEntity
type V1AuthLoginEntity struct {

	// auth type
	// Enum: [password sso]
	AuthType string `json:"authType,omitempty"`

	// org name
	OrgName string `json:"orgName,omitempty"`

	// redirect Url
	RedirectURL string `json:"redirectUrl"`
}

// Validate validates this v1 auth login entity
func (m *V1AuthLoginEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1AuthLoginEntityTypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["password","sso"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1AuthLoginEntityTypeAuthTypePropEnum = append(v1AuthLoginEntityTypeAuthTypePropEnum, v)
	}
}

const (

	// V1AuthLoginEntityAuthTypePassword captures enum value "password"
	V1AuthLoginEntityAuthTypePassword string = "password"

	// V1AuthLoginEntityAuthTypeSso captures enum value "sso"
	V1AuthLoginEntityAuthTypeSso string = "sso"
)

// prop value enum
func (m *V1AuthLoginEntity) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1AuthLoginEntityTypeAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1AuthLoginEntity) validateAuthType(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", m.AuthType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AuthLoginEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AuthLoginEntity) UnmarshalBinary(b []byte) error {
	var res V1AuthLoginEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
