// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1CloudStackClusterConfig Cluster level configuration for CloudStack cloud, same for all machinepools
//
// swagger:model v1CloudStackClusterConfig
type V1CloudStackClusterConfig struct {

	// Endpoint IP to be used for API server, should only be enabled for static CloudStack network
	ControlPlaneEndpoint string `json:"controlPlaneEndpoint,omitempty"`

	// Domain name for the cluster
	Domain string `json:"domain,omitempty"`

	// Project name for the cluster (optional)
	Project string `json:"project,omitempty"`

	// SSH Key name for accessing cluster nodes
	SSHKeyName string `json:"sshKeyName,omitempty"`

	// SyncWithCKS determines if an externalManaged CKS cluster should be created (optional)
	SyncWithCKS bool `json:"syncWithCKS,omitempty"`

	// Multiple zones for multi-AZ deployments. If only one zone is specified, it will be treated as single-zone deployment
	Zones []*V1CloudStackZoneSpec `json:"zones"`
}

// Validate validates this v1 cloud stack cluster config
func (m *V1CloudStackClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateZones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CloudStackClusterConfig) validateZones(formats strfmt.Registry) error {
	if swag.IsZero(m.Zones) { // not required
		return nil
	}

	for i := 0; i < len(m.Zones); i++ {
		if swag.IsZero(m.Zones[i]) { // not required
			continue
		}

		if m.Zones[i] != nil {
			if err := m.Zones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("zones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("zones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 cloud stack cluster config based on the context it is used
func (m *V1CloudStackClusterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateZones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CloudStackClusterConfig) contextValidateZones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Zones); i++ {

		if m.Zones[i] != nil {

			if swag.IsZero(m.Zones[i]) { // not required
				return nil
			}

			if err := m.Zones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("zones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("zones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CloudStackClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CloudStackClusterConfig) UnmarshalBinary(b []byte) error {
	var res V1CloudStackClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
