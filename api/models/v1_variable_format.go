// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1VariableFormat Format type of the variable value
//
// swagger:model v1VariableFormat
type V1VariableFormat string

const (

	// V1VariableFormatString captures enum value "string"
	V1VariableFormatString V1VariableFormat = "string"

	// V1VariableFormatNumber captures enum value "number"
	V1VariableFormatNumber V1VariableFormat = "number"

	// V1VariableFormatBoolean captures enum value "boolean"
	V1VariableFormatBoolean V1VariableFormat = "boolean"

	// V1VariableFormatIPV4 captures enum value "ipv4"
	V1VariableFormatIPV4 V1VariableFormat = "ipv4"

	// V1VariableFormatIpv4cidr captures enum value "ipv4cidr"
	V1VariableFormatIpv4cidr V1VariableFormat = "ipv4cidr"

	// V1VariableFormatIPV6 captures enum value "ipv6"
	V1VariableFormatIPV6 V1VariableFormat = "ipv6"

	// V1VariableFormatVersion captures enum value "version"
	V1VariableFormatVersion V1VariableFormat = "version"
)

// for schema
var v1VariableFormatEnum []interface{}

func init() {
	var res []V1VariableFormat
	if err := json.Unmarshal([]byte(`["string","number","boolean","ipv4","ipv4cidr","ipv6","version"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1VariableFormatEnum = append(v1VariableFormatEnum, v)
	}
}

func (m V1VariableFormat) validateV1VariableFormatEnum(path, location string, value V1VariableFormat) error {
	if err := validate.EnumCase(path, location, value, v1VariableFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 variable format
func (m V1VariableFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1VariableFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
