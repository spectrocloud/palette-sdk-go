// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ResourceRolesEntity v1 resource roles entity
//
// swagger:model v1ResourceRolesEntity
type V1ResourceRolesEntity struct {

	// filter refs
	FilterRefs []*V1UIDSummary `json:"filterRefs"`

	// project uids
	ProjectUids []*V1UIDSummary `json:"projectUids"`

	// roles
	Roles []*V1UIDSummary `json:"roles"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this v1 resource roles entity
func (m *V1ResourceRolesEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterRefs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectUids(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ResourceRolesEntity) validateFilterRefs(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterRefs) { // not required
		return nil
	}

	for i := 0; i < len(m.FilterRefs); i++ {
		if swag.IsZero(m.FilterRefs[i]) { // not required
			continue
		}

		if m.FilterRefs[i] != nil {
			if err := m.FilterRefs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filterRefs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filterRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ResourceRolesEntity) validateProjectUids(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectUids) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectUids); i++ {
		if swag.IsZero(m.ProjectUids[i]) { // not required
			continue
		}

		if m.ProjectUids[i] != nil {
			if err := m.ProjectUids[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectUids" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectUids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ResourceRolesEntity) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 resource roles entity based on the context it is used
func (m *V1ResourceRolesEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilterRefs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectUids(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ResourceRolesEntity) contextValidateFilterRefs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilterRefs); i++ {

		if m.FilterRefs[i] != nil {

			if swag.IsZero(m.FilterRefs[i]) { // not required
				return nil
			}

			if err := m.FilterRefs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filterRefs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filterRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ResourceRolesEntity) contextValidateProjectUids(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProjectUids); i++ {

		if m.ProjectUids[i] != nil {

			if swag.IsZero(m.ProjectUids[i]) { // not required
				return nil
			}

			if err := m.ProjectUids[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectUids" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectUids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ResourceRolesEntity) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Roles); i++ {

		if m.Roles[i] != nil {

			if swag.IsZero(m.Roles[i]) { // not required
				return nil
			}

			if err := m.Roles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ResourceRolesEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ResourceRolesEntity) UnmarshalBinary(b []byte) error {
	var res V1ResourceRolesEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
