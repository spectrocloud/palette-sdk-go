// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterTemplateStatus Cluster template status
//
// swagger:model v1ClusterTemplateStatus
type V1ClusterTemplateStatus struct {

	// cluster status counts
	ClusterStatusCounts *V1ClusterReconcileStatusCounts `json:"clusterStatusCounts,omitempty"`

	// cluster variables
	ClusterVariables *V1ClusterVariableStatus `json:"clusterVariables,omitempty"`

	// maintenance
	Maintenance *V1ClusterTemplateMaintenanceStatus `json:"maintenance,omitempty"`

	// Current state of the cluster template
	// Enum: ["Pending","Applied","Failed","PartiallyApplied"]
	State string `json:"state,omitempty"`
}

// Validate validates this v1 cluster template status
func (m *V1ClusterTemplateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterStatusCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterVariables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterTemplateStatus) validateClusterStatusCounts(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterStatusCounts) { // not required
		return nil
	}

	if m.ClusterStatusCounts != nil {
		if err := m.ClusterStatusCounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterStatusCounts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterStatusCounts")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterTemplateStatus) validateClusterVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterVariables) { // not required
		return nil
	}

	if m.ClusterVariables != nil {
		if err := m.ClusterVariables.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterVariables")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterVariables")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterTemplateStatus) validateMaintenance(formats strfmt.Registry) error {
	if swag.IsZero(m.Maintenance) { // not required
		return nil
	}

	if m.Maintenance != nil {
		if err := m.Maintenance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenance")
			}
			return err
		}
	}

	return nil
}

var v1ClusterTemplateStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Applied","Failed","PartiallyApplied"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterTemplateStatusTypeStatePropEnum = append(v1ClusterTemplateStatusTypeStatePropEnum, v)
	}
}

const (

	// V1ClusterTemplateStatusStatePending captures enum value "Pending"
	V1ClusterTemplateStatusStatePending string = "Pending"

	// V1ClusterTemplateStatusStateApplied captures enum value "Applied"
	V1ClusterTemplateStatusStateApplied string = "Applied"

	// V1ClusterTemplateStatusStateFailed captures enum value "Failed"
	V1ClusterTemplateStatusStateFailed string = "Failed"

	// V1ClusterTemplateStatusStatePartiallyApplied captures enum value "PartiallyApplied"
	V1ClusterTemplateStatusStatePartiallyApplied string = "PartiallyApplied"
)

// prop value enum
func (m *V1ClusterTemplateStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterTemplateStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterTemplateStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 cluster template status based on the context it is used
func (m *V1ClusterTemplateStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterStatusCounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaintenance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterTemplateStatus) contextValidateClusterStatusCounts(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterStatusCounts != nil {

		if swag.IsZero(m.ClusterStatusCounts) { // not required
			return nil
		}

		if err := m.ClusterStatusCounts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterStatusCounts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterStatusCounts")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterTemplateStatus) contextValidateClusterVariables(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterVariables != nil {

		if swag.IsZero(m.ClusterVariables) { // not required
			return nil
		}

		if err := m.ClusterVariables.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterVariables")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterVariables")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterTemplateStatus) contextValidateMaintenance(ctx context.Context, formats strfmt.Registry) error {

	if m.Maintenance != nil {

		if swag.IsZero(m.Maintenance) { // not required
			return nil
		}

		if err := m.Maintenance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterTemplateStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterTemplateStatus) UnmarshalBinary(b []byte) error {
	var res V1ClusterTemplateStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
