// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AppTierEntity Application tier request payload
//
// swagger:model v1AppTierEntity
type V1AppTierEntity struct {

	// Application tier container registry uid
	ContainerRegistryUID string `json:"containerRegistryUid,omitempty"`

	// Application tier installation order
	InstallOrder int32 `json:"installOrder,omitempty"`

	// Application tier manifests
	Manifests []*V1ManifestInputEntity `json:"manifests"`

	// Application tier name
	// Required: true
	Name *string `json:"name"`

	// Application tier properties
	Properties []*V1AppTierPropertyEntity `json:"properties"`

	// Application tier registry uid
	RegistryUID string `json:"registryUid,omitempty"`

	// Application tier source pack uid
	SourceAppTierUID string `json:"sourceAppTierUid,omitempty"`

	// type
	Type V1AppTierType `json:"type,omitempty"`

	// Application tier configuration values in yaml format
	Values string `json:"values,omitempty"`

	// Application tier version
	Version string `json:"version,omitempty"`
}

// Validate validates this v1 app tier entity
func (m *V1AppTierEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManifests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AppTierEntity) validateManifests(formats strfmt.Registry) error {

	if swag.IsZero(m.Manifests) { // not required
		return nil
	}

	for i := 0; i < len(m.Manifests); i++ {
		if swag.IsZero(m.Manifests[i]) { // not required
			continue
		}

		if m.Manifests[i] != nil {
			if err := m.Manifests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("manifests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1AppTierEntity) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1AppTierEntity) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for i := 0; i < len(m.Properties); i++ {
		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1AppTierEntity) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AppTierEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AppTierEntity) UnmarshalBinary(b []byte) error {
	var res V1AppTierEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
