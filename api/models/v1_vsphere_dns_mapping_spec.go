// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VsphereDNSMappingSpec VSphere DNS Mapping Spec
//
// swagger:model v1VsphereDnsMappingSpec
type V1VsphereDNSMappingSpec struct {

	// VSphere datacenter name
	// Required: true
	Datacenter *string `json:"datacenter"`

	// VSphere DNS name
	// Required: true
	DNSName *string `json:"dnsName"`

	// VSphere network name
	// Required: true
	Network *string `json:"network"`

	// VSphere network URL
	// Read Only: true
	NetworkURL string `json:"networkUrl,omitempty"`

	// VSphere private gateway uid
	// Required: true
	PrivateGatewayUID *string `json:"privateGatewayUid"`
}

// Validate validates this v1 vsphere Dns mapping spec
func (m *V1VsphereDNSMappingSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatacenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateGatewayUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VsphereDNSMappingSpec) validateDatacenter(formats strfmt.Registry) error {

	if err := validate.Required("datacenter", "body", m.Datacenter); err != nil {
		return err
	}

	return nil
}

func (m *V1VsphereDNSMappingSpec) validateDNSName(formats strfmt.Registry) error {

	if err := validate.Required("dnsName", "body", m.DNSName); err != nil {
		return err
	}

	return nil
}

func (m *V1VsphereDNSMappingSpec) validateNetwork(formats strfmt.Registry) error {

	if err := validate.Required("network", "body", m.Network); err != nil {
		return err
	}

	return nil
}

func (m *V1VsphereDNSMappingSpec) validatePrivateGatewayUID(formats strfmt.Registry) error {

	if err := validate.Required("privateGatewayUid", "body", m.PrivateGatewayUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VsphereDNSMappingSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VsphereDNSMappingSpec) UnmarshalBinary(b []byte) error {
	var res V1VsphereDNSMappingSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
