// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ClusterProfileScope v1 cluster profile scope
//
// swagger:model v1ClusterProfileScope
type V1ClusterProfileScope string

func NewV1ClusterProfileScope(value V1ClusterProfileScope) *V1ClusterProfileScope {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1ClusterProfileScope.
func (m V1ClusterProfileScope) Pointer() *V1ClusterProfileScope {
	return &m
}

const (

	// V1ClusterProfileScopeSystem captures enum value "system"
	V1ClusterProfileScopeSystem V1ClusterProfileScope = "system"

	// V1ClusterProfileScopeTenant captures enum value "tenant"
	V1ClusterProfileScopeTenant V1ClusterProfileScope = "tenant"

	// V1ClusterProfileScopeProject captures enum value "project"
	V1ClusterProfileScopeProject V1ClusterProfileScope = "project"
)

// for schema
var v1ClusterProfileScopeEnum []interface{}

func init() {
	var res []V1ClusterProfileScope
	if err := json.Unmarshal([]byte(`["system","tenant","project"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterProfileScopeEnum = append(v1ClusterProfileScopeEnum, v)
	}
}

func (m V1ClusterProfileScope) validateV1ClusterProfileScopeEnum(path, location string, value V1ClusterProfileScope) error {
	if err := validate.EnumCase(path, location, value, v1ClusterProfileScopeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 cluster profile scope
func (m V1ClusterProfileScope) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ClusterProfileScopeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 cluster profile scope based on context it is used
func (m V1ClusterProfileScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
