// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SpectroClusterVariableResponse Unique variable field with schema definition
//
// swagger:model v1SpectroClusterVariableResponse
type V1SpectroClusterVariableResponse struct {

	// The default value of the variable
	DefaultValue string `json:"defaultValue"`

	// Variable description
	Description string `json:"description,omitempty"`

	// Unique display name of the variable
	DisplayName string `json:"displayName,omitempty"`

	// format
	Format *V1VariableFormat `json:"format,omitempty"`

	// If true, then variable will be hidden for overriding the value. By default the hidden flag will be set to false
	Hidden bool `json:"hidden"`

	// If true, then variable value can't be editable. By default the immutable flag will be set to false
	Immutable bool `json:"immutable"`

	// Input type for the variable - text or dropdown. Defaults to text for backward compatibility
	InputType *V1VariableInputType `json:"inputType,omitempty"`

	// If true, then default value will be masked. By default the isSensitive flag will be set to false
	IsSensitive bool `json:"isSensitive"`

	// Variable name
	// Required: true
	Name *string `json:"name"`

	// Available options for dropdown input type
	Options []*V1VariableOption `json:"options"`

	// Regular expression pattern which the variable value must match
	Regex string `json:"regex,omitempty"`

	// Flag to specify if the variable is optional or mandatory. If it is mandatory then default value must be provided
	Required bool `json:"required"`

	// The user specified value of the variable
	Value string `json:"value"`
}

// Validate validates this v1 spectro cluster variable response
func (m *V1SpectroClusterVariableResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterVariableResponse) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.Format) { // not required
		return nil
	}

	if m.Format != nil {
		if err := m.Format.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("format")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterVariableResponse) validateInputType(formats strfmt.Registry) error {
	if swag.IsZero(m.InputType) { // not required
		return nil
	}

	if m.InputType != nil {
		if err := m.InputType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputType")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterVariableResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1SpectroClusterVariableResponse) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 spectro cluster variable response based on the context it is used
func (m *V1SpectroClusterVariableResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterVariableResponse) contextValidateFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.Format != nil {

		if swag.IsZero(m.Format) { // not required
			return nil
		}

		if err := m.Format.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("format")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterVariableResponse) contextValidateInputType(ctx context.Context, formats strfmt.Registry) error {

	if m.InputType != nil {

		if swag.IsZero(m.InputType) { // not required
			return nil
		}

		if err := m.InputType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputType")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterVariableResponse) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Options); i++ {

		if m.Options[i] != nil {

			if swag.IsZero(m.Options[i]) { // not required
				return nil
			}

			if err := m.Options[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterVariableResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterVariableResponse) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterVariableResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
