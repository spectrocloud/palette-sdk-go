// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1SchedulerJob v1 scheduler job
//
// swagger:model v1SchedulerJob
type V1SchedulerJob struct {

	// metadata
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`

	// spec
	Spec *V1SchedulerJobSpec `json:"spec,omitempty"`

	// status
	Status *V1SchedulerJobStatus `json:"status,omitempty"`
}

// Validate validates this v1 scheduler job
func (m *V1SchedulerJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SchedulerJob) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1SchedulerJob) validateSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *V1SchedulerJob) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SchedulerJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SchedulerJob) UnmarshalBinary(b []byte) error {
	var res V1SchedulerJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1SchedulerJobSpec v1 scheduler job spec
//
// swagger:model V1SchedulerJobSpec
type V1SchedulerJobSpec struct {

	// cycles
	Cycles int64 `json:"cycles"`

	// interval
	Interval int64 `json:"interval"`
}

// Validate validates this v1 scheduler job spec
func (m *V1SchedulerJobSpec) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1SchedulerJobSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SchedulerJobSpec) UnmarshalBinary(b []byte) error {
	var res V1SchedulerJobSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1SchedulerJobStatus v1 scheduler job status
//
// swagger:model V1SchedulerJobStatus
type V1SchedulerJobStatus struct {

	// cycle number
	CycleNumber int64 `json:"cycleNumber"`

	// error
	Error string `json:"error"`

	// force next run
	ForceNextRun bool `json:"forceNextRun"`

	// is active
	IsActive bool `json:"isActive"`

	// is disabled
	IsDisabled bool `json:"isDisabled"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// last run time
	// Format: date-time
	LastRunTime V1Time `json:"lastRunTime,omitempty"`

	// last successful run time
	// Format: date-time
	LastSuccessfulRunTime V1Time `json:"lastSuccessfulRunTime,omitempty"`

	// next run time
	// Format: date-time
	NextRunTime V1Time `json:"nextRunTime,omitempty"`
}

// Validate validates this v1 scheduler job status
func (m *V1SchedulerJobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastRunTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSuccessfulRunTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextRunTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SchedulerJobStatus) validateLastRunTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastRunTime) { // not required
		return nil
	}

	if err := m.LastRunTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status" + "." + "lastRunTime")
		}
		return err
	}

	return nil
}

func (m *V1SchedulerJobStatus) validateLastSuccessfulRunTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastSuccessfulRunTime) { // not required
		return nil
	}

	if err := m.LastSuccessfulRunTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status" + "." + "lastSuccessfulRunTime")
		}
		return err
	}

	return nil
}

func (m *V1SchedulerJobStatus) validateNextRunTime(formats strfmt.Registry) error {

	if swag.IsZero(m.NextRunTime) { // not required
		return nil
	}

	if err := m.NextRunTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status" + "." + "nextRunTime")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SchedulerJobStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SchedulerJobStatus) UnmarshalBinary(b []byte) error {
	var res V1SchedulerJobStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
