// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1BackupStatusConfig Backup config
//
// swagger:model v1BackupStatusConfig
type V1BackupStatusConfig struct {

	// include all disks
	IncludeAllDisks bool `json:"includeAllDisks,omitempty"`

	// include cluster resource mode
	IncludeClusterResourceMode V1IncludeClusterResourceMode `json:"includeClusterResourceMode,omitempty"`

	// Deprecated. Use includeClusterResourceMode
	IncludeClusterResources bool `json:"includeClusterResources,omitempty"`

	// namespaces
	// Unique: true
	Namespaces []string `json:"namespaces"`
}

// Validate validates this v1 backup status config
func (m *V1BackupStatusConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncludeClusterResourceMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BackupStatusConfig) validateIncludeClusterResourceMode(formats strfmt.Registry) error {
	if swag.IsZero(m.IncludeClusterResourceMode) { // not required
		return nil
	}

	if err := m.IncludeClusterResourceMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("includeClusterResourceMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("includeClusterResourceMode")
		}
		return err
	}

	return nil
}

func (m *V1BackupStatusConfig) validateNamespaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Namespaces) { // not required
		return nil
	}

	if err := validate.UniqueItems("namespaces", "body", m.Namespaces); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 backup status config based on the context it is used
func (m *V1BackupStatusConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIncludeClusterResourceMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BackupStatusConfig) contextValidateIncludeClusterResourceMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.IncludeClusterResourceMode) { // not required
		return nil
	}

	if err := m.IncludeClusterResourceMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("includeClusterResourceMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("includeClusterResourceMode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1BackupStatusConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1BackupStatusConfig) UnmarshalBinary(b []byte) error {
	var res V1BackupStatusConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
