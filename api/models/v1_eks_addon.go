// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1EksAddon EksAddon represents a EKS addon
//
// swagger:model v1EksAddon
type V1EksAddon struct {

	// ConflictResolution is used to declare what should happen if there are parameter conflicts.
	ConflictResolution string `json:"conflictResolution,omitempty"`

	// Name is the name of the addon
	// Required: true
	Name *string `json:"name"`

	// ServiceAccountRoleArn is the ARN of an IAM role to bind to the addons service account
	ServiceAccountRoleARN string `json:"serviceAccountRoleARN,omitempty"`

	// Version is the version of the addon to use
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this v1 eks addon
func (m *V1EksAddon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EksAddon) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1EksAddon) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EksAddon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EksAddon) UnmarshalBinary(b []byte) error {
	var res V1EksAddon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
