// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ClusterVirtualMachineStatus VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing
//
// swagger:model v1ClusterVirtualMachineStatus
type V1ClusterVirtualMachineStatus struct {

	// Hold the state information of the VirtualMachine and its VirtualMachineInstance
	Conditions []*V1VMVirtualMachineCondition `json:"conditions"`

	// Created indicates if the virtual machine is created in the cluster
	Created bool `json:"created,omitempty"`

	// memory dump request
	MemoryDumpRequest *V1VMVirtualMachineMemoryDumpRequest `json:"memoryDumpRequest,omitempty"`

	// PrintableStatus is a human readable, high-level representation of the status of the virtual machine
	PrintableStatus string `json:"printableStatus,omitempty"`

	// Ready indicates if the virtual machine is running and ready
	Ready bool `json:"ready,omitempty"`

	// RestoreInProgress is the name of the VirtualMachineRestore currently executing
	RestoreInProgress string `json:"restoreInProgress,omitempty"`

	// SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing
	SnapshotInProgress string `json:"snapshotInProgress,omitempty"`

	// start failure
	StartFailure *V1VMVirtualMachineStartFailure `json:"startFailure,omitempty"`

	// StateChangeRequests indicates a list of actions that should be taken on a VMI e.g. stop a specific VMI then start a new one.
	StateChangeRequests []*V1VMVirtualMachineStateChangeRequest `json:"stateChangeRequests"`

	// VolumeRequests indicates a list of volumes add or remove from the VMI template and hotplug on an active running VMI.
	VolumeRequests []*V1VMVirtualMachineVolumeRequest `json:"volumeRequests"`

	// VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is supported by each volume.
	VolumeSnapshotStatuses []*V1VMVolumeSnapshotStatus `json:"volumeSnapshotStatuses"`
}

// Validate validates this v1 cluster virtual machine status
func (m *V1ClusterVirtualMachineStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryDumpRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartFailure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateChangeRequests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeRequests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeSnapshotStatuses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterVirtualMachineStatus) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterVirtualMachineStatus) validateMemoryDumpRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryDumpRequest) { // not required
		return nil
	}

	if m.MemoryDumpRequest != nil {
		if err := m.MemoryDumpRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryDumpRequest")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterVirtualMachineStatus) validateStartFailure(formats strfmt.Registry) error {

	if swag.IsZero(m.StartFailure) { // not required
		return nil
	}

	if m.StartFailure != nil {
		if err := m.StartFailure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startFailure")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterVirtualMachineStatus) validateStateChangeRequests(formats strfmt.Registry) error {

	if swag.IsZero(m.StateChangeRequests) { // not required
		return nil
	}

	for i := 0; i < len(m.StateChangeRequests); i++ {
		if swag.IsZero(m.StateChangeRequests[i]) { // not required
			continue
		}

		if m.StateChangeRequests[i] != nil {
			if err := m.StateChangeRequests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stateChangeRequests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterVirtualMachineStatus) validateVolumeRequests(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeRequests) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeRequests); i++ {
		if swag.IsZero(m.VolumeRequests[i]) { // not required
			continue
		}

		if m.VolumeRequests[i] != nil {
			if err := m.VolumeRequests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeRequests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterVirtualMachineStatus) validateVolumeSnapshotStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeSnapshotStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeSnapshotStatuses); i++ {
		if swag.IsZero(m.VolumeSnapshotStatuses[i]) { // not required
			continue
		}

		if m.VolumeSnapshotStatuses[i] != nil {
			if err := m.VolumeSnapshotStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeSnapshotStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterVirtualMachineStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterVirtualMachineStatus) UnmarshalBinary(b []byte) error {
	var res V1ClusterVirtualMachineStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
