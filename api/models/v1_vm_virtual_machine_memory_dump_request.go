// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VMVirtualMachineMemoryDumpRequest VirtualMachineMemoryDumpRequest represent the memory dump request phase and info
//
// swagger:model v1VmVirtualMachineMemoryDumpRequest
type V1VMVirtualMachineMemoryDumpRequest struct {

	// ClaimName is the name of the pvc that will contain the memory dump
	// Required: true
	ClaimName *string `json:"claimName"`

	// end timestamp
	// Format: date-time
	EndTimestamp V1Time `json:"endTimestamp,omitempty"`

	// FileName represents the name of the output file
	FileName string `json:"fileName,omitempty"`

	// Message is a detailed message about failure of the memory dump
	Message string `json:"message,omitempty"`

	// Phase represents the memory dump phase
	// Required: true
	Phase *string `json:"phase"`

	// Remove represents request of dissociating the memory dump pvc
	Remove bool `json:"remove,omitempty"`

	// start timestamp
	// Format: date-time
	StartTimestamp V1Time `json:"startTimestamp,omitempty"`
}

// Validate validates this v1 Vm virtual machine memory dump request
func (m *V1VMVirtualMachineMemoryDumpRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClaimName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMVirtualMachineMemoryDumpRequest) validateClaimName(formats strfmt.Registry) error {

	if err := validate.Required("claimName", "body", m.ClaimName); err != nil {
		return err
	}

	return nil
}

func (m *V1VMVirtualMachineMemoryDumpRequest) validateEndTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := m.EndTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("endTimestamp")
		}
		return err
	}

	return nil
}

func (m *V1VMVirtualMachineMemoryDumpRequest) validatePhase(formats strfmt.Registry) error {

	if err := validate.Required("phase", "body", m.Phase); err != nil {
		return err
	}

	return nil
}

func (m *V1VMVirtualMachineMemoryDumpRequest) validateStartTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := m.StartTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("startTimestamp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1 Vm virtual machine memory dump request based on the context it is used
func (m *V1VMVirtualMachineMemoryDumpRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMVirtualMachineMemoryDumpRequest) contextValidateEndTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := m.EndTimestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("endTimestamp")
		}
		return err
	}

	return nil
}

func (m *V1VMVirtualMachineMemoryDumpRequest) contextValidateStartTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := m.StartTimestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("startTimestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VMVirtualMachineMemoryDumpRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMVirtualMachineMemoryDumpRequest) UnmarshalBinary(b []byte) error {
	var res V1VMVirtualMachineMemoryDumpRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
