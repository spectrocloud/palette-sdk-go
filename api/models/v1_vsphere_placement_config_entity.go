// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1VspherePlacementConfigEntity Both ClusterConfig and MachinePoolConfig will have PlacementConfig MachinePoolconfig.Placements will overwrite values defined in ClusterConfig Currently the convention is: Datacenter / Folder / ImageTemplateFolder / Network should be defined at ClusterConfig Cluster / ResourcePool / Datastore / Network is defined at MachinePool ClusterConfig Network should only indicate use DHCP or not MachinePool Network should contain the actual network and IPPool
//
// swagger:model v1VspherePlacementConfigEntity
type V1VspherePlacementConfigEntity struct {

	// Cluster is the computecluster in vsphere
	Cluster string `json:"cluster,omitempty"`

	// Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.
	Datacenter string `json:"datacenter,omitempty"`

	// Datastore is the datastore in which VMs are created/located.
	Datastore string `json:"datastore,omitempty"`

	// Folder is the folder in which VMs are created/located.
	Folder string `json:"folder,omitempty"`

	// ImageTemplateFolder is the folder in which VMs templates are created/located. if empty will use default value spectro-templates
	ImageTemplateFolder string `json:"imageTemplateFolder,omitempty"`

	// network info
	Network *V1VsphereNetworkConfigEntity `json:"network,omitempty"`

	// ResourcePool is the resource pool within the above computecluster Cluster
	ResourcePool string `json:"resourcePool,omitempty"`

	// StoragePolicyName of the storage policy to use with this Virtual Machine
	StoragePolicyName string `json:"storagePolicyName,omitempty"`

	// UID for this placement
	UID string `json:"uid,omitempty"`
}

// Validate validates this v1 vsphere placement config entity
func (m *V1VspherePlacementConfigEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VspherePlacementConfigEntity) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VspherePlacementConfigEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VspherePlacementConfigEntity) UnmarshalBinary(b []byte) error {
	var res V1VspherePlacementConfigEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
