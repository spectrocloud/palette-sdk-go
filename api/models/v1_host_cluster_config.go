// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1HostClusterConfig v1 host cluster config
//
// swagger:model v1HostClusterConfig
type V1HostClusterConfig struct {

	// host cluster configuration
	ClusterEndpoint *V1HostClusterEndpoint `json:"clusterEndpoint,omitempty"`

	// cluster group reference
	ClusterGroup *V1ObjectReference `json:"clusterGroup,omitempty"`

	// host cluster reference
	HostCluster *V1ObjectReference `json:"hostCluster,omitempty"`

	// is enabled as host cluster
	IsHostCluster *bool `json:"isHostCluster"`
}

// Validate validates this v1 host cluster config
func (m *V1HostClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostCluster(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1HostClusterConfig) validateClusterEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterEndpoint) { // not required
		return nil
	}

	if m.ClusterEndpoint != nil {
		if err := m.ClusterEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterEndpoint")
			}
			return err
		}
	}

	return nil
}

func (m *V1HostClusterConfig) validateClusterGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterGroup) { // not required
		return nil
	}

	if m.ClusterGroup != nil {
		if err := m.ClusterGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterGroup")
			}
			return err
		}
	}

	return nil
}

func (m *V1HostClusterConfig) validateHostCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.HostCluster) { // not required
		return nil
	}

	if m.HostCluster != nil {
		if err := m.HostCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostCluster")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1HostClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1HostClusterConfig) UnmarshalBinary(b []byte) error {
	var res V1HostClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
