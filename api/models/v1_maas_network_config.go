// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MaasNetworkConfig v1 maas network config
//
// swagger:model v1MaasNetworkConfig
type V1MaasNetworkConfig struct {

	// when staticIP=true, need to provide IPPool
	IPPool *V1IPPool `json:"ipPool,omitempty"`

	// NetworkName is the name of the network in which VMs are created/located.
	// Required: true
	NetworkName *string `json:"networkName"`

	// ParentPoolRef reference to the ParentPool which allocates IPs for this IPPool
	ParentPoolRef *V1ObjectReference `json:"parentPoolRef,omitempty"`

	// support dhcp or static IP, if false, use DHCP
	StaticIP bool `json:"staticIp"`
}

// Validate validates this v1 maas network config
func (m *V1MaasNetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentPoolRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MaasNetworkConfig) validateIPPool(formats strfmt.Registry) error {
	if swag.IsZero(m.IPPool) { // not required
		return nil
	}

	if m.IPPool != nil {
		if err := m.IPPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipPool")
			}
			return err
		}
	}

	return nil
}

func (m *V1MaasNetworkConfig) validateNetworkName(formats strfmt.Registry) error {

	if err := validate.Required("networkName", "body", m.NetworkName); err != nil {
		return err
	}

	return nil
}

func (m *V1MaasNetworkConfig) validateParentPoolRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentPoolRef) { // not required
		return nil
	}

	if m.ParentPoolRef != nil {
		if err := m.ParentPoolRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentPoolRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentPoolRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 maas network config based on the context it is used
func (m *V1MaasNetworkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPPool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentPoolRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MaasNetworkConfig) contextValidateIPPool(ctx context.Context, formats strfmt.Registry) error {

	if m.IPPool != nil {

		if swag.IsZero(m.IPPool) { // not required
			return nil
		}

		if err := m.IPPool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipPool")
			}
			return err
		}
	}

	return nil
}

func (m *V1MaasNetworkConfig) contextValidateParentPoolRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentPoolRef != nil {

		if swag.IsZero(m.ParentPoolRef) { // not required
			return nil
		}

		if err := m.ParentPoolRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentPoolRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentPoolRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MaasNetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MaasNetworkConfig) UnmarshalBinary(b []byte) error {
	var res V1MaasNetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
