// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterComplianceScanSyftDriverConfig Cluster compliance scan specification
//
// swagger:model v1ClusterComplianceScanSyftDriverConfig
type V1ClusterComplianceScanSyftDriverConfig struct {

	// format
	// Enum: [cyclonedx-json github-json spdx-json syft-json]
	Format string `json:"format,omitempty"`

	// label selector
	LabelSelector string `json:"labelSelector,omitempty"`

	// location
	Location *V1ObjectEntity `json:"location,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// pod name
	PodName string `json:"podName,omitempty"`

	// scope
	// Enum: [cluster namespace label-selector pod]
	Scope string `json:"scope,omitempty"`
}

// Validate validates this v1 cluster compliance scan syft driver config
func (m *V1ClusterComplianceScanSyftDriverConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1ClusterComplianceScanSyftDriverConfigTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cyclonedx-json","github-json","spdx-json","syft-json"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterComplianceScanSyftDriverConfigTypeFormatPropEnum = append(v1ClusterComplianceScanSyftDriverConfigTypeFormatPropEnum, v)
	}
}

const (

	// V1ClusterComplianceScanSyftDriverConfigFormatCyclonedxJSON captures enum value "cyclonedx-json"
	V1ClusterComplianceScanSyftDriverConfigFormatCyclonedxJSON string = "cyclonedx-json"

	// V1ClusterComplianceScanSyftDriverConfigFormatGithubJSON captures enum value "github-json"
	V1ClusterComplianceScanSyftDriverConfigFormatGithubJSON string = "github-json"

	// V1ClusterComplianceScanSyftDriverConfigFormatSpdxJSON captures enum value "spdx-json"
	V1ClusterComplianceScanSyftDriverConfigFormatSpdxJSON string = "spdx-json"

	// V1ClusterComplianceScanSyftDriverConfigFormatSyftJSON captures enum value "syft-json"
	V1ClusterComplianceScanSyftDriverConfigFormatSyftJSON string = "syft-json"
)

// prop value enum
func (m *V1ClusterComplianceScanSyftDriverConfig) validateFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterComplianceScanSyftDriverConfigTypeFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterComplianceScanSyftDriverConfig) validateFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.Format) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterComplianceScanSyftDriverConfig) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

var v1ClusterComplianceScanSyftDriverConfigTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cluster","namespace","label-selector","pod"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterComplianceScanSyftDriverConfigTypeScopePropEnum = append(v1ClusterComplianceScanSyftDriverConfigTypeScopePropEnum, v)
	}
}

const (

	// V1ClusterComplianceScanSyftDriverConfigScopeCluster captures enum value "cluster"
	V1ClusterComplianceScanSyftDriverConfigScopeCluster string = "cluster"

	// V1ClusterComplianceScanSyftDriverConfigScopeNamespace captures enum value "namespace"
	V1ClusterComplianceScanSyftDriverConfigScopeNamespace string = "namespace"

	// V1ClusterComplianceScanSyftDriverConfigScopeLabelSelector captures enum value "label-selector"
	V1ClusterComplianceScanSyftDriverConfigScopeLabelSelector string = "label-selector"

	// V1ClusterComplianceScanSyftDriverConfigScopePod captures enum value "pod"
	V1ClusterComplianceScanSyftDriverConfigScopePod string = "pod"
)

// prop value enum
func (m *V1ClusterComplianceScanSyftDriverConfig) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterComplianceScanSyftDriverConfigTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterComplianceScanSyftDriverConfig) validateScope(formats strfmt.Registry) error {

	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterComplianceScanSyftDriverConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterComplianceScanSyftDriverConfig) UnmarshalBinary(b []byte) error {
	var res V1ClusterComplianceScanSyftDriverConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
