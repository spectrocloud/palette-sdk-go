// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VMAddVolumeEntity v1 VM add volume entity
//
// swagger:model v1VMAddVolumeEntity
type V1VMAddVolumeEntity struct {

	// Parameters required to add volume to virtual machine/virtual machine instance
	// Required: true
	AddVolumeOptions *V1VMAddVolumeOptions `json:"addVolumeOptions"`

	// dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.
	DataVolumeTemplate *V1VMDataVolumeTemplateSpec `json:"dataVolumeTemplate,omitempty"`

	// If 'true' add the disk to the Virtual Machine & Virtual Machine Instance, else add the disk to the Virtual Machine Instance only
	Persist bool `json:"persist,omitempty"`
}

// Validate validates this v1 VM add volume entity
func (m *V1VMAddVolumeEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddVolumeOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataVolumeTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMAddVolumeEntity) validateAddVolumeOptions(formats strfmt.Registry) error {

	if err := validate.Required("addVolumeOptions", "body", m.AddVolumeOptions); err != nil {
		return err
	}

	if m.AddVolumeOptions != nil {
		if err := m.AddVolumeOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addVolumeOptions")
			}
			return err
		}
	}

	return nil
}

func (m *V1VMAddVolumeEntity) validateDataVolumeTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.DataVolumeTemplate) { // not required
		return nil
	}

	if m.DataVolumeTemplate != nil {
		if err := m.DataVolumeTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataVolumeTemplate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VMAddVolumeEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMAddVolumeEntity) UnmarshalBinary(b []byte) error {
	var res V1VMAddVolumeEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
