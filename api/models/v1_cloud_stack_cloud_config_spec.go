// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1CloudStackCloudConfigSpec CloudStackCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api
//
// swagger:model v1CloudStackCloudConfigSpec
type V1CloudStackCloudConfigSpec struct {

	// cloudAccountRef should point to the secret which contains CloudStackCloudAccount
	CloudAccountRef *V1ObjectReference `json:"cloudAccountRef,omitempty"`

	// cluster config
	ClusterConfig *V1CloudStackClusterConfig `json:"clusterConfig,omitempty"`

	// machine pool config
	MachinePoolConfig []*V1CloudStackMachinePoolConfig `json:"machinePoolConfig"`
}

// Validate validates this v1 cloud stack cloud config spec
func (m *V1CloudStackCloudConfigSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudAccountRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePoolConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CloudStackCloudConfigSpec) validateCloudAccountRef(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudAccountRef) { // not required
		return nil
	}

	if m.CloudAccountRef != nil {
		if err := m.CloudAccountRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudAccountRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudAccountRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1CloudStackCloudConfigSpec) validateClusterConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterConfig) { // not required
		return nil
	}

	if m.ClusterConfig != nil {
		if err := m.ClusterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1CloudStackCloudConfigSpec) validateMachinePoolConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MachinePoolConfig) { // not required
		return nil
	}

	for i := 0; i < len(m.MachinePoolConfig); i++ {
		if swag.IsZero(m.MachinePoolConfig[i]) { // not required
			continue
		}

		if m.MachinePoolConfig[i] != nil {
			if err := m.MachinePoolConfig[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("machinePoolConfig" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("machinePoolConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 cloud stack cloud config spec based on the context it is used
func (m *V1CloudStackCloudConfigSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudAccountRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMachinePoolConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CloudStackCloudConfigSpec) contextValidateCloudAccountRef(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudAccountRef != nil {

		if swag.IsZero(m.CloudAccountRef) { // not required
			return nil
		}

		if err := m.CloudAccountRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudAccountRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudAccountRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1CloudStackCloudConfigSpec) contextValidateClusterConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterConfig != nil {

		if swag.IsZero(m.ClusterConfig) { // not required
			return nil
		}

		if err := m.ClusterConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1CloudStackCloudConfigSpec) contextValidateMachinePoolConfig(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MachinePoolConfig); i++ {

		if m.MachinePoolConfig[i] != nil {

			if swag.IsZero(m.MachinePoolConfig[i]) { // not required
				return nil
			}

			if err := m.MachinePoolConfig[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("machinePoolConfig" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("machinePoolConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CloudStackCloudConfigSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CloudStackCloudConfigSpec) UnmarshalBinary(b []byte) error {
	var res V1CloudStackCloudConfigSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
