// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MgmtAppCronJobStatus v1 mgmt app cron job status
//
// swagger:model v1MgmtAppCronJobStatus
type V1MgmtAppCronJobStatus struct {

	// is healthy
	IsHealthy bool `json:"isHealthy"`

	// last schedule time
	// Format: date-time
	LastScheduleTime V1Time `json:"lastScheduleTime,omitempty"`

	// last successful run time
	// Format: date-time
	LastSuccessfulRunTime V1Time `json:"lastSuccessfulRunTime,omitempty"`

	// messages
	Messages []string `json:"messages"`

	// name
	Name string `json:"name,omitempty"`

	// pods
	Pods map[string]V1MgmtAppPodsStatus `json:"pods,omitempty"`
}

// Validate validates this v1 mgmt app cron job status
func (m *V1MgmtAppCronJobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastScheduleTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSuccessfulRunTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MgmtAppCronJobStatus) validateLastScheduleTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastScheduleTime) { // not required
		return nil
	}

	if err := m.LastScheduleTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastScheduleTime")
		}
		return err
	}

	return nil
}

func (m *V1MgmtAppCronJobStatus) validateLastSuccessfulRunTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastSuccessfulRunTime) { // not required
		return nil
	}

	if err := m.LastSuccessfulRunTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastSuccessfulRunTime")
		}
		return err
	}

	return nil
}

func (m *V1MgmtAppCronJobStatus) validatePods(formats strfmt.Registry) error {

	if swag.IsZero(m.Pods) { // not required
		return nil
	}

	for k := range m.Pods {

		if err := validate.Required("pods"+"."+k, "body", m.Pods[k]); err != nil {
			return err
		}
		if val, ok := m.Pods[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MgmtAppCronJobStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MgmtAppCronJobStatus) UnmarshalBinary(b []byte) error {
	var res V1MgmtAppCronJobStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
