// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ClusterWorkloadSpec Cluster workload spec
//
// swagger:model v1ClusterWorkloadSpec
type V1ClusterWorkloadSpec struct {

	// clusterrole bindings
	ClusterroleBindings []*V1ClusterWorkloadRoleBinding `json:"clusterroleBindings"`

	// cron jobs
	CronJobs []*V1ClusterWorkloadCronJob `json:"cronJobs"`

	// daemon sets
	DaemonSets []*V1ClusterWorkloadDaemonSet `json:"daemonSets"`

	// deployments
	Deployments []*V1ClusterWorkloadDeployment `json:"deployments"`

	// jobs
	Jobs []*V1ClusterWorkloadJob `json:"jobs"`

	// pods
	Pods []*V1ClusterWorkloadPod `json:"pods"`

	// role bindings
	RoleBindings []*V1ClusterWorkloadRoleBinding `json:"roleBindings"`

	// stateful sets
	StatefulSets []*V1ClusterWorkloadStatefulSet `json:"statefulSets"`
}

// Validate validates this v1 cluster workload spec
func (m *V1ClusterWorkloadSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterroleBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCronJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaemonSets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatefulSets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterWorkloadSpec) validateClusterroleBindings(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterroleBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterroleBindings); i++ {
		if swag.IsZero(m.ClusterroleBindings[i]) { // not required
			continue
		}

		if m.ClusterroleBindings[i] != nil {
			if err := m.ClusterroleBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterroleBindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterWorkloadSpec) validateCronJobs(formats strfmt.Registry) error {

	if swag.IsZero(m.CronJobs) { // not required
		return nil
	}

	for i := 0; i < len(m.CronJobs); i++ {
		if swag.IsZero(m.CronJobs[i]) { // not required
			continue
		}

		if m.CronJobs[i] != nil {
			if err := m.CronJobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cronJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterWorkloadSpec) validateDaemonSets(formats strfmt.Registry) error {

	if swag.IsZero(m.DaemonSets) { // not required
		return nil
	}

	for i := 0; i < len(m.DaemonSets); i++ {
		if swag.IsZero(m.DaemonSets[i]) { // not required
			continue
		}

		if m.DaemonSets[i] != nil {
			if err := m.DaemonSets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("daemonSets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterWorkloadSpec) validateDeployments(formats strfmt.Registry) error {

	if swag.IsZero(m.Deployments) { // not required
		return nil
	}

	for i := 0; i < len(m.Deployments); i++ {
		if swag.IsZero(m.Deployments[i]) { // not required
			continue
		}

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterWorkloadSpec) validateJobs(formats strfmt.Registry) error {

	if swag.IsZero(m.Jobs) { // not required
		return nil
	}

	for i := 0; i < len(m.Jobs); i++ {
		if swag.IsZero(m.Jobs[i]) { // not required
			continue
		}

		if m.Jobs[i] != nil {
			if err := m.Jobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("jobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterWorkloadSpec) validatePods(formats strfmt.Registry) error {

	if swag.IsZero(m.Pods) { // not required
		return nil
	}

	for i := 0; i < len(m.Pods); i++ {
		if swag.IsZero(m.Pods[i]) { // not required
			continue
		}

		if m.Pods[i] != nil {
			if err := m.Pods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterWorkloadSpec) validateRoleBindings(formats strfmt.Registry) error {

	if swag.IsZero(m.RoleBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.RoleBindings); i++ {
		if swag.IsZero(m.RoleBindings[i]) { // not required
			continue
		}

		if m.RoleBindings[i] != nil {
			if err := m.RoleBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roleBindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterWorkloadSpec) validateStatefulSets(formats strfmt.Registry) error {

	if swag.IsZero(m.StatefulSets) { // not required
		return nil
	}

	for i := 0; i < len(m.StatefulSets); i++ {
		if swag.IsZero(m.StatefulSets[i]) { // not required
			continue
		}

		if m.StatefulSets[i] != nil {
			if err := m.StatefulSets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statefulSets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterWorkloadSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterWorkloadSpec) UnmarshalBinary(b []byte) error {
	var res V1ClusterWorkloadSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
