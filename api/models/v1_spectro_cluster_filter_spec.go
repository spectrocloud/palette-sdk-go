// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SpectroClusterFilterSpec Spectro cluster filter spec
//
// swagger:model v1SpectroClusterFilterSpec
type V1SpectroClusterFilterSpec struct {

	// cloud accounts
	// Unique: true
	CloudAccounts []string `json:"cloudAccounts"`

	// cluster name
	ClusterName *V1FilterString `json:"clusterName,omitempty"`

	// cluster profiles
	// Unique: true
	ClusterProfiles []string `json:"clusterProfiles"`

	// Deprecated. Use clusterStates
	ClusterState V1ClusterState `json:"clusterState,omitempty"`

	// cluster states
	// Unique: true
	ClusterStates []V1ClusterState `json:"clusterStates"`

	// cpu usage
	CPUUsage *V1FilterIntRange `json:"cpuUsage,omitempty"`

	// Deprecated. Use environments
	// Unique: true
	Environment []string `json:"environment"`

	// environments
	// Unique: true
	Environments []string `json:"environments"`

	// health state
	// Enum: [all Healthy UnHealthy]
	HealthState *string `json:"healthState,omitempty"`

	// is deleted
	IsDeleted *bool `json:"isDeleted,omitempty"`

	// is host cluster
	IsHostCluster *bool `json:"isHostCluster"`

	// memory usage
	MemoryUsage *V1FilterNumberRange `json:"memoryUsage,omitempty"`

	// Metric period in minutes defines latest metrics by period
	MetricPeriod *int32 `json:"metricPeriod,omitempty"`

	// project uids
	// Unique: true
	ProjectUids []string `json:"projectUids"`

	// tags
	Tags *V1FilterArray `json:"tags,omitempty"`
}

// Validate validates this v1 spectro cluster filter spec
func (m *V1SpectroClusterFilterSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterStates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectUids(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SpectroClusterFilterSpec) validateCloudAccounts(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudAccounts) { // not required
		return nil
	}

	if err := validate.UniqueItems("cloudAccounts", "body", m.CloudAccounts); err != nil {
		return err
	}

	return nil
}

func (m *V1SpectroClusterFilterSpec) validateClusterName(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterName) { // not required
		return nil
	}

	if m.ClusterName != nil {
		if err := m.ClusterName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterName")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterFilterSpec) validateClusterProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterProfiles) { // not required
		return nil
	}

	if err := validate.UniqueItems("clusterProfiles", "body", m.ClusterProfiles); err != nil {
		return err
	}

	return nil
}

func (m *V1SpectroClusterFilterSpec) validateClusterState(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterState) { // not required
		return nil
	}

	if err := m.ClusterState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clusterState")
		}
		return err
	}

	return nil
}

func (m *V1SpectroClusterFilterSpec) validateClusterStates(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterStates) { // not required
		return nil
	}

	if err := validate.UniqueItems("clusterStates", "body", m.ClusterStates); err != nil {
		return err
	}

	for i := 0; i < len(m.ClusterStates); i++ {

		if err := m.ClusterStates[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterStates" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V1SpectroClusterFilterSpec) validateCPUUsage(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUUsage) { // not required
		return nil
	}

	if m.CPUUsage != nil {
		if err := m.CPUUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpuUsage")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterFilterSpec) validateEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	if err := validate.UniqueItems("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *V1SpectroClusterFilterSpec) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	if err := validate.UniqueItems("environments", "body", m.Environments); err != nil {
		return err
	}

	return nil
}

var v1SpectroClusterFilterSpecTypeHealthStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","Healthy","UnHealthy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1SpectroClusterFilterSpecTypeHealthStatePropEnum = append(v1SpectroClusterFilterSpecTypeHealthStatePropEnum, v)
	}
}

const (

	// V1SpectroClusterFilterSpecHealthStateAll captures enum value "all"
	V1SpectroClusterFilterSpecHealthStateAll string = "all"

	// V1SpectroClusterFilterSpecHealthStateHealthy captures enum value "Healthy"
	V1SpectroClusterFilterSpecHealthStateHealthy string = "Healthy"

	// V1SpectroClusterFilterSpecHealthStateUnHealthy captures enum value "UnHealthy"
	V1SpectroClusterFilterSpecHealthStateUnHealthy string = "UnHealthy"
)

// prop value enum
func (m *V1SpectroClusterFilterSpec) validateHealthStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1SpectroClusterFilterSpecTypeHealthStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1SpectroClusterFilterSpec) validateHealthState(formats strfmt.Registry) error {

	if swag.IsZero(m.HealthState) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthStateEnum("healthState", "body", *m.HealthState); err != nil {
		return err
	}

	return nil
}

func (m *V1SpectroClusterFilterSpec) validateMemoryUsage(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryUsage) { // not required
		return nil
	}

	if m.MemoryUsage != nil {
		if err := m.MemoryUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryUsage")
			}
			return err
		}
	}

	return nil
}

func (m *V1SpectroClusterFilterSpec) validateProjectUids(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectUids) { // not required
		return nil
	}

	if err := validate.UniqueItems("projectUids", "body", m.ProjectUids); err != nil {
		return err
	}

	return nil
}

func (m *V1SpectroClusterFilterSpec) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if m.Tags != nil {
		if err := m.Tags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SpectroClusterFilterSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SpectroClusterFilterSpec) UnmarshalBinary(b []byte) error {
	var res V1SpectroClusterFilterSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
