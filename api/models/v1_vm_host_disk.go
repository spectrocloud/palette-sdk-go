// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VMHostDisk Represents a disk created on the cluster level
//
// swagger:model v1VmHostDisk
type V1VMHostDisk struct {

	// capacity
	Capacity V1VMQuantity `json:"capacity,omitempty"`

	// The path to HostDisk image located on the cluster
	// Required: true
	Path *string `json:"path"`

	// Shared indicate whether the path is shared between nodes
	Shared bool `json:"shared,omitempty"`

	// Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate'
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this v1 Vm host disk
func (m *V1VMHostDisk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMHostDisk) validateCapacity(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	if err := m.Capacity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capacity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capacity")
		}
		return err
	}

	return nil
}

func (m *V1VMHostDisk) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *V1VMHostDisk) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 Vm host disk based on the context it is used
func (m *V1VMHostDisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapacity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VMHostDisk) contextValidateCapacity(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	if err := m.Capacity.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capacity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capacity")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VMHostDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VMHostDisk) UnmarshalBinary(b []byte) error {
	var res V1VMHostDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
