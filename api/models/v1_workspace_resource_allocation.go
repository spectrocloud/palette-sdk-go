// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1WorkspaceResourceAllocation Workspace resource allocation
//
// swagger:model v1WorkspaceResourceAllocation
type V1WorkspaceResourceAllocation struct {

	// cpu cores
	// Minimum: -1
	CPUCores float64 `json:"cpuCores"`

	// memory mi b
	// Minimum: -1
	MemoryMiB float64 `json:"memoryMiB"`
}

// Validate validates this v1 workspace resource allocation
func (m *V1WorkspaceResourceAllocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUCores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryMiB(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WorkspaceResourceAllocation) validateCPUCores(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUCores) { // not required
		return nil
	}

	if err := validate.Minimum("cpuCores", "body", m.CPUCores, -1, false); err != nil {
		return err
	}

	return nil
}

func (m *V1WorkspaceResourceAllocation) validateMemoryMiB(formats strfmt.Registry) error {
	if swag.IsZero(m.MemoryMiB) { // not required
		return nil
	}

	if err := validate.Minimum("memoryMiB", "body", m.MemoryMiB, -1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 workspace resource allocation based on context it is used
func (m *V1WorkspaceResourceAllocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1WorkspaceResourceAllocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1WorkspaceResourceAllocation) UnmarshalBinary(b []byte) error {
	var res V1WorkspaceResourceAllocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
