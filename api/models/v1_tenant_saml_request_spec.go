// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1TenantSamlRequestSpec Tenant
//
// swagger:model v1TenantSamlRequestSpec
type V1TenantSamlRequestSpec struct {

	// attributes
	Attributes []*V1TenantSamlSpecAttribute `json:"attributes"`

	// default teams
	DefaultTeams []string `json:"defaultTeams"`

	// federation metadata
	FederationMetadata string `json:"federationMetadata,omitempty"`

	// identity provider
	IdentityProvider string `json:"identityProvider,omitempty"`

	// is single logout enabled
	IsSingleLogoutEnabled bool `json:"isSingleLogoutEnabled,omitempty"`

	// is sso enabled
	IsSsoEnabled bool `json:"isSsoEnabled,omitempty"`

	// name Id format
	NameIDFormat string `json:"nameIdFormat,omitempty"`

	// sync sso teams
	SyncSsoTeams bool `json:"syncSsoTeams,omitempty"`
}

// Validate validates this v1 tenant saml request spec
func (m *V1TenantSamlRequestSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TenantSamlRequestSpec) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TenantSamlRequestSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TenantSamlRequestSpec) UnmarshalBinary(b []byte) error {
	var res V1TenantSamlRequestSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
