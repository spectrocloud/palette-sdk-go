// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterTemplatesFilterSpec Cluster template filter spec
//
// swagger:model v1ClusterTemplatesFilterSpec
type V1ClusterTemplatesFilterSpec struct {

	// cloud type
	// Unique: true
	CloudType []*V1CloudType `json:"cloudType"`

	// cluster template name
	ClusterTemplateName *V1FilterString `json:"clusterTemplateName,omitempty"`

	// policy Uid
	PolicyUID *V1FilterString `json:"policyUid,omitempty"`

	// project Uid
	ProjectUID *V1FilterString `json:"projectUid,omitempty"`

	// tags
	Tags *V1FilterArray `json:"tags,omitempty"`
}

// Validate validates this v1 cluster templates filter spec
func (m *V1ClusterTemplatesFilterSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterTemplateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterTemplatesFilterSpec) validateCloudType(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudType) { // not required
		return nil
	}

	if err := validate.UniqueItems("cloudType", "body", m.CloudType); err != nil {
		return err
	}

	for i := 0; i < len(m.CloudType); i++ {
		if swag.IsZero(m.CloudType[i]) { // not required
			continue
		}

		if m.CloudType[i] != nil {
			if err := m.CloudType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudType" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterTemplatesFilterSpec) validateClusterTemplateName(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterTemplateName) { // not required
		return nil
	}

	if m.ClusterTemplateName != nil {
		if err := m.ClusterTemplateName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterTemplateName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterTemplateName")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterTemplatesFilterSpec) validatePolicyUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyUID) { // not required
		return nil
	}

	if m.PolicyUID != nil {
		if err := m.PolicyUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyUid")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterTemplatesFilterSpec) validateProjectUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectUID) { // not required
		return nil
	}

	if m.ProjectUID != nil {
		if err := m.ProjectUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectUid")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterTemplatesFilterSpec) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if m.Tags != nil {
		if err := m.Tags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 cluster templates filter spec based on the context it is used
func (m *V1ClusterTemplatesFilterSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterTemplateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterTemplatesFilterSpec) contextValidateCloudType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudType); i++ {

		if m.CloudType[i] != nil {

			if swag.IsZero(m.CloudType[i]) { // not required
				return nil
			}

			if err := m.CloudType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudType" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterTemplatesFilterSpec) contextValidateClusterTemplateName(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterTemplateName != nil {

		if swag.IsZero(m.ClusterTemplateName) { // not required
			return nil
		}

		if err := m.ClusterTemplateName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterTemplateName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterTemplateName")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterTemplatesFilterSpec) contextValidatePolicyUID(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyUID != nil {

		if swag.IsZero(m.PolicyUID) { // not required
			return nil
		}

		if err := m.PolicyUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyUid")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterTemplatesFilterSpec) contextValidateProjectUID(ctx context.Context, formats strfmt.Registry) error {

	if m.ProjectUID != nil {

		if swag.IsZero(m.ProjectUID) { // not required
			return nil
		}

		if err := m.ProjectUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectUid")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterTemplatesFilterSpec) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if m.Tags != nil {

		if swag.IsZero(m.Tags) { // not required
			return nil
		}

		if err := m.Tags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterTemplatesFilterSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterTemplatesFilterSpec) UnmarshalBinary(b []byte) error {
	var res V1ClusterTemplatesFilterSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
