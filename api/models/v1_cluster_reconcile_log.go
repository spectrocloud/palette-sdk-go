// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterReconcileLog Cluster reconciliation log entry
//
// swagger:model v1ClusterReconcileLog
type V1ClusterReconcileLog struct {

	// Timestamp when this log entry was created
	// Format: date-time
	AppliedTimestamp strfmt.DateTime `json:"appliedTimestamp,omitempty"`

	// Log message
	Message string `json:"message,omitempty"`

	// List of profile UIDs involved in this reconciliation
	ProfileUids []string `json:"profileUids"`

	// Reconciliation state for this log entry
	// Enum: ["Created","Pending","InProgress","Applied","Failed"]
	State string `json:"state,omitempty"`
}

// Validate validates this v1 cluster reconcile log
func (m *V1ClusterReconcileLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterReconcileLog) validateAppliedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("appliedTimestamp", "body", "date-time", m.AppliedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var v1ClusterReconcileLogTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Created","Pending","InProgress","Applied","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ClusterReconcileLogTypeStatePropEnum = append(v1ClusterReconcileLogTypeStatePropEnum, v)
	}
}

const (

	// V1ClusterReconcileLogStateCreated captures enum value "Created"
	V1ClusterReconcileLogStateCreated string = "Created"

	// V1ClusterReconcileLogStatePending captures enum value "Pending"
	V1ClusterReconcileLogStatePending string = "Pending"

	// V1ClusterReconcileLogStateInProgress captures enum value "InProgress"
	V1ClusterReconcileLogStateInProgress string = "InProgress"

	// V1ClusterReconcileLogStateApplied captures enum value "Applied"
	V1ClusterReconcileLogStateApplied string = "Applied"

	// V1ClusterReconcileLogStateFailed captures enum value "Failed"
	V1ClusterReconcileLogStateFailed string = "Failed"
)

// prop value enum
func (m *V1ClusterReconcileLog) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1ClusterReconcileLogTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1ClusterReconcileLog) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 cluster reconcile log based on context it is used
func (m *V1ClusterReconcileLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterReconcileLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterReconcileLog) UnmarshalBinary(b []byte) error {
	var res V1ClusterReconcileLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
