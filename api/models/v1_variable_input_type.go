// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1VariableInputType Input type for the variable
//
// swagger:model v1VariableInputType
type V1VariableInputType string

func NewV1VariableInputType(value V1VariableInputType) *V1VariableInputType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1VariableInputType.
func (m V1VariableInputType) Pointer() *V1VariableInputType {
	return &m
}

const (

	// V1VariableInputTypeText captures enum value "text"
	V1VariableInputTypeText V1VariableInputType = "text"

	// V1VariableInputTypeDropdown captures enum value "dropdown"
	V1VariableInputTypeDropdown V1VariableInputType = "dropdown"

	// V1VariableInputTypeMultiline captures enum value "multiline"
	V1VariableInputTypeMultiline V1VariableInputType = "multiline"
)

// for schema
var v1VariableInputTypeEnum []interface{}

func init() {
	var res []V1VariableInputType
	if err := json.Unmarshal([]byte(`["text","dropdown","multiline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1VariableInputTypeEnum = append(v1VariableInputTypeEnum, v)
	}
}

func (m V1VariableInputType) validateV1VariableInputTypeEnum(path, location string, value V1VariableInputType) error {
	if err := validate.EnumCase(path, location, value, v1VariableInputTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 variable input type
func (m V1VariableInputType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1VariableInputTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 variable input type based on context it is used
func (m V1VariableInputType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
