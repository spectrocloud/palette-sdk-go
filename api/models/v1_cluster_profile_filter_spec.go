// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterProfileFilterSpec Cluster profile filter spec
//
// swagger:model v1ClusterProfileFilterSpec
type V1ClusterProfileFilterSpec struct {

	// environment
	// Unique: true
	Environment []string `json:"environment"`

	// fips
	Fips V1ClusterFipsMode `json:"fips,omitempty"`

	// profile name
	ProfileName *V1FilterString `json:"profileName,omitempty"`

	// profile type
	// Unique: true
	ProfileType []V1ProfileType `json:"profileType"`

	// scope
	Scope V1ClusterProfileScope `json:"scope,omitempty"`

	// tags
	Tags *V1FilterArray `json:"tags,omitempty"`

	// version
	Version *V1FilterVersionString `json:"version,omitempty"`
}

// Validate validates this v1 cluster profile filter spec
func (m *V1ClusterProfileFilterSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFips(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterProfileFilterSpec) validateEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	if err := validate.UniqueItems("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterProfileFilterSpec) validateFips(formats strfmt.Registry) error {

	if swag.IsZero(m.Fips) { // not required
		return nil
	}

	if err := m.Fips.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fips")
		}
		return err
	}

	return nil
}

func (m *V1ClusterProfileFilterSpec) validateProfileName(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfileName) { // not required
		return nil
	}

	if m.ProfileName != nil {
		if err := m.ProfileName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profileName")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterProfileFilterSpec) validateProfileType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfileType) { // not required
		return nil
	}

	if err := validate.UniqueItems("profileType", "body", m.ProfileType); err != nil {
		return err
	}

	for i := 0; i < len(m.ProfileType); i++ {

		if err := m.ProfileType[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profileType" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V1ClusterProfileFilterSpec) validateScope(formats strfmt.Registry) error {

	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if err := m.Scope.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scope")
		}
		return err
	}

	return nil
}

func (m *V1ClusterProfileFilterSpec) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if m.Tags != nil {
		if err := m.Tags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterProfileFilterSpec) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterProfileFilterSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterProfileFilterSpec) UnmarshalBinary(b []byte) error {
	var res V1ClusterProfileFilterSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
