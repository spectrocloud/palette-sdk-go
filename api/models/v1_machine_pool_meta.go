// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1MachinePoolMeta v1 machine pool meta
//
// swagger:model v1MachinePoolMeta
type V1MachinePoolMeta struct {

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// number of healthy machines
	Healthy int32 `json:"healthy"`

	// InfraClusterProfile contains OS/Kernel for this NodePool
	InfraProfileTemplate *V1ClusterProfileTemplateMeta `json:"infraProfileTemplate,omitempty"`

	// whether this pool is for control plane
	IsControlPlane bool `json:"isControlPlane"`

	// labels for this pool, example: control-plane/worker, gpu, windows
	Labels []string `json:"labels"`

	// number of machines under maintenance
	MaintenanceMode int32 `json:"maintenanceMode"`

	// size of the pool, number of machines
	Size int32 `json:"size"`
}

// Validate validates this v1 machine pool meta
func (m *V1MachinePoolMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInfraProfileTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachinePoolMeta) validateInfraProfileTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraProfileTemplate) { // not required
		return nil
	}

	if m.InfraProfileTemplate != nil {
		if err := m.InfraProfileTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infraProfileTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("infraProfileTemplate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 machine pool meta based on the context it is used
func (m *V1MachinePoolMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInfraProfileTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachinePoolMeta) contextValidateInfraProfileTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.InfraProfileTemplate != nil {

		if swag.IsZero(m.InfraProfileTemplate) { // not required
			return nil
		}

		if err := m.InfraProfileTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infraProfileTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("infraProfileTemplate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MachinePoolMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachinePoolMeta) UnmarshalBinary(b []byte) error {
	var res V1MachinePoolMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
