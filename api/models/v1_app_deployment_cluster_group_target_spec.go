// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AppDeploymentClusterGroupTargetSpec Application deployment cluster group target spec
//
// swagger:model v1AppDeploymentClusterGroupTargetSpec
type V1AppDeploymentClusterGroupTargetSpec struct {

	// Application deployment cluster group uid
	// Required: true
	ClusterGroupUID *string `json:"clusterGroupUid"`

	// cluster limits
	ClusterLimits *V1AppDeploymentTargetClusterLimits `json:"clusterLimits,omitempty"`

	// Application deployment virtual cluster name
	// Required: true
	ClusterName *string `json:"clusterName"`
}

// Validate validates this v1 app deployment cluster group target spec
func (m *V1AppDeploymentClusterGroupTargetSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterGroupUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AppDeploymentClusterGroupTargetSpec) validateClusterGroupUID(formats strfmt.Registry) error {

	if err := validate.Required("clusterGroupUid", "body", m.ClusterGroupUID); err != nil {
		return err
	}

	return nil
}

func (m *V1AppDeploymentClusterGroupTargetSpec) validateClusterLimits(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterLimits) { // not required
		return nil
	}

	if m.ClusterLimits != nil {
		if err := m.ClusterLimits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterLimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterLimits")
			}
			return err
		}
	}

	return nil
}

func (m *V1AppDeploymentClusterGroupTargetSpec) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("clusterName", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 app deployment cluster group target spec based on the context it is used
func (m *V1AppDeploymentClusterGroupTargetSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterLimits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AppDeploymentClusterGroupTargetSpec) contextValidateClusterLimits(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterLimits != nil {

		if swag.IsZero(m.ClusterLimits) { // not required
			return nil
		}

		if err := m.ClusterLimits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterLimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterLimits")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AppDeploymentClusterGroupTargetSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AppDeploymentClusterGroupTargetSpec) UnmarshalBinary(b []byte) error {
	var res V1AppDeploymentClusterGroupTargetSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
