// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1MfaPublicKeyCredentialRequestOptions v1 mfa public key credential request options
//
// swagger:model v1MfaPublicKeyCredentialRequestOptions
type V1MfaPublicKeyCredentialRequestOptions struct {

	// allow credentials
	AllowCredentials []*V1MfaCredentialDescriptor `json:"allowCredentials"`

	// challenge
	Challenge URLEncodedBase64 `json:"challenge,omitempty"`

	// extensions
	Extensions V1MfaAuthenticationExtensions `json:"extensions,omitempty"`

	// rp Id
	RpID string `json:"rpId,omitempty"`

	// timeout
	Timeout int64 `json:"timeout,omitempty"`

	// user verification
	UserVerification string `json:"userVerification,omitempty"`
}

// Validate validates this v1 mfa public key credential request options
func (m *V1MfaPublicKeyCredentialRequestOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChallenge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MfaPublicKeyCredentialRequestOptions) validateAllowCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowCredentials); i++ {
		if swag.IsZero(m.AllowCredentials[i]) { // not required
			continue
		}

		if m.AllowCredentials[i] != nil {
			if err := m.AllowCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1MfaPublicKeyCredentialRequestOptions) validateChallenge(formats strfmt.Registry) error {

	if swag.IsZero(m.Challenge) { // not required
		return nil
	}

	if err := m.Challenge.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("challenge")
		}
		return err
	}

	return nil
}

func (m *V1MfaPublicKeyCredentialRequestOptions) validateExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	if err := m.Extensions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("extensions")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MfaPublicKeyCredentialRequestOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MfaPublicKeyCredentialRequestOptions) UnmarshalBinary(b []byte) error {
	var res V1MfaPublicKeyCredentialRequestOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
