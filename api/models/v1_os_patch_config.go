// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1OsPatchConfig v1 os patch config
//
// swagger:model v1OsPatchConfig
type V1OsPatchConfig struct {

	// OnDemandPatchAfter is the desired time for one time on-demand patch
	// Format: date-time
	OnDemandPatchAfter V1Time `json:"onDemandPatchAfter,omitempty"`

	// PatchOnBoot indicates need to do patch when node first boot up, only once
	PatchOnBoot bool `json:"patchOnBoot"`

	// Reboot once the OS patch is applied
	RebootIfRequired bool `json:"rebootIfRequired"`

	// The schedule at which security patches will be applied to OS. Schedule should be in Cron format, see https://en.wikipedia.org/wiki/Cron for more help.
	Schedule string `json:"schedule,omitempty"`
}

// Validate validates this v1 os patch config
func (m *V1OsPatchConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOnDemandPatchAfter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1OsPatchConfig) validateOnDemandPatchAfter(formats strfmt.Registry) error {
	if swag.IsZero(m.OnDemandPatchAfter) { // not required
		return nil
	}

	if err := m.OnDemandPatchAfter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("onDemandPatchAfter")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("onDemandPatchAfter")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1 os patch config based on the context it is used
func (m *V1OsPatchConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOnDemandPatchAfter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1OsPatchConfig) contextValidateOnDemandPatchAfter(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.OnDemandPatchAfter) { // not required
		return nil
	}

	if err := m.OnDemandPatchAfter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("onDemandPatchAfter")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("onDemandPatchAfter")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1OsPatchConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1OsPatchConfig) UnmarshalBinary(b []byte) error {
	var res V1OsPatchConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
