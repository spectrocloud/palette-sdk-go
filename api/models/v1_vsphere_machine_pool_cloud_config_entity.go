// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1VsphereMachinePoolCloudConfigEntity v1 vsphere machine pool cloud config entity
//
// swagger:model v1VsphereMachinePoolCloudConfigEntity
type V1VsphereMachinePoolCloudConfigEntity struct {

	// instance type
	InstanceType *V1VsphereInstanceType `json:"instanceType,omitempty"`

	// Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster
	Placements []*V1VspherePlacementConfigEntity `json:"placements"`
}

// Validate validates this v1 vsphere machine pool cloud config entity
func (m *V1VsphereMachinePoolCloudConfigEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VsphereMachinePoolCloudConfigEntity) validateInstanceType(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceType) { // not required
		return nil
	}

	if m.InstanceType != nil {
		if err := m.InstanceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceType")
			}
			return err
		}
	}

	return nil
}

func (m *V1VsphereMachinePoolCloudConfigEntity) validatePlacements(formats strfmt.Registry) error {
	if swag.IsZero(m.Placements) { // not required
		return nil
	}

	for i := 0; i < len(m.Placements); i++ {
		if swag.IsZero(m.Placements[i]) { // not required
			continue
		}

		if m.Placements[i] != nil {
			if err := m.Placements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("placements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("placements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 vsphere machine pool cloud config entity based on the context it is used
func (m *V1VsphereMachinePoolCloudConfigEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlacements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VsphereMachinePoolCloudConfigEntity) contextValidateInstanceType(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceType != nil {

		if swag.IsZero(m.InstanceType) { // not required
			return nil
		}

		if err := m.InstanceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceType")
			}
			return err
		}
	}

	return nil
}

func (m *V1VsphereMachinePoolCloudConfigEntity) contextValidatePlacements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Placements); i++ {

		if m.Placements[i] != nil {

			if swag.IsZero(m.Placements[i]) { // not required
				return nil
			}

			if err := m.Placements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("placements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("placements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VsphereMachinePoolCloudConfigEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VsphereMachinePoolCloudConfigEntity) UnmarshalBinary(b []byte) error {
	var res V1VsphereMachinePoolCloudConfigEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
