// Code generated by go-swagger; DO NOT EDIT.

package version1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewV1GcpImageURLParams creates a new V1GcpImageURLParams object
// with the default values initialized.
func NewV1GcpImageURLParams() *V1GcpImageURLParams {
	var ()
	return &V1GcpImageURLParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV1GcpImageURLParamsWithTimeout creates a new V1GcpImageURLParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1GcpImageURLParamsWithTimeout(timeout time.Duration) *V1GcpImageURLParams {
	var ()
	return &V1GcpImageURLParams{

		timeout: timeout,
	}
}

// NewV1GcpImageURLParamsWithContext creates a new V1GcpImageURLParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1GcpImageURLParamsWithContext(ctx context.Context) *V1GcpImageURLParams {
	var ()
	return &V1GcpImageURLParams{

		Context: ctx,
	}
}

// NewV1GcpImageURLParamsWithHTTPClient creates a new V1GcpImageURLParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1GcpImageURLParamsWithHTTPClient(client *http.Client) *V1GcpImageURLParams {
	var ()
	return &V1GcpImageURLParams{
		HTTPClient: client,
	}
}

/*
V1GcpImageURLParams contains all the parameters to send to the API endpoint
for the v1 gcp image Url operation typically these are written to a http.Request
*/
type V1GcpImageURLParams struct {

	/*ImageName
	  imageName for which GCP image url is requested

	*/
	ImageName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 gcp image Url params
func (o *V1GcpImageURLParams) WithTimeout(timeout time.Duration) *V1GcpImageURLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 gcp image Url params
func (o *V1GcpImageURLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 gcp image Url params
func (o *V1GcpImageURLParams) WithContext(ctx context.Context) *V1GcpImageURLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 gcp image Url params
func (o *V1GcpImageURLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 gcp image Url params
func (o *V1GcpImageURLParams) WithHTTPClient(client *http.Client) *V1GcpImageURLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 gcp image Url params
func (o *V1GcpImageURLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImageName adds the imageName to the v1 gcp image Url params
func (o *V1GcpImageURLParams) WithImageName(imageName string) *V1GcpImageURLParams {
	o.SetImageName(imageName)
	return o
}

// SetImageName adds the imageName to the v1 gcp image Url params
func (o *V1GcpImageURLParams) SetImageName(imageName string) {
	o.ImageName = imageName
}

// WriteToRequest writes these params to a swagger request
func (o *V1GcpImageURLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param imageName
	if err := r.SetPathParam("imageName", o.ImageName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
