// Code generated by go-swagger; DO NOT EDIT.

package version1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewV1FiltersMetadataParams creates a new V1FiltersMetadataParams object
// with the default values initialized.
func NewV1FiltersMetadataParams() *V1FiltersMetadataParams {
	var ()
	return &V1FiltersMetadataParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV1FiltersMetadataParamsWithTimeout creates a new V1FiltersMetadataParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1FiltersMetadataParamsWithTimeout(timeout time.Duration) *V1FiltersMetadataParams {
	var ()
	return &V1FiltersMetadataParams{

		timeout: timeout,
	}
}

// NewV1FiltersMetadataParamsWithContext creates a new V1FiltersMetadataParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1FiltersMetadataParamsWithContext(ctx context.Context) *V1FiltersMetadataParams {
	var ()
	return &V1FiltersMetadataParams{

		Context: ctx,
	}
}

// NewV1FiltersMetadataParamsWithHTTPClient creates a new V1FiltersMetadataParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1FiltersMetadataParamsWithHTTPClient(client *http.Client) *V1FiltersMetadataParams {
	var ()
	return &V1FiltersMetadataParams{
		HTTPClient: client,
	}
}

/*
V1FiltersMetadataParams contains all the parameters to send to the API endpoint
for the v1 filters metadata operation typically these are written to a http.Request
*/
type V1FiltersMetadataParams struct {

	/*FilterType
	  filterType can be - [tag, meta, resource]

	*/
	FilterType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 filters metadata params
func (o *V1FiltersMetadataParams) WithTimeout(timeout time.Duration) *V1FiltersMetadataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 filters metadata params
func (o *V1FiltersMetadataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 filters metadata params
func (o *V1FiltersMetadataParams) WithContext(ctx context.Context) *V1FiltersMetadataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 filters metadata params
func (o *V1FiltersMetadataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 filters metadata params
func (o *V1FiltersMetadataParams) WithHTTPClient(client *http.Client) *V1FiltersMetadataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 filters metadata params
func (o *V1FiltersMetadataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterType adds the filterType to the v1 filters metadata params
func (o *V1FiltersMetadataParams) WithFilterType(filterType *string) *V1FiltersMetadataParams {
	o.SetFilterType(filterType)
	return o
}

// SetFilterType adds the filterType to the v1 filters metadata params
func (o *V1FiltersMetadataParams) SetFilterType(filterType *string) {
	o.FilterType = filterType
}

// WriteToRequest writes these params to a swagger request
func (o *V1FiltersMetadataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterType != nil {

		// query param filterType
		var qrFilterType string
		if o.FilterType != nil {
			qrFilterType = *o.FilterType
		}
		qFilterType := qrFilterType
		if qFilterType != "" {
			if err := r.SetQueryParam("filterType", qFilterType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
