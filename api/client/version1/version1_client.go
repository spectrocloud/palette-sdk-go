// Code generated by go-swagger; DO NOT EDIT.

package version1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new version1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for version1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	V1AuthOrgs(params *V1AuthOrgsParams) (*V1AuthOrgsOK, error)

	V1AuthSsoProviders(params *V1AuthSsoProvidersParams) (*V1AuthSsoProvidersOK, error)

	V1AuthUserOrgForgot(params *V1AuthUserOrgForgotParams) (*V1AuthUserOrgForgotNoContent, error)

	V1AwsAccountSecretCredentials(params *V1AwsAccountSecretCredentialsParams) (*V1AwsAccountSecretCredentialsOK, error)

	V1AwsAccountStsGet(params *V1AwsAccountStsGetParams) (*V1AwsAccountStsGetOK, error)

	V1AwsAccountValidate(params *V1AwsAccountValidateParams) (*V1AwsAccountValidateNoContent, error)

	V1AwsAmiTypes(params *V1AwsAmiTypesParams) (*V1AwsAmiTypesOK, error)

	V1AwsCloudConfigsEdgeNativeUIDMachinePoolCreate(params *V1AwsCloudConfigsEdgeNativeUIDMachinePoolCreateParams) (*V1AwsCloudConfigsEdgeNativeUIDMachinePoolCreateCreated, error)

	V1AwsClusterNameValidate(params *V1AwsClusterNameValidateParams) (*V1AwsClusterNameValidateNoContent, error)

	V1AwsCopyImageFromDefaultRegion(params *V1AwsCopyImageFromDefaultRegionParams) (*V1AwsCopyImageFromDefaultRegionOK, error)

	V1AwsFindImage(params *V1AwsFindImageParams) (*V1AwsFindImageOK, error)

	V1AwsIamPolicies(params *V1AwsIamPoliciesParams) (*V1AwsIamPoliciesOK, error)

	V1AwsInstanceTypes(params *V1AwsInstanceTypesParams) (*V1AwsInstanceTypesOK, error)

	V1AwsKeyPairValidate(params *V1AwsKeyPairValidateParams) (*V1AwsKeyPairValidateNoContent, error)

	V1AwsKeyPairs(params *V1AwsKeyPairsParams) (*V1AwsKeyPairsOK, error)

	V1AwsKmsKeyGet(params *V1AwsKmsKeyGetParams) (*V1AwsKmsKeyGetOK, error)

	V1AwsKmsKeyValidate(params *V1AwsKmsKeyValidateParams) (*V1AwsKmsKeyValidateNoContent, error)

	V1AwsKmsKeys(params *V1AwsKmsKeysParams) (*V1AwsKmsKeysOK, error)

	V1AwsPolicyArnsValidate(params *V1AwsPolicyArnsValidateParams) (*V1AwsPolicyArnsValidateNoContent, error)

	V1AwsPropertiesValidate(params *V1AwsPropertiesValidateParams) (*V1AwsPropertiesValidateNoContent, error)

	V1AwsRegions(params *V1AwsRegionsParams) (*V1AwsRegionsOK, error)

	V1AwsS3Validate(params *V1AwsS3ValidateParams) (*V1AwsS3ValidateNoContent, error)

	V1AwsSecurityGroups(params *V1AwsSecurityGroupsParams) (*V1AwsSecurityGroupsOK, error)

	V1AwsStorageTypes(params *V1AwsStorageTypesParams) (*V1AwsStorageTypesOK, error)

	V1AwsVolumeSizeGet(params *V1AwsVolumeSizeGetParams) (*V1AwsVolumeSizeGetOK, error)

	V1AwsVolumeTypesGet(params *V1AwsVolumeTypesGetParams) (*V1AwsVolumeTypesGetOK, error)

	V1AwsVpcs(params *V1AwsVpcsParams) (*V1AwsVpcsOK, error)

	V1AwsZones(params *V1AwsZonesParams) (*V1AwsZonesOK, error)

	V1AzureAccountValidate(params *V1AzureAccountValidateParams) (*V1AzureAccountValidateNoContent, error)

	V1AzureClusterNameValidate(params *V1AzureClusterNameValidateParams) (*V1AzureClusterNameValidateNoContent, error)

	V1AzureGroups(params *V1AzureGroupsParams) (*V1AzureGroupsOK, error)

	V1AzureInstanceTypes(params *V1AzureInstanceTypesParams) (*V1AzureInstanceTypesOK, error)

	V1AzurePrivateDNSZones(params *V1AzurePrivateDNSZonesParams) (*V1AzurePrivateDNSZonesOK, error)

	V1AzureRegions(params *V1AzureRegionsParams) (*V1AzureRegionsOK, error)

	V1AzureResourceGroupList(params *V1AzureResourceGroupListParams) (*V1AzureResourceGroupListOK, error)

	V1AzureStorageAccountTypes(params *V1AzureStorageAccountTypesParams) (*V1AzureStorageAccountTypesOK, error)

	V1AzureStorageAccounts(params *V1AzureStorageAccountsParams) (*V1AzureStorageAccountsOK, error)

	V1AzureStorageContainers(params *V1AzureStorageContainersParams) (*V1AzureStorageContainersOK, error)

	V1AzureStorageTypes(params *V1AzureStorageTypesParams) (*V1AzureStorageTypesOK, error)

	V1AzureSubscriptionList(params *V1AzureSubscriptionListParams) (*V1AzureSubscriptionListOK, error)

	V1AzureVhdURL(params *V1AzureVhdURLParams) (*V1AzureVhdURLOK, error)

	V1AzureVirtualNetworkList(params *V1AzureVirtualNetworkListParams) (*V1AzureVirtualNetworkListOK, error)

	V1AzureZones(params *V1AzureZonesParams) (*V1AzureZonesOK, error)

	V1CloudComputeRate(params *V1CloudComputeRateParams) (*V1CloudComputeRateOK, error)

	V1CloudStorageRate(params *V1CloudStorageRateParams) (*V1CloudStorageRateOK, error)

	V1CloudsAwsCloudWatchValidate(params *V1CloudsAwsCloudWatchValidateParams) (*V1CloudsAwsCloudWatchValidateNoContent, error)

	V1ClusterFeatureBackupLocationUIDChange(params *V1ClusterFeatureBackupLocationUIDChangeParams) (*V1ClusterFeatureBackupLocationUIDChangeNoContent, error)

	V1ClusterFeatureBackupLocationUIDGet(params *V1ClusterFeatureBackupLocationUIDGetParams) (*V1ClusterFeatureBackupLocationUIDGetOK, error)

	V1ClusterProfilesUIDExport(params *V1ClusterProfilesUIDExportParams, writer io.Writer) (*V1ClusterProfilesUIDExportOK, error)

	V1ClusterProfilesUIDExportTerraform(params *V1ClusterProfilesUIDExportTerraformParams, writer io.Writer) (*V1ClusterProfilesUIDExportTerraformOK, error)

	V1ClusterProfilesUIDPacksNameGet(params *V1ClusterProfilesUIDPacksNameGetParams) (*V1ClusterProfilesUIDPacksNameGetOK, error)

	V1ClusterProfilesUIDVariablesDelete(params *V1ClusterProfilesUIDVariablesDeleteParams) (*V1ClusterProfilesUIDVariablesDeleteNoContent, error)

	V1ClusterProfilesUIDVariablesGet(params *V1ClusterProfilesUIDVariablesGetParams) (*V1ClusterProfilesUIDVariablesGetOK, error)

	V1ClusterProfilesUIDVariablesPatch(params *V1ClusterProfilesUIDVariablesPatchParams) (*V1ClusterProfilesUIDVariablesPatchNoContent, error)

	V1ClusterProfilesUIDVariablesPut(params *V1ClusterProfilesUIDVariablesPutParams) (*V1ClusterProfilesUIDVariablesPutNoContent, error)

	V1ControlPlaneHealthCheckTimeoutUpdate(params *V1ControlPlaneHealthCheckTimeoutUpdateParams) (*V1ControlPlaneHealthCheckTimeoutUpdateNoContent, error)

	V1CustomCloudTypeBootstrapDelete(params *V1CustomCloudTypeBootstrapDeleteParams) (*V1CustomCloudTypeBootstrapDeleteNoContent, error)

	V1CustomCloudTypeBootstrapGet(params *V1CustomCloudTypeBootstrapGetParams) (*V1CustomCloudTypeBootstrapGetOK, error)

	V1CustomCloudTypeBootstrapUpdate(params *V1CustomCloudTypeBootstrapUpdateParams) (*V1CustomCloudTypeBootstrapUpdateNoContent, error)

	V1CustomCloudTypeCloudAccountKeysGet(params *V1CustomCloudTypeCloudAccountKeysGetParams) (*V1CustomCloudTypeCloudAccountKeysGetOK, error)

	V1CustomCloudTypeCloudAccountKeysUpdate(params *V1CustomCloudTypeCloudAccountKeysUpdateParams) (*V1CustomCloudTypeCloudAccountKeysUpdateNoContent, error)

	V1CustomCloudTypeCloudProviderDelete(params *V1CustomCloudTypeCloudProviderDeleteParams) (*V1CustomCloudTypeCloudProviderDeleteNoContent, error)

	V1CustomCloudTypeCloudProviderGet(params *V1CustomCloudTypeCloudProviderGetParams) (*V1CustomCloudTypeCloudProviderGetOK, error)

	V1CustomCloudTypeCloudProviderUpdate(params *V1CustomCloudTypeCloudProviderUpdateParams) (*V1CustomCloudTypeCloudProviderUpdateNoContent, error)

	V1CustomCloudTypeClusterTemplateDelete(params *V1CustomCloudTypeClusterTemplateDeleteParams) (*V1CustomCloudTypeClusterTemplateDeleteNoContent, error)

	V1CustomCloudTypeClusterTemplateGet(params *V1CustomCloudTypeClusterTemplateGetParams) (*V1CustomCloudTypeClusterTemplateGetOK, error)

	V1CustomCloudTypeClusterTemplateUpdate(params *V1CustomCloudTypeClusterTemplateUpdateParams) (*V1CustomCloudTypeClusterTemplateUpdateNoContent, error)

	V1CustomCloudTypeControlPlaneDelete(params *V1CustomCloudTypeControlPlaneDeleteParams) (*V1CustomCloudTypeControlPlaneDeleteNoContent, error)

	V1CustomCloudTypeControlPlaneGet(params *V1CustomCloudTypeControlPlaneGetParams) (*V1CustomCloudTypeControlPlaneGetOK, error)

	V1CustomCloudTypeControlPlanePoolTemplateDelete(params *V1CustomCloudTypeControlPlanePoolTemplateDeleteParams) (*V1CustomCloudTypeControlPlanePoolTemplateDeleteNoContent, error)

	V1CustomCloudTypeControlPlanePoolTemplateGet(params *V1CustomCloudTypeControlPlanePoolTemplateGetParams) (*V1CustomCloudTypeControlPlanePoolTemplateGetOK, error)

	V1CustomCloudTypeControlPlanePoolTemplateUpdate(params *V1CustomCloudTypeControlPlanePoolTemplateUpdateParams) (*V1CustomCloudTypeControlPlanePoolTemplateUpdateNoContent, error)

	V1CustomCloudTypeControlPlaneUpdate(params *V1CustomCloudTypeControlPlaneUpdateParams) (*V1CustomCloudTypeControlPlaneUpdateNoContent, error)

	V1CustomCloudTypeCoreDelete(params *V1CustomCloudTypeCoreDeleteParams) (*V1CustomCloudTypeCoreDeleteNoContent, error)

	V1CustomCloudTypeCoreGet(params *V1CustomCloudTypeCoreGetParams) (*V1CustomCloudTypeCoreGetOK, error)

	V1CustomCloudTypeCoreUpdate(params *V1CustomCloudTypeCoreUpdateParams) (*V1CustomCloudTypeCoreUpdateNoContent, error)

	V1CustomCloudTypeLogoGet(params *V1CustomCloudTypeLogoGetParams, writer io.Writer) (*V1CustomCloudTypeLogoGetOK, error)

	V1CustomCloudTypeLogoUpdate(params *V1CustomCloudTypeLogoUpdateParams) (*V1CustomCloudTypeLogoUpdateNoContent, error)

	V1CustomCloudTypeMetaGet(params *V1CustomCloudTypeMetaGetParams) (*V1CustomCloudTypeMetaGetOK, error)

	V1CustomCloudTypeMetaUpdate(params *V1CustomCloudTypeMetaUpdateParams) (*V1CustomCloudTypeMetaUpdateNoContent, error)

	V1CustomCloudTypeRegister(params *V1CustomCloudTypeRegisterParams) (*V1CustomCloudTypeRegisterCreated, error)

	V1CustomCloudTypeWorkerPoolTemplateDelete(params *V1CustomCloudTypeWorkerPoolTemplateDeleteParams) (*V1CustomCloudTypeWorkerPoolTemplateDeleteNoContent, error)

	V1CustomCloudTypeWorkerPoolTemplateGet(params *V1CustomCloudTypeWorkerPoolTemplateGetParams) (*V1CustomCloudTypeWorkerPoolTemplateGetOK, error)

	V1CustomCloudTypeWorkerPoolTemplateUpdate(params *V1CustomCloudTypeWorkerPoolTemplateUpdateParams) (*V1CustomCloudTypeWorkerPoolTemplateUpdateNoContent, error)

	V1CustomCloudTypesDelete(params *V1CustomCloudTypesDeleteParams) (*V1CustomCloudTypesDeleteNoContent, error)

	V1CustomCloudTypesGet(params *V1CustomCloudTypesGetParams) (*V1CustomCloudTypesGetOK, error)

	V1DashboardVMEnabledClustersList(params *V1DashboardVMEnabledClustersListParams) (*V1DashboardVMEnabledClustersListOK, error)

	V1DataSinksCloudWatchSink(params *V1DataSinksCloudWatchSinkParams) (*V1DataSinksCloudWatchSinkNoContent, error)

	V1EdgeHostsUIDReset(params *V1EdgeHostsUIDResetParams) (*V1EdgeHostsUIDResetNoContent, error)

	V1EksPropertiesValidate(params *V1EksPropertiesValidateParams) (*V1EksPropertiesValidateNoContent, error)

	V1GcpAccountValidate(params *V1GcpAccountValidateParams) (*V1GcpAccountValidateNoContent, error)

	V1GcpAvailabilityZones(params *V1GcpAvailabilityZonesParams) (*V1GcpAvailabilityZonesOK, error)

	V1GcpAzValidate(params *V1GcpAzValidateParams) (*V1GcpAzValidateNoContent, error)

	V1GcpBucketNameValidate(params *V1GcpBucketNameValidateParams) (*V1GcpBucketNameValidateNoContent, error)

	V1GcpContainerImageValidate(params *V1GcpContainerImageValidateParams) (*V1GcpContainerImageValidateNoContent, error)

	V1GcpImageURL(params *V1GcpImageURLParams) (*V1GcpImageURLOK, error)

	V1GcpInstanceTypes(params *V1GcpInstanceTypesParams) (*V1GcpInstanceTypesOK, error)

	V1GcpNetworks(params *V1GcpNetworksParams) (*V1GcpNetworksOK, error)

	V1GcpProjectValidate(params *V1GcpProjectValidateParams) (*V1GcpProjectValidateNoContent, error)

	V1GcpProjects(params *V1GcpProjectsParams) (*V1GcpProjectsOK, error)

	V1GcpPropertiesValidate(params *V1GcpPropertiesValidateParams) (*V1GcpPropertiesValidateNoContent, error)

	V1GcpRegions(params *V1GcpRegionsParams) (*V1GcpRegionsOK, error)

	V1GcpStorageTypes(params *V1GcpStorageTypesParams) (*V1GcpStorageTypesOK, error)

	V1GcpZones(params *V1GcpZonesParams) (*V1GcpZonesOK, error)

	V1HostClusterConfigUpdate(params *V1HostClusterConfigUpdateParams) (*V1HostClusterConfigUpdateNoContent, error)

	V1InvoiceUIDReportInvoicePdf(params *V1InvoiceUIDReportInvoicePdfParams, writer io.Writer) (*V1InvoiceUIDReportInvoicePdfOK, error)

	V1InvoiceUIDReportPdf(params *V1InvoiceUIDReportPdfParams, writer io.Writer) (*V1InvoiceUIDReportPdfOK, error)

	V1InvoiceUIDReportUsagePdf(params *V1InvoiceUIDReportUsagePdfParams, writer io.Writer) (*V1InvoiceUIDReportUsagePdfOK, error)

	V1MaasAccountValidate(params *V1MaasAccountValidateParams) (*V1MaasAccountValidateNoContent, error)

	V1MaasDomainsGet(params *V1MaasDomainsGetParams) (*V1MaasDomainsGetOK, error)

	V1MaasPoolsGet(params *V1MaasPoolsGetParams) (*V1MaasPoolsGetOK, error)

	V1MaasSubnetsGet(params *V1MaasSubnetsGetParams) (*V1MaasSubnetsGetOK, error)

	V1MaasTagsGet(params *V1MaasTagsGetParams) (*V1MaasTagsGetOK, error)

	V1MaasZonesGet(params *V1MaasZonesGetParams) (*V1MaasZonesGetOK, error)

	V1OidcCallback(params *V1OidcCallbackParams) (*V1OidcCallbackOK, error)

	V1OidcLogout(params *V1OidcLogoutParams) (*V1OidcLogoutNoContent, error)

	V1OpenStackAccountValidate(params *V1OpenStackAccountValidateParams) (*V1OpenStackAccountValidateNoContent, error)

	V1OpenStackAzsGet(params *V1OpenStackAzsGetParams) (*V1OpenStackAzsGetOK, error)

	V1OpenStackFlavorsGet(params *V1OpenStackFlavorsGetParams) (*V1OpenStackFlavorsGetOK, error)

	V1OpenStackKeypairsGet(params *V1OpenStackKeypairsGetParams) (*V1OpenStackKeypairsGetOK, error)

	V1OpenStackNetworksGet(params *V1OpenStackNetworksGetParams) (*V1OpenStackNetworksGetOK, error)

	V1OpenStackProjectsGet(params *V1OpenStackProjectsGetParams) (*V1OpenStackProjectsGetOK, error)

	V1OpenStackRegionsGet(params *V1OpenStackRegionsGetParams) (*V1OpenStackRegionsGetOK, error)

	V1OverlordsMaasManifest(params *V1OverlordsMaasManifestParams) (*V1OverlordsMaasManifestOK, error)

	V1OverlordsMigrate(params *V1OverlordsMigrateParams) (*V1OverlordsMigrateNoContent, error)

	V1OverlordsUIDMaasCloudConfigCreate(params *V1OverlordsUIDMaasCloudConfigCreateParams) (*V1OverlordsUIDMaasCloudConfigCreateCreated, error)

	V1OverlordsUIDMaasCloudConfigUpdate(params *V1OverlordsUIDMaasCloudConfigUpdateParams) (*V1OverlordsUIDMaasCloudConfigUpdateNoContent, error)

	V1PasswordsBlockListDelete(params *V1PasswordsBlockListDeleteParams) (*V1PasswordsBlockListDeleteNoContent, error)

	V1PasswordsBlockListUpdate(params *V1PasswordsBlockListUpdateParams) (*V1PasswordsBlockListUpdateNoContent, error)

	V1RegistriesHelmValidate(params *V1RegistriesHelmValidateParams) (*V1RegistriesHelmValidateNoContent, error)

	V1RegistriesPackValidate(params *V1RegistriesPackValidateParams) (*V1RegistriesPackValidateNoContent, error)

	V1SamlCallback(params *V1SamlCallbackParams) (*V1SamlCallbackOK, error)

	V1SamlLogout(params *V1SamlLogoutParams) (*V1SamlLogoutNoContent, error)

	V1SpectroClustersUIDEdgeReset(params *V1SpectroClustersUIDEdgeResetParams) (*V1SpectroClustersUIDEdgeResetNoContent, error)

	V1SpectroClustersUIDKubeCtlRedirect(params *V1SpectroClustersUIDKubeCtlRedirectParams) (*V1SpectroClustersUIDKubeCtlRedirectOK, error)

	V1SpectroClustersUIDOIDC(params *V1SpectroClustersUIDOIDCParams) (*V1SpectroClustersUIDOIDCOK, error)

	V1SpectroClustersUIDOIDCDashboardURL(params *V1SpectroClustersUIDOIDCDashboardURLParams) (*V1SpectroClustersUIDOIDCDashboardURLOK, error)

	V1SpectroClustersUIDReset(params *V1SpectroClustersUIDResetParams) (*V1SpectroClustersUIDResetNoContent, error)

	V1SsoCallback(params *V1SsoCallbackParams) (*V1SsoCallbackOK, error)

	V1SsoIdps(params *V1SsoIdpsParams) (*V1SsoIdpsOK, error)

	V1SsoLogins(params *V1SsoLoginsParams) (*V1SsoLoginsOK, error)

	V1SystemConfigReverseProxyGet(params *V1SystemConfigReverseProxyGetParams) (*V1SystemConfigReverseProxyGetOK, error)

	V1SystemConfigReverseProxyUpdate(params *V1SystemConfigReverseProxyUpdateParams) (*V1SystemConfigReverseProxyUpdateNoContent, error)

	V1TeamsUIDTenantRolesGet(params *V1TeamsUIDTenantRolesGetParams) (*V1TeamsUIDTenantRolesGetOK, error)

	V1TeamsUIDTenantRolesUpdate(params *V1TeamsUIDTenantRolesUpdateParams) (*V1TeamsUIDTenantRolesUpdateNoContent, error)

	V1TenantDeveloperCreditGet(params *V1TenantDeveloperCreditGetParams) (*V1TenantDeveloperCreditGetOK, error)

	V1TenantDeveloperCreditUpdate(params *V1TenantDeveloperCreditUpdateParams) (*V1TenantDeveloperCreditUpdateNoContent, error)

	V1TenantPrefClusterGroupGet(params *V1TenantPrefClusterGroupGetParams) (*V1TenantPrefClusterGroupGetOK, error)

	V1TenantPrefClusterGroupUpdate(params *V1TenantPrefClusterGroupUpdateParams) (*V1TenantPrefClusterGroupUpdateNoContent, error)

	V1TenantUIDAssetsCertsList(params *V1TenantUIDAssetsCertsListParams) (*V1TenantUIDAssetsCertsListOK, error)

	V1TenantUIDAssetsCertsCreate(params *V1TenantUIDAssetsCertsCreateParams) (*V1TenantUIDAssetsCertsCreateCreated, error)

	V1TenantUIDAssetsCertsUIDDelete(params *V1TenantUIDAssetsCertsUIDDeleteParams) (*V1TenantUIDAssetsCertsUIDDeleteNoContent, error)

	V1TenantUIDAssetsCertsUIDGet(params *V1TenantUIDAssetsCertsUIDGetParams) (*V1TenantUIDAssetsCertsUIDGetOK, error)

	V1TenantUIDAssetsCertsUIDUpdate(params *V1TenantUIDAssetsCertsUIDUpdateParams) (*V1TenantUIDAssetsCertsUIDUpdateNoContent, error)

	V1TenantUIDAssetsDataSinksCreate(params *V1TenantUIDAssetsDataSinksCreateParams) (*V1TenantUIDAssetsDataSinksCreateCreated, error)

	V1TenantUIDAssetsDataSinksDelete(params *V1TenantUIDAssetsDataSinksDeleteParams) (*V1TenantUIDAssetsDataSinksDeleteNoContent, error)

	V1TenantUIDAssetsDataSinksGet(params *V1TenantUIDAssetsDataSinksGetParams) (*V1TenantUIDAssetsDataSinksGetOK, error)

	V1TenantUIDAssetsDataSinksUpdate(params *V1TenantUIDAssetsDataSinksUpdateParams) (*V1TenantUIDAssetsDataSinksUpdateNoContent, error)

	V1TenantUIDDomainsGet(params *V1TenantUIDDomainsGetParams) (*V1TenantUIDDomainsGetOK, error)

	V1TenantUIDDomainsUpdate(params *V1TenantUIDDomainsUpdateParams) (*V1TenantUIDDomainsUpdateNoContent, error)

	V1TenantUIDOidcConfigGet(params *V1TenantUIDOidcConfigGetParams) (*V1TenantUIDOidcConfigGetOK, error)

	V1TenantUIDOidcConfigUpdate(params *V1TenantUIDOidcConfigUpdateParams) (*V1TenantUIDOidcConfigUpdateNoContent, error)

	V1TenantUIDPasswordPolicyGet(params *V1TenantUIDPasswordPolicyGetParams) (*V1TenantUIDPasswordPolicyGetOK, error)

	V1TenantUIDPasswordPolicyUpdate(params *V1TenantUIDPasswordPolicyUpdateParams) (*V1TenantUIDPasswordPolicyUpdateNoContent, error)

	V1TenantUIDSamlConfigSpecGet(params *V1TenantUIDSamlConfigSpecGetParams) (*V1TenantUIDSamlConfigSpecGetOK, error)

	V1TenantUIDSamlConfigUpdate(params *V1TenantUIDSamlConfigUpdateParams) (*V1TenantUIDSamlConfigUpdateNoContent, error)

	V1TenantUIDSsoAuthProvidersGet(params *V1TenantUIDSsoAuthProvidersGetParams) (*V1TenantUIDSsoAuthProvidersGetOK, error)

	V1TenantUIDSsoAuthProvidersUpdate(params *V1TenantUIDSsoAuthProvidersUpdateParams) (*V1TenantUIDSsoAuthProvidersUpdateNoContent, error)

	V1UsersConfigScarGet(params *V1UsersConfigScarGetParams) (*V1UsersConfigScarGetOK, error)

	V1UsersKubectlSessionUID(params *V1UsersKubectlSessionUIDParams) (*V1UsersKubectlSessionUIDOK, error)

	V1UsersPasswordChange(params *V1UsersPasswordChangeParams) (*V1UsersPasswordChangeNoContent, error)

	V1VsphereAccountValidate(params *V1VsphereAccountValidateParams) (*V1VsphereAccountValidateNoContent, error)

	V1VsphereComputeClusterResources(params *V1VsphereComputeClusterResourcesParams) (*V1VsphereComputeClusterResourcesOK, error)

	V1VsphereDatacenters(params *V1VsphereDatacentersParams) (*V1VsphereDatacentersOK, error)

	V1VsphereEnv(params *V1VsphereEnvParams) (*V1VsphereEnvOK, error)

	V1AccountsGeolocationPatch(params *V1AccountsGeolocationPatchParams) (*V1AccountsGeolocationPatchNoContent, error)

	V1APIKeysCreate(params *V1APIKeysCreateParams) (*V1APIKeysCreateCreated, error)

	V1APIKeysList(params *V1APIKeysListParams) (*V1APIKeysListOK, error)

	V1APIKeysUIDActiveState(params *V1APIKeysUIDActiveStateParams) (*V1APIKeysUIDActiveStateNoContent, error)

	V1APIKeysUIDDelete(params *V1APIKeysUIDDeleteParams) (*V1APIKeysUIDDeleteNoContent, error)

	V1APIKeysUIDGet(params *V1APIKeysUIDGetParams) (*V1APIKeysUIDGetOK, error)

	V1APIKeysUIDState(params *V1APIKeysUIDStateParams) (*V1APIKeysUIDStateNoContent, error)

	V1APIKeysUIDUpdate(params *V1APIKeysUIDUpdateParams) (*V1APIKeysUIDUpdateNoContent, error)

	V1AppDeploymentsClusterGroupCreate(params *V1AppDeploymentsClusterGroupCreateParams) (*V1AppDeploymentsClusterGroupCreateCreated, error)

	V1AppDeploymentsProfileTiersManifestsUIDGet(params *V1AppDeploymentsProfileTiersManifestsUIDGetParams) (*V1AppDeploymentsProfileTiersManifestsUIDGetOK, error)

	V1AppDeploymentsProfileTiersManifestsUIDUpdate(params *V1AppDeploymentsProfileTiersManifestsUIDUpdateParams) (*V1AppDeploymentsProfileTiersManifestsUIDUpdateNoContent, error)

	V1AppDeploymentsProfileTiersUIDGet(params *V1AppDeploymentsProfileTiersUIDGetParams) (*V1AppDeploymentsProfileTiersUIDGetOK, error)

	V1AppDeploymentsProfileTiersUIDManifestsGet(params *V1AppDeploymentsProfileTiersUIDManifestsGetParams) (*V1AppDeploymentsProfileTiersUIDManifestsGetOK, error)

	V1AppDeploymentsProfileTiersUIDUpdate(params *V1AppDeploymentsProfileTiersUIDUpdateParams) (*V1AppDeploymentsProfileTiersUIDUpdateNoContent, error)

	V1AppDeploymentsUIDDelete(params *V1AppDeploymentsUIDDeleteParams) (*V1AppDeploymentsUIDDeleteNoContent, error)

	V1AppDeploymentsUIDGet(params *V1AppDeploymentsUIDGetParams) (*V1AppDeploymentsUIDGetOK, error)

	V1AppDeploymentsUIDProfileApply(params *V1AppDeploymentsUIDProfileApplyParams) (*V1AppDeploymentsUIDProfileApplyNoContent, error)

	V1AppDeploymentsUIDProfileGet(params *V1AppDeploymentsUIDProfileGetParams) (*V1AppDeploymentsUIDProfileGetOK, error)

	V1AppDeploymentsUIDProfileUpdate(params *V1AppDeploymentsUIDProfileUpdateParams) (*V1AppDeploymentsUIDProfileUpdateNoContent, error)

	V1AppDeploymentsUIDProfileVersionsGet(params *V1AppDeploymentsUIDProfileVersionsGetParams) (*V1AppDeploymentsUIDProfileVersionsGetOK, error)

	V1AppDeploymentsVirtualClusterCreate(params *V1AppDeploymentsVirtualClusterCreateParams) (*V1AppDeploymentsVirtualClusterCreateCreated, error)

	V1AppProfilesCreate(params *V1AppProfilesCreateParams) (*V1AppProfilesCreateCreated, error)

	V1AppProfilesMacrosList(params *V1AppProfilesMacrosListParams) (*V1AppProfilesMacrosListOK, error)

	V1AppProfilesUIDClone(params *V1AppProfilesUIDCloneParams) (*V1AppProfilesUIDCloneCreated, error)

	V1AppProfilesUIDCloneValidate(params *V1AppProfilesUIDCloneValidateParams) (*V1AppProfilesUIDCloneValidateNoContent, error)

	V1AppProfilesUIDDelete(params *V1AppProfilesUIDDeleteParams) (*V1AppProfilesUIDDeleteNoContent, error)

	V1AppProfilesUIDGet(params *V1AppProfilesUIDGetParams) (*V1AppProfilesUIDGetOK, error)

	V1AppProfilesUIDMetadataUpdate(params *V1AppProfilesUIDMetadataUpdateParams) (*V1AppProfilesUIDMetadataUpdateNoContent, error)

	V1AppProfilesUIDTiersCreate(params *V1AppProfilesUIDTiersCreateParams) (*V1AppProfilesUIDTiersCreateCreated, error)

	V1AppProfilesUIDTiersGet(params *V1AppProfilesUIDTiersGetParams) (*V1AppProfilesUIDTiersGetOK, error)

	V1AppProfilesUIDTiersPatch(params *V1AppProfilesUIDTiersPatchParams) (*V1AppProfilesUIDTiersPatchCreated, error)

	V1AppProfilesUIDTiersUIDDelete(params *V1AppProfilesUIDTiersUIDDeleteParams) (*V1AppProfilesUIDTiersUIDDeleteNoContent, error)

	V1AppProfilesUIDTiersUIDGet(params *V1AppProfilesUIDTiersUIDGetParams) (*V1AppProfilesUIDTiersUIDGetOK, error)

	V1AppProfilesUIDTiersUIDManifestsCreate(params *V1AppProfilesUIDTiersUIDManifestsCreateParams) (*V1AppProfilesUIDTiersUIDManifestsCreateCreated, error)

	V1AppProfilesUIDTiersUIDManifestsGet(params *V1AppProfilesUIDTiersUIDManifestsGetParams) (*V1AppProfilesUIDTiersUIDManifestsGetOK, error)

	V1AppProfilesUIDTiersUIDManifestsUIDDelete(params *V1AppProfilesUIDTiersUIDManifestsUIDDeleteParams) (*V1AppProfilesUIDTiersUIDManifestsUIDDeleteNoContent, error)

	V1AppProfilesUIDTiersUIDManifestsUIDGet(params *V1AppProfilesUIDTiersUIDManifestsUIDGetParams) (*V1AppProfilesUIDTiersUIDManifestsUIDGetOK, error)

	V1AppProfilesUIDTiersUIDManifestsUIDUpdate(params *V1AppProfilesUIDTiersUIDManifestsUIDUpdateParams) (*V1AppProfilesUIDTiersUIDManifestsUIDUpdateNoContent, error)

	V1AppProfilesUIDTiersUIDResolvedValuesGet(params *V1AppProfilesUIDTiersUIDResolvedValuesGetParams) (*V1AppProfilesUIDTiersUIDResolvedValuesGetOK, error)

	V1AppProfilesUIDTiersUIDUpdate(params *V1AppProfilesUIDTiersUIDUpdateParams) (*V1AppProfilesUIDTiersUIDUpdateNoContent, error)

	V1AppProfilesUIDUpdate(params *V1AppProfilesUIDUpdateParams) (*V1AppProfilesUIDUpdateNoContent, error)

	V1AuditsList(params *V1AuditsListParams) (*V1AuditsListOK, error)

	V1AuditsUIDGet(params *V1AuditsUIDGetParams) (*V1AuditsUIDGetOK, error)

	V1AuditsUIDGetSysMsg(params *V1AuditsUIDGetSysMsgParams) (*V1AuditsUIDGetSysMsgOK, error)

	V1AuditsUIDMsgUpdate(params *V1AuditsUIDMsgUpdateParams) (*V1AuditsUIDMsgUpdateNoContent, error)

	V1AuthOrg(params *V1AuthOrgParams) (*V1AuthOrgOK, error)

	V1AuthRefresh(params *V1AuthRefreshParams) (*V1AuthRefreshOK, error)

	V1Authenticate(params *V1AuthenticateParams) (*V1AuthenticateOK, error)

	V1AwsCloudConfigsEdgeNativeMachinePoolDelete(params *V1AwsCloudConfigsEdgeNativeMachinePoolDeleteParams) (*V1AwsCloudConfigsEdgeNativeMachinePoolDeleteNoContent, error)

	V1AwsCloudConfigsEdgeNativeMachinePoolGet(params *V1AwsCloudConfigsEdgeNativeMachinePoolGetParams) (*V1AwsCloudConfigsEdgeNativeMachinePoolGetOK, error)

	V1AwsCloudConfigsEdgeNativeMachinePoolUpdate(params *V1AwsCloudConfigsEdgeNativeMachinePoolUpdateParams) (*V1AwsCloudConfigsEdgeNativeMachinePoolUpdateNoContent, error)

	V1AwsCloudConfigsUIDHybridConfig(params *V1AwsCloudConfigsUIDHybridConfigParams) (*V1AwsCloudConfigsUIDHybridConfigNoContent, error)

	V1AwsCloudCost(params *V1AwsCloudCostParams) (*V1AwsCloudCostOK, error)

	V1BasicOciRegistriesCreate(params *V1BasicOciRegistriesCreateParams) (*V1BasicOciRegistriesCreateCreated, error)

	V1BasicOciRegistriesUIDDelete(params *V1BasicOciRegistriesUIDDeleteParams) (*V1BasicOciRegistriesUIDDeleteNoContent, error)

	V1BasicOciRegistriesUIDGet(params *V1BasicOciRegistriesUIDGetParams) (*V1BasicOciRegistriesUIDGetOK, error)

	V1BasicOciRegistriesUIDSync(params *V1BasicOciRegistriesUIDSyncParams) (*V1BasicOciRegistriesUIDSyncAccepted, error)

	V1BasicOciRegistriesUIDSyncStatus(params *V1BasicOciRegistriesUIDSyncStatusParams) (*V1BasicOciRegistriesUIDSyncStatusOK, error)

	V1BasicOciRegistriesUIDUpdate(params *V1BasicOciRegistriesUIDUpdateParams) (*V1BasicOciRegistriesUIDUpdateNoContent, error)

	V1BasicOciRegistriesValidate(params *V1BasicOciRegistriesValidateParams) (*V1BasicOciRegistriesValidateNoContent, error)

	V1CloudAccountsAwsCreate(params *V1CloudAccountsAwsCreateParams) (*V1CloudAccountsAwsCreateCreated, error)

	V1CloudAccountsAwsDelete(params *V1CloudAccountsAwsDeleteParams) (*V1CloudAccountsAwsDeleteNoContent, error)

	V1CloudAccountsAwsGet(params *V1CloudAccountsAwsGetParams) (*V1CloudAccountsAwsGetOK, error)

	V1CloudAccountsAwsList(params *V1CloudAccountsAwsListParams) (*V1CloudAccountsAwsListOK, error)

	V1CloudAccountsAwsUpdate(params *V1CloudAccountsAwsUpdateParams) (*V1CloudAccountsAwsUpdateNoContent, error)

	V1CloudAccountsAzureCreate(params *V1CloudAccountsAzureCreateParams) (*V1CloudAccountsAzureCreateCreated, error)

	V1CloudAccountsAzureDelete(params *V1CloudAccountsAzureDeleteParams) (*V1CloudAccountsAzureDeleteNoContent, error)

	V1CloudAccountsAzureGet(params *V1CloudAccountsAzureGetParams) (*V1CloudAccountsAzureGetOK, error)

	V1CloudAccountsAzureList(params *V1CloudAccountsAzureListParams) (*V1CloudAccountsAzureListOK, error)

	V1CloudAccountsAzureUpdate(params *V1CloudAccountsAzureUpdateParams) (*V1CloudAccountsAzureUpdateNoContent, error)

	V1CloudAccountsCustomCreate(params *V1CloudAccountsCustomCreateParams) (*V1CloudAccountsCustomCreateCreated, error)

	V1CloudAccountsCustomDelete(params *V1CloudAccountsCustomDeleteParams) (*V1CloudAccountsCustomDeleteNoContent, error)

	V1CloudAccountsCustomGet(params *V1CloudAccountsCustomGetParams) (*V1CloudAccountsCustomGetOK, error)

	V1CloudAccountsCustomList(params *V1CloudAccountsCustomListParams) (*V1CloudAccountsCustomListOK, error)

	V1CloudAccountsCustomUpdate(params *V1CloudAccountsCustomUpdateParams) (*V1CloudAccountsCustomUpdateNoContent, error)

	V1CloudAccountsGcpCreate(params *V1CloudAccountsGcpCreateParams) (*V1CloudAccountsGcpCreateCreated, error)

	V1CloudAccountsGcpDelete(params *V1CloudAccountsGcpDeleteParams) (*V1CloudAccountsGcpDeleteNoContent, error)

	V1CloudAccountsGcpGet(params *V1CloudAccountsGcpGetParams) (*V1CloudAccountsGcpGetOK, error)

	V1CloudAccountsGcpList(params *V1CloudAccountsGcpListParams) (*V1CloudAccountsGcpListOK, error)

	V1CloudAccountsGcpUpdate(params *V1CloudAccountsGcpUpdateParams) (*V1CloudAccountsGcpUpdateNoContent, error)

	V1CloudAccountsListSummary(params *V1CloudAccountsListSummaryParams) (*V1CloudAccountsListSummaryOK, error)

	V1CloudAccountsMaasCreate(params *V1CloudAccountsMaasCreateParams) (*V1CloudAccountsMaasCreateCreated, error)

	V1CloudAccountsMaasDelete(params *V1CloudAccountsMaasDeleteParams) (*V1CloudAccountsMaasDeleteNoContent, error)

	V1CloudAccountsMaasGet(params *V1CloudAccountsMaasGetParams) (*V1CloudAccountsMaasGetOK, error)

	V1CloudAccountsMaasList(params *V1CloudAccountsMaasListParams) (*V1CloudAccountsMaasListOK, error)

	V1CloudAccountsMaasPatch(params *V1CloudAccountsMaasPatchParams) (*V1CloudAccountsMaasPatchNoContent, error)

	V1CloudAccountsMaasUpdate(params *V1CloudAccountsMaasUpdateParams) (*V1CloudAccountsMaasUpdateNoContent, error)

	V1CloudAccountsOpenStackCreate(params *V1CloudAccountsOpenStackCreateParams) (*V1CloudAccountsOpenStackCreateCreated, error)

	V1CloudAccountsOpenStackDelete(params *V1CloudAccountsOpenStackDeleteParams) (*V1CloudAccountsOpenStackDeleteNoContent, error)

	V1CloudAccountsOpenStackGet(params *V1CloudAccountsOpenStackGetParams) (*V1CloudAccountsOpenStackGetOK, error)

	V1CloudAccountsOpenStackList(params *V1CloudAccountsOpenStackListParams) (*V1CloudAccountsOpenStackListOK, error)

	V1CloudAccountsOpenStackUpdate(params *V1CloudAccountsOpenStackUpdateParams) (*V1CloudAccountsOpenStackUpdateNoContent, error)

	V1CloudAccountsVsphereCreate(params *V1CloudAccountsVsphereCreateParams) (*V1CloudAccountsVsphereCreateCreated, error)

	V1CloudAccountsVsphereDelete(params *V1CloudAccountsVsphereDeleteParams) (*V1CloudAccountsVsphereDeleteNoContent, error)

	V1CloudAccountsVsphereGet(params *V1CloudAccountsVsphereGetParams) (*V1CloudAccountsVsphereGetOK, error)

	V1CloudAccountsVsphereList(params *V1CloudAccountsVsphereListParams) (*V1CloudAccountsVsphereListOK, error)

	V1CloudAccountsVsphereUpdate(params *V1CloudAccountsVsphereUpdateParams) (*V1CloudAccountsVsphereUpdateNoContent, error)

	V1CloudConfigsAksGet(params *V1CloudConfigsAksGetParams) (*V1CloudConfigsAksGetOK, error)

	V1CloudConfigsAksMachinePoolCreate(params *V1CloudConfigsAksMachinePoolCreateParams) (*V1CloudConfigsAksMachinePoolCreateCreated, error)

	V1CloudConfigsAksMachinePoolDelete(params *V1CloudConfigsAksMachinePoolDeleteParams) (*V1CloudConfigsAksMachinePoolDeleteNoContent, error)

	V1CloudConfigsAksMachinePoolUpdate(params *V1CloudConfigsAksMachinePoolUpdateParams) (*V1CloudConfigsAksMachinePoolUpdateNoContent, error)

	V1CloudConfigsAksPoolMachinesAdd(params *V1CloudConfigsAksPoolMachinesAddParams) (*V1CloudConfigsAksPoolMachinesAddCreated, error)

	V1CloudConfigsAksPoolMachinesList(params *V1CloudConfigsAksPoolMachinesListParams) (*V1CloudConfigsAksPoolMachinesListOK, error)

	V1CloudConfigsAksPoolMachinesUIDDelete(params *V1CloudConfigsAksPoolMachinesUIDDeleteParams) (*V1CloudConfigsAksPoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsAksPoolMachinesUIDGet(params *V1CloudConfigsAksPoolMachinesUIDGetParams) (*V1CloudConfigsAksPoolMachinesUIDGetOK, error)

	V1CloudConfigsAksPoolMachinesUIDUpdate(params *V1CloudConfigsAksPoolMachinesUIDUpdateParams) (*V1CloudConfigsAksPoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsAksUIDClusterConfig(params *V1CloudConfigsAksUIDClusterConfigParams) (*V1CloudConfigsAksUIDClusterConfigNoContent, error)

	V1CloudConfigsAwsGet(params *V1CloudConfigsAwsGetParams) (*V1CloudConfigsAwsGetOK, error)

	V1CloudConfigsAwsMachinePoolCreate(params *V1CloudConfigsAwsMachinePoolCreateParams) (*V1CloudConfigsAwsMachinePoolCreateCreated, error)

	V1CloudConfigsAwsMachinePoolDelete(params *V1CloudConfigsAwsMachinePoolDeleteParams) (*V1CloudConfigsAwsMachinePoolDeleteNoContent, error)

	V1CloudConfigsAwsMachinePoolUpdate(params *V1CloudConfigsAwsMachinePoolUpdateParams) (*V1CloudConfigsAwsMachinePoolUpdateNoContent, error)

	V1CloudConfigsAwsPoolMachinesAdd(params *V1CloudConfigsAwsPoolMachinesAddParams) (*V1CloudConfigsAwsPoolMachinesAddCreated, error)

	V1CloudConfigsAwsPoolMachinesList(params *V1CloudConfigsAwsPoolMachinesListParams) (*V1CloudConfigsAwsPoolMachinesListOK, error)

	V1CloudConfigsAwsPoolMachinesUIDDelete(params *V1CloudConfigsAwsPoolMachinesUIDDeleteParams) (*V1CloudConfigsAwsPoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsAwsPoolMachinesUIDGet(params *V1CloudConfigsAwsPoolMachinesUIDGetParams) (*V1CloudConfigsAwsPoolMachinesUIDGetOK, error)

	V1CloudConfigsAwsPoolMachinesUIDUpdate(params *V1CloudConfigsAwsPoolMachinesUIDUpdateParams) (*V1CloudConfigsAwsPoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsAwsUIDClusterConfig(params *V1CloudConfigsAwsUIDClusterConfigParams) (*V1CloudConfigsAwsUIDClusterConfigNoContent, error)

	V1CloudConfigsAzureGet(params *V1CloudConfigsAzureGetParams) (*V1CloudConfigsAzureGetOK, error)

	V1CloudConfigsAzureMachinePoolCreate(params *V1CloudConfigsAzureMachinePoolCreateParams) (*V1CloudConfigsAzureMachinePoolCreateCreated, error)

	V1CloudConfigsAzureMachinePoolDelete(params *V1CloudConfigsAzureMachinePoolDeleteParams) (*V1CloudConfigsAzureMachinePoolDeleteNoContent, error)

	V1CloudConfigsAzureMachinePoolUpdate(params *V1CloudConfigsAzureMachinePoolUpdateParams) (*V1CloudConfigsAzureMachinePoolUpdateNoContent, error)

	V1CloudConfigsAzurePoolMachinesAdd(params *V1CloudConfigsAzurePoolMachinesAddParams) (*V1CloudConfigsAzurePoolMachinesAddCreated, error)

	V1CloudConfigsAzurePoolMachinesList(params *V1CloudConfigsAzurePoolMachinesListParams) (*V1CloudConfigsAzurePoolMachinesListOK, error)

	V1CloudConfigsAzurePoolMachinesUIDDelete(params *V1CloudConfigsAzurePoolMachinesUIDDeleteParams) (*V1CloudConfigsAzurePoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsAzurePoolMachinesUIDGet(params *V1CloudConfigsAzurePoolMachinesUIDGetParams) (*V1CloudConfigsAzurePoolMachinesUIDGetOK, error)

	V1CloudConfigsAzurePoolMachinesUIDUpdate(params *V1CloudConfigsAzurePoolMachinesUIDUpdateParams) (*V1CloudConfigsAzurePoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsAzureUIDClusterConfig(params *V1CloudConfigsAzureUIDClusterConfigParams) (*V1CloudConfigsAzureUIDClusterConfigNoContent, error)

	V1CloudConfigsCustomGet(params *V1CloudConfigsCustomGetParams) (*V1CloudConfigsCustomGetOK, error)

	V1CloudConfigsCustomMachinePoolCreate(params *V1CloudConfigsCustomMachinePoolCreateParams) (*V1CloudConfigsCustomMachinePoolCreateCreated, error)

	V1CloudConfigsCustomMachinePoolDelete(params *V1CloudConfigsCustomMachinePoolDeleteParams) (*V1CloudConfigsCustomMachinePoolDeleteNoContent, error)

	V1CloudConfigsCustomMachinePoolUpdate(params *V1CloudConfigsCustomMachinePoolUpdateParams) (*V1CloudConfigsCustomMachinePoolUpdateNoContent, error)

	V1CloudConfigsCustomPoolMachinesAdd(params *V1CloudConfigsCustomPoolMachinesAddParams) (*V1CloudConfigsCustomPoolMachinesAddCreated, error)

	V1CloudConfigsCustomPoolMachinesList(params *V1CloudConfigsCustomPoolMachinesListParams) (*V1CloudConfigsCustomPoolMachinesListOK, error)

	V1CloudConfigsCustomPoolMachinesUIDDelete(params *V1CloudConfigsCustomPoolMachinesUIDDeleteParams) (*V1CloudConfigsCustomPoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsCustomPoolMachinesUIDGet(params *V1CloudConfigsCustomPoolMachinesUIDGetParams) (*V1CloudConfigsCustomPoolMachinesUIDGetOK, error)

	V1CloudConfigsCustomPoolMachinesUIDUpdate(params *V1CloudConfigsCustomPoolMachinesUIDUpdateParams) (*V1CloudConfigsCustomPoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsCustomUIDClusterConfig(params *V1CloudConfigsCustomUIDClusterConfigParams) (*V1CloudConfigsCustomUIDClusterConfigNoContent, error)

	V1CloudConfigsEdgeNativeGet(params *V1CloudConfigsEdgeNativeGetParams) (*V1CloudConfigsEdgeNativeGetOK, error)

	V1CloudConfigsEdgeNativeMachinePoolCreate(params *V1CloudConfigsEdgeNativeMachinePoolCreateParams) (*V1CloudConfigsEdgeNativeMachinePoolCreateCreated, error)

	V1CloudConfigsEdgeNativeMachinePoolDelete(params *V1CloudConfigsEdgeNativeMachinePoolDeleteParams) (*V1CloudConfigsEdgeNativeMachinePoolDeleteNoContent, error)

	V1CloudConfigsEdgeNativeMachinePoolUpdate(params *V1CloudConfigsEdgeNativeMachinePoolUpdateParams) (*V1CloudConfigsEdgeNativeMachinePoolUpdateNoContent, error)

	V1CloudConfigsEdgeNativePoolMachinesAdd(params *V1CloudConfigsEdgeNativePoolMachinesAddParams) (*V1CloudConfigsEdgeNativePoolMachinesAddCreated, error)

	V1CloudConfigsEdgeNativePoolMachinesList(params *V1CloudConfigsEdgeNativePoolMachinesListParams) (*V1CloudConfigsEdgeNativePoolMachinesListOK, error)

	V1CloudConfigsEdgeNativePoolMachinesUIDDelete(params *V1CloudConfigsEdgeNativePoolMachinesUIDDeleteParams) (*V1CloudConfigsEdgeNativePoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsEdgeNativePoolMachinesUIDGet(params *V1CloudConfigsEdgeNativePoolMachinesUIDGetParams) (*V1CloudConfigsEdgeNativePoolMachinesUIDGetOK, error)

	V1CloudConfigsEdgeNativePoolMachinesUIDUpdate(params *V1CloudConfigsEdgeNativePoolMachinesUIDUpdateParams) (*V1CloudConfigsEdgeNativePoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsEdgeNativeUIDClusterConfig(params *V1CloudConfigsEdgeNativeUIDClusterConfigParams) (*V1CloudConfigsEdgeNativeUIDClusterConfigNoContent, error)

	V1CloudConfigsEksGet(params *V1CloudConfigsEksGetParams) (*V1CloudConfigsEksGetOK, error)

	V1CloudConfigsEksMachinePoolCreate(params *V1CloudConfigsEksMachinePoolCreateParams) (*V1CloudConfigsEksMachinePoolCreateCreated, error)

	V1CloudConfigsEksMachinePoolDelete(params *V1CloudConfigsEksMachinePoolDeleteParams) (*V1CloudConfigsEksMachinePoolDeleteNoContent, error)

	V1CloudConfigsEksMachinePoolUpdate(params *V1CloudConfigsEksMachinePoolUpdateParams) (*V1CloudConfigsEksMachinePoolUpdateNoContent, error)

	V1CloudConfigsEksPoolMachinesAdd(params *V1CloudConfigsEksPoolMachinesAddParams) (*V1CloudConfigsEksPoolMachinesAddCreated, error)

	V1CloudConfigsEksPoolMachinesList(params *V1CloudConfigsEksPoolMachinesListParams) (*V1CloudConfigsEksPoolMachinesListOK, error)

	V1CloudConfigsEksPoolMachinesUIDDelete(params *V1CloudConfigsEksPoolMachinesUIDDeleteParams) (*V1CloudConfigsEksPoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsEksPoolMachinesUIDGet(params *V1CloudConfigsEksPoolMachinesUIDGetParams) (*V1CloudConfigsEksPoolMachinesUIDGetOK, error)

	V1CloudConfigsEksPoolMachinesUIDUpdate(params *V1CloudConfigsEksPoolMachinesUIDUpdateParams) (*V1CloudConfigsEksPoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsEksUIDClusterConfig(params *V1CloudConfigsEksUIDClusterConfigParams) (*V1CloudConfigsEksUIDClusterConfigNoContent, error)

	V1CloudConfigsEksUIDFargateProfilesUpdate(params *V1CloudConfigsEksUIDFargateProfilesUpdateParams) (*V1CloudConfigsEksUIDFargateProfilesUpdateNoContent, error)

	V1CloudConfigsGcpGet(params *V1CloudConfigsGcpGetParams) (*V1CloudConfigsGcpGetOK, error)

	V1CloudConfigsGcpMachinePoolCreate(params *V1CloudConfigsGcpMachinePoolCreateParams) (*V1CloudConfigsGcpMachinePoolCreateCreated, error)

	V1CloudConfigsGcpMachinePoolDelete(params *V1CloudConfigsGcpMachinePoolDeleteParams) (*V1CloudConfigsGcpMachinePoolDeleteNoContent, error)

	V1CloudConfigsGcpMachinePoolUpdate(params *V1CloudConfigsGcpMachinePoolUpdateParams) (*V1CloudConfigsGcpMachinePoolUpdateNoContent, error)

	V1CloudConfigsGcpPoolMachinesAdd(params *V1CloudConfigsGcpPoolMachinesAddParams) (*V1CloudConfigsGcpPoolMachinesAddCreated, error)

	V1CloudConfigsGcpPoolMachinesList(params *V1CloudConfigsGcpPoolMachinesListParams) (*V1CloudConfigsGcpPoolMachinesListOK, error)

	V1CloudConfigsGcpPoolMachinesUIDDelete(params *V1CloudConfigsGcpPoolMachinesUIDDeleteParams) (*V1CloudConfigsGcpPoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsGcpPoolMachinesUIDGet(params *V1CloudConfigsGcpPoolMachinesUIDGetParams) (*V1CloudConfigsGcpPoolMachinesUIDGetOK, error)

	V1CloudConfigsGcpPoolMachinesUIDUpdate(params *V1CloudConfigsGcpPoolMachinesUIDUpdateParams) (*V1CloudConfigsGcpPoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsGcpUIDClusterConfig(params *V1CloudConfigsGcpUIDClusterConfigParams) (*V1CloudConfigsGcpUIDClusterConfigNoContent, error)

	V1CloudConfigsGenericGet(params *V1CloudConfigsGenericGetParams) (*V1CloudConfigsGenericGetOK, error)

	V1CloudConfigsGenericMachinePoolCreate(params *V1CloudConfigsGenericMachinePoolCreateParams) (*V1CloudConfigsGenericMachinePoolCreateCreated, error)

	V1CloudConfigsGenericMachinePoolDelete(params *V1CloudConfigsGenericMachinePoolDeleteParams) (*V1CloudConfigsGenericMachinePoolDeleteNoContent, error)

	V1CloudConfigsGenericMachinePoolUpdate(params *V1CloudConfigsGenericMachinePoolUpdateParams) (*V1CloudConfigsGenericMachinePoolUpdateNoContent, error)

	V1CloudConfigsGenericPoolMachinesAdd(params *V1CloudConfigsGenericPoolMachinesAddParams) (*V1CloudConfigsGenericPoolMachinesAddCreated, error)

	V1CloudConfigsGenericPoolMachinesList(params *V1CloudConfigsGenericPoolMachinesListParams) (*V1CloudConfigsGenericPoolMachinesListOK, error)

	V1CloudConfigsGenericPoolMachinesUIDDelete(params *V1CloudConfigsGenericPoolMachinesUIDDeleteParams) (*V1CloudConfigsGenericPoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsGenericPoolMachinesUIDGet(params *V1CloudConfigsGenericPoolMachinesUIDGetParams) (*V1CloudConfigsGenericPoolMachinesUIDGetOK, error)

	V1CloudConfigsGenericPoolMachinesUIDUpdate(params *V1CloudConfigsGenericPoolMachinesUIDUpdateParams) (*V1CloudConfigsGenericPoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsGenericUIDClusterConfig(params *V1CloudConfigsGenericUIDClusterConfigParams) (*V1CloudConfigsGenericUIDClusterConfigNoContent, error)

	V1CloudConfigsGkeGet(params *V1CloudConfigsGkeGetParams) (*V1CloudConfigsGkeGetOK, error)

	V1CloudConfigsGkeMachinePoolCreate(params *V1CloudConfigsGkeMachinePoolCreateParams) (*V1CloudConfigsGkeMachinePoolCreateCreated, error)

	V1CloudConfigsGkeMachinePoolDelete(params *V1CloudConfigsGkeMachinePoolDeleteParams) (*V1CloudConfigsGkeMachinePoolDeleteNoContent, error)

	V1CloudConfigsGkeMachinePoolUpdate(params *V1CloudConfigsGkeMachinePoolUpdateParams) (*V1CloudConfigsGkeMachinePoolUpdateNoContent, error)

	V1CloudConfigsGkePoolMachinesAdd(params *V1CloudConfigsGkePoolMachinesAddParams) (*V1CloudConfigsGkePoolMachinesAddCreated, error)

	V1CloudConfigsGkePoolMachinesList(params *V1CloudConfigsGkePoolMachinesListParams) (*V1CloudConfigsGkePoolMachinesListOK, error)

	V1CloudConfigsGkePoolMachinesUIDDelete(params *V1CloudConfigsGkePoolMachinesUIDDeleteParams) (*V1CloudConfigsGkePoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsGkePoolMachinesUIDGet(params *V1CloudConfigsGkePoolMachinesUIDGetParams) (*V1CloudConfigsGkePoolMachinesUIDGetOK, error)

	V1CloudConfigsGkePoolMachinesUIDUpdate(params *V1CloudConfigsGkePoolMachinesUIDUpdateParams) (*V1CloudConfigsGkePoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsGkeUIDClusterConfig(params *V1CloudConfigsGkeUIDClusterConfigParams) (*V1CloudConfigsGkeUIDClusterConfigNoContent, error)

	V1CloudConfigsMaasGet(params *V1CloudConfigsMaasGetParams) (*V1CloudConfigsMaasGetOK, error)

	V1CloudConfigsMaasMachinePoolCreate(params *V1CloudConfigsMaasMachinePoolCreateParams) (*V1CloudConfigsMaasMachinePoolCreateCreated, error)

	V1CloudConfigsMaasMachinePoolDelete(params *V1CloudConfigsMaasMachinePoolDeleteParams) (*V1CloudConfigsMaasMachinePoolDeleteNoContent, error)

	V1CloudConfigsMaasMachinePoolUpdate(params *V1CloudConfigsMaasMachinePoolUpdateParams) (*V1CloudConfigsMaasMachinePoolUpdateNoContent, error)

	V1CloudConfigsMaasPoolMachinesAdd(params *V1CloudConfigsMaasPoolMachinesAddParams) (*V1CloudConfigsMaasPoolMachinesAddCreated, error)

	V1CloudConfigsMaasPoolMachinesList(params *V1CloudConfigsMaasPoolMachinesListParams) (*V1CloudConfigsMaasPoolMachinesListOK, error)

	V1CloudConfigsMaasPoolMachinesUIDDelete(params *V1CloudConfigsMaasPoolMachinesUIDDeleteParams) (*V1CloudConfigsMaasPoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsMaasPoolMachinesUIDGet(params *V1CloudConfigsMaasPoolMachinesUIDGetParams) (*V1CloudConfigsMaasPoolMachinesUIDGetOK, error)

	V1CloudConfigsMaasPoolMachinesUIDUpdate(params *V1CloudConfigsMaasPoolMachinesUIDUpdateParams) (*V1CloudConfigsMaasPoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsMaasUIDClusterConfig(params *V1CloudConfigsMaasUIDClusterConfigParams) (*V1CloudConfigsMaasUIDClusterConfigNoContent, error)

	V1CloudConfigsMachinePoolsMachineUIDMaintenanceStatusUpdate(params *V1CloudConfigsMachinePoolsMachineUIDMaintenanceStatusUpdateParams) (*V1CloudConfigsMachinePoolsMachineUIDMaintenanceStatusUpdateNoContent, error)

	V1CloudConfigsMachinePoolsMachineUIDMaintenanceUpdate(params *V1CloudConfigsMachinePoolsMachineUIDMaintenanceUpdateParams) (*V1CloudConfigsMachinePoolsMachineUIDMaintenanceUpdateNoContent, error)

	V1CloudConfigsMachinePoolsMachineUidsGet(params *V1CloudConfigsMachinePoolsMachineUidsGetParams) (*V1CloudConfigsMachinePoolsMachineUidsGetOK, error)

	V1CloudConfigsOpenStackGet(params *V1CloudConfigsOpenStackGetParams) (*V1CloudConfigsOpenStackGetOK, error)

	V1CloudConfigsOpenStackMachinePoolCreate(params *V1CloudConfigsOpenStackMachinePoolCreateParams) (*V1CloudConfigsOpenStackMachinePoolCreateCreated, error)

	V1CloudConfigsOpenStackMachinePoolDelete(params *V1CloudConfigsOpenStackMachinePoolDeleteParams) (*V1CloudConfigsOpenStackMachinePoolDeleteNoContent, error)

	V1CloudConfigsOpenStackMachinePoolUpdate(params *V1CloudConfigsOpenStackMachinePoolUpdateParams) (*V1CloudConfigsOpenStackMachinePoolUpdateNoContent, error)

	V1CloudConfigsOpenStackPoolMachinesAdd(params *V1CloudConfigsOpenStackPoolMachinesAddParams) (*V1CloudConfigsOpenStackPoolMachinesAddCreated, error)

	V1CloudConfigsOpenStackPoolMachinesList(params *V1CloudConfigsOpenStackPoolMachinesListParams) (*V1CloudConfigsOpenStackPoolMachinesListOK, error)

	V1CloudConfigsOpenStackPoolMachinesUIDDelete(params *V1CloudConfigsOpenStackPoolMachinesUIDDeleteParams) (*V1CloudConfigsOpenStackPoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsOpenStackPoolMachinesUIDGet(params *V1CloudConfigsOpenStackPoolMachinesUIDGetParams) (*V1CloudConfigsOpenStackPoolMachinesUIDGetOK, error)

	V1CloudConfigsOpenStackPoolMachinesUIDUpdate(params *V1CloudConfigsOpenStackPoolMachinesUIDUpdateParams) (*V1CloudConfigsOpenStackPoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsOpenStackUIDClusterConfig(params *V1CloudConfigsOpenStackUIDClusterConfigParams) (*V1CloudConfigsOpenStackUIDClusterConfigNoContent, error)

	V1CloudConfigsVirtualGet(params *V1CloudConfigsVirtualGetParams) (*V1CloudConfigsVirtualGetOK, error)

	V1CloudConfigsVirtualMachinePoolCreate(params *V1CloudConfigsVirtualMachinePoolCreateParams) (*V1CloudConfigsVirtualMachinePoolCreateCreated, error)

	V1CloudConfigsVirtualMachinePoolDelete(params *V1CloudConfigsVirtualMachinePoolDeleteParams) (*V1CloudConfigsVirtualMachinePoolDeleteNoContent, error)

	V1CloudConfigsVirtualMachinePoolUpdate(params *V1CloudConfigsVirtualMachinePoolUpdateParams) (*V1CloudConfigsVirtualMachinePoolUpdateNoContent, error)

	V1CloudConfigsVirtualPoolMachinesAdd(params *V1CloudConfigsVirtualPoolMachinesAddParams) (*V1CloudConfigsVirtualPoolMachinesAddCreated, error)

	V1CloudConfigsVirtualPoolMachinesList(params *V1CloudConfigsVirtualPoolMachinesListParams) (*V1CloudConfigsVirtualPoolMachinesListOK, error)

	V1CloudConfigsVirtualPoolMachinesUIDDelete(params *V1CloudConfigsVirtualPoolMachinesUIDDeleteParams) (*V1CloudConfigsVirtualPoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsVirtualPoolMachinesUIDGet(params *V1CloudConfigsVirtualPoolMachinesUIDGetParams) (*V1CloudConfigsVirtualPoolMachinesUIDGetOK, error)

	V1CloudConfigsVirtualPoolMachinesUIDUpdate(params *V1CloudConfigsVirtualPoolMachinesUIDUpdateParams) (*V1CloudConfigsVirtualPoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsVirtualUIDClusterConfig(params *V1CloudConfigsVirtualUIDClusterConfigParams) (*V1CloudConfigsVirtualUIDClusterConfigNoContent, error)

	V1CloudConfigsVirtualUIDUpdate(params *V1CloudConfigsVirtualUIDUpdateParams) (*V1CloudConfigsVirtualUIDUpdateNoContent, error)

	V1CloudConfigsVsphereGet(params *V1CloudConfigsVsphereGetParams) (*V1CloudConfigsVsphereGetOK, error)

	V1CloudConfigsVsphereMachinePoolCreate(params *V1CloudConfigsVsphereMachinePoolCreateParams) (*V1CloudConfigsVsphereMachinePoolCreateCreated, error)

	V1CloudConfigsVsphereMachinePoolDelete(params *V1CloudConfigsVsphereMachinePoolDeleteParams) (*V1CloudConfigsVsphereMachinePoolDeleteNoContent, error)

	V1CloudConfigsVsphereMachinePoolUpdate(params *V1CloudConfigsVsphereMachinePoolUpdateParams) (*V1CloudConfigsVsphereMachinePoolUpdateNoContent, error)

	V1CloudConfigsVspherePoolMachinesAdd(params *V1CloudConfigsVspherePoolMachinesAddParams) (*V1CloudConfigsVspherePoolMachinesAddCreated, error)

	V1CloudConfigsVspherePoolMachinesList(params *V1CloudConfigsVspherePoolMachinesListParams) (*V1CloudConfigsVspherePoolMachinesListOK, error)

	V1CloudConfigsVspherePoolMachinesUIDDelete(params *V1CloudConfigsVspherePoolMachinesUIDDeleteParams) (*V1CloudConfigsVspherePoolMachinesUIDDeleteNoContent, error)

	V1CloudConfigsVspherePoolMachinesUIDGet(params *V1CloudConfigsVspherePoolMachinesUIDGetParams) (*V1CloudConfigsVspherePoolMachinesUIDGetOK, error)

	V1CloudConfigsVspherePoolMachinesUIDUpdate(params *V1CloudConfigsVspherePoolMachinesUIDUpdateParams) (*V1CloudConfigsVspherePoolMachinesUIDUpdateNoContent, error)

	V1CloudConfigsVsphereUIDClusterConfig(params *V1CloudConfigsVsphereUIDClusterConfigParams) (*V1CloudConfigsVsphereUIDClusterConfigNoContent, error)

	V1ClusterFeatureBackupCreate(params *V1ClusterFeatureBackupCreateParams) (*V1ClusterFeatureBackupCreateCreated, error)

	V1ClusterFeatureBackupDelete(params *V1ClusterFeatureBackupDeleteParams) (*V1ClusterFeatureBackupDeleteNoContent, error)

	V1ClusterFeatureBackupGet(params *V1ClusterFeatureBackupGetParams) (*V1ClusterFeatureBackupGetOK, error)

	V1ClusterFeatureBackupOnDemandCreate(params *V1ClusterFeatureBackupOnDemandCreateParams) (*V1ClusterFeatureBackupOnDemandCreateCreated, error)

	V1ClusterFeatureBackupScheduleReset(params *V1ClusterFeatureBackupScheduleResetParams) (*V1ClusterFeatureBackupScheduleResetNoContent, error)

	V1ClusterFeatureBackupUpdate(params *V1ClusterFeatureBackupUpdateParams) (*V1ClusterFeatureBackupUpdateNoContent, error)

	V1ClusterFeatureComplianceScanCreate(params *V1ClusterFeatureComplianceScanCreateParams) (*V1ClusterFeatureComplianceScanCreateCreated, error)

	V1ClusterFeatureComplianceScanGet(params *V1ClusterFeatureComplianceScanGetParams) (*V1ClusterFeatureComplianceScanGetOK, error)

	V1ClusterFeatureComplianceScanLogDelete(params *V1ClusterFeatureComplianceScanLogDeleteParams) (*V1ClusterFeatureComplianceScanLogDeleteNoContent, error)

	V1ClusterFeatureComplianceScanLogsGet(params *V1ClusterFeatureComplianceScanLogsGetParams) (*V1ClusterFeatureComplianceScanLogsGetOK, error)

	V1ClusterFeatureComplianceScanOnDemandCreate(params *V1ClusterFeatureComplianceScanOnDemandCreateParams) (*V1ClusterFeatureComplianceScanOnDemandCreateCreated, error)

	V1ClusterFeatureComplianceScanUpdate(params *V1ClusterFeatureComplianceScanUpdateParams) (*V1ClusterFeatureComplianceScanUpdateNoContent, error)

	V1ClusterFeatureDriverLogDownload(params *V1ClusterFeatureDriverLogDownloadParams, writer io.Writer) (*V1ClusterFeatureDriverLogDownloadOK, error)

	V1ClusterFeatureHelmChartsGet(params *V1ClusterFeatureHelmChartsGetParams) (*V1ClusterFeatureHelmChartsGetOK, error)

	V1ClusterFeatureKubeBenchLogGet(params *V1ClusterFeatureKubeBenchLogGetParams) (*V1ClusterFeatureKubeBenchLogGetOK, error)

	V1ClusterFeatureKubeHunterLogGet(params *V1ClusterFeatureKubeHunterLogGetParams) (*V1ClusterFeatureKubeHunterLogGetOK, error)

	V1ClusterFeatureLogFetcherCreate(params *V1ClusterFeatureLogFetcherCreateParams) (*V1ClusterFeatureLogFetcherCreateCreated, error)

	V1ClusterFeatureLogFetcherGet(params *V1ClusterFeatureLogFetcherGetParams) (*V1ClusterFeatureLogFetcherGetOK, error)

	V1ClusterFeatureLogFetcherLogDownload(params *V1ClusterFeatureLogFetcherLogDownloadParams, writer io.Writer) (*V1ClusterFeatureLogFetcherLogDownloadOK, error)

	V1ClusterFeatureLogFetcherLogUpdate(params *V1ClusterFeatureLogFetcherLogUpdateParams) (*V1ClusterFeatureLogFetcherLogUpdateNoContent, error)

	V1ClusterFeatureManifestsGet(params *V1ClusterFeatureManifestsGetParams) (*V1ClusterFeatureManifestsGetOK, error)

	V1ClusterFeatureRestoreGet(params *V1ClusterFeatureRestoreGetParams) (*V1ClusterFeatureRestoreGetOK, error)

	V1ClusterFeatureRestoreOnDemandCreate(params *V1ClusterFeatureRestoreOnDemandCreateParams) (*V1ClusterFeatureRestoreOnDemandCreateCreated, error)

	V1ClusterFeatureScanKubeBenchLogUpdate(params *V1ClusterFeatureScanKubeBenchLogUpdateParams) (*V1ClusterFeatureScanKubeBenchLogUpdateNoContent, error)

	V1ClusterFeatureScanKubeHunterLogUpdate(params *V1ClusterFeatureScanKubeHunterLogUpdateParams) (*V1ClusterFeatureScanKubeHunterLogUpdateNoContent, error)

	V1ClusterFeatureScanSonobuoyLogUpdate(params *V1ClusterFeatureScanSonobuoyLogUpdateParams) (*V1ClusterFeatureScanSonobuoyLogUpdateNoContent, error)

	V1ClusterFeatureScanSyftLogUpdate(params *V1ClusterFeatureScanSyftLogUpdateParams) (*V1ClusterFeatureScanSyftLogUpdateNoContent, error)

	V1ClusterFeatureSonobuoyLogGet(params *V1ClusterFeatureSonobuoyLogGetParams) (*V1ClusterFeatureSonobuoyLogGetOK, error)

	V1ClusterFeatureSyftLogGet(params *V1ClusterFeatureSyftLogGetParams) (*V1ClusterFeatureSyftLogGetOK, error)

	V1ClusterGroupUIDHostClustersSummary(params *V1ClusterGroupUIDHostClustersSummaryParams) (*V1ClusterGroupUIDHostClustersSummaryOK, error)

	V1ClusterGroupUIDVirtualClustersSummary(params *V1ClusterGroupUIDVirtualClustersSummaryParams) (*V1ClusterGroupUIDVirtualClustersSummaryOK, error)

	V1ClusterGroupsCreate(params *V1ClusterGroupsCreateParams) (*V1ClusterGroupsCreateCreated, error)

	V1ClusterGroupsDeveloperCreditUsageGet(params *V1ClusterGroupsDeveloperCreditUsageGetParams) (*V1ClusterGroupsDeveloperCreditUsageGetOK, error)

	V1ClusterGroupsHostClusterMetadata(params *V1ClusterGroupsHostClusterMetadataParams) (*V1ClusterGroupsHostClusterMetadataOK, error)

	V1ClusterGroupsHostClusterSummary(params *V1ClusterGroupsHostClusterSummaryParams) (*V1ClusterGroupsHostClusterSummaryOK, error)

	V1ClusterGroupsUIDDelete(params *V1ClusterGroupsUIDDeleteParams) (*V1ClusterGroupsUIDDeleteNoContent, error)

	V1ClusterGroupsUIDGet(params *V1ClusterGroupsUIDGetParams) (*V1ClusterGroupsUIDGetOK, error)

	V1ClusterGroupsUIDHostClusterUpdate(params *V1ClusterGroupsUIDHostClusterUpdateParams) (*V1ClusterGroupsUIDHostClusterUpdateNoContent, error)

	V1ClusterGroupsUIDMetaUpdate(params *V1ClusterGroupsUIDMetaUpdateParams) (*V1ClusterGroupsUIDMetaUpdateNoContent, error)

	V1ClusterGroupsUIDPacksResolvedValuesGet(params *V1ClusterGroupsUIDPacksResolvedValuesGetParams) (*V1ClusterGroupsUIDPacksResolvedValuesGetOK, error)

	V1ClusterGroupsUIDProfilesGet(params *V1ClusterGroupsUIDProfilesGetParams) (*V1ClusterGroupsUIDProfilesGetOK, error)

	V1ClusterGroupsUIDProfilesUpdate(params *V1ClusterGroupsUIDProfilesUpdateParams) (*V1ClusterGroupsUIDProfilesUpdateNoContent, error)

	V1ClusterGroupsValidateName(params *V1ClusterGroupsValidateNameParams) (*V1ClusterGroupsValidateNameNoContent, error)

	V1ClusterNamespacesGet(params *V1ClusterNamespacesGetParams) (*V1ClusterNamespacesGetOK, error)

	V1ClusterProfilesBulkDelete(params *V1ClusterProfilesBulkDeleteParams) (*V1ClusterProfilesBulkDeleteOK, error)

	V1ClusterProfilesCreate(params *V1ClusterProfilesCreateParams) (*V1ClusterProfilesCreateCreated, error)

	V1ClusterProfilesDelete(params *V1ClusterProfilesDeleteParams) (*V1ClusterProfilesDeleteNoContent, error)

	V1ClusterProfilesFilterSummary(params *V1ClusterProfilesFilterSummaryParams) (*V1ClusterProfilesFilterSummaryOK, error)

	V1ClusterProfilesGet(params *V1ClusterProfilesGetParams) (*V1ClusterProfilesGetOK, error)

	V1ClusterProfilesImport(params *V1ClusterProfilesImportParams) (*V1ClusterProfilesImportCreated, error)

	V1ClusterProfilesImportFile(params *V1ClusterProfilesImportFileParams) (*V1ClusterProfilesImportFileCreated, error)

	V1ClusterProfilesImportValidate(params *V1ClusterProfilesImportValidateParams) (*V1ClusterProfilesImportValidateOK, error)

	V1ClusterProfilesMetadata(params *V1ClusterProfilesMetadataParams) (*V1ClusterProfilesMetadataOK, error)

	V1ClusterProfilesPacksRefUpdate(params *V1ClusterProfilesPacksRefUpdateParams) (*V1ClusterProfilesPacksRefUpdateNoContent, error)

	V1ClusterProfilesPublish(params *V1ClusterProfilesPublishParams) (*V1ClusterProfilesPublishNoContent, error)

	V1ClusterProfilesUIDClone(params *V1ClusterProfilesUIDCloneParams) (*V1ClusterProfilesUIDCloneCreated, error)

	V1ClusterProfilesUIDCloneValidate(params *V1ClusterProfilesUIDCloneValidateParams) (*V1ClusterProfilesUIDCloneValidateNoContent, error)

	V1ClusterProfilesUIDMetadataUpdate(params *V1ClusterProfilesUIDMetadataUpdateParams) (*V1ClusterProfilesUIDMetadataUpdateNoContent, error)

	V1ClusterProfilesUIDPacksAdd(params *V1ClusterProfilesUIDPacksAddParams) (*V1ClusterProfilesUIDPacksAddCreated, error)

	V1ClusterProfilesUIDPacksConfigGet(params *V1ClusterProfilesUIDPacksConfigGetParams) (*V1ClusterProfilesUIDPacksConfigGetOK, error)

	V1ClusterProfilesUIDPacksGet(params *V1ClusterProfilesUIDPacksGetParams) (*V1ClusterProfilesUIDPacksGetOK, error)

	V1ClusterProfilesUIDPacksManifestsGet(params *V1ClusterProfilesUIDPacksManifestsGetParams) (*V1ClusterProfilesUIDPacksManifestsGetOK, error)

	V1ClusterProfilesUIDPacksNameDelete(params *V1ClusterProfilesUIDPacksNameDeleteParams) (*V1ClusterProfilesUIDPacksNameDeleteNoContent, error)

	V1ClusterProfilesUIDPacksNameManifestsAdd(params *V1ClusterProfilesUIDPacksNameManifestsAddParams) (*V1ClusterProfilesUIDPacksNameManifestsAddCreated, error)

	V1ClusterProfilesUIDPacksNameManifestsUIDDelete(params *V1ClusterProfilesUIDPacksNameManifestsUIDDeleteParams) (*V1ClusterProfilesUIDPacksNameManifestsUIDDeleteNoContent, error)

	V1ClusterProfilesUIDPacksNameManifestsUIDGet(params *V1ClusterProfilesUIDPacksNameManifestsUIDGetParams) (*V1ClusterProfilesUIDPacksNameManifestsUIDGetOK, error)

	V1ClusterProfilesUIDPacksNameManifestsUIDUpdate(params *V1ClusterProfilesUIDPacksNameManifestsUIDUpdateParams) (*V1ClusterProfilesUIDPacksNameManifestsUIDUpdateNoContent, error)

	V1ClusterProfilesUIDPacksNameUpdate(params *V1ClusterProfilesUIDPacksNameUpdateParams) (*V1ClusterProfilesUIDPacksNameUpdateNoContent, error)

	V1ClusterProfilesUIDPacksResolvedValuesGet(params *V1ClusterProfilesUIDPacksResolvedValuesGetParams) (*V1ClusterProfilesUIDPacksResolvedValuesGetOK, error)

	V1ClusterProfilesUIDPacksUIDManifests(params *V1ClusterProfilesUIDPacksUIDManifestsParams) (*V1ClusterProfilesUIDPacksUIDManifestsOK, error)

	V1ClusterProfilesUIDSpcDownload(params *V1ClusterProfilesUIDSpcDownloadParams, writer io.Writer) (*V1ClusterProfilesUIDSpcDownloadOK, error)

	V1ClusterProfilesUIDSummary(params *V1ClusterProfilesUIDSummaryParams) (*V1ClusterProfilesUIDSummaryOK, error)

	V1ClusterProfilesUIDValidatePacks(params *V1ClusterProfilesUIDValidatePacksParams) (*V1ClusterProfilesUIDValidatePacksOK, error)

	V1ClusterProfilesUpdate(params *V1ClusterProfilesUpdateParams) (*V1ClusterProfilesUpdateNoContent, error)

	V1ClusterProfilesValidateNameVersion(params *V1ClusterProfilesValidateNameVersionParams) (*V1ClusterProfilesValidateNameVersionNoContent, error)

	V1ClusterProfilesValidatePacks(params *V1ClusterProfilesValidatePacksParams) (*V1ClusterProfilesValidatePacksOK, error)

	V1ClusterVMSnapshotsList(params *V1ClusterVMSnapshotsListParams) (*V1ClusterVMSnapshotsListOK, error)

	V1DashboardAppDeployments(params *V1DashboardAppDeploymentsParams) (*V1DashboardAppDeploymentsOK, error)

	V1DashboardAppProfiles(params *V1DashboardAppProfilesParams) (*V1DashboardAppProfilesOK, error)

	V1DashboardAppProfilesMetadata(params *V1DashboardAppProfilesMetadataParams) (*V1DashboardAppProfilesMetadataOK, error)

	V1DashboardCloudAccountsMetadata(params *V1DashboardCloudAccountsMetadataParams) (*V1DashboardCloudAccountsMetadataOK, error)

	V1DashboardClustersSearchSummaryExport(params *V1DashboardClustersSearchSummaryExportParams, writer io.Writer) (*V1DashboardClustersSearchSummaryExportOK, error)

	V1DashboardClustersSearchSummaryExportGet(params *V1DashboardClustersSearchSummaryExportGetParams, writer io.Writer) (*V1DashboardClustersSearchSummaryExportGetOK, error)

	V1DashboardEdgehostsSearch(params *V1DashboardEdgehostsSearchParams) (*V1DashboardEdgehostsSearchOK, error)

	V1DashboardEdgehostsSearchSchemaGet(params *V1DashboardEdgehostsSearchSchemaGetParams) (*V1DashboardEdgehostsSearchSchemaGetOK, error)

	V1DashboardPcgSearchSchemaGet(params *V1DashboardPcgSearchSchemaGetParams) (*V1DashboardPcgSearchSchemaGetOK, error)

	V1DashboardPcgsSearchSummary(params *V1DashboardPcgsSearchSummaryParams) (*V1DashboardPcgsSearchSummaryOK, error)

	V1DashboardSpectroClustersCostSummary(params *V1DashboardSpectroClustersCostSummaryParams) (*V1DashboardSpectroClustersCostSummaryOK, error)

	V1DashboardSpectroClustersRepaveList(params *V1DashboardSpectroClustersRepaveListParams) (*V1DashboardSpectroClustersRepaveListOK, error)

	V1DashboardSpectroClustersSearchInput(params *V1DashboardSpectroClustersSearchInputParams) (*V1DashboardSpectroClustersSearchInputOK, error)

	V1DashboardSpectroClustersUIDWorkloads(params *V1DashboardSpectroClustersUIDWorkloadsParams) (*V1DashboardSpectroClustersUIDWorkloadsOK, error)

	V1DashboardSpectroClustersUIDWorkloadsClusterRoleBinding(params *V1DashboardSpectroClustersUIDWorkloadsClusterRoleBindingParams) (*V1DashboardSpectroClustersUIDWorkloadsClusterRoleBindingOK, error)

	V1DashboardSpectroClustersUIDWorkloadsCronJob(params *V1DashboardSpectroClustersUIDWorkloadsCronJobParams) (*V1DashboardSpectroClustersUIDWorkloadsCronJobOK, error)

	V1DashboardSpectroClustersUIDWorkloadsDaemonSet(params *V1DashboardSpectroClustersUIDWorkloadsDaemonSetParams) (*V1DashboardSpectroClustersUIDWorkloadsDaemonSetOK, error)

	V1DashboardSpectroClustersUIDWorkloadsDeployment(params *V1DashboardSpectroClustersUIDWorkloadsDeploymentParams) (*V1DashboardSpectroClustersUIDWorkloadsDeploymentOK, error)

	V1DashboardSpectroClustersUIDWorkloadsJob(params *V1DashboardSpectroClustersUIDWorkloadsJobParams) (*V1DashboardSpectroClustersUIDWorkloadsJobOK, error)

	V1DashboardSpectroClustersUIDWorkloadsNamespace(params *V1DashboardSpectroClustersUIDWorkloadsNamespaceParams) (*V1DashboardSpectroClustersUIDWorkloadsNamespaceOK, error)

	V1DashboardSpectroClustersUIDWorkloadsPod(params *V1DashboardSpectroClustersUIDWorkloadsPodParams) (*V1DashboardSpectroClustersUIDWorkloadsPodOK, error)

	V1DashboardSpectroClustersUIDWorkloadsRoleBinding(params *V1DashboardSpectroClustersUIDWorkloadsRoleBindingParams) (*V1DashboardSpectroClustersUIDWorkloadsRoleBindingOK, error)

	V1DashboardSpectroClustersUIDWorkloadsStatefulSet(params *V1DashboardSpectroClustersUIDWorkloadsStatefulSetParams) (*V1DashboardSpectroClustersUIDWorkloadsStatefulSetOK, error)

	V1DashboardWorkspacesList(params *V1DashboardWorkspacesListParams) (*V1DashboardWorkspacesListOK, error)

	V1DashboardWorkspacesUIDSpectroClustersWorkloadsClusterRoleBinding(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsClusterRoleBindingParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsClusterRoleBindingOK, error)

	V1DashboardWorkspacesUIDSpectroClustersWorkloadsCronJob(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsCronJobParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsCronJobOK, error)

	V1DashboardWorkspacesUIDSpectroClustersWorkloadsDaemonSet(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsDaemonSetParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsDaemonSetOK, error)

	V1DashboardWorkspacesUIDSpectroClustersWorkloadsDeployment(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsDeploymentParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsDeploymentOK, error)

	V1DashboardWorkspacesUIDSpectroClustersWorkloadsJob(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsJobParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsJobOK, error)

	V1DashboardWorkspacesUIDSpectroClustersWorkloadsNamespace(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsNamespaceParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsNamespaceOK, error)

	V1DashboardWorkspacesUIDSpectroClustersWorkloadsPod(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsPodParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsPodOK, error)

	V1DashboardWorkspacesUIDSpectroClustersWorkloadsRoleBinding(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsRoleBindingParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsRoleBindingOK, error)

	V1DashboardWorkspacesUIDSpectroClustersWorkloadsStatefulSet(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsStatefulSetParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsStatefulSetOK, error)

	V1EcrRegistriesCreate(params *V1EcrRegistriesCreateParams) (*V1EcrRegistriesCreateCreated, error)

	V1EcrRegistriesUIDDelete(params *V1EcrRegistriesUIDDeleteParams) (*V1EcrRegistriesUIDDeleteNoContent, error)

	V1EcrRegistriesUIDGet(params *V1EcrRegistriesUIDGetParams) (*V1EcrRegistriesUIDGetOK, error)

	V1EcrRegistriesUIDSync(params *V1EcrRegistriesUIDSyncParams) (*V1EcrRegistriesUIDSyncAccepted, error)

	V1EcrRegistriesUIDSyncStatus(params *V1EcrRegistriesUIDSyncStatusParams) (*V1EcrRegistriesUIDSyncStatusOK, error)

	V1EcrRegistriesUIDUpdate(params *V1EcrRegistriesUIDUpdateParams) (*V1EcrRegistriesUIDUpdateNoContent, error)

	V1EcrRegistriesValidate(params *V1EcrRegistriesValidateParams) (*V1EcrRegistriesValidateNoContent, error)

	V1EdgeHostDeviceHostCheckSumUpdate(params *V1EdgeHostDeviceHostCheckSumUpdateParams) (*V1EdgeHostDeviceHostCheckSumUpdateNoContent, error)

	V1EdgeHostDeviceHostPairingKeyUpdate(params *V1EdgeHostDeviceHostPairingKeyUpdateParams) (*V1EdgeHostDeviceHostPairingKeyUpdateNoContent, error)

	V1EdgeHostDevicesCreate(params *V1EdgeHostDevicesCreateParams) (*V1EdgeHostDevicesCreateCreated, error)

	V1EdgeHostDevicesHealthUpdate(params *V1EdgeHostDevicesHealthUpdateParams) (*V1EdgeHostDevicesHealthUpdateNoContent, error)

	V1EdgeHostDevicesRegister(params *V1EdgeHostDevicesRegisterParams) (*V1EdgeHostDevicesRegisterOK, error)

	V1EdgeHostDevicesUIDClusterAssociate(params *V1EdgeHostDevicesUIDClusterAssociateParams) (*V1EdgeHostDevicesUIDClusterAssociateNoContent, error)

	V1EdgeHostDevicesUIDClusterDeassociate(params *V1EdgeHostDevicesUIDClusterDeassociateParams) (*V1EdgeHostDevicesUIDClusterDeassociateNoContent, error)

	V1EdgeHostDevicesUIDConfigGet(params *V1EdgeHostDevicesUIDConfigGetParams) (*V1EdgeHostDevicesUIDConfigGetOK, error)

	V1EdgeHostDevicesUIDDelete(params *V1EdgeHostDevicesUIDDeleteParams) (*V1EdgeHostDevicesUIDDeleteNoContent, error)

	V1EdgeHostDevicesUIDGet(params *V1EdgeHostDevicesUIDGetParams) (*V1EdgeHostDevicesUIDGetOK, error)

	V1EdgeHostDevicesUIDMetaUpdate(params *V1EdgeHostDevicesUIDMetaUpdateParams) (*V1EdgeHostDevicesUIDMetaUpdateNoContent, error)

	V1EdgeHostDevicesUIDPackManifestsUIDGet(params *V1EdgeHostDevicesUIDPackManifestsUIDGetParams) (*V1EdgeHostDevicesUIDPackManifestsUIDGetOK, error)

	V1EdgeHostDevicesUIDPacksStatusPatch(params *V1EdgeHostDevicesUIDPacksStatusPatchParams) (*V1EdgeHostDevicesUIDPacksStatusPatchNoContent, error)

	V1EdgeHostDevicesUIDProfilesGet(params *V1EdgeHostDevicesUIDProfilesGetParams) (*V1EdgeHostDevicesUIDProfilesGetOK, error)

	V1EdgeHostDevicesUIDProfilesUpdate(params *V1EdgeHostDevicesUIDProfilesUpdateParams) (*V1EdgeHostDevicesUIDProfilesUpdateNoContent, error)

	V1EdgeHostDevicesUIDSpcDownload(params *V1EdgeHostDevicesUIDSpcDownloadParams, writer io.Writer) (*V1EdgeHostDevicesUIDSpcDownloadOK, error)

	V1EdgeHostDevicesUIDTunnelConfigUpdate(params *V1EdgeHostDevicesUIDTunnelConfigUpdateParams) (*V1EdgeHostDevicesUIDTunnelConfigUpdateNoContent, error)

	V1EdgeHostDevicesUIDTunnelStatusUpdate(params *V1EdgeHostDevicesUIDTunnelStatusUpdateParams) (*V1EdgeHostDevicesUIDTunnelStatusUpdateNoContent, error)

	V1EdgeHostDevicesUIDUpdate(params *V1EdgeHostDevicesUIDUpdateParams) (*V1EdgeHostDevicesUIDUpdateNoContent, error)

	V1EdgeHostDevicesUIDVspherePropertiesUpdate(params *V1EdgeHostDevicesUIDVspherePropertiesUpdateParams) (*V1EdgeHostDevicesUIDVspherePropertiesUpdateNoContent, error)

	V1EdgeHostsMetadata(params *V1EdgeHostsMetadataParams) (*V1EdgeHostsMetadataOK, error)

	V1EdgeHostsMetadataQuickFilterGet(params *V1EdgeHostsMetadataQuickFilterGetParams) (*V1EdgeHostsMetadataQuickFilterGetOK, error)

	V1EdgeHostsTagsGet(params *V1EdgeHostsTagsGetParams) (*V1EdgeHostsTagsGetOK, error)

	V1EdgeNativeClustersHostsList(params *V1EdgeNativeClustersHostsListParams) (*V1EdgeNativeClustersHostsListOK, error)

	V1EdgeTokensCreate(params *V1EdgeTokensCreateParams) (*V1EdgeTokensCreateCreated, error)

	V1EdgeTokensList(params *V1EdgeTokensListParams) (*V1EdgeTokensListOK, error)

	V1EdgeTokensUIDDelete(params *V1EdgeTokensUIDDeleteParams) (*V1EdgeTokensUIDDeleteNoContent, error)

	V1EdgeTokensUIDGet(params *V1EdgeTokensUIDGetParams) (*V1EdgeTokensUIDGetOK, error)

	V1EdgeTokensUIDState(params *V1EdgeTokensUIDStateParams) (*V1EdgeTokensUIDStateNoContent, error)

	V1EdgeTokensUIDUpdate(params *V1EdgeTokensUIDUpdateParams) (*V1EdgeTokensUIDUpdateNoContent, error)

	V1EventsComponentsCreate(params *V1EventsComponentsCreateParams) (*V1EventsComponentsCreateCreated, error)

	V1EventsComponentsCreateBulk(params *V1EventsComponentsCreateBulkParams) (*V1EventsComponentsCreateBulkCreated, error)

	V1EventsComponentsList(params *V1EventsComponentsListParams) (*V1EventsComponentsListOK, error)

	V1EventsComponentsObjTypeUIDDelete(params *V1EventsComponentsObjTypeUIDDeleteParams) (*V1EventsComponentsObjTypeUIDDeleteNoContent, error)

	V1EventsComponentsObjTypeUIDList(params *V1EventsComponentsObjTypeUIDListParams) (*V1EventsComponentsObjTypeUIDListOK, error)

	V1FeaturesList(params *V1FeaturesListParams) (*V1FeaturesListOK, error)

	V1FeaturesUpdate(params *V1FeaturesUpdateParams) (*V1FeaturesUpdateNoContent, error)

	V1FiltersList(params *V1FiltersListParams) (*V1FiltersListOK, error)

	V1FiltersMetadata(params *V1FiltersMetadataParams) (*V1FiltersMetadataOK, error)

	V1InvoicesUIDGet(params *V1InvoicesUIDGetParams) (*V1InvoicesUIDGetOK, error)

	V1MaasAccountsUIDAzs(params *V1MaasAccountsUIDAzsParams) (*V1MaasAccountsUIDAzsOK, error)

	V1MaasAccountsUIDDomains(params *V1MaasAccountsUIDDomainsParams) (*V1MaasAccountsUIDDomainsOK, error)

	V1MaasAccountsUIDPools(params *V1MaasAccountsUIDPoolsParams) (*V1MaasAccountsUIDPoolsOK, error)

	V1MaasAccountsUIDSubnets(params *V1MaasAccountsUIDSubnetsParams) (*V1MaasAccountsUIDSubnetsOK, error)

	V1MaasAccountsUIDTags(params *V1MaasAccountsUIDTagsParams) (*V1MaasAccountsUIDTagsOK, error)

	V1MacrosList(params *V1MacrosListParams) (*V1MacrosListOK, error)

	V1MetricsList(params *V1MetricsListParams) (*V1MetricsListOK, error)

	V1MetricsUIDDelete(params *V1MetricsUIDDeleteParams) (*V1MetricsUIDDeleteNoContent, error)

	V1MetricsUIDList(params *V1MetricsUIDListParams) (*V1MetricsUIDListOK, error)

	V1NotificationsEventCreate(params *V1NotificationsEventCreateParams) (*V1NotificationsEventCreateCreated, error)

	V1NotificationsList(params *V1NotificationsListParams) (*V1NotificationsListOK, error)

	V1NotificationsObjTypeUIDList(params *V1NotificationsObjTypeUIDListParams) (*V1NotificationsObjTypeUIDListOK, error)

	V1NotificationsUIDAck(params *V1NotificationsUIDAckParams) (*V1NotificationsUIDAckNoContent, error)

	V1NotificationsUIDDone(params *V1NotificationsUIDDoneParams) (*V1NotificationsUIDDoneNoContent, error)

	V1OciImageRegistryGet(params *V1OciImageRegistryGetParams) (*V1OciImageRegistryGetOK, error)

	V1OciRegistriesGet(params *V1OciRegistriesGetParams) (*V1OciRegistriesGetOK, error)

	V1OciRegistriesSummary(params *V1OciRegistriesSummaryParams) (*V1OciRegistriesSummaryOK, error)

	V1OpenstackAccountsUIDAzs(params *V1OpenstackAccountsUIDAzsParams) (*V1OpenstackAccountsUIDAzsOK, error)

	V1OpenstackAccountsUIDFlavors(params *V1OpenstackAccountsUIDFlavorsParams) (*V1OpenstackAccountsUIDFlavorsOK, error)

	V1OpenstackAccountsUIDKeypairs(params *V1OpenstackAccountsUIDKeypairsParams) (*V1OpenstackAccountsUIDKeypairsOK, error)

	V1OpenstackAccountsUIDNetworks(params *V1OpenstackAccountsUIDNetworksParams) (*V1OpenstackAccountsUIDNetworksOK, error)

	V1OpenstackAccountsUIDProjects(params *V1OpenstackAccountsUIDProjectsParams) (*V1OpenstackAccountsUIDProjectsOK, error)

	V1OpenstackAccountsUIDRegions(params *V1OpenstackAccountsUIDRegionsParams) (*V1OpenstackAccountsUIDRegionsOK, error)

	V1OverlordsList(params *V1OverlordsListParams) (*V1OverlordsListOK, error)

	V1OverlordsOpenStackManifest(params *V1OverlordsOpenStackManifestParams) (*V1OverlordsOpenStackManifestOK, error)

	V1OverlordsPairingCode(params *V1OverlordsPairingCodeParams) (*V1OverlordsPairingCodeOK, error)

	V1OverlordsUIDDelete(params *V1OverlordsUIDDeleteParams) (*V1OverlordsUIDDeleteOK, error)

	V1OverlordsUIDGet(params *V1OverlordsUIDGetParams) (*V1OverlordsUIDGetOK, error)

	V1OverlordsUIDMaasAccountCreate(params *V1OverlordsUIDMaasAccountCreateParams) (*V1OverlordsUIDMaasAccountCreateCreated, error)

	V1OverlordsUIDMaasAccountUpdate(params *V1OverlordsUIDMaasAccountUpdateParams) (*V1OverlordsUIDMaasAccountUpdateNoContent, error)

	V1OverlordsUIDMaasAccountValidate(params *V1OverlordsUIDMaasAccountValidateParams) (*V1OverlordsUIDMaasAccountValidateNoContent, error)

	V1OverlordsUIDMaasClusterProfile(params *V1OverlordsUIDMaasClusterProfileParams) (*V1OverlordsUIDMaasClusterProfileOK, error)

	V1OverlordsUIDMaasPoolCreate(params *V1OverlordsUIDMaasPoolCreateParams) (*V1OverlordsUIDMaasPoolCreateCreated, error)

	V1OverlordsUIDMaasPoolDelete(params *V1OverlordsUIDMaasPoolDeleteParams) (*V1OverlordsUIDMaasPoolDeleteNoContent, error)

	V1OverlordsUIDMaasPoolUpdate(params *V1OverlordsUIDMaasPoolUpdateParams) (*V1OverlordsUIDMaasPoolUpdateNoContent, error)

	V1OverlordsUIDMaasPoolsList(params *V1OverlordsUIDMaasPoolsListParams) (*V1OverlordsUIDMaasPoolsListOK, error)

	V1OverlordsUIDMetadataUpdate(params *V1OverlordsUIDMetadataUpdateParams) (*V1OverlordsUIDMetadataUpdateNoContent, error)

	V1OverlordsUIDOpenStackAccountCreate(params *V1OverlordsUIDOpenStackAccountCreateParams) (*V1OverlordsUIDOpenStackAccountCreateCreated, error)

	V1OverlordsUIDOpenStackAccountUpdate(params *V1OverlordsUIDOpenStackAccountUpdateParams) (*V1OverlordsUIDOpenStackAccountUpdateNoContent, error)

	V1OverlordsUIDOpenStackAccountValidate(params *V1OverlordsUIDOpenStackAccountValidateParams) (*V1OverlordsUIDOpenStackAccountValidateNoContent, error)

	V1OverlordsUIDOpenStackCloudConfigCreate(params *V1OverlordsUIDOpenStackCloudConfigCreateParams) (*V1OverlordsUIDOpenStackCloudConfigCreateCreated, error)

	V1OverlordsUIDOpenStackCloudConfigUpdate(params *V1OverlordsUIDOpenStackCloudConfigUpdateParams) (*V1OverlordsUIDOpenStackCloudConfigUpdateNoContent, error)

	V1OverlordsUIDOpenStackClusterProfile(params *V1OverlordsUIDOpenStackClusterProfileParams) (*V1OverlordsUIDOpenStackClusterProfileOK, error)

	V1OverlordsUIDPoolCreate(params *V1OverlordsUIDPoolCreateParams) (*V1OverlordsUIDPoolCreateCreated, error)

	V1OverlordsUIDPoolDelete(params *V1OverlordsUIDPoolDeleteParams) (*V1OverlordsUIDPoolDeleteNoContent, error)

	V1OverlordsUIDPoolUpdate(params *V1OverlordsUIDPoolUpdateParams) (*V1OverlordsUIDPoolUpdateNoContent, error)

	V1OverlordsUIDPoolsList(params *V1OverlordsUIDPoolsListParams) (*V1OverlordsUIDPoolsListOK, error)

	V1OverlordsUIDReset(params *V1OverlordsUIDResetParams) (*V1OverlordsUIDResetOK, error)

	V1OverlordsUIDVsphereAccountCreate(params *V1OverlordsUIDVsphereAccountCreateParams) (*V1OverlordsUIDVsphereAccountCreateCreated, error)

	V1OverlordsUIDVsphereAccountUpdate(params *V1OverlordsUIDVsphereAccountUpdateParams) (*V1OverlordsUIDVsphereAccountUpdateNoContent, error)

	V1OverlordsUIDVsphereAccountValidate(params *V1OverlordsUIDVsphereAccountValidateParams) (*V1OverlordsUIDVsphereAccountValidateNoContent, error)

	V1OverlordsUIDVsphereCloudConfigCreate(params *V1OverlordsUIDVsphereCloudConfigCreateParams) (*V1OverlordsUIDVsphereCloudConfigCreateCreated, error)

	V1OverlordsUIDVsphereCloudConfigUpdate(params *V1OverlordsUIDVsphereCloudConfigUpdateParams) (*V1OverlordsUIDVsphereCloudConfigUpdateNoContent, error)

	V1OverlordsUIDVsphereClusterProfile(params *V1OverlordsUIDVsphereClusterProfileParams) (*V1OverlordsUIDVsphereClusterProfileOK, error)

	V1OverlordsUIDVsphereComputeclusterRes(params *V1OverlordsUIDVsphereComputeclusterResParams) (*V1OverlordsUIDVsphereComputeclusterResOK, error)

	V1OverlordsUIDVsphereDatacenters(params *V1OverlordsUIDVsphereDatacentersParams) (*V1OverlordsUIDVsphereDatacentersOK, error)

	V1OverlordsVsphereManifest(params *V1OverlordsVsphereManifestParams) (*V1OverlordsVsphereManifestOK, error)

	V1OverlordsVsphereOvaGet(params *V1OverlordsVsphereOvaGetParams) (*V1OverlordsVsphereOvaGetOK, error)

	V1PacksNameRegistryUIDList(params *V1PacksNameRegistryUIDListParams) (*V1PacksNameRegistryUIDListOK, error)

	V1PacksPackUIDLogo(params *V1PacksPackUIDLogoParams, writer io.Writer) (*V1PacksPackUIDLogoOK, error)

	V1PacksSearch(params *V1PacksSearchParams) (*V1PacksSearchOK, error)

	V1PacksSummaryList(params *V1PacksSummaryListParams) (*V1PacksSummaryListOK, error)

	V1PacksUID(params *V1PacksUIDParams) (*V1PacksUIDOK, error)

	V1PacksUIDReadme(params *V1PacksUIDReadmeParams) (*V1PacksUIDReadmeOK, error)

	V1PasswordActivate(params *V1PasswordActivateParams) (*V1PasswordActivateNoContent, error)

	V1PasswordReset(params *V1PasswordResetParams) (*V1PasswordResetNoContent, error)

	V1PasswordResetRequest(params *V1PasswordResetRequestParams) (*V1PasswordResetRequestNoContent, error)

	V1PatchTenantAddress(params *V1PatchTenantAddressParams) (*V1PatchTenantAddressNoContent, error)

	V1PatchTenantEmailID(params *V1PatchTenantEmailIDParams) (*V1PatchTenantEmailIDNoContent, error)

	V1PcgSelfHosted(params *V1PcgSelfHostedParams) (*V1PcgSelfHostedOK, error)

	V1PcgUIDAllyManifestGet(params *V1PcgUIDAllyManifestGetParams, writer io.Writer) (*V1PcgUIDAllyManifestGetOK, error)

	V1PcgUIDJetManifestGet(params *V1PcgUIDJetManifestGetParams, writer io.Writer) (*V1PcgUIDJetManifestGetOK, error)

	V1PcgUIDRegister(params *V1PcgUIDRegisterParams) (*V1PcgUIDRegisterNoContent, error)

	V1PermissionsList(params *V1PermissionsListParams) (*V1PermissionsListOK, error)

	V1ProjectClusterSettingsGet(params *V1ProjectClusterSettingsGetParams) (*V1ProjectClusterSettingsGetOK, error)

	V1ProjectClustersNodesAutoRemediationSettingUpdate(params *V1ProjectClustersNodesAutoRemediationSettingUpdateParams) (*V1ProjectClustersNodesAutoRemediationSettingUpdateNoContent, error)

	V1ProjectsAlerts(params *V1ProjectsAlertsParams) (*V1ProjectsAlertsOK, error)

	V1ProjectsCreate(params *V1ProjectsCreateParams) (*V1ProjectsCreateCreated, error)

	V1ProjectsFilterSummary(params *V1ProjectsFilterSummaryParams) (*V1ProjectsFilterSummaryOK, error)

	V1ProjectsMetadata(params *V1ProjectsMetadataParams) (*V1ProjectsMetadataOK, error)

	V1ProjectsUIDAlertCreate(params *V1ProjectsUIDAlertCreateParams) (*V1ProjectsUIDAlertCreateCreated, error)

	V1ProjectsUIDAlertDelete(params *V1ProjectsUIDAlertDeleteParams) (*V1ProjectsUIDAlertDeleteNoContent, error)

	V1ProjectsUIDAlertUpdate(params *V1ProjectsUIDAlertUpdateParams) (*V1ProjectsUIDAlertUpdateNoContent, error)

	V1ProjectsUIDAlertsUIDDelete(params *V1ProjectsUIDAlertsUIDDeleteParams) (*V1ProjectsUIDAlertsUIDDeleteNoContent, error)

	V1ProjectsUIDAlertsUIDGet(params *V1ProjectsUIDAlertsUIDGetParams) (*V1ProjectsUIDAlertsUIDGetOK, error)

	V1ProjectsUIDAlertsUIDUpdate(params *V1ProjectsUIDAlertsUIDUpdateParams) (*V1ProjectsUIDAlertsUIDUpdateNoContent, error)

	V1ProjectsUIDDelete(params *V1ProjectsUIDDeleteParams) (*V1ProjectsUIDDeleteNoContent, error)

	V1ProjectsUIDGet(params *V1ProjectsUIDGetParams) (*V1ProjectsUIDGetOK, error)

	V1ProjectsUIDMacrosCreate(params *V1ProjectsUIDMacrosCreateParams) (*V1ProjectsUIDMacrosCreateNoContent, error)

	V1ProjectsUIDMacrosDeleteByMacroName(params *V1ProjectsUIDMacrosDeleteByMacroNameParams) (*V1ProjectsUIDMacrosDeleteByMacroNameNoContent, error)

	V1ProjectsUIDMacrosList(params *V1ProjectsUIDMacrosListParams) (*V1ProjectsUIDMacrosListOK, error)

	V1ProjectsUIDMacrosUpdate(params *V1ProjectsUIDMacrosUpdateParams) (*V1ProjectsUIDMacrosUpdateNoContent, error)

	V1ProjectsUIDMacrosUpdateByMacroName(params *V1ProjectsUIDMacrosUpdateByMacroNameParams) (*V1ProjectsUIDMacrosUpdateByMacroNameNoContent, error)

	V1ProjectsUIDMetaUpdate(params *V1ProjectsUIDMetaUpdateParams) (*V1ProjectsUIDMetaUpdateNoContent, error)

	V1ProjectsUIDTeamsUpdate(params *V1ProjectsUIDTeamsUpdateParams) (*V1ProjectsUIDTeamsUpdateNoContent, error)

	V1ProjectsUIDUpdate(params *V1ProjectsUIDUpdateParams) (*V1ProjectsUIDUpdateNoContent, error)

	V1ProjectsUIDUsersUpdate(params *V1ProjectsUIDUsersUpdateParams) (*V1ProjectsUIDUsersUpdateNoContent, error)

	V1ProjectsUIDValidate(params *V1ProjectsUIDValidateParams) (*V1ProjectsUIDValidateOK, error)

	V1RateConfigGet(params *V1RateConfigGetParams) (*V1RateConfigGetOK, error)

	V1RateConfigUpdate(params *V1RateConfigUpdateParams) (*V1RateConfigUpdateNoContent, error)

	V1RegistriesHelmCreate(params *V1RegistriesHelmCreateParams) (*V1RegistriesHelmCreateCreated, error)

	V1RegistriesHelmList(params *V1RegistriesHelmListParams) (*V1RegistriesHelmListOK, error)

	V1RegistriesHelmSummaryList(params *V1RegistriesHelmSummaryListParams) (*V1RegistriesHelmSummaryListOK, error)

	V1RegistriesHelmUIDDelete(params *V1RegistriesHelmUIDDeleteParams) (*V1RegistriesHelmUIDDeleteNoContent, error)

	V1RegistriesHelmUIDGet(params *V1RegistriesHelmUIDGetParams) (*V1RegistriesHelmUIDGetOK, error)

	V1RegistriesHelmUIDSync(params *V1RegistriesHelmUIDSyncParams) (*V1RegistriesHelmUIDSyncAccepted, error)

	V1RegistriesHelmUIDSyncStatus(params *V1RegistriesHelmUIDSyncStatusParams) (*V1RegistriesHelmUIDSyncStatusOK, error)

	V1RegistriesHelmUIDUpdate(params *V1RegistriesHelmUIDUpdateParams) (*V1RegistriesHelmUIDUpdateNoContent, error)

	V1RegistriesMetadata(params *V1RegistriesMetadataParams) (*V1RegistriesMetadataOK, error)

	V1RegistriesNameConfigGet(params *V1RegistriesNameConfigGetParams) (*V1RegistriesNameConfigGetOK, error)

	V1RegistriesPackCreate(params *V1RegistriesPackCreateParams) (*V1RegistriesPackCreateCreated, error)

	V1RegistriesPackList(params *V1RegistriesPackListParams) (*V1RegistriesPackListOK, error)

	V1RegistriesPackSummaryList(params *V1RegistriesPackSummaryListParams) (*V1RegistriesPackSummaryListOK, error)

	V1RegistriesPackUIDDelete(params *V1RegistriesPackUIDDeleteParams) (*V1RegistriesPackUIDDeleteNoContent, error)

	V1RegistriesPackUIDGet(params *V1RegistriesPackUIDGetParams) (*V1RegistriesPackUIDGetOK, error)

	V1RegistriesPackUIDSync(params *V1RegistriesPackUIDSyncParams) (*V1RegistriesPackUIDSyncAccepted, error)

	V1RegistriesPackUIDSyncStatus(params *V1RegistriesPackUIDSyncStatusParams) (*V1RegistriesPackUIDSyncStatusOK, error)

	V1RegistriesPackUIDUpdate(params *V1RegistriesPackUIDUpdateParams) (*V1RegistriesPackUIDUpdateNoContent, error)

	V1RegistriesUIDDelete(params *V1RegistriesUIDDeleteParams) (*V1RegistriesUIDDeleteNoContent, error)

	V1RolesClone(params *V1RolesCloneParams) (*V1RolesCloneCreated, error)

	V1RolesCreate(params *V1RolesCreateParams) (*V1RolesCreateCreated, error)

	V1RolesList(params *V1RolesListParams) (*V1RolesListOK, error)

	V1RolesUIDDelete(params *V1RolesUIDDeleteParams) (*V1RolesUIDDeleteNoContent, error)

	V1RolesUIDGet(params *V1RolesUIDGetParams) (*V1RolesUIDGetOK, error)

	V1RolesUIDUpdate(params *V1RolesUIDUpdateParams) (*V1RolesUIDUpdateNoContent, error)

	V1ServiceManifestGet(params *V1ServiceManifestGetParams) (*V1ServiceManifestGetOK, error)

	V1ServiceVersionGet(params *V1ServiceVersionGetParams) (*V1ServiceVersionGetOK, error)

	V1SpectroClustersAksCreate(params *V1SpectroClustersAksCreateParams) (*V1SpectroClustersAksCreateCreated, error)

	V1SpectroClustersAksRate(params *V1SpectroClustersAksRateParams) (*V1SpectroClustersAksRateOK, error)

	V1SpectroClustersAksValidate(params *V1SpectroClustersAksValidateParams) (*V1SpectroClustersAksValidateOK, error)

	V1SpectroClustersAwsCreate(params *V1SpectroClustersAwsCreateParams) (*V1SpectroClustersAwsCreateCreated, error)

	V1SpectroClustersAwsImport(params *V1SpectroClustersAwsImportParams) (*V1SpectroClustersAwsImportCreated, error)

	V1SpectroClustersAwsRate(params *V1SpectroClustersAwsRateParams) (*V1SpectroClustersAwsRateOK, error)

	V1SpectroClustersAwsValidate(params *V1SpectroClustersAwsValidateParams) (*V1SpectroClustersAwsValidateOK, error)

	V1SpectroClustersAzureCreate(params *V1SpectroClustersAzureCreateParams) (*V1SpectroClustersAzureCreateCreated, error)

	V1SpectroClustersAzureImport(params *V1SpectroClustersAzureImportParams) (*V1SpectroClustersAzureImportCreated, error)

	V1SpectroClustersAzureRate(params *V1SpectroClustersAzureRateParams) (*V1SpectroClustersAzureRateOK, error)

	V1SpectroClustersAzureValidate(params *V1SpectroClustersAzureValidateParams) (*V1SpectroClustersAzureValidateOK, error)

	V1SpectroClustersCertificatesRenew(params *V1SpectroClustersCertificatesRenewParams) (*V1SpectroClustersCertificatesRenewNoContent, error)

	V1SpectroClustersConfigEdgeInstaller(params *V1SpectroClustersConfigEdgeInstallerParams) (*V1SpectroClustersConfigEdgeInstallerOK, error)

	V1SpectroClustersCustomCreate(params *V1SpectroClustersCustomCreateParams) (*V1SpectroClustersCustomCreateCreated, error)

	V1SpectroClustersCustomValidate(params *V1SpectroClustersCustomValidateParams) (*V1SpectroClustersCustomValidateOK, error)

	V1SpectroClustersDelete(params *V1SpectroClustersDeleteParams) (*V1SpectroClustersDeleteNoContent, error)

	V1SpectroClustersDeleteProfiles(params *V1SpectroClustersDeleteProfilesParams) (*V1SpectroClustersDeleteProfilesNoContent, error)

	V1SpectroClustersEdgeNativeCreate(params *V1SpectroClustersEdgeNativeCreateParams) (*V1SpectroClustersEdgeNativeCreateCreated, error)

	V1SpectroClustersEdgeNativeImport(params *V1SpectroClustersEdgeNativeImportParams) (*V1SpectroClustersEdgeNativeImportCreated, error)

	V1SpectroClustersEdgeNativeRate(params *V1SpectroClustersEdgeNativeRateParams) (*V1SpectroClustersEdgeNativeRateOK, error)

	V1SpectroClustersEdgeNativeValidate(params *V1SpectroClustersEdgeNativeValidateParams) (*V1SpectroClustersEdgeNativeValidateOK, error)

	V1SpectroClustersEksCreate(params *V1SpectroClustersEksCreateParams) (*V1SpectroClustersEksCreateCreated, error)

	V1SpectroClustersEksRate(params *V1SpectroClustersEksRateParams) (*V1SpectroClustersEksRateOK, error)

	V1SpectroClustersEksValidate(params *V1SpectroClustersEksValidateParams) (*V1SpectroClustersEksValidateOK, error)

	V1SpectroClustersFiltersWorkspace(params *V1SpectroClustersFiltersWorkspaceParams) (*V1SpectroClustersFiltersWorkspaceOK, error)

	V1SpectroClustersGcpCreate(params *V1SpectroClustersGcpCreateParams) (*V1SpectroClustersGcpCreateCreated, error)

	V1SpectroClustersGcpImport(params *V1SpectroClustersGcpImportParams) (*V1SpectroClustersGcpImportCreated, error)

	V1SpectroClustersGcpRate(params *V1SpectroClustersGcpRateParams) (*V1SpectroClustersGcpRateOK, error)

	V1SpectroClustersGcpValidate(params *V1SpectroClustersGcpValidateParams) (*V1SpectroClustersGcpValidateOK, error)

	V1SpectroClustersGenericImport(params *V1SpectroClustersGenericImportParams) (*V1SpectroClustersGenericImportCreated, error)

	V1SpectroClustersGenericRate(params *V1SpectroClustersGenericRateParams) (*V1SpectroClustersGenericRateOK, error)

	V1SpectroClustersGet(params *V1SpectroClustersGetParams) (*V1SpectroClustersGetOK, error)

	V1SpectroClustersGetHybridPoolsMetadata(params *V1SpectroClustersGetHybridPoolsMetadataParams) (*V1SpectroClustersGetHybridPoolsMetadataOK, error)

	V1SpectroClustersGetProfileUpdates(params *V1SpectroClustersGetProfileUpdatesParams) (*V1SpectroClustersGetProfileUpdatesOK, error)

	V1SpectroClustersGetProfiles(params *V1SpectroClustersGetProfilesParams) (*V1SpectroClustersGetProfilesOK, error)

	V1SpectroClustersGetProfilesPacksManifests(params *V1SpectroClustersGetProfilesPacksManifestsParams) (*V1SpectroClustersGetProfilesPacksManifestsOK, error)

	V1SpectroClustersGkeCreate(params *V1SpectroClustersGkeCreateParams) (*V1SpectroClustersGkeCreateCreated, error)

	V1SpectroClustersGkeRate(params *V1SpectroClustersGkeRateParams) (*V1SpectroClustersGkeRateOK, error)

	V1SpectroClustersGkeValidate(params *V1SpectroClustersGkeValidateParams) (*V1SpectroClustersGkeValidateOK, error)

	V1SpectroClustersK8Certificate(params *V1SpectroClustersK8CertificateParams) (*V1SpectroClustersK8CertificateOK, error)

	V1SpectroClustersK8CertificateUpdate(params *V1SpectroClustersK8CertificateUpdateParams) (*V1SpectroClustersK8CertificateUpdateNoContent, error)

	V1SpectroClustersMaasCreate(params *V1SpectroClustersMaasCreateParams) (*V1SpectroClustersMaasCreateCreated, error)

	V1SpectroClustersMaasImport(params *V1SpectroClustersMaasImportParams) (*V1SpectroClustersMaasImportCreated, error)

	V1SpectroClustersMaasRate(params *V1SpectroClustersMaasRateParams) (*V1SpectroClustersMaasRateOK, error)

	V1SpectroClustersMaasValidate(params *V1SpectroClustersMaasValidateParams) (*V1SpectroClustersMaasValidateOK, error)

	V1SpectroClustersMetaGet(params *V1SpectroClustersMetaGetParams) (*V1SpectroClustersMetaGetOK, error)

	V1SpectroClustersMetadata(params *V1SpectroClustersMetadataParams) (*V1SpectroClustersMetadataOK, error)

	V1SpectroClustersMetadataGet(params *V1SpectroClustersMetadataGetParams) (*V1SpectroClustersMetadataGetOK, error)

	V1SpectroClustersMetadataSearch(params *V1SpectroClustersMetadataSearchParams) (*V1SpectroClustersMetadataSearchOK, error)

	V1SpectroClustersMetadataSearchSchema(params *V1SpectroClustersMetadataSearchSchemaParams) (*V1SpectroClustersMetadataSearchSchemaOK, error)

	V1SpectroClustersOpenStackCreate(params *V1SpectroClustersOpenStackCreateParams) (*V1SpectroClustersOpenStackCreateCreated, error)

	V1SpectroClustersOpenStackImport(params *V1SpectroClustersOpenStackImportParams) (*V1SpectroClustersOpenStackImportCreated, error)

	V1SpectroClustersOpenStackRate(params *V1SpectroClustersOpenStackRateParams) (*V1SpectroClustersOpenStackRateOK, error)

	V1SpectroClustersOpenStackValidate(params *V1SpectroClustersOpenStackValidateParams) (*V1SpectroClustersOpenStackValidateOK, error)

	V1SpectroClustersPacksRefUpdate(params *V1SpectroClustersPacksRefUpdateParams) (*V1SpectroClustersPacksRefUpdateNoContent, error)

	V1SpectroClustersPatchProfiles(params *V1SpectroClustersPatchProfilesParams) (*V1SpectroClustersPatchProfilesNoContent, error)

	V1SpectroClustersProfilesUIDPackManifestsGet(params *V1SpectroClustersProfilesUIDPackManifestsGetParams) (*V1SpectroClustersProfilesUIDPackManifestsGetOK, error)

	V1SpectroClustersProfilesUIDPackManifestsUpdate(params *V1SpectroClustersProfilesUIDPackManifestsUpdateParams) (*V1SpectroClustersProfilesUIDPackManifestsUpdateNoContent, error)

	V1SpectroClustersResourcesConsumption(params *V1SpectroClustersResourcesConsumptionParams) (*V1SpectroClustersResourcesConsumptionOK, error)

	V1SpectroClustersResourcesCostSummary(params *V1SpectroClustersResourcesCostSummaryParams) (*V1SpectroClustersResourcesCostSummaryOK, error)

	V1SpectroClustersResourcesUsageSummary(params *V1SpectroClustersResourcesUsageSummaryParams) (*V1SpectroClustersResourcesUsageSummaryOK, error)

	V1SpectroClustersSearchFilterSummary(params *V1SpectroClustersSearchFilterSummaryParams) (*V1SpectroClustersSearchFilterSummaryOK, error)

	V1SpectroClustersSearchSchema(params *V1SpectroClustersSearchSchemaParams) (*V1SpectroClustersSearchSchemaOK, error)

	V1SpectroClustersSpcDownload(params *V1SpectroClustersSpcDownloadParams, writer io.Writer) (*V1SpectroClustersSpcDownloadOK, error)

	V1SpectroClustersSummaryUID(params *V1SpectroClustersSummaryUIDParams) (*V1SpectroClustersSummaryUIDOK, error)

	V1SpectroClustersSummaryUIDOverview(params *V1SpectroClustersSummaryUIDOverviewParams) (*V1SpectroClustersSummaryUIDOverviewOK, error)

	V1SpectroClustersTagsGet(params *V1SpectroClustersTagsGetParams) (*V1SpectroClustersTagsGetOK, error)

	V1SpectroClustersUIDAdminKubeConfig(params *V1SpectroClustersUIDAdminKubeConfigParams, writer io.Writer) (*V1SpectroClustersUIDAdminKubeConfigOK, error)

	V1SpectroClustersUIDAssets(params *V1SpectroClustersUIDAssetsParams) (*V1SpectroClustersUIDAssetsNoContent, error)

	V1SpectroClustersUIDAssetsGet(params *V1SpectroClustersUIDAssetsGetParams) (*V1SpectroClustersUIDAssetsGetOK, error)

	V1SpectroClustersUIDClusterMetaAttributeUpdate(params *V1SpectroClustersUIDClusterMetaAttributeUpdateParams) (*V1SpectroClustersUIDClusterMetaAttributeUpdateNoContent, error)

	V1SpectroClustersUIDConfigNamespacesGet(params *V1SpectroClustersUIDConfigNamespacesGetParams) (*V1SpectroClustersUIDConfigNamespacesGetOK, error)

	V1SpectroClustersUIDConfigNamespacesUIDGet(params *V1SpectroClustersUIDConfigNamespacesUIDGetParams) (*V1SpectroClustersUIDConfigNamespacesUIDGetOK, error)

	V1SpectroClustersUIDConfigNamespacesUIDUpdate(params *V1SpectroClustersUIDConfigNamespacesUIDUpdateParams) (*V1SpectroClustersUIDConfigNamespacesUIDUpdateNoContent, error)

	V1SpectroClustersUIDConfigNamespacesUpdate(params *V1SpectroClustersUIDConfigNamespacesUpdateParams) (*V1SpectroClustersUIDConfigNamespacesUpdateNoContent, error)

	V1SpectroClustersUIDConfigRbacsGet(params *V1SpectroClustersUIDConfigRbacsGetParams) (*V1SpectroClustersUIDConfigRbacsGetOK, error)

	V1SpectroClustersUIDConfigRbacsUIDGet(params *V1SpectroClustersUIDConfigRbacsUIDGetParams) (*V1SpectroClustersUIDConfigRbacsUIDGetOK, error)

	V1SpectroClustersUIDConfigRbacsUIDUpdate(params *V1SpectroClustersUIDConfigRbacsUIDUpdateParams) (*V1SpectroClustersUIDConfigRbacsUIDUpdateNoContent, error)

	V1SpectroClustersUIDConfigRbacsUpdate(params *V1SpectroClustersUIDConfigRbacsUpdateParams) (*V1SpectroClustersUIDConfigRbacsUpdateNoContent, error)

	V1SpectroClustersUIDCostSummary(params *V1SpectroClustersUIDCostSummaryParams) (*V1SpectroClustersUIDCostSummaryOK, error)

	V1SpectroClustersUIDDownload(params *V1SpectroClustersUIDDownloadParams, writer io.Writer) (*V1SpectroClustersUIDDownloadOK, error)

	V1SpectroClustersUIDFrpKubeConfigDelete(params *V1SpectroClustersUIDFrpKubeConfigDeleteParams) (*V1SpectroClustersUIDFrpKubeConfigDeleteNoContent, error)

	V1SpectroClustersUIDFrpKubeConfigGet(params *V1SpectroClustersUIDFrpKubeConfigGetParams, writer io.Writer) (*V1SpectroClustersUIDFrpKubeConfigGetOK, error)

	V1SpectroClustersUIDFrpKubeConfigUpdate(params *V1SpectroClustersUIDFrpKubeConfigUpdateParams) (*V1SpectroClustersUIDFrpKubeConfigUpdateNoContent, error)

	V1SpectroClustersUIDHeartbeatUpdate(params *V1SpectroClustersUIDHeartbeatUpdateParams) (*V1SpectroClustersUIDHeartbeatUpdateNoContent, error)

	V1SpectroClustersUIDHybridSettings(params *V1SpectroClustersUIDHybridSettingsParams) (*V1SpectroClustersUIDHybridSettingsNoContent, error)

	V1SpectroClustersUIDImportManifest(params *V1SpectroClustersUIDImportManifestParams, writer io.Writer) (*V1SpectroClustersUIDImportManifestOK, error)

	V1SpectroClustersUIDImportUpgradePatch(params *V1SpectroClustersUIDImportUpgradePatchParams) (*V1SpectroClustersUIDImportUpgradePatchNoContent, error)

	V1SpectroClustersUIDKubeConfig(params *V1SpectroClustersUIDKubeConfigParams, writer io.Writer) (*V1SpectroClustersUIDKubeConfigOK, error)

	V1SpectroClustersUIDKubeConfigClientDelete(params *V1SpectroClustersUIDKubeConfigClientDeleteParams) (*V1SpectroClustersUIDKubeConfigClientDeleteNoContent, error)

	V1SpectroClustersUIDKubeConfigClientGet(params *V1SpectroClustersUIDKubeConfigClientGetParams, writer io.Writer) (*V1SpectroClustersUIDKubeConfigClientGetOK, error)

	V1SpectroClustersUIDKubeConfigClientUpdate(params *V1SpectroClustersUIDKubeConfigClientUpdateParams) (*V1SpectroClustersUIDKubeConfigClientUpdateNoContent, error)

	V1SpectroClustersUIDKubeConfigUpdate(params *V1SpectroClustersUIDKubeConfigUpdateParams) (*V1SpectroClustersUIDKubeConfigUpdateNoContent, error)

	V1SpectroClustersUIDLifecycleConfigUpdate(params *V1SpectroClustersUIDLifecycleConfigUpdateParams) (*V1SpectroClustersUIDLifecycleConfigUpdateNoContent, error)

	V1SpectroClustersUIDLocationPut(params *V1SpectroClustersUIDLocationPutParams) (*V1SpectroClustersUIDLocationPutNoContent, error)

	V1SpectroClustersUIDManifestGet(params *V1SpectroClustersUIDManifestGetParams) (*V1SpectroClustersUIDManifestGetOK, error)

	V1SpectroClustersUIDManifestUpdate(params *V1SpectroClustersUIDManifestUpdateParams) (*V1SpectroClustersUIDManifestUpdateNoContent, error)

	V1SpectroClustersUIDMetadataUpdate(params *V1SpectroClustersUIDMetadataUpdateParams) (*V1SpectroClustersUIDMetadataUpdateNoContent, error)

	V1SpectroClustersUIDOsPatchUpdate(params *V1SpectroClustersUIDOsPatchUpdateParams) (*V1SpectroClustersUIDOsPatchUpdateNoContent, error)

	V1SpectroClustersUIDPackManifestsUIDGet(params *V1SpectroClustersUIDPackManifestsUIDGetParams) (*V1SpectroClustersUIDPackManifestsUIDGetOK, error)

	V1SpectroClustersUIDPackProperties(params *V1SpectroClustersUIDPackPropertiesParams) (*V1SpectroClustersUIDPackPropertiesOK, error)

	V1SpectroClustersUIDPacksResolvedValuesGet(params *V1SpectroClustersUIDPacksResolvedValuesGetParams) (*V1SpectroClustersUIDPacksResolvedValuesGetOK, error)

	V1SpectroClustersUIDPacksStatusPatch(params *V1SpectroClustersUIDPacksStatusPatchParams) (*V1SpectroClustersUIDPacksStatusPatchNoContent, error)

	V1SpectroClustersUIDProfilesUIDPacksConfigGet(params *V1SpectroClustersUIDProfilesUIDPacksConfigGetParams) (*V1SpectroClustersUIDProfilesUIDPacksConfigGetOK, error)

	V1SpectroClustersUIDRate(params *V1SpectroClustersUIDRateParams) (*V1SpectroClustersUIDRateOK, error)

	V1SpectroClustersUIDRepaveApproveUpdate(params *V1SpectroClustersUIDRepaveApproveUpdateParams) (*V1SpectroClustersUIDRepaveApproveUpdateNoContent, error)

	V1SpectroClustersUIDRepaveGet(params *V1SpectroClustersUIDRepaveGetParams) (*V1SpectroClustersUIDRepaveGetOK, error)

	V1SpectroClustersUIDResourcesConsumption(params *V1SpectroClustersUIDResourcesConsumptionParams) (*V1SpectroClustersUIDResourcesConsumptionOK, error)

	V1SpectroClustersUIDStatus(params *V1SpectroClustersUIDStatusParams) (*V1SpectroClustersUIDStatusOK, error)

	V1SpectroClustersUIDStatusSpcApply(params *V1SpectroClustersUIDStatusSpcApplyParams) (*V1SpectroClustersUIDStatusSpcApplyAccepted, error)

	V1SpectroClustersUIDStatusSpcApplyGet(params *V1SpectroClustersUIDStatusSpcApplyGetParams) (*V1SpectroClustersUIDStatusSpcApplyGetOK, error)

	V1SpectroClustersUIDStatusSpcPatchTime(params *V1SpectroClustersUIDStatusSpcPatchTimeParams) (*V1SpectroClustersUIDStatusSpcPatchTimeNoContent, error)

	V1SpectroClustersUIDTokenKubeConfigDelete(params *V1SpectroClustersUIDTokenKubeConfigDeleteParams) (*V1SpectroClustersUIDTokenKubeConfigDeleteNoContent, error)

	V1SpectroClustersUIDTokenKubeConfigGet(params *V1SpectroClustersUIDTokenKubeConfigGetParams, writer io.Writer) (*V1SpectroClustersUIDTokenKubeConfigGetOK, error)

	V1SpectroClustersUIDTokenKubeConfigUpdate(params *V1SpectroClustersUIDTokenKubeConfigUpdateParams) (*V1SpectroClustersUIDTokenKubeConfigUpdateNoContent, error)

	V1SpectroClustersUIDUpgradeSettings(params *V1SpectroClustersUIDUpgradeSettingsParams) (*V1SpectroClustersUIDUpgradeSettingsNoContent, error)

	V1SpectroClustersUIDUpgradesPut(params *V1SpectroClustersUIDUpgradesPutParams) (*V1SpectroClustersUIDUpgradesPutNoContent, error)

	V1SpectroClustersUIDValidatePacks(params *V1SpectroClustersUIDValidatePacksParams) (*V1SpectroClustersUIDValidatePacksOK, error)

	V1SpectroClustersUIDValidateRepave(params *V1SpectroClustersUIDValidateRepaveParams) (*V1SpectroClustersUIDValidateRepaveOK, error)

	V1SpectroClustersUIDVariablesGet(params *V1SpectroClustersUIDVariablesGetParams) (*V1SpectroClustersUIDVariablesGetOK, error)

	V1SpectroClustersUIDVariablesPatch(params *V1SpectroClustersUIDVariablesPatchParams) (*V1SpectroClustersUIDVariablesPatchNoContent, error)

	V1SpectroClustersUIDWorkloadsKindSync(params *V1SpectroClustersUIDWorkloadsKindSyncParams) (*V1SpectroClustersUIDWorkloadsKindSyncAccepted, error)

	V1SpectroClustersUIDWorkloadsSync(params *V1SpectroClustersUIDWorkloadsSyncParams) (*V1SpectroClustersUIDWorkloadsSyncAccepted, error)

	V1SpectroClustersUpdateProfiles(params *V1SpectroClustersUpdateProfilesParams) (*V1SpectroClustersUpdateProfilesNoContent, error)

	V1SpectroClustersUpdateStatusCondition(params *V1SpectroClustersUpdateStatusConditionParams) (*V1SpectroClustersUpdateStatusConditionNoContent, error)

	V1SpectroClustersUpdateStatusConditions(params *V1SpectroClustersUpdateStatusConditionsParams) (*V1SpectroClustersUpdateStatusConditionsNoContent, error)

	V1SpectroClustersUpdateStatusEndpoints(params *V1SpectroClustersUpdateStatusEndpointsParams) (*V1SpectroClustersUpdateStatusEndpointsNoContent, error)

	V1SpectroClustersUpdateStatusImported(params *V1SpectroClustersUpdateStatusImportedParams) (*V1SpectroClustersUpdateStatusImportedNoContent, error)

	V1SpectroClustersUpdateStatusServices(params *V1SpectroClustersUpdateStatusServicesParams) (*V1SpectroClustersUpdateStatusServicesNoContent, error)

	V1SpectroClustersUpgradeSettings(params *V1SpectroClustersUpgradeSettingsParams) (*V1SpectroClustersUpgradeSettingsNoContent, error)

	V1SpectroClustersUpgradeSettingsGet(params *V1SpectroClustersUpgradeSettingsGetParams) (*V1SpectroClustersUpgradeSettingsGetOK, error)

	V1SpectroClustersVMAddVolume(params *V1SpectroClustersVMAddVolumeParams) (*V1SpectroClustersVMAddVolumeNoContent, error)

	V1SpectroClustersVMClone(params *V1SpectroClustersVMCloneParams) (*V1SpectroClustersVMCloneOK, error)

	V1SpectroClustersVMCreate(params *V1SpectroClustersVMCreateParams) (*V1SpectroClustersVMCreateOK, error)

	V1SpectroClustersVMDelete(params *V1SpectroClustersVMDeleteParams) (*V1SpectroClustersVMDeleteNoContent, error)

	V1SpectroClustersVMGet(params *V1SpectroClustersVMGetParams) (*V1SpectroClustersVMGetOK, error)

	V1SpectroClustersVMList(params *V1SpectroClustersVMListParams) (*V1SpectroClustersVMListOK, error)

	V1SpectroClustersVMMigrate(params *V1SpectroClustersVMMigrateParams) (*V1SpectroClustersVMMigrateNoContent, error)

	V1SpectroClustersVMPause(params *V1SpectroClustersVMPauseParams) (*V1SpectroClustersVMPauseNoContent, error)

	V1SpectroClustersVMRemoveVolume(params *V1SpectroClustersVMRemoveVolumeParams) (*V1SpectroClustersVMRemoveVolumeNoContent, error)

	V1SpectroClustersVMRestart(params *V1SpectroClustersVMRestartParams) (*V1SpectroClustersVMRestartNoContent, error)

	V1SpectroClustersVMResume(params *V1SpectroClustersVMResumeParams) (*V1SpectroClustersVMResumeNoContent, error)

	V1SpectroClustersVMStart(params *V1SpectroClustersVMStartParams) (*V1SpectroClustersVMStartNoContent, error)

	V1SpectroClustersVMStop(params *V1SpectroClustersVMStopParams) (*V1SpectroClustersVMStopNoContent, error)

	V1SpectroClustersVMUpdate(params *V1SpectroClustersVMUpdateParams) (*V1SpectroClustersVMUpdateOK, error)

	V1SpectroClustersValidateName(params *V1SpectroClustersValidateNameParams) (*V1SpectroClustersValidateNameNoContent, error)

	V1SpectroClustersValidatePacks(params *V1SpectroClustersValidatePacksParams) (*V1SpectroClustersValidatePacksOK, error)

	V1SpectroClustersVirtualCreate(params *V1SpectroClustersVirtualCreateParams) (*V1SpectroClustersVirtualCreateCreated, error)

	V1SpectroClustersVirtualValidate(params *V1SpectroClustersVirtualValidateParams) (*V1SpectroClustersVirtualValidateOK, error)

	V1SpectroClustersVsphereCreate(params *V1SpectroClustersVsphereCreateParams) (*V1SpectroClustersVsphereCreateCreated, error)

	V1SpectroClustersVsphereImport(params *V1SpectroClustersVsphereImportParams) (*V1SpectroClustersVsphereImportCreated, error)

	V1SpectroClustersVsphereRate(params *V1SpectroClustersVsphereRateParams) (*V1SpectroClustersVsphereRateOK, error)

	V1SpectroClustersVsphereValidate(params *V1SpectroClustersVsphereValidateParams) (*V1SpectroClustersVsphereValidateOK, error)

	V1SyftScanLogImageSBOMGet(params *V1SyftScanLogImageSBOMGetParams, writer io.Writer) (*V1SyftScanLogImageSBOMGetOK, error)

	V1TagFilterUIDDelete(params *V1TagFilterUIDDeleteParams) (*V1TagFilterUIDDeleteNoContent, error)

	V1TagFilterUIDGet(params *V1TagFilterUIDGetParams) (*V1TagFilterUIDGetOK, error)

	V1TagFilterUIDUpdate(params *V1TagFilterUIDUpdateParams) (*V1TagFilterUIDUpdateNoContent, error)

	V1TagFiltersCreate(params *V1TagFiltersCreateParams) (*V1TagFiltersCreateCreated, error)

	V1TeamsCreate(params *V1TeamsCreateParams) (*V1TeamsCreateCreated, error)

	V1TeamsList(params *V1TeamsListParams) (*V1TeamsListOK, error)

	V1TeamsProjectRoles(params *V1TeamsProjectRolesParams) (*V1TeamsProjectRolesOK, error)

	V1TeamsProjectRolesPut(params *V1TeamsProjectRolesPutParams) (*V1TeamsProjectRolesPutNoContent, error)

	V1TeamsResourceRolesUIDUpdate(params *V1TeamsResourceRolesUIDUpdateParams) (*V1TeamsResourceRolesUIDUpdateNoContent, error)

	V1TeamsSummaryGet(params *V1TeamsSummaryGetParams) (*V1TeamsSummaryGetOK, error)

	V1TeamsUIDDelete(params *V1TeamsUIDDeleteParams) (*V1TeamsUIDDeleteNoContent, error)

	V1TeamsUIDGet(params *V1TeamsUIDGetParams) (*V1TeamsUIDGetOK, error)

	V1TeamsUIDPatch(params *V1TeamsUIDPatchParams) (*V1TeamsUIDPatchNoContent, error)

	V1TeamsUIDResourceRoles(params *V1TeamsUIDResourceRolesParams) (*V1TeamsUIDResourceRolesOK, error)

	V1TeamsUIDResourceRolesCreate(params *V1TeamsUIDResourceRolesCreateParams) (*V1TeamsUIDResourceRolesCreateNoContent, error)

	V1TeamsUIDResourceRolesUIDDelete(params *V1TeamsUIDResourceRolesUIDDeleteParams) (*V1TeamsUIDResourceRolesUIDDeleteNoContent, error)

	V1TeamsUIDUpdate(params *V1TeamsUIDUpdateParams) (*V1TeamsUIDUpdateNoContent, error)

	V1TeamsWorkspaceGetRoles(params *V1TeamsWorkspaceGetRolesParams) (*V1TeamsWorkspaceGetRolesOK, error)

	V1TeamsWorkspaceRolesPut(params *V1TeamsWorkspaceRolesPutParams) (*V1TeamsWorkspaceRolesPutNoContent, error)

	V1TenantClusterRbacSettingsGet(params *V1TenantClusterRbacSettingsGetParams) (*V1TenantClusterRbacSettingsGetOK, error)

	V1TenantClusterRbacSettingsUpdate(params *V1TenantClusterRbacSettingsUpdateParams) (*V1TenantClusterRbacSettingsUpdateNoContent, error)

	V1TenantClusterSettingsGet(params *V1TenantClusterSettingsGetParams) (*V1TenantClusterSettingsGetOK, error)

	V1TenantClustersNodesAutoRemediationSettingUpdate(params *V1TenantClustersNodesAutoRemediationSettingUpdateParams) (*V1TenantClustersNodesAutoRemediationSettingUpdateNoContent, error)

	V1TenantFipsSettingsGet(params *V1TenantFipsSettingsGetParams) (*V1TenantFipsSettingsGetOK, error)

	V1TenantFipsSettingsUpdate(params *V1TenantFipsSettingsUpdateParams) (*V1TenantFipsSettingsUpdateNoContent, error)

	V1TenantFreemiumGet(params *V1TenantFreemiumGetParams) (*V1TenantFreemiumGetOK, error)

	V1TenantFreemiumUpdate(params *V1TenantFreemiumUpdateParams) (*V1TenantFreemiumUpdateNoContent, error)

	V1TenantFreemiumUsageGet(params *V1TenantFreemiumUsageGetParams) (*V1TenantFreemiumUsageGetOK, error)

	V1TenantResourceLimitsGet(params *V1TenantResourceLimitsGetParams) (*V1TenantResourceLimitsGetOK, error)

	V1TenantResourceLimitsUpdate(params *V1TenantResourceLimitsUpdateParams) (*V1TenantResourceLimitsUpdateNoContent, error)

	V1TenantUIDAuthTokenSettingsGet(params *V1TenantUIDAuthTokenSettingsGetParams) (*V1TenantUIDAuthTokenSettingsGetOK, error)

	V1TenantUIDAuthTokenSettingsUpdate(params *V1TenantUIDAuthTokenSettingsUpdateParams) (*V1TenantUIDAuthTokenSettingsUpdateNoContent, error)

	V1TenantUIDLoginBannerGet(params *V1TenantUIDLoginBannerGetParams) (*V1TenantUIDLoginBannerGetOK, error)

	V1TenantUIDLoginBannerUpdate(params *V1TenantUIDLoginBannerUpdateParams) (*V1TenantUIDLoginBannerUpdateNoContent, error)

	V1TenantsCreditAccountDelete(params *V1TenantsCreditAccountDeleteParams) (*V1TenantsCreditAccountDeleteNoContent, error)

	V1TenantsCreditAccountGet(params *V1TenantsCreditAccountGetParams) (*V1TenantsCreditAccountGetOK, error)

	V1TenantsUIDContractAccept(params *V1TenantsUIDContractAcceptParams) (*V1TenantsUIDContractAcceptNoContent, error)

	V1TenantsUIDMacrosCreate(params *V1TenantsUIDMacrosCreateParams) (*V1TenantsUIDMacrosCreateNoContent, error)

	V1TenantsUIDMacrosDeleteByMacroName(params *V1TenantsUIDMacrosDeleteByMacroNameParams) (*V1TenantsUIDMacrosDeleteByMacroNameNoContent, error)

	V1TenantsUIDMacrosList(params *V1TenantsUIDMacrosListParams) (*V1TenantsUIDMacrosListOK, error)

	V1TenantsUIDMacrosUpdate(params *V1TenantsUIDMacrosUpdateParams) (*V1TenantsUIDMacrosUpdateNoContent, error)

	V1TenantsUIDMacrosUpdateByMacroName(params *V1TenantsUIDMacrosUpdateByMacroNameParams) (*V1TenantsUIDMacrosUpdateByMacroNameNoContent, error)

	V1UserAssetsSSHCreate(params *V1UserAssetsSSHCreateParams) (*V1UserAssetsSSHCreateCreated, error)

	V1UsersAssetSSHDelete(params *V1UsersAssetSSHDeleteParams) (*V1UsersAssetSSHDeleteNoContent, error)

	V1UsersAssetSSHGetUID(params *V1UsersAssetSSHGetUIDParams) (*V1UsersAssetSSHGetUIDOK, error)

	V1UsersAssetSSHUpdate(params *V1UsersAssetSSHUpdateParams) (*V1UsersAssetSSHUpdateNoContent, error)

	V1UsersAssetsLocationAzureCreate(params *V1UsersAssetsLocationAzureCreateParams) (*V1UsersAssetsLocationAzureCreateCreated, error)

	V1UsersAssetsLocationAzureGet(params *V1UsersAssetsLocationAzureGetParams) (*V1UsersAssetsLocationAzureGetOK, error)

	V1UsersAssetsLocationAzureUpdate(params *V1UsersAssetsLocationAzureUpdateParams) (*V1UsersAssetsLocationAzureUpdateNoContent, error)

	V1UsersAssetsLocationDefaultUpdate(params *V1UsersAssetsLocationDefaultUpdateParams) (*V1UsersAssetsLocationDefaultUpdateNoContent, error)

	V1UsersAssetsLocationDelete(params *V1UsersAssetsLocationDeleteParams) (*V1UsersAssetsLocationDeleteNoContent, error)

	V1UsersAssetsLocationGcpCreate(params *V1UsersAssetsLocationGcpCreateParams) (*V1UsersAssetsLocationGcpCreateCreated, error)

	V1UsersAssetsLocationGcpGet(params *V1UsersAssetsLocationGcpGetParams) (*V1UsersAssetsLocationGcpGetOK, error)

	V1UsersAssetsLocationGcpUpdate(params *V1UsersAssetsLocationGcpUpdateParams) (*V1UsersAssetsLocationGcpUpdateNoContent, error)

	V1UsersAssetsLocationGet(params *V1UsersAssetsLocationGetParams) (*V1UsersAssetsLocationGetOK, error)

	V1UsersAssetsLocationMinioCreate(params *V1UsersAssetsLocationMinioCreateParams) (*V1UsersAssetsLocationMinioCreateCreated, error)

	V1UsersAssetsLocationMinioGet(params *V1UsersAssetsLocationMinioGetParams) (*V1UsersAssetsLocationMinioGetOK, error)

	V1UsersAssetsLocationMinioUpdate(params *V1UsersAssetsLocationMinioUpdateParams) (*V1UsersAssetsLocationMinioUpdateNoContent, error)

	V1UsersAssetsLocationS3Create(params *V1UsersAssetsLocationS3CreateParams) (*V1UsersAssetsLocationS3CreateCreated, error)

	V1UsersAssetsLocationS3Delete(params *V1UsersAssetsLocationS3DeleteParams) (*V1UsersAssetsLocationS3DeleteNoContent, error)

	V1UsersAssetsLocationS3Get(params *V1UsersAssetsLocationS3GetParams) (*V1UsersAssetsLocationS3GetOK, error)

	V1UsersAssetsLocationS3Update(params *V1UsersAssetsLocationS3UpdateParams) (*V1UsersAssetsLocationS3UpdateNoContent, error)

	V1UsersAssetsSSHGet(params *V1UsersAssetsSSHGetParams) (*V1UsersAssetsSSHGetOK, error)

	V1UsersAuthTokensRevoke(params *V1UsersAuthTokensRevokeParams) (*V1UsersAuthTokensRevokeNoContent, error)

	V1UsersCreate(params *V1UsersCreateParams) (*V1UsersCreateCreated, error)

	V1UsersEmailPasswordReset(params *V1UsersEmailPasswordResetParams) (*V1UsersEmailPasswordResetNoContent, error)

	V1UsersInfoGet(params *V1UsersInfoGetParams) (*V1UsersInfoGetOK, error)

	V1UsersList(params *V1UsersListParams) (*V1UsersListOK, error)

	V1UsersMetadata(params *V1UsersMetadataParams) (*V1UsersMetadataOK, error)

	V1UsersProjectRoles(params *V1UsersProjectRolesParams) (*V1UsersProjectRolesOK, error)

	V1UsersProjectRolesPut(params *V1UsersProjectRolesPutParams) (*V1UsersProjectRolesPutNoContent, error)

	V1UsersResourceRolesUIDUpdate(params *V1UsersResourceRolesUIDUpdateParams) (*V1UsersResourceRolesUIDUpdateNoContent, error)

	V1UsersStatusLoginMode(params *V1UsersStatusLoginModeParams) (*V1UsersStatusLoginModeNoContent, error)

	V1UsersSummaryGet(params *V1UsersSummaryGetParams) (*V1UsersSummaryGetOK, error)

	V1UsersSystemFeature(params *V1UsersSystemFeatureParams) (*V1UsersSystemFeatureOK, error)

	V1UsersSystemMacrosCreate(params *V1UsersSystemMacrosCreateParams) (*V1UsersSystemMacrosCreateNoContent, error)

	V1UsersSystemMacrosDeleteByMacroName(params *V1UsersSystemMacrosDeleteByMacroNameParams) (*V1UsersSystemMacrosDeleteByMacroNameNoContent, error)

	V1UsersSystemMacrosList(params *V1UsersSystemMacrosListParams) (*V1UsersSystemMacrosListOK, error)

	V1UsersSystemMacrosUpdate(params *V1UsersSystemMacrosUpdateParams) (*V1UsersSystemMacrosUpdateNoContent, error)

	V1UsersSystemMacrosUpdateByMacroName(params *V1UsersSystemMacrosUpdateByMacroNameParams) (*V1UsersSystemMacrosUpdateByMacroNameNoContent, error)

	V1UsersUIDDelete(params *V1UsersUIDDeleteParams) (*V1UsersUIDDeleteNoContent, error)

	V1UsersUIDGet(params *V1UsersUIDGetParams) (*V1UsersUIDGetOK, error)

	V1UsersUIDPasswordChange(params *V1UsersUIDPasswordChangeParams) (*V1UsersUIDPasswordChangeNoContent, error)

	V1UsersUIDPasswordReset(params *V1UsersUIDPasswordResetParams) (*V1UsersUIDPasswordResetNoContent, error)

	V1UsersUIDPatch(params *V1UsersUIDPatchParams) (*V1UsersUIDPatchNoContent, error)

	V1UsersUIDResourceRoles(params *V1UsersUIDResourceRolesParams) (*V1UsersUIDResourceRolesOK, error)

	V1UsersUIDResourceRolesCreate(params *V1UsersUIDResourceRolesCreateParams) (*V1UsersUIDResourceRolesCreateNoContent, error)

	V1UsersUIDResourceRolesUIDDelete(params *V1UsersUIDResourceRolesUIDDeleteParams) (*V1UsersUIDResourceRolesUIDDeleteNoContent, error)

	V1UsersUIDRoles(params *V1UsersUIDRolesParams) (*V1UsersUIDRolesOK, error)

	V1UsersUIDRolesUpdate(params *V1UsersUIDRolesUpdateParams) (*V1UsersUIDRolesUpdateNoContent, error)

	V1UsersUIDUpdate(params *V1UsersUIDUpdateParams) (*V1UsersUIDUpdateNoContent, error)

	V1UsersWorkspaceGetRoles(params *V1UsersWorkspaceGetRolesParams) (*V1UsersWorkspaceGetRolesOK, error)

	V1UsersWorkspaceRolesPut(params *V1UsersWorkspaceRolesPutParams) (*V1UsersWorkspaceRolesPutNoContent, error)

	V1VMSnapshotCreate(params *V1VMSnapshotCreateParams) (*V1VMSnapshotCreateOK, error)

	V1VMSnapshotDelete(params *V1VMSnapshotDeleteParams) (*V1VMSnapshotDeleteNoContent, error)

	V1VMSnapshotGet(params *V1VMSnapshotGetParams) (*V1VMSnapshotGetOK, error)

	V1VMSnapshotUpdate(params *V1VMSnapshotUpdateParams) (*V1VMSnapshotUpdateOK, error)

	V1VirtualClustersPacksValues(params *V1VirtualClustersPacksValuesParams) (*V1VirtualClustersPacksValuesOK, error)

	V1VsphereAccountsUIDClusterRes(params *V1VsphereAccountsUIDClusterResParams) (*V1VsphereAccountsUIDClusterResOK, error)

	V1VsphereAccountsUIDDatacenters(params *V1VsphereAccountsUIDDatacentersParams) (*V1VsphereAccountsUIDDatacentersOK, error)

	V1VsphereDNSMappingCreate(params *V1VsphereDNSMappingCreateParams) (*V1VsphereDNSMappingCreateCreated, error)

	V1VsphereDNSMappingDelete(params *V1VsphereDNSMappingDeleteParams) (*V1VsphereDNSMappingDeleteNoContent, error)

	V1VsphereDNSMappingGet(params *V1VsphereDNSMappingGetParams) (*V1VsphereDNSMappingGetOK, error)

	V1VsphereDNSMappingUpdate(params *V1VsphereDNSMappingUpdateParams) (*V1VsphereDNSMappingUpdateNoContent, error)

	V1VsphereDNSMappingsGet(params *V1VsphereDNSMappingsGetParams) (*V1VsphereDNSMappingsGetOK, error)

	V1VsphereMappingGet(params *V1VsphereMappingGetParams) (*V1VsphereMappingGetOK, error)

	V1WorkspaceOpsBackupCreate(params *V1WorkspaceOpsBackupCreateParams) (*V1WorkspaceOpsBackupCreateCreated, error)

	V1WorkspaceOpsBackupDelete(params *V1WorkspaceOpsBackupDeleteParams) (*V1WorkspaceOpsBackupDeleteNoContent, error)

	V1WorkspaceOpsBackupGet(params *V1WorkspaceOpsBackupGetParams) (*V1WorkspaceOpsBackupGetOK, error)

	V1WorkspaceOpsBackupOnDemandCreate(params *V1WorkspaceOpsBackupOnDemandCreateParams) (*V1WorkspaceOpsBackupOnDemandCreateCreated, error)

	V1WorkspaceOpsBackupUpdate(params *V1WorkspaceOpsBackupUpdateParams) (*V1WorkspaceOpsBackupUpdateNoContent, error)

	V1WorkspaceOpsRestoreGet(params *V1WorkspaceOpsRestoreGetParams) (*V1WorkspaceOpsRestoreGetOK, error)

	V1WorkspaceOpsRestoreOnDemandCreate(params *V1WorkspaceOpsRestoreOnDemandCreateParams) (*V1WorkspaceOpsRestoreOnDemandCreateCreated, error)

	V1WorkspacesClusterRbacCreate(params *V1WorkspacesClusterRbacCreateParams) (*V1WorkspacesClusterRbacCreateCreated, error)

	V1WorkspacesCreate(params *V1WorkspacesCreateParams) (*V1WorkspacesCreateCreated, error)

	V1WorkspacesUIDClusterNamespacesUpdate(params *V1WorkspacesUIDClusterNamespacesUpdateParams) (*V1WorkspacesUIDClusterNamespacesUpdateNoContent, error)

	V1WorkspacesUIDClusterRbacDelete(params *V1WorkspacesUIDClusterRbacDeleteParams) (*V1WorkspacesUIDClusterRbacDeleteNoContent, error)

	V1WorkspacesUIDClusterRbacUpdate(params *V1WorkspacesUIDClusterRbacUpdateParams) (*V1WorkspacesUIDClusterRbacUpdateNoContent, error)

	V1WorkspacesUIDDelete(params *V1WorkspacesUIDDeleteParams) (*V1WorkspacesUIDDeleteNoContent, error)

	V1WorkspacesUIDGet(params *V1WorkspacesUIDGetParams) (*V1WorkspacesUIDGetOK, error)

	V1WorkspacesUIDMetaUpdate(params *V1WorkspacesUIDMetaUpdateParams) (*V1WorkspacesUIDMetaUpdateNoContent, error)

	V1WorkspacesValidateName(params *V1WorkspacesValidateNameParams) (*V1WorkspacesValidateNameNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
V1AuthOrgs returns a list of user s organizations

Returns a list of user's organizations details and login methods
*/
func (a *Client) V1AuthOrgs(params *V1AuthOrgsParams) (*V1AuthOrgsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AuthOrgsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AuthOrgs",
		Method:             "GET",
		PathPattern:        "/v1/auth/orgs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AuthOrgsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AuthOrgsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AuthOrgs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AuthSsoProviders returns a list of supported sso auth providers

Returns a list of supported sso auth providers
*/
func (a *Client) V1AuthSsoProviders(params *V1AuthSsoProvidersParams) (*V1AuthSsoProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AuthSsoProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AuthSsoProviders",
		Method:             "GET",
		PathPattern:        "/v1/auth/sso/providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AuthSsoProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AuthSsoProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AuthSsoProviders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AuthUserOrgForgot returns no content sends the user organization information via email

Returns No Content. Sends the user organization(s) information via email
*/
func (a *Client) V1AuthUserOrgForgot(params *V1AuthUserOrgForgotParams) (*V1AuthUserOrgForgotNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AuthUserOrgForgotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AuthUserOrgForgot",
		Method:             "GET",
		PathPattern:        "/v1/auth/user/org/forgot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AuthUserOrgForgotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AuthUserOrgForgotNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AuthUserOrgForgot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsAccountSecretCredentials retrieves the aws secret credentials
*/
func (a *Client) V1AwsAccountSecretCredentials(params *V1AwsAccountSecretCredentialsParams) (*V1AwsAccountSecretCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsAccountSecretCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsAccountSecretCredentials",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/account/secret/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsAccountSecretCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsAccountSecretCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsAccountSecretCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsAccountStsGet retrieves a w s external id and account id
*/
func (a *Client) V1AwsAccountStsGet(params *V1AwsAccountStsGetParams) (*V1AwsAccountStsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsAccountStsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsAccountStsGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/account/sts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsAccountStsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsAccountStsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsAccountStsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsAccountValidate validates the specified a w s account credentials
*/
func (a *Client) V1AwsAccountValidate(params *V1AwsAccountValidateParams) (*V1AwsAccountValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsAccountValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsAccountValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/account/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsAccountValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsAccountValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsAccountValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsAmiTypes retrieves a list of a w s a m i types
*/
func (a *Client) V1AwsAmiTypes(params *V1AwsAmiTypesParams) (*V1AwsAmiTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsAmiTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsAmiTypes",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/amiTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsAmiTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsAmiTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsAmiTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsCloudConfigsEdgeNativeUIDMachinePoolCreate creates an hybrid a w s cloud config s edge native machine pool
*/
func (a *Client) V1AwsCloudConfigsEdgeNativeUIDMachinePoolCreate(params *V1AwsCloudConfigsEdgeNativeUIDMachinePoolCreateParams) (*V1AwsCloudConfigsEdgeNativeUIDMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsCloudConfigsEdgeNativeUIDMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsCloudConfigsEdgeNativeUidMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/edge-native/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsCloudConfigsEdgeNativeUIDMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsCloudConfigsEdgeNativeUIDMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsCloudConfigsEdgeNativeUidMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsClusterNameValidate checks if aws cluster name is valid

Returns no contents if aws cluster name is valid else error.
*/
func (a *Client) V1AwsClusterNameValidate(params *V1AwsClusterNameValidateParams) (*V1AwsClusterNameValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsClusterNameValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsClusterNameValidate",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/regions/{region}/eksClusters/name/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsClusterNameValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsClusterNameValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsClusterNameValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsCopyImageFromDefaultRegion copies the specified image from one region to another region
*/
func (a *Client) V1AwsCopyImageFromDefaultRegion(params *V1AwsCopyImageFromDefaultRegionParams) (*V1AwsCopyImageFromDefaultRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsCopyImageFromDefaultRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsCopyImageFromDefaultRegion",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/regions/{region}/copydefaultimages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsCopyImageFromDefaultRegionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsCopyImageFromDefaultRegionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsCopyImageFromDefaultRegion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsFindImage returns a w s image for the specified a m i name
*/
func (a *Client) V1AwsFindImage(params *V1AwsFindImageParams) (*V1AwsFindImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsFindImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsFindImage",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/regions/{region}/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsFindImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsFindImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsFindImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsIamPolicies retrieves a list of a w s policies for the specified account
*/
func (a *Client) V1AwsIamPolicies(params *V1AwsIamPoliciesParams) (*V1AwsIamPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsIamPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsIamPolicies",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsIamPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsIamPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsIamPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsInstanceTypes retrieves a list of a w s instance types
*/
func (a *Client) V1AwsInstanceTypes(params *V1AwsInstanceTypesParams) (*V1AwsInstanceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsInstanceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsInstanceTypes",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/regions/{region}/instancetypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsInstanceTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsInstanceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsInstanceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsKeyPairValidate validates the specified a w s keypair
*/
func (a *Client) V1AwsKeyPairValidate(params *V1AwsKeyPairValidateParams) (*V1AwsKeyPairValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsKeyPairValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsKeyPairValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/regions/{region}/keypairs/{keypair}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsKeyPairValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsKeyPairValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsKeyPairValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsKeyPairs retrieves a list of a w s keypairs
*/
func (a *Client) V1AwsKeyPairs(params *V1AwsKeyPairsParams) (*V1AwsKeyPairsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsKeyPairsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsKeyPairs",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/regions/{region}/keypairs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsKeyPairsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsKeyPairsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsKeyPairs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsKmsKeyGet gets a w s k m s key by Id
*/
func (a *Client) V1AwsKmsKeyGet(params *V1AwsKmsKeyGetParams) (*V1AwsKmsKeyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsKmsKeyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsKmsKeyGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/regions/{region}/kms/{keyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsKmsKeyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsKmsKeyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsKmsKeyGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsKmsKeyValidate validates an aws k m s key for the specified account
*/
func (a *Client) V1AwsKmsKeyValidate(params *V1AwsKmsKeyValidateParams) (*V1AwsKmsKeyValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsKmsKeyValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsKmsKeyValidate",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/regions/{region}/kmskeys/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsKmsKeyValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsKmsKeyValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsKmsKeyValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsKmsKeys retrieves a list of a w s k m s keys for the specified account
*/
func (a *Client) V1AwsKmsKeys(params *V1AwsKmsKeysParams) (*V1AwsKmsKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsKmsKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsKmsKeys",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/regions/{region}/kmskeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsKmsKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsKmsKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsKmsKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsPolicyArnsValidate validates the aws policy arns validate
*/
func (a *Client) V1AwsPolicyArnsValidate(params *V1AwsPolicyArnsValidateParams) (*V1AwsPolicyArnsValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsPolicyArnsValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsPolicyArnsValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/policyArns/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsPolicyArnsValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsPolicyArnsValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsPolicyArnsValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsPropertiesValidate validates a w s properties
*/
func (a *Client) V1AwsPropertiesValidate(params *V1AwsPropertiesValidateParams) (*V1AwsPropertiesValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsPropertiesValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsPropertiesValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/properties/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsPropertiesValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsPropertiesValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsPropertiesValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsRegions retrieves a list of a w s regions for the specified account
*/
func (a *Client) V1AwsRegions(params *V1AwsRegionsParams) (*V1AwsRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsRegions",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsS3Validate validates the a w s s3 bucket
*/
func (a *Client) V1AwsS3Validate(params *V1AwsS3ValidateParams) (*V1AwsS3ValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsS3ValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsS3Validate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/s3/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsS3ValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsS3ValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsS3Validate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsSecurityGroups retrieves a list of a w s security groups for the specified account
*/
func (a *Client) V1AwsSecurityGroups(params *V1AwsSecurityGroupsParams) (*V1AwsSecurityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsSecurityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsSecurityGroups",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/securitygroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsSecurityGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsSecurityGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsSecurityGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsStorageTypes retrieves a list of a w s storage types
*/
func (a *Client) V1AwsStorageTypes(params *V1AwsStorageTypesParams) (*V1AwsStorageTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsStorageTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsStorageTypes",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/regions/{region}/storagetypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsStorageTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsStorageTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsStorageTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsVolumeSizeGet gets a w s volume size

Get AWS Volume Size
*/
func (a *Client) V1AwsVolumeSizeGet(params *V1AwsVolumeSizeGetParams) (*V1AwsVolumeSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsVolumeSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsVolumeSizeGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/imageIds/{imageId}/volumeSize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsVolumeSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsVolumeSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsVolumeSizeGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsVolumeTypesGet gets all a w s volume types

List all AWS Volume Types
*/
func (a *Client) V1AwsVolumeTypesGet(params *V1AwsVolumeTypesGetParams) (*V1AwsVolumeTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsVolumeTypesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsVolumeTypesGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/volumeTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsVolumeTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsVolumeTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsVolumeTypesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsVpcs retrieves a list of v p cs for the specified account
*/
func (a *Client) V1AwsVpcs(params *V1AwsVpcsParams) (*V1AwsVpcsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsVpcsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsVpcs",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/regions/{region}/vpcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsVpcsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsVpcsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsVpcs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsZones retrieves a list of a w s availability zones for the specified region
*/
func (a *Client) V1AwsZones(params *V1AwsZonesParams) (*V1AwsZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AwsZones",
		Method:             "GET",
		PathPattern:        "/v1/clouds/aws/regions/{region}/availabilityzones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsZonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AwsZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureAccountValidate checks if azure account is valid

Returns no contents if account is valid else error.
*/
func (a *Client) V1AzureAccountValidate(params *V1AzureAccountValidateParams) (*V1AzureAccountValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureAccountValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureAccountValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/azure/account/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureAccountValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureAccountValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureAccountValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureClusterNameValidate checks if azure cluster name is valid

Returns no contents if Azure cluster name is valid else error.
*/
func (a *Client) V1AzureClusterNameValidate(params *V1AzureClusterNameValidateParams) (*V1AzureClusterNameValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureClusterNameValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureClusterNameValidate",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/aksClusters/name/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureClusterNameValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureClusterNameValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureClusterNameValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureGroups retrieves a list of azure groups
*/
func (a *Client) V1AzureGroups(params *V1AzureGroupsParams) (*V1AzureGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureGroups",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureInstanceTypes retrieves a list of azure instance types
*/
func (a *Client) V1AzureInstanceTypes(params *V1AzureInstanceTypesParams) (*V1AzureInstanceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureInstanceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureInstanceTypes",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/regions/{region}/instancetypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureInstanceTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureInstanceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureInstanceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzurePrivateDNSZones gets azure private DNS zones for the given resource group

Returns Azure private DNS zones
*/
func (a *Client) V1AzurePrivateDNSZones(params *V1AzurePrivateDNSZonesParams) (*V1AzurePrivateDNSZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzurePrivateDNSZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzurePrivateDnsZones",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/resourceGroups/{resourceGroup}/privateDnsZones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzurePrivateDNSZonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzurePrivateDNSZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzurePrivateDnsZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureRegions retrieves a list of azure regions
*/
func (a *Client) V1AzureRegions(params *V1AzureRegionsParams) (*V1AzureRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureRegions",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureResourceGroupList retrieves a list of azure resource group for the specified account
*/
func (a *Client) V1AzureResourceGroupList(params *V1AzureResourceGroupListParams) (*V1AzureResourceGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureResourceGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureResourceGroupList",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/resourceGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureResourceGroupListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureResourceGroupListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureResourceGroupList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureStorageAccountTypes gets azure storage account types

Returns Azure storage account types.
*/
func (a *Client) V1AzureStorageAccountTypes(params *V1AzureStorageAccountTypesParams) (*V1AzureStorageAccountTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureStorageAccountTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureStorageAccountTypes",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/storageaccounttypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureStorageAccountTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureStorageAccountTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureStorageAccountTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureStorageAccounts gets azure storage accounts

Returns Azure storage accounts.
*/
func (a *Client) V1AzureStorageAccounts(params *V1AzureStorageAccountsParams) (*V1AzureStorageAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureStorageAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureStorageAccounts",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/resourceGroups/{resourceGroup}/storageAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureStorageAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureStorageAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureStorageAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureStorageContainers gets azure storage containers

Returns Azure storage containers for the given account.
*/
func (a *Client) V1AzureStorageContainers(params *V1AzureStorageContainersParams) (*V1AzureStorageContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureStorageContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureStorageContainers",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/resourceGroups/{resourceGroup}/storageAccounts/{storageAccountName}/containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureStorageContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureStorageContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureStorageContainers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureStorageTypes retrieves a list of azure storage types
*/
func (a *Client) V1AzureStorageTypes(params *V1AzureStorageTypesParams) (*V1AzureStorageTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureStorageTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureStorageTypes",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/regions/{region}/storagetypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureStorageTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureStorageTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureStorageTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureSubscriptionList retrieves a list of azure subscription list for the specified account

Returns list of Azure subscription list.
*/
func (a *Client) V1AzureSubscriptionList(params *V1AzureSubscriptionListParams) (*V1AzureSubscriptionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureSubscriptionListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureSubscriptionList",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureSubscriptionListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureSubscriptionListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureSubscriptionList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureVhdURL returns the azure vhd url for the specified vhd location
*/
func (a *Client) V1AzureVhdURL(params *V1AzureVhdURLParams) (*V1AzureVhdURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureVhdURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureVhdUrl",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/vhds/{vhd}/url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureVhdURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureVhdURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureVhdUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureVirtualNetworkList retrieves a list of azure virtual network list for the sepcified account
*/
func (a *Client) V1AzureVirtualNetworkList(params *V1AzureVirtualNetworkListParams) (*V1AzureVirtualNetworkListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureVirtualNetworkListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureVirtualNetworkList",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureVirtualNetworkListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureVirtualNetworkListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureVirtualNetworkList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AzureZones retrieves a list of azure zones for the specified region
*/
func (a *Client) V1AzureZones(params *V1AzureZonesParams) (*V1AzureZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AzureZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1AzureZones",
		Method:             "GET",
		PathPattern:        "/v1/clouds/azure/regions/{region}/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AzureZonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AzureZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1AzureZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudComputeRate returns the cloud compute rate
*/
func (a *Client) V1CloudComputeRate(params *V1CloudComputeRateParams) (*V1CloudComputeRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudComputeRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CloudComputeRate",
		Method:             "GET",
		PathPattern:        "/v1/clouds/{cloud}/compute/{type}/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudComputeRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudComputeRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CloudComputeRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudStorageRate returns the cloud storage rate
*/
func (a *Client) V1CloudStorageRate(params *V1CloudStorageRateParams) (*V1CloudStorageRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudStorageRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CloudStorageRate",
		Method:             "GET",
		PathPattern:        "/v1/clouds/{cloud}/storage/{type}/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudStorageRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudStorageRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CloudStorageRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudsAwsCloudWatchValidate validates aws cloud watch credentials

Validates aws cloud watch credentials
*/
func (a *Client) V1CloudsAwsCloudWatchValidate(params *V1CloudsAwsCloudWatchValidateParams) (*V1CloudsAwsCloudWatchValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudsAwsCloudWatchValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CloudsAwsCloudWatchValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/cloudwatch/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudsAwsCloudWatchValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudsAwsCloudWatchValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CloudsAwsCloudWatchValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureBackupLocationUIDChange changes cluster backup location
*/
func (a *Client) V1ClusterFeatureBackupLocationUIDChange(params *V1ClusterFeatureBackupLocationUIDChangeParams) (*V1ClusterFeatureBackupLocationUIDChangeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureBackupLocationUIDChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1ClusterFeatureBackupLocationUidChange",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/features/backup/locations/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureBackupLocationUIDChangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureBackupLocationUIDChangeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ClusterFeatureBackupLocationUidChange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureBackupLocationUIDGet returns the cluster object references based on location Uid
*/
func (a *Client) V1ClusterFeatureBackupLocationUIDGet(params *V1ClusterFeatureBackupLocationUIDGetParams) (*V1ClusterFeatureBackupLocationUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureBackupLocationUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1ClusterFeatureBackupLocationUidGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/features/backup/locations/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureBackupLocationUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureBackupLocationUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ClusterFeatureBackupLocationUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDExport exports the specified cluster profile
*/
func (a *Client) V1ClusterProfilesUIDExport(params *V1ClusterProfilesUIDExportParams, writer io.Writer) (*V1ClusterProfilesUIDExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1ClusterProfilesUidExport",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/export",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDExportReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ClusterProfilesUidExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDExportTerraform downloads the specified cluster profile
*/
func (a *Client) V1ClusterProfilesUIDExportTerraform(params *V1ClusterProfilesUIDExportTerraformParams, writer io.Writer) (*V1ClusterProfilesUIDExportTerraformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDExportTerraformParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1ClusterProfilesUidExportTerraform",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/export/terraform",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDExportTerraformReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDExportTerraformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ClusterProfilesUidExportTerraform: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksNameGet returns the specified cluster profile pack
*/
func (a *Client) V1ClusterProfilesUIDPacksNameGet(params *V1ClusterProfilesUIDPacksNameGetParams) (*V1ClusterProfilesUIDPacksNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1ClusterProfilesUidPacksNameGet",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/{packName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ClusterProfilesUidPacksNameGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDVariablesDelete deletes the specified cluster profile variables
*/
func (a *Client) V1ClusterProfilesUIDVariablesDelete(params *V1ClusterProfilesUIDVariablesDeleteParams) (*V1ClusterProfilesUIDVariablesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDVariablesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1ClusterProfilesUidVariablesDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clusterprofiles/{uid}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDVariablesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDVariablesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ClusterProfilesUidVariablesDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDVariablesGet retrieves a list of variables defined for the cluster profile
*/
func (a *Client) V1ClusterProfilesUIDVariablesGet(params *V1ClusterProfilesUIDVariablesGetParams) (*V1ClusterProfilesUIDVariablesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDVariablesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1ClusterProfilesUidVariablesGet",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDVariablesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDVariablesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ClusterProfilesUidVariablesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDVariablesPatch updates specific variables defined for a cluster profile
*/
func (a *Client) V1ClusterProfilesUIDVariablesPatch(params *V1ClusterProfilesUIDVariablesPatchParams) (*V1ClusterProfilesUIDVariablesPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDVariablesPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1ClusterProfilesUidVariablesPatch",
		Method:             "PATCH",
		PathPattern:        "/v1/clusterprofiles/{uid}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDVariablesPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDVariablesPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ClusterProfilesUidVariablesPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDVariablesPut updates the variables defined for a cluster profile
*/
func (a *Client) V1ClusterProfilesUIDVariablesPut(params *V1ClusterProfilesUIDVariablesPutParams) (*V1ClusterProfilesUIDVariablesPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDVariablesPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1ClusterProfilesUidVariablesPut",
		Method:             "PUT",
		PathPattern:        "/v1/clusterprofiles/{uid}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDVariablesPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDVariablesPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ClusterProfilesUidVariablesPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ControlPlaneHealthCheckTimeoutUpdate updates the specified cluster control plane health check timeout
*/
func (a *Client) V1ControlPlaneHealthCheckTimeoutUpdate(params *V1ControlPlaneHealthCheckTimeoutUpdateParams) (*V1ControlPlaneHealthCheckTimeoutUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ControlPlaneHealthCheckTimeoutUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1ControlPlaneHealthCheckTimeoutUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/clusterConfig/controlPlaneHealthCheckTimeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ControlPlaneHealthCheckTimeoutUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ControlPlaneHealthCheckTimeoutUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ControlPlaneHealthCheckTimeoutUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeBootstrapDelete deletes the custom cloud type bootstrap
*/
func (a *Client) V1CustomCloudTypeBootstrapDelete(params *V1CustomCloudTypeBootstrapDeleteParams) (*V1CustomCloudTypeBootstrapDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeBootstrapDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeBootstrapDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/bootstrap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeBootstrapDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeBootstrapDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeBootstrapDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeBootstrapGet returns the custom cloud type bootstrap
*/
func (a *Client) V1CustomCloudTypeBootstrapGet(params *V1CustomCloudTypeBootstrapGetParams) (*V1CustomCloudTypeBootstrapGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeBootstrapGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeBootstrapGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/bootstrap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeBootstrapGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeBootstrapGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeBootstrapGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeBootstrapUpdate updates the custom cloud type bootstrap
*/
func (a *Client) V1CustomCloudTypeBootstrapUpdate(params *V1CustomCloudTypeBootstrapUpdateParams) (*V1CustomCloudTypeBootstrapUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeBootstrapUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeBootstrapUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/bootstrap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeBootstrapUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeBootstrapUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeBootstrapUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeCloudAccountKeysGet returns valid keys for the cloud account used for custom cloud type
*/
func (a *Client) V1CustomCloudTypeCloudAccountKeysGet(params *V1CustomCloudTypeCloudAccountKeysGetParams) (*V1CustomCloudTypeCloudAccountKeysGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeCloudAccountKeysGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeCloudAccountKeysGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/cloudAccountKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeCloudAccountKeysGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeCloudAccountKeysGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeCloudAccountKeysGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeCloudAccountKeysUpdate updates the custom cloud type cloud account keys
*/
func (a *Client) V1CustomCloudTypeCloudAccountKeysUpdate(params *V1CustomCloudTypeCloudAccountKeysUpdateParams) (*V1CustomCloudTypeCloudAccountKeysUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeCloudAccountKeysUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeCloudAccountKeysUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/cloudAccountKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeCloudAccountKeysUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeCloudAccountKeysUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeCloudAccountKeysUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeCloudProviderDelete deletes the custom cloud type cloud provider
*/
func (a *Client) V1CustomCloudTypeCloudProviderDelete(params *V1CustomCloudTypeCloudProviderDeleteParams) (*V1CustomCloudTypeCloudProviderDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeCloudProviderDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeCloudProviderDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/cloudProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeCloudProviderDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeCloudProviderDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeCloudProviderDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeCloudProviderGet returns the custom cloud type cloud provider
*/
func (a *Client) V1CustomCloudTypeCloudProviderGet(params *V1CustomCloudTypeCloudProviderGetParams) (*V1CustomCloudTypeCloudProviderGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeCloudProviderGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeCloudProviderGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/cloudProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeCloudProviderGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeCloudProviderGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeCloudProviderGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeCloudProviderUpdate updates the custom cloud type cloud provider
*/
func (a *Client) V1CustomCloudTypeCloudProviderUpdate(params *V1CustomCloudTypeCloudProviderUpdateParams) (*V1CustomCloudTypeCloudProviderUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeCloudProviderUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeCloudProviderUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/cloudProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeCloudProviderUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeCloudProviderUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeCloudProviderUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeClusterTemplateDelete deletes the custom cloud type cluster template
*/
func (a *Client) V1CustomCloudTypeClusterTemplateDelete(params *V1CustomCloudTypeClusterTemplateDeleteParams) (*V1CustomCloudTypeClusterTemplateDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeClusterTemplateDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeClusterTemplateDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/templates/clusterTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeClusterTemplateDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeClusterTemplateDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeClusterTemplateDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeClusterTemplateGet returns the custom cloud type cluster template
*/
func (a *Client) V1CustomCloudTypeClusterTemplateGet(params *V1CustomCloudTypeClusterTemplateGetParams) (*V1CustomCloudTypeClusterTemplateGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeClusterTemplateGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeClusterTemplateGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/templates/clusterTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeClusterTemplateGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeClusterTemplateGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeClusterTemplateGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeClusterTemplateUpdate updates the custom cloud type cluster template
*/
func (a *Client) V1CustomCloudTypeClusterTemplateUpdate(params *V1CustomCloudTypeClusterTemplateUpdateParams) (*V1CustomCloudTypeClusterTemplateUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeClusterTemplateUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeClusterTemplateUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/templates/clusterTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeClusterTemplateUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeClusterTemplateUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeClusterTemplateUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeControlPlaneDelete deletes the custom cloud type control plane
*/
func (a *Client) V1CustomCloudTypeControlPlaneDelete(params *V1CustomCloudTypeControlPlaneDeleteParams) (*V1CustomCloudTypeControlPlaneDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeControlPlaneDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeControlPlaneDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/controlPlane",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeControlPlaneDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeControlPlaneDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeControlPlaneDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeControlPlaneGet returns the custom cloud type control plane
*/
func (a *Client) V1CustomCloudTypeControlPlaneGet(params *V1CustomCloudTypeControlPlaneGetParams) (*V1CustomCloudTypeControlPlaneGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeControlPlaneGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeControlPlaneGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/controlPlane",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeControlPlaneGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeControlPlaneGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeControlPlaneGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeControlPlanePoolTemplateDelete deletes the custom cloud type control plane pool template
*/
func (a *Client) V1CustomCloudTypeControlPlanePoolTemplateDelete(params *V1CustomCloudTypeControlPlanePoolTemplateDeleteParams) (*V1CustomCloudTypeControlPlanePoolTemplateDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeControlPlanePoolTemplateDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeControlPlanePoolTemplateDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/templates/controlPlanePoolTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeControlPlanePoolTemplateDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeControlPlanePoolTemplateDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeControlPlanePoolTemplateDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeControlPlanePoolTemplateGet returns the custom cloud type control plane pool template
*/
func (a *Client) V1CustomCloudTypeControlPlanePoolTemplateGet(params *V1CustomCloudTypeControlPlanePoolTemplateGetParams) (*V1CustomCloudTypeControlPlanePoolTemplateGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeControlPlanePoolTemplateGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeControlPlanePoolTemplateGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/templates/controlPlanePoolTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeControlPlanePoolTemplateGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeControlPlanePoolTemplateGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeControlPlanePoolTemplateGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeControlPlanePoolTemplateUpdate updates the custom cloud type control plane pool template
*/
func (a *Client) V1CustomCloudTypeControlPlanePoolTemplateUpdate(params *V1CustomCloudTypeControlPlanePoolTemplateUpdateParams) (*V1CustomCloudTypeControlPlanePoolTemplateUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeControlPlanePoolTemplateUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeControlPlanePoolTemplateUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/templates/controlPlanePoolTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeControlPlanePoolTemplateUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeControlPlanePoolTemplateUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeControlPlanePoolTemplateUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeControlPlaneUpdate updates the custom cloud type control plane
*/
func (a *Client) V1CustomCloudTypeControlPlaneUpdate(params *V1CustomCloudTypeControlPlaneUpdateParams) (*V1CustomCloudTypeControlPlaneUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeControlPlaneUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeControlPlaneUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/controlPlane",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeControlPlaneUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeControlPlaneUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeControlPlaneUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeCoreDelete deletes the custom cloud type core
*/
func (a *Client) V1CustomCloudTypeCoreDelete(params *V1CustomCloudTypeCoreDeleteParams) (*V1CustomCloudTypeCoreDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeCoreDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeCoreDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/core",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeCoreDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeCoreDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeCoreDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeCoreGet returns the custom cloud type core
*/
func (a *Client) V1CustomCloudTypeCoreGet(params *V1CustomCloudTypeCoreGetParams) (*V1CustomCloudTypeCoreGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeCoreGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeCoreGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/core",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeCoreGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeCoreGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeCoreGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeCoreUpdate updates the custom cloud type core
*/
func (a *Client) V1CustomCloudTypeCoreUpdate(params *V1CustomCloudTypeCoreUpdateParams) (*V1CustomCloudTypeCoreUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeCoreUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeCoreUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/core",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeCoreUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeCoreUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeCoreUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeLogoGet returns the custom cloud type logo
*/
func (a *Client) V1CustomCloudTypeLogoGet(params *V1CustomCloudTypeLogoGetParams, writer io.Writer) (*V1CustomCloudTypeLogoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeLogoGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeLogoGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/logo",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeLogoGetReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeLogoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeLogoGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeLogoUpdate updates the custom cloud type logo
*/
func (a *Client) V1CustomCloudTypeLogoUpdate(params *V1CustomCloudTypeLogoUpdateParams) (*V1CustomCloudTypeLogoUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeLogoUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeLogoUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeLogoUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeLogoUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeLogoUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeMetaGet returns the custom cloud type meta
*/
func (a *Client) V1CustomCloudTypeMetaGet(params *V1CustomCloudTypeMetaGetParams) (*V1CustomCloudTypeMetaGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeMetaGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeMetaGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeMetaGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeMetaGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeMetaGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeMetaUpdate updates the custom cloud type meta
*/
func (a *Client) V1CustomCloudTypeMetaUpdate(params *V1CustomCloudTypeMetaUpdateParams) (*V1CustomCloudTypeMetaUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeMetaUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeMetaUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeMetaUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeMetaUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeMetaUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeRegister registers the custom cloud type
*/
func (a *Client) V1CustomCloudTypeRegister(params *V1CustomCloudTypeRegisterParams) (*V1CustomCloudTypeRegisterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeRegister",
		Method:             "POST",
		PathPattern:        "/v1/clouds/cloudTypes/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeRegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeRegisterCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeRegister: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeWorkerPoolTemplateDelete deletes the custom cloud type worker pool template
*/
func (a *Client) V1CustomCloudTypeWorkerPoolTemplateDelete(params *V1CustomCloudTypeWorkerPoolTemplateDeleteParams) (*V1CustomCloudTypeWorkerPoolTemplateDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeWorkerPoolTemplateDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeWorkerPoolTemplateDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/templates/workerPoolTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeWorkerPoolTemplateDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeWorkerPoolTemplateDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeWorkerPoolTemplateDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeWorkerPoolTemplateGet returns the custom cloud type worker pool template
*/
func (a *Client) V1CustomCloudTypeWorkerPoolTemplateGet(params *V1CustomCloudTypeWorkerPoolTemplateGetParams) (*V1CustomCloudTypeWorkerPoolTemplateGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeWorkerPoolTemplateGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeWorkerPoolTemplateGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/templates/workerPoolTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeWorkerPoolTemplateGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeWorkerPoolTemplateGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeWorkerPoolTemplateGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypeWorkerPoolTemplateUpdate updates the custom cloud type worker pool template
*/
func (a *Client) V1CustomCloudTypeWorkerPoolTemplateUpdate(params *V1CustomCloudTypeWorkerPoolTemplateUpdateParams) (*V1CustomCloudTypeWorkerPoolTemplateUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypeWorkerPoolTemplateUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypeWorkerPoolTemplateUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}/content/templates/workerPoolTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypeWorkerPoolTemplateUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypeWorkerPoolTemplateUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypeWorkerPoolTemplateUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypesDelete deletes the custom cloud type
*/
func (a *Client) V1CustomCloudTypesDelete(params *V1CustomCloudTypesDeleteParams) (*V1CustomCloudTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypesDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clouds/cloudTypes/{cloudType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypesDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CustomCloudTypesGet returns the custom cloud types
*/
func (a *Client) V1CustomCloudTypesGet(params *V1CustomCloudTypesGetParams) (*V1CustomCloudTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CustomCloudTypesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1CustomCloudTypesGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/cloudTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CustomCloudTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CustomCloudTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1CustomCloudTypesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardVMEnabledClustersList retrieves a list of virtual machine enabled clusters
*/
func (a *Client) V1DashboardVMEnabledClustersList(params *V1DashboardVMEnabledClustersListParams) (*V1DashboardVMEnabledClustersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardVMEnabledClustersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1DashboardVMEnabledClustersList",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/vms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardVMEnabledClustersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardVMEnabledClustersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1DashboardVMEnabledClustersList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DataSinksCloudWatchSink syncs data to cloud watch

Sync data to cloud watch
*/
func (a *Client) V1DataSinksCloudWatchSink(params *V1DataSinksCloudWatchSinkParams) (*V1DataSinksCloudWatchSinkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DataSinksCloudWatchSinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1DataSinksCloudWatchSink",
		Method:             "POST",
		PathPattern:        "/v1/datasinks/cloudwatch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DataSinksCloudWatchSinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DataSinksCloudWatchSinkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1DataSinksCloudWatchSink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostsUIDReset resets the cluster through edge host
*/
func (a *Client) V1EdgeHostsUIDReset(params *V1EdgeHostsUIDResetParams) (*V1EdgeHostsUIDResetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostsUIDResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1EdgeHostsUidReset",
		Method:             "PUT",
		PathPattern:        "/v1/edgehosts/{uid}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostsUIDResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostsUIDResetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1EdgeHostsUidReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EksPropertiesValidate validates e k s properties
*/
func (a *Client) V1EksPropertiesValidate(params *V1EksPropertiesValidateParams) (*V1EksPropertiesValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EksPropertiesValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1EksPropertiesValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/eks/properties/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EksPropertiesValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EksPropertiesValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1EksPropertiesValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpAccountValidate validates the specified g c p account credentials
*/
func (a *Client) V1GcpAccountValidate(params *V1GcpAccountValidateParams) (*V1GcpAccountValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpAccountValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpAccountValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/gcp/account/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpAccountValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpAccountValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpAccountValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpAvailabilityZones retrieves a list of g c p zones for the specified account
*/
func (a *Client) V1GcpAvailabilityZones(params *V1GcpAvailabilityZonesParams) (*V1GcpAvailabilityZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpAvailabilityZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpAvailabilityZones",
		Method:             "GET",
		PathPattern:        "/v1/clouds/gcp/projects/{project}/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpAvailabilityZonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpAvailabilityZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpAvailabilityZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpAzValidate validates the specified g c p az
*/
func (a *Client) V1GcpAzValidate(params *V1GcpAzValidateParams) (*V1GcpAzValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpAzValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpAzValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/gcp/azs/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpAzValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpAzValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpAzValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpBucketNameValidate validates the specified g c p bucket name credentials
*/
func (a *Client) V1GcpBucketNameValidate(params *V1GcpBucketNameValidateParams) (*V1GcpBucketNameValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpBucketNameValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpBucketNameValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/gcp/bucketname/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpBucketNameValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpBucketNameValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpBucketNameValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpContainerImageValidate validates the image with tag
*/
func (a *Client) V1GcpContainerImageValidate(params *V1GcpContainerImageValidateParams) (*V1GcpContainerImageValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpContainerImageValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpContainerImageValidate",
		Method:             "GET",
		PathPattern:        "/v1/clouds/gcp/image/container/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpContainerImageValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpContainerImageValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpContainerImageValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpImageURL returns the gcp image url for the specified image location
*/
func (a *Client) V1GcpImageURL(params *V1GcpImageURLParams) (*V1GcpImageURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpImageURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpImageUrl",
		Method:             "GET",
		PathPattern:        "/v1/clouds/gcp/images/{imageName}/url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpImageURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpImageURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpImageUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpInstanceTypes retrieves a list of g c p instance types
*/
func (a *Client) V1GcpInstanceTypes(params *V1GcpInstanceTypesParams) (*V1GcpInstanceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpInstanceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpInstanceTypes",
		Method:             "GET",
		PathPattern:        "/v1/clouds/gcp/regions/{region}/instancetypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpInstanceTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpInstanceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpInstanceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpNetworks retrieves a list of g c p networks for the specified account
*/
func (a *Client) V1GcpNetworks(params *V1GcpNetworksParams) (*V1GcpNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpNetworks",
		Method:             "GET",
		PathPattern:        "/v1/clouds/gcp/projects/{project}/regions/{region}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpNetworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpProjectValidate validates the specified g c p project
*/
func (a *Client) V1GcpProjectValidate(params *V1GcpProjectValidateParams) (*V1GcpProjectValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpProjectValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpProjectValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/gcp/projects/{project}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpProjectValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpProjectValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpProjectValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpProjects retrieves a list of g c p projects for the specified account
*/
func (a *Client) V1GcpProjects(params *V1GcpProjectsParams) (*V1GcpProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpProjects",
		Method:             "GET",
		PathPattern:        "/v1/clouds/gcp/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpPropertiesValidate validates g c p properties
*/
func (a *Client) V1GcpPropertiesValidate(params *V1GcpPropertiesValidateParams) (*V1GcpPropertiesValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpPropertiesValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpPropertiesValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/gcp/properties/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpPropertiesValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpPropertiesValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpPropertiesValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpRegions retrieves a list of g c p regions
*/
func (a *Client) V1GcpRegions(params *V1GcpRegionsParams) (*V1GcpRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpRegions",
		Method:             "GET",
		PathPattern:        "/v1/clouds/gcp/projects/{project}/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpStorageTypes retrieves a list of gcp storage types
*/
func (a *Client) V1GcpStorageTypes(params *V1GcpStorageTypesParams) (*V1GcpStorageTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpStorageTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpStorageTypes",
		Method:             "GET",
		PathPattern:        "/v1/clouds/gcp/regions/{region}/storagetypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpStorageTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpStorageTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpStorageTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1GcpZones retrieves a list of g c p zones for the specified account and region
*/
func (a *Client) V1GcpZones(params *V1GcpZonesParams) (*V1GcpZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1GcpZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1GcpZones",
		Method:             "GET",
		PathPattern:        "/v1/clouds/gcp/projects/{project}/regions/{region}/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1GcpZonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1GcpZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1GcpZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1HostClusterConfigUpdate updates the specified cluster host config
*/
func (a *Client) V1HostClusterConfigUpdate(params *V1HostClusterConfigUpdateParams) (*V1HostClusterConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1HostClusterConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1HostClusterConfigUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/clusterConfig/hostCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1HostClusterConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1HostClusterConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1HostClusterConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1InvoiceUIDReportInvoicePdf downloads the specified invoice report
*/
func (a *Client) V1InvoiceUIDReportInvoicePdf(params *V1InvoiceUIDReportInvoicePdfParams, writer io.Writer) (*V1InvoiceUIDReportInvoicePdfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1InvoiceUIDReportInvoicePdfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1InvoiceUidReportInvoicePdf",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/invoice/pdf",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1InvoiceUIDReportInvoicePdfReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1InvoiceUIDReportInvoicePdfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1InvoiceUidReportInvoicePdf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1InvoiceUIDReportPdf downloads the specified monthly invoice report
*/
func (a *Client) V1InvoiceUIDReportPdf(params *V1InvoiceUIDReportPdfParams, writer io.Writer) (*V1InvoiceUIDReportPdfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1InvoiceUIDReportPdfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1InvoiceUidReportPdf",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/pdf",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1InvoiceUIDReportPdfReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1InvoiceUIDReportPdfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1InvoiceUidReportPdf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1InvoiceUIDReportUsagePdf downloads the specified tenant usage
*/
func (a *Client) V1InvoiceUIDReportUsagePdf(params *V1InvoiceUIDReportUsagePdfParams, writer io.Writer) (*V1InvoiceUIDReportUsagePdfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1InvoiceUIDReportUsagePdfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1InvoiceUidReportUsagePdf",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/usage/pdf",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1InvoiceUIDReportUsagePdfReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1InvoiceUIDReportUsagePdfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1InvoiceUidReportUsagePdf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasAccountValidate checks if maas account is valid

Returns no contents if account is valid else error.
*/
func (a *Client) V1MaasAccountValidate(params *V1MaasAccountValidateParams) (*V1MaasAccountValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasAccountValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MaasAccountValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/maas/account/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasAccountValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasAccountValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1MaasAccountValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasDomainsGet retrieves a list of maas domains
*/
func (a *Client) V1MaasDomainsGet(params *V1MaasDomainsGetParams) (*V1MaasDomainsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasDomainsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MaasDomainsGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/maas/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasDomainsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasDomainsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1MaasDomainsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasPoolsGet retrieves a list of maas pools for a particular account uid
*/
func (a *Client) V1MaasPoolsGet(params *V1MaasPoolsGetParams) (*V1MaasPoolsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasPoolsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MaasPoolsGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/maas/resourcePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasPoolsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasPoolsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1MaasPoolsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasSubnetsGet retrieves a list of maas subnets for a particular account uid
*/
func (a *Client) V1MaasSubnetsGet(params *V1MaasSubnetsGetParams) (*V1MaasSubnetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasSubnetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MaasSubnetsGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/maas/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasSubnetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasSubnetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1MaasSubnetsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasTagsGet retrieves a list of maas tags for a particular account uid
*/
func (a *Client) V1MaasTagsGet(params *V1MaasTagsGetParams) (*V1MaasTagsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasTagsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MaasTagsGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/maas/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasTagsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasTagsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1MaasTagsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasZonesGet retrieves a list of maas zones for a particular account uid
*/
func (a *Client) V1MaasZonesGet(params *V1MaasZonesGetParams) (*V1MaasZonesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasZonesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MaasZonesGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/maas/azs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasZonesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasZonesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1MaasZonesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OidcCallback idps authorization code callback

Returns the Authorization token for the palette. This is called by the IDP as a callback url after IDP authenticates the user with its server.
*/
func (a *Client) V1OidcCallback(params *V1OidcCallbackParams) (*V1OidcCallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OidcCallbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OidcCallback",
		Method:             "GET",
		PathPattern:        "/v1/auth/org/{org}/oidc/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OidcCallbackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OidcCallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OidcCallback: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OidcLogout identities provider logout url for the oidc

Returns No Content. Works as a callback url after the IDP logout from their server.
*/
func (a *Client) V1OidcLogout(params *V1OidcLogoutParams) (*V1OidcLogoutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OidcLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OidcLogout",
		Method:             "GET",
		PathPattern:        "/v1/auth/org/{org}/oidc/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OidcLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OidcLogoutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OidcLogout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenStackAccountValidate checks if open stack account is valid

Returns no contents if account is valid else error.
*/
func (a *Client) V1OpenStackAccountValidate(params *V1OpenStackAccountValidateParams) (*V1OpenStackAccountValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenStackAccountValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OpenStackAccountValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/openstack/account/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenStackAccountValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenStackAccountValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OpenStackAccountValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenStackAzsGet retrieves a list of open stack azs for a particular account uid
*/
func (a *Client) V1OpenStackAzsGet(params *V1OpenStackAzsGetParams) (*V1OpenStackAzsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenStackAzsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OpenStackAzsGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/openstack/azs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenStackAzsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenStackAzsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OpenStackAzsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenStackFlavorsGet returns the open stack flavors
*/
func (a *Client) V1OpenStackFlavorsGet(params *V1OpenStackFlavorsGetParams) (*V1OpenStackFlavorsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenStackFlavorsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OpenStackFlavorsGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/openstack/flavors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenStackFlavorsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenStackFlavorsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OpenStackFlavorsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenStackKeypairsGet returns the open stack keypair
*/
func (a *Client) V1OpenStackKeypairsGet(params *V1OpenStackKeypairsGetParams) (*V1OpenStackKeypairsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenStackKeypairsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OpenStackKeypairsGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/openstack/keypairs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenStackKeypairsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenStackKeypairsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OpenStackKeypairsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenStackNetworksGet returns the open stack networks
*/
func (a *Client) V1OpenStackNetworksGet(params *V1OpenStackNetworksGetParams) (*V1OpenStackNetworksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenStackNetworksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OpenStackNetworksGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/openstack/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenStackNetworksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenStackNetworksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OpenStackNetworksGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenStackProjectsGet returns the open stack projects
*/
func (a *Client) V1OpenStackProjectsGet(params *V1OpenStackProjectsGetParams) (*V1OpenStackProjectsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenStackProjectsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OpenStackProjectsGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/openstack/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenStackProjectsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenStackProjectsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OpenStackProjectsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenStackRegionsGet returns the open stack regions
*/
func (a *Client) V1OpenStackRegionsGet(params *V1OpenStackRegionsGetParams) (*V1OpenStackRegionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenStackRegionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OpenStackRegionsGet",
		Method:             "GET",
		PathPattern:        "/v1/clouds/openstack/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenStackRegionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenStackRegionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OpenStackRegionsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsMaasManifest returns the manifests required for the private gateway installation
*/
func (a *Client) V1OverlordsMaasManifest(params *V1OverlordsMaasManifestParams) (*V1OverlordsMaasManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsMaasManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OverlordsMaasManifest",
		Method:             "GET",
		PathPattern:        "/v1/overlords/maas/manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsMaasManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsMaasManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OverlordsMaasManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsMigrate migrates all the clusters from source overlord to target overlord
*/
func (a *Client) V1OverlordsMigrate(params *V1OverlordsMigrateParams) (*V1OverlordsMigrateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsMigrateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OverlordsMigrate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsMigrateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsMigrateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OverlordsMigrate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMaasCloudConfigCreate creates the maas cloud config for the private gateway
*/
func (a *Client) V1OverlordsUIDMaasCloudConfigCreate(params *V1OverlordsUIDMaasCloudConfigCreateParams) (*V1OverlordsUIDMaasCloudConfigCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMaasCloudConfigCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OverlordsUidMaasCloudConfigCreate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/maas/{uid}/cloudconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMaasCloudConfigCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMaasCloudConfigCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OverlordsUidMaasCloudConfigCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMaasCloudConfigUpdate updates the maas cloud config for the private gateway
*/
func (a *Client) V1OverlordsUIDMaasCloudConfigUpdate(params *V1OverlordsUIDMaasCloudConfigUpdateParams) (*V1OverlordsUIDMaasCloudConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMaasCloudConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1OverlordsUidMaasCloudConfigUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/overlords/maas/{uid}/cloudconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMaasCloudConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMaasCloudConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1OverlordsUidMaasCloudConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PasswordsBlockListDelete deletes a list of block listed passwords
*/
func (a *Client) V1PasswordsBlockListDelete(params *V1PasswordsBlockListDeleteParams) (*V1PasswordsBlockListDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PasswordsBlockListDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1PasswordsBlockListDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/system/passwords/blocklist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PasswordsBlockListDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PasswordsBlockListDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1PasswordsBlockListDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PasswordsBlockListUpdate lists of block listed passwords
*/
func (a *Client) V1PasswordsBlockListUpdate(params *V1PasswordsBlockListUpdateParams) (*V1PasswordsBlockListUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PasswordsBlockListUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1PasswordsBlockListUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/system/passwords/blocklist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PasswordsBlockListUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PasswordsBlockListUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1PasswordsBlockListUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesHelmValidate checks if helm registry is valid

Returns no contents if helm registry is valid else error.
*/
func (a *Client) V1RegistriesHelmValidate(params *V1RegistriesHelmValidateParams) (*V1RegistriesHelmValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesHelmValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1RegistriesHelmValidate",
		Method:             "POST",
		PathPattern:        "/v1/registries/helm/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesHelmValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesHelmValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1RegistriesHelmValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesPackValidate checks if pack registry is valid

Returns no contents if pack registry is valid else error.
*/
func (a *Client) V1RegistriesPackValidate(params *V1RegistriesPackValidateParams) (*V1RegistriesPackValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesPackValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1RegistriesPackValidate",
		Method:             "POST",
		PathPattern:        "/v1/registries/pack/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesPackValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesPackValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1RegistriesPackValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SamlCallback identities provider callback url for the s m a l authentication

Returns the Authorization token for the palette. This is called by the SAML based IDP as a callback url after IDP authenticates the user with its server.
*/
func (a *Client) V1SamlCallback(params *V1SamlCallbackParams) (*V1SamlCallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SamlCallbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SamlCallback",
		Method:             "POST",
		PathPattern:        "/v1/auth/org/{org}/saml/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SamlCallbackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SamlCallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SamlCallback: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SamlLogout identities provider logout url for the s m a l

Returns No Content. Works as a callback url after the IDP logout from their server.
*/
func (a *Client) V1SamlLogout(params *V1SamlLogoutParams) (*V1SamlLogoutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SamlLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SamlLogout",
		Method:             "POST",
		PathPattern:        "/v1/auth/org/{org}/saml/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SamlLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SamlLogoutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SamlLogout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDEdgeReset resets the edge clusters by deleting machine pools and conditions
*/
func (a *Client) V1SpectroClustersUIDEdgeReset(params *V1SpectroClustersUIDEdgeResetParams) (*V1SpectroClustersUIDEdgeResetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDEdgeResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SpectroClustersUidEdgeReset",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/edge/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDEdgeResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDEdgeResetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SpectroClustersUidEdgeReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDKubeCtlRedirect returns the specified cluster s kube config file
*/
func (a *Client) V1SpectroClustersUIDKubeCtlRedirect(params *V1SpectroClustersUIDKubeCtlRedirectParams) (*V1SpectroClustersUIDKubeCtlRedirectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDKubeCtlRedirectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SpectroClustersUidKubeCtlRedirect",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/kubectl/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDKubeCtlRedirectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDKubeCtlRedirectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SpectroClustersUidKubeCtlRedirect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDOIDC returns k8s spectrocluster oidc
*/
func (a *Client) V1SpectroClustersUIDOIDC(params *V1SpectroClustersUIDOIDCParams) (*V1SpectroClustersUIDOIDCOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDOIDCParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SpectroClustersUidOIDC",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/oidc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDOIDCReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDOIDCOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SpectroClustersUidOIDC: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDOIDCDashboardURL returns k8s dashboard url
*/
func (a *Client) V1SpectroClustersUIDOIDCDashboardURL(params *V1SpectroClustersUIDOIDCDashboardURLParams) (*V1SpectroClustersUIDOIDCDashboardURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDOIDCDashboardURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SpectroClustersUidOIDCDashboardUrl",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/oidc/dashboard/url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDOIDCDashboardURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDOIDCDashboardURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SpectroClustersUidOIDCDashboardUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDReset resets the cluster s by deleting machine pools and condtions
*/
func (a *Client) V1SpectroClustersUIDReset(params *V1SpectroClustersUIDResetParams) (*V1SpectroClustersUIDResetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SpectroClustersUidReset",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDResetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SpectroClustersUidReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SsoCallback returns authorization token works as a callback url for the system defined sso apps

Returns Authorization token. Works as a callback url for the system defined sso apps
*/
func (a *Client) V1SsoCallback(params *V1SsoCallbackParams) (*V1SsoCallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SsoCallbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SsoCallback",
		Method:             "GET",
		PathPattern:        "/v1/auth/sso/{ssoApp}/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SsoCallbackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SsoCallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SsoCallback: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SsoIdps returns a list of predefined identity provider ID p

Returns a list of predefined Identity Provider (IDP)
*/
func (a *Client) V1SsoIdps(params *V1SsoIdpsParams) (*V1SsoIdpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SsoIdpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SsoIdps",
		Method:             "GET",
		PathPattern:        "/v1/auth/sso/idps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SsoIdpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SsoIdpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SsoIdps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SsoLogins returns a list of supported sso logins

Returns a list of supported sso logins and their authentication mechanism
*/
func (a *Client) V1SsoLogins(params *V1SsoLoginsParams) (*V1SsoLoginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SsoLoginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SsoLogins",
		Method:             "GET",
		PathPattern:        "/v1/auth/sso/logins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SsoLoginsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SsoLoginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SsoLogins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SystemConfigReverseProxyGet gets the system config reverse proxy
*/
func (a *Client) V1SystemConfigReverseProxyGet(params *V1SystemConfigReverseProxyGetParams) (*V1SystemConfigReverseProxyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SystemConfigReverseProxyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SystemConfigReverseProxyGet",
		Method:             "GET",
		PathPattern:        "/v1/system/config/reverseproxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SystemConfigReverseProxyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SystemConfigReverseProxyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SystemConfigReverseProxyGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SystemConfigReverseProxyUpdate updates the system config reverse proxy
*/
func (a *Client) V1SystemConfigReverseProxyUpdate(params *V1SystemConfigReverseProxyUpdateParams) (*V1SystemConfigReverseProxyUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SystemConfigReverseProxyUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1SystemConfigReverseProxyUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/system/config/reverseproxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SystemConfigReverseProxyUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SystemConfigReverseProxyUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1SystemConfigReverseProxyUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsUIDTenantRolesGet returns the specified team s tenant roles
*/
func (a *Client) V1TeamsUIDTenantRolesGet(params *V1TeamsUIDTenantRolesGetParams) (*V1TeamsUIDTenantRolesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsUIDTenantRolesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TeamsUidTenantRolesGet",
		Method:             "GET",
		PathPattern:        "/v1/teams/{uid}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsUIDTenantRolesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsUIDTenantRolesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TeamsUidTenantRolesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsUIDTenantRolesUpdate updates the tenant roles of the specified team
*/
func (a *Client) V1TeamsUIDTenantRolesUpdate(params *V1TeamsUIDTenantRolesUpdateParams) (*V1TeamsUIDTenantRolesUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsUIDTenantRolesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TeamsUidTenantRolesUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/teams/{uid}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsUIDTenantRolesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsUIDTenantRolesUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TeamsUidTenantRolesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantDeveloperCreditGet gets developer credit enabled for a specific tenant
*/
func (a *Client) V1TenantDeveloperCreditGet(params *V1TenantDeveloperCreditGetParams) (*V1TenantDeveloperCreditGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantDeveloperCreditGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantDeveloperCreditGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/preferences/developerCredit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantDeveloperCreditGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantDeveloperCreditGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantDeveloperCreditGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantDeveloperCreditUpdate updates developer credit for a specific tenant
*/
func (a *Client) V1TenantDeveloperCreditUpdate(params *V1TenantDeveloperCreditUpdateParams) (*V1TenantDeveloperCreditUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantDeveloperCreditUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantDeveloperCreditUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/preferences/developerCredit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantDeveloperCreditUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantDeveloperCreditUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantDeveloperCreditUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantPrefClusterGroupGet gets is cluster group enabled for a specific tenant
*/
func (a *Client) V1TenantPrefClusterGroupGet(params *V1TenantPrefClusterGroupGetParams) (*V1TenantPrefClusterGroupGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantPrefClusterGroupGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantPrefClusterGroupGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/preferences/clusterGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantPrefClusterGroupGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantPrefClusterGroupGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantPrefClusterGroupGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantPrefClusterGroupUpdate enables or disable cluster group for a specific tenant
*/
func (a *Client) V1TenantPrefClusterGroupUpdate(params *V1TenantPrefClusterGroupUpdateParams) (*V1TenantPrefClusterGroupUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantPrefClusterGroupUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantPrefClusterGroupUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/preferences/clusterGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantPrefClusterGroupUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantPrefClusterGroupUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantPrefClusterGroupUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAssetsCertsList lists the certificates for the tenant
*/
func (a *Client) V1TenantUIDAssetsCertsList(params *V1TenantUIDAssetsCertsListParams) (*V1TenantUIDAssetsCertsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAssetsCertsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUIdAssetsCertsList",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/assets/certs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAssetsCertsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAssetsCertsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUIdAssetsCertsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAssetsCertsCreate creates the tenant certificate
*/
func (a *Client) V1TenantUIDAssetsCertsCreate(params *V1TenantUIDAssetsCertsCreateParams) (*V1TenantUIDAssetsCertsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAssetsCertsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidAssetsCertsCreate",
		Method:             "POST",
		PathPattern:        "/v1/tenants/{tenantUid}/assets/certs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAssetsCertsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAssetsCertsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidAssetsCertsCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAssetsCertsUIDDelete deletes the tenant certificate
*/
func (a *Client) V1TenantUIDAssetsCertsUIDDelete(params *V1TenantUIDAssetsCertsUIDDeleteParams) (*V1TenantUIDAssetsCertsUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAssetsCertsUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidAssetsCertsUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/tenants/{tenantUid}/assets/certs/{certificateUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAssetsCertsUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAssetsCertsUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidAssetsCertsUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAssetsCertsUIDGet returns the ca certificate for the tenant
*/
func (a *Client) V1TenantUIDAssetsCertsUIDGet(params *V1TenantUIDAssetsCertsUIDGetParams) (*V1TenantUIDAssetsCertsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAssetsCertsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidAssetsCertsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/assets/certs/{certificateUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAssetsCertsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAssetsCertsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidAssetsCertsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAssetsCertsUIDUpdate updates the tenant certificate
*/
func (a *Client) V1TenantUIDAssetsCertsUIDUpdate(params *V1TenantUIDAssetsCertsUIDUpdateParams) (*V1TenantUIDAssetsCertsUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAssetsCertsUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidAssetsCertsUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/assets/certs/{certificateUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAssetsCertsUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAssetsCertsUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidAssetsCertsUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAssetsDataSinksCreate creates data sink config
*/
func (a *Client) V1TenantUIDAssetsDataSinksCreate(params *V1TenantUIDAssetsDataSinksCreateParams) (*V1TenantUIDAssetsDataSinksCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAssetsDataSinksCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidAssetsDataSinksCreate",
		Method:             "POST",
		PathPattern:        "/v1/tenants/{tenantUid}/assets/dataSinks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAssetsDataSinksCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAssetsDataSinksCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidAssetsDataSinksCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAssetsDataSinksDelete deletes the tenant data sink config
*/
func (a *Client) V1TenantUIDAssetsDataSinksDelete(params *V1TenantUIDAssetsDataSinksDeleteParams) (*V1TenantUIDAssetsDataSinksDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAssetsDataSinksDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidAssetsDataSinksDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/tenants/{tenantUid}/assets/dataSinks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAssetsDataSinksDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAssetsDataSinksDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidAssetsDataSinksDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAssetsDataSinksGet returns data sink config of tenant
*/
func (a *Client) V1TenantUIDAssetsDataSinksGet(params *V1TenantUIDAssetsDataSinksGetParams) (*V1TenantUIDAssetsDataSinksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAssetsDataSinksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidAssetsDataSinksGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/assets/dataSinks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAssetsDataSinksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAssetsDataSinksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidAssetsDataSinksGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAssetsDataSinksUpdate updates the tenant data sink config
*/
func (a *Client) V1TenantUIDAssetsDataSinksUpdate(params *V1TenantUIDAssetsDataSinksUpdateParams) (*V1TenantUIDAssetsDataSinksUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAssetsDataSinksUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidAssetsDataSinksUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/assets/dataSinks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAssetsDataSinksUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAssetsDataSinksUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidAssetsDataSinksUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDDomainsGet retrieves the domains for tenant
*/
func (a *Client) V1TenantUIDDomainsGet(params *V1TenantUIDDomainsGetParams) (*V1TenantUIDDomainsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDDomainsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidDomainsGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDDomainsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDDomainsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidDomainsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDDomainsUpdate creates or updates domains for tenant
*/
func (a *Client) V1TenantUIDDomainsUpdate(params *V1TenantUIDDomainsUpdateParams) (*V1TenantUIDDomainsUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDDomainsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidDomainsUpdate",
		Method:             "POST",
		PathPattern:        "/v1/tenants/{tenantUid}/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDDomainsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDDomainsUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidDomainsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDOidcConfigGet returns the oidc spec for tenant
*/
func (a *Client) V1TenantUIDOidcConfigGet(params *V1TenantUIDOidcConfigGetParams) (*V1TenantUIDOidcConfigGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDOidcConfigGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidOidcConfigGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/oidc/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDOidcConfigGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDOidcConfigGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidOidcConfigGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDOidcConfigUpdate associates the oidc spec for the tenant
*/
func (a *Client) V1TenantUIDOidcConfigUpdate(params *V1TenantUIDOidcConfigUpdateParams) (*V1TenantUIDOidcConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDOidcConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidOidcConfigUpdate",
		Method:             "POST",
		PathPattern:        "/v1/tenants/{tenantUid}/oidc/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDOidcConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDOidcConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidOidcConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDPasswordPolicyGet retrieves the password policy for tenant
*/
func (a *Client) V1TenantUIDPasswordPolicyGet(params *V1TenantUIDPasswordPolicyGetParams) (*V1TenantUIDPasswordPolicyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDPasswordPolicyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidPasswordPolicyGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/password/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDPasswordPolicyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDPasswordPolicyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidPasswordPolicyGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDPasswordPolicyUpdate creates or updates a password policy for tenant
*/
func (a *Client) V1TenantUIDPasswordPolicyUpdate(params *V1TenantUIDPasswordPolicyUpdateParams) (*V1TenantUIDPasswordPolicyUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDPasswordPolicyUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidPasswordPolicyUpdate",
		Method:             "POST",
		PathPattern:        "/v1/tenants/{tenantUid}/password/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDPasswordPolicyUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDPasswordPolicyUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidPasswordPolicyUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDSamlConfigSpecGet returns the specified service provider metadata and saml spec for tenant
*/
func (a *Client) V1TenantUIDSamlConfigSpecGet(params *V1TenantUIDSamlConfigSpecGetParams) (*V1TenantUIDSamlConfigSpecGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDSamlConfigSpecGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidSamlConfigSpecGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/saml/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDSamlConfigSpecGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDSamlConfigSpecGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidSamlConfigSpecGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDSamlConfigUpdate associates the specified federation metadata for the tenant
*/
func (a *Client) V1TenantUIDSamlConfigUpdate(params *V1TenantUIDSamlConfigUpdateParams) (*V1TenantUIDSamlConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDSamlConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidSamlConfigUpdate",
		Method:             "POST",
		PathPattern:        "/v1/tenants/{tenantUid}/saml/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDSamlConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDSamlConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidSamlConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDSsoAuthProvidersGet gets sso logins for the tenants
*/
func (a *Client) V1TenantUIDSsoAuthProvidersGet(params *V1TenantUIDSsoAuthProvidersGetParams) (*V1TenantUIDSsoAuthProvidersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDSsoAuthProvidersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidSsoAuthProvidersGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/sso/auth/providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDSsoAuthProvidersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDSsoAuthProvidersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidSsoAuthProvidersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDSsoAuthProvidersUpdate enables sso logins for the tenants
*/
func (a *Client) V1TenantUIDSsoAuthProvidersUpdate(params *V1TenantUIDSsoAuthProvidersUpdateParams) (*V1TenantUIDSsoAuthProvidersUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDSsoAuthProvidersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1TenantUidSsoAuthProvidersUpdate",
		Method:             "POST",
		PathPattern:        "/v1/tenants/{tenantUid}/sso/auth/providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDSsoAuthProvidersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDSsoAuthProvidersUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1TenantUidSsoAuthProvidersUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersConfigScarGet gets the system spectro repository restricted to edge services
*/
func (a *Client) V1UsersConfigScarGet(params *V1UsersConfigScarGetParams) (*V1UsersConfigScarGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersConfigScarGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1UsersConfigScarGet",
		Method:             "GET",
		PathPattern:        "/v1/users/config/scar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersConfigScarGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersConfigScarGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1UsersConfigScarGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersKubectlSessionUID gets users kubectl session

gets users kubectl session
*/
func (a *Client) V1UsersKubectlSessionUID(params *V1UsersKubectlSessionUIDParams) (*V1UsersKubectlSessionUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersKubectlSessionUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1UsersKubectlSessionUid",
		Method:             "GET",
		PathPattern:        "/v1/users/kubectl/session/{sessionUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersKubectlSessionUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersKubectlSessionUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1UsersKubectlSessionUid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersPasswordChange users password change request using the user email Id

User password change request via current password and emailId
*/
func (a *Client) V1UsersPasswordChange(params *V1UsersPasswordChangeParams) (*V1UsersPasswordChangeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersPasswordChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1UsersPasswordChange",
		Method:             "PATCH",
		PathPattern:        "/v1/users/password/change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersPasswordChangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersPasswordChangeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1UsersPasswordChange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereAccountValidate checks if vsphere account is valid

Returns no contents if account is valid else error.
*/
func (a *Client) V1VsphereAccountValidate(params *V1VsphereAccountValidateParams) (*V1VsphereAccountValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereAccountValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1VsphereAccountValidate",
		Method:             "POST",
		PathPattern:        "/v1/clouds/vsphere/account/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereAccountValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereAccountValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1VsphereAccountValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereComputeClusterResources returns the resources for vsphere compute cluster
*/
func (a *Client) V1VsphereComputeClusterResources(params *V1VsphereComputeClusterResourcesParams) (*V1VsphereComputeClusterResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereComputeClusterResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1VsphereComputeClusterResources",
		Method:             "GET",
		PathPattern:        "/v1/clouds/vsphere/datacenters/{uid}/computeclusters/{computecluster}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereComputeClusterResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereComputeClusterResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1VsphereComputeClusterResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereDatacenters returns the vsphere data centers
*/
func (a *Client) V1VsphereDatacenters(params *V1VsphereDatacentersParams) (*V1VsphereDatacentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereDatacentersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1VsphereDatacenters",
		Method:             "GET",
		PathPattern:        "/v1/clouds/vsphere/datacenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereDatacentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereDatacentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1VsphereDatacenters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereEnv retrieves vsphere env
*/
func (a *Client) V1VsphereEnv(params *V1VsphereEnvParams) (*V1VsphereEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereEnvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1VsphereEnv",
		Method:             "GET",
		PathPattern:        "/v1/clouds/vsphere/env",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereEnvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereEnvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1VsphereEnv: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AccountsGeolocationPatch updates the geolocation annotation
*/
func (a *Client) V1AccountsGeolocationPatch(params *V1AccountsGeolocationPatchParams) (*V1AccountsGeolocationPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AccountsGeolocationPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AccountsGeolocationPatch",
		Method:             "PATCH",
		PathPattern:        "/v1/cloudaccounts/{uid}/geoLocation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AccountsGeolocationPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AccountsGeolocationPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AccountsGeolocationPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1APIKeysCreate creates an API key
*/
func (a *Client) V1APIKeysCreate(params *V1APIKeysCreateParams) (*V1APIKeysCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1APIKeysCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ApiKeysCreate",
		Method:             "POST",
		PathPattern:        "/v1/apiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1APIKeysCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1APIKeysCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ApiKeysCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1APIKeysList retrieves a list of API keys
*/
func (a *Client) V1APIKeysList(params *V1APIKeysListParams) (*V1APIKeysListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1APIKeysListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ApiKeysList",
		Method:             "GET",
		PathPattern:        "/v1/apiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1APIKeysListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1APIKeysListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ApiKeysList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1APIKeysUIDActiveState activates or de active the specified API key
*/
func (a *Client) V1APIKeysUIDActiveState(params *V1APIKeysUIDActiveStateParams) (*V1APIKeysUIDActiveStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1APIKeysUIDActiveStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ApiKeysUidActiveState",
		Method:             "PATCH",
		PathPattern:        "/v1/apiKeys/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1APIKeysUIDActiveStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1APIKeysUIDActiveStateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ApiKeysUidActiveState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1APIKeysUIDDelete deletes the specified API key
*/
func (a *Client) V1APIKeysUIDDelete(params *V1APIKeysUIDDeleteParams) (*V1APIKeysUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1APIKeysUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ApiKeysUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/apiKeys/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1APIKeysUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1APIKeysUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ApiKeysUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1APIKeysUIDGet returns the specified API key
*/
func (a *Client) V1APIKeysUIDGet(params *V1APIKeysUIDGetParams) (*V1APIKeysUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1APIKeysUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ApiKeysUidGet",
		Method:             "GET",
		PathPattern:        "/v1/apiKeys/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1APIKeysUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1APIKeysUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ApiKeysUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1APIKeysUIDState revokes or re activate the API key access
*/
func (a *Client) V1APIKeysUIDState(params *V1APIKeysUIDStateParams) (*V1APIKeysUIDStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1APIKeysUIDStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ApiKeysUidState",
		Method:             "PUT",
		PathPattern:        "/v1/apiKeys/{uid}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1APIKeysUIDStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1APIKeysUIDStateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ApiKeysUidState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1APIKeysUIDUpdate updates the specified API key
*/
func (a *Client) V1APIKeysUIDUpdate(params *V1APIKeysUIDUpdateParams) (*V1APIKeysUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1APIKeysUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ApiKeysUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/apiKeys/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1APIKeysUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1APIKeysUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ApiKeysUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsClusterGroupCreate creates a application deployment in one of virtual clusters in the cluster group
*/
func (a *Client) V1AppDeploymentsClusterGroupCreate(params *V1AppDeploymentsClusterGroupCreateParams) (*V1AppDeploymentsClusterGroupCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsClusterGroupCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsClusterGroupCreate",
		Method:             "POST",
		PathPattern:        "/v1/appDeployments/clusterGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsClusterGroupCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsClusterGroupCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsClusterGroupCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsProfileTiersManifestsUIDGet returns the specified application deployment tier manifest information
*/
func (a *Client) V1AppDeploymentsProfileTiersManifestsUIDGet(params *V1AppDeploymentsProfileTiersManifestsUIDGetParams) (*V1AppDeploymentsProfileTiersManifestsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsProfileTiersManifestsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsProfileTiersManifestsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/appDeployments/{uid}/profile/tiers/{tierUid}/manifests/{manifestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsProfileTiersManifestsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsProfileTiersManifestsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsProfileTiersManifestsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsProfileTiersManifestsUIDUpdate updates the specified application deployment tier manifest information
*/
func (a *Client) V1AppDeploymentsProfileTiersManifestsUIDUpdate(params *V1AppDeploymentsProfileTiersManifestsUIDUpdateParams) (*V1AppDeploymentsProfileTiersManifestsUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsProfileTiersManifestsUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsProfileTiersManifestsUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/appDeployments/{uid}/profile/tiers/{tierUid}/manifests/{manifestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsProfileTiersManifestsUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsProfileTiersManifestsUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsProfileTiersManifestsUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsProfileTiersUIDGet returns the specified application deployment profile tier information
*/
func (a *Client) V1AppDeploymentsProfileTiersUIDGet(params *V1AppDeploymentsProfileTiersUIDGetParams) (*V1AppDeploymentsProfileTiersUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsProfileTiersUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsProfileTiersUidGet",
		Method:             "GET",
		PathPattern:        "/v1/appDeployments/{uid}/profile/tiers/{tierUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsProfileTiersUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsProfileTiersUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsProfileTiersUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsProfileTiersUIDManifestsGet retrieves a list of manifests of the specified application deployment profile tier
*/
func (a *Client) V1AppDeploymentsProfileTiersUIDManifestsGet(params *V1AppDeploymentsProfileTiersUIDManifestsGetParams) (*V1AppDeploymentsProfileTiersUIDManifestsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsProfileTiersUIDManifestsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsProfileTiersUidManifestsGet",
		Method:             "GET",
		PathPattern:        "/v1/appDeployments/{uid}/profile/tiers/{tierUid}/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsProfileTiersUIDManifestsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsProfileTiersUIDManifestsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsProfileTiersUidManifestsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsProfileTiersUIDUpdate updates the specified application deployment profile tier information
*/
func (a *Client) V1AppDeploymentsProfileTiersUIDUpdate(params *V1AppDeploymentsProfileTiersUIDUpdateParams) (*V1AppDeploymentsProfileTiersUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsProfileTiersUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsProfileTiersUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/appDeployments/{uid}/profile/tiers/{tierUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsProfileTiersUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsProfileTiersUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsProfileTiersUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsUIDDelete deletes the specified application deployment
*/
func (a *Client) V1AppDeploymentsUIDDelete(params *V1AppDeploymentsUIDDeleteParams) (*V1AppDeploymentsUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/appDeployments/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsUIDGet returns the specified application deployment
*/
func (a *Client) V1AppDeploymentsUIDGet(params *V1AppDeploymentsUIDGetParams) (*V1AppDeploymentsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/appDeployments/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsUIDProfileApply applies the application deployment profile updates
*/
func (a *Client) V1AppDeploymentsUIDProfileApply(params *V1AppDeploymentsUIDProfileApplyParams) (*V1AppDeploymentsUIDProfileApplyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsUIDProfileApplyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsUidProfileApply",
		Method:             "PATCH",
		PathPattern:        "/v1/appDeployments/{uid}/profile/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsUIDProfileApplyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsUIDProfileApplyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsUidProfileApply: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsUIDProfileGet returns profile of the specified application deployment
*/
func (a *Client) V1AppDeploymentsUIDProfileGet(params *V1AppDeploymentsUIDProfileGetParams) (*V1AppDeploymentsUIDProfileGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsUIDProfileGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsUidProfileGet",
		Method:             "GET",
		PathPattern:        "/v1/appDeployments/{uid}/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsUIDProfileGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsUIDProfileGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsUidProfileGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsUIDProfileUpdate updates the specified application deployment profile
*/
func (a *Client) V1AppDeploymentsUIDProfileUpdate(params *V1AppDeploymentsUIDProfileUpdateParams) (*V1AppDeploymentsUIDProfileUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsUIDProfileUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsUidProfileUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/appDeployments/{uid}/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsUIDProfileUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsUIDProfileUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsUidProfileUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsUIDProfileVersionsGet retrieves a list of profile versions of the specified application deployment
*/
func (a *Client) V1AppDeploymentsUIDProfileVersionsGet(params *V1AppDeploymentsUIDProfileVersionsGetParams) (*V1AppDeploymentsUIDProfileVersionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsUIDProfileVersionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsUidProfileVersionsGet",
		Method:             "GET",
		PathPattern:        "/v1/appDeployments/{uid}/profile/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsUIDProfileVersionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsUIDProfileVersionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsUidProfileVersionsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppDeploymentsVirtualClusterCreate creates a application deployment in the virtual cluster
*/
func (a *Client) V1AppDeploymentsVirtualClusterCreate(params *V1AppDeploymentsVirtualClusterCreateParams) (*V1AppDeploymentsVirtualClusterCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppDeploymentsVirtualClusterCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppDeploymentsVirtualClusterCreate",
		Method:             "POST",
		PathPattern:        "/v1/appDeployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppDeploymentsVirtualClusterCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppDeploymentsVirtualClusterCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppDeploymentsVirtualClusterCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesCreate creates a application profile
*/
func (a *Client) V1AppProfilesCreate(params *V1AppProfilesCreateParams) (*V1AppProfilesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesCreate",
		Method:             "POST",
		PathPattern:        "/v1/appProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesMacrosList retrieves a list of application profile macros
*/
func (a *Client) V1AppProfilesMacrosList(params *V1AppProfilesMacrosListParams) (*V1AppProfilesMacrosListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesMacrosListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesMacrosList",
		Method:             "GET",
		PathPattern:        "/v1/appProfiles/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesMacrosListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesMacrosListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesMacrosList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDClone clones the specified application profile
*/
func (a *Client) V1AppProfilesUIDClone(params *V1AppProfilesUIDCloneParams) (*V1AppProfilesUIDCloneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDCloneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidClone",
		Method:             "POST",
		PathPattern:        "/v1/appProfiles/{uid}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDCloneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDCloneCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidClone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDCloneValidate validates the specified application profile clone
*/
func (a *Client) V1AppProfilesUIDCloneValidate(params *V1AppProfilesUIDCloneValidateParams) (*V1AppProfilesUIDCloneValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDCloneValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidCloneValidate",
		Method:             "POST",
		PathPattern:        "/v1/appProfiles/{uid}/clone/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDCloneValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDCloneValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidCloneValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDDelete deletes the specified application profile
*/
func (a *Client) V1AppProfilesUIDDelete(params *V1AppProfilesUIDDeleteParams) (*V1AppProfilesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/appProfiles/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDGet returns the specified application profile
*/
func (a *Client) V1AppProfilesUIDGet(params *V1AppProfilesUIDGetParams) (*V1AppProfilesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/appProfiles/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDMetadataUpdate updates the specified application profile metadata
*/
func (a *Client) V1AppProfilesUIDMetadataUpdate(params *V1AppProfilesUIDMetadataUpdateParams) (*V1AppProfilesUIDMetadataUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDMetadataUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidMetadataUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/appProfiles/{uid}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDMetadataUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDMetadataUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidMetadataUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersCreate adds tier to the specified application profile
*/
func (a *Client) V1AppProfilesUIDTiersCreate(params *V1AppProfilesUIDTiersCreateParams) (*V1AppProfilesUIDTiersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersCreate",
		Method:             "POST",
		PathPattern:        "/v1/appProfiles/{uid}/tiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersGet retrieves a list of tiers of the specified application profile
*/
func (a *Client) V1AppProfilesUIDTiersGet(params *V1AppProfilesUIDTiersGetParams) (*V1AppProfilesUIDTiersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersGet",
		Method:             "GET",
		PathPattern:        "/v1/appProfiles/{uid}/tiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersPatch updates app tier of the specified application profile
*/
func (a *Client) V1AppProfilesUIDTiersPatch(params *V1AppProfilesUIDTiersPatchParams) (*V1AppProfilesUIDTiersPatchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersPatch",
		Method:             "PATCH",
		PathPattern:        "/v1/appProfiles/{uid}/tiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersPatchCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersUIDDelete deletes the specified application profile tier
*/
func (a *Client) V1AppProfilesUIDTiersUIDDelete(params *V1AppProfilesUIDTiersUIDDeleteParams) (*V1AppProfilesUIDTiersUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/appProfiles/{uid}/tiers/{tierUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersUIDGet returns the specified application profile tier information
*/
func (a *Client) V1AppProfilesUIDTiersUIDGet(params *V1AppProfilesUIDTiersUIDGetParams) (*V1AppProfilesUIDTiersUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersUidGet",
		Method:             "GET",
		PathPattern:        "/v1/appProfiles/{uid}/tiers/{tierUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersUIDManifestsCreate adds manifest to the specified application profile tier
*/
func (a *Client) V1AppProfilesUIDTiersUIDManifestsCreate(params *V1AppProfilesUIDTiersUIDManifestsCreateParams) (*V1AppProfilesUIDTiersUIDManifestsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersUIDManifestsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersUidManifestsCreate",
		Method:             "POST",
		PathPattern:        "/v1/appProfiles/{uid}/tiers/{tierUid}/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersUIDManifestsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersUIDManifestsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersUidManifestsCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersUIDManifestsGet retrieves a list of manifests of the specified application profile tier
*/
func (a *Client) V1AppProfilesUIDTiersUIDManifestsGet(params *V1AppProfilesUIDTiersUIDManifestsGetParams) (*V1AppProfilesUIDTiersUIDManifestsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersUIDManifestsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersUidManifestsGet",
		Method:             "GET",
		PathPattern:        "/v1/appProfiles/{uid}/tiers/{tierUid}/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersUIDManifestsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersUIDManifestsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersUidManifestsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersUIDManifestsUIDDelete deletes the specified application profile tier manifest
*/
func (a *Client) V1AppProfilesUIDTiersUIDManifestsUIDDelete(params *V1AppProfilesUIDTiersUIDManifestsUIDDeleteParams) (*V1AppProfilesUIDTiersUIDManifestsUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersUIDManifestsUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersUidManifestsUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/appProfiles/{uid}/tiers/{tierUid}/manifests/{manifestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersUIDManifestsUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersUIDManifestsUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersUidManifestsUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersUIDManifestsUIDGet returns the specified application profile tier manifest information
*/
func (a *Client) V1AppProfilesUIDTiersUIDManifestsUIDGet(params *V1AppProfilesUIDTiersUIDManifestsUIDGetParams) (*V1AppProfilesUIDTiersUIDManifestsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersUIDManifestsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersUidManifestsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/appProfiles/{uid}/tiers/{tierUid}/manifests/{manifestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersUIDManifestsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersUIDManifestsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersUidManifestsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersUIDManifestsUIDUpdate updates the specified application profile tier manifest information
*/
func (a *Client) V1AppProfilesUIDTiersUIDManifestsUIDUpdate(params *V1AppProfilesUIDTiersUIDManifestsUIDUpdateParams) (*V1AppProfilesUIDTiersUIDManifestsUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersUIDManifestsUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersUidManifestsUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/appProfiles/{uid}/tiers/{tierUid}/manifests/{manifestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersUIDManifestsUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersUIDManifestsUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersUidManifestsUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersUIDResolvedValuesGet returns the specified application profile tier resolved values
*/
func (a *Client) V1AppProfilesUIDTiersUIDResolvedValuesGet(params *V1AppProfilesUIDTiersUIDResolvedValuesGetParams) (*V1AppProfilesUIDTiersUIDResolvedValuesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersUIDResolvedValuesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersUidResolvedValuesGet",
		Method:             "GET",
		PathPattern:        "/v1/appProfiles/{uid}/tiers/{tierUid}/resolvedValues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersUIDResolvedValuesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersUIDResolvedValuesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersUidResolvedValuesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDTiersUIDUpdate updates the specified application profile tier
*/
func (a *Client) V1AppProfilesUIDTiersUIDUpdate(params *V1AppProfilesUIDTiersUIDUpdateParams) (*V1AppProfilesUIDTiersUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDTiersUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidTiersUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/appProfiles/{uid}/tiers/{tierUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDTiersUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDTiersUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidTiersUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AppProfilesUIDUpdate updates the specified application profile
*/
func (a *Client) V1AppProfilesUIDUpdate(params *V1AppProfilesUIDUpdateParams) (*V1AppProfilesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AppProfilesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AppProfilesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/appProfiles/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AppProfilesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AppProfilesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AppProfilesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AuditsList retrieves the list of audit logs
*/
func (a *Client) V1AuditsList(params *V1AuditsListParams) (*V1AuditsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AuditsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AuditsList",
		Method:             "GET",
		PathPattern:        "/v1/audits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AuditsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AuditsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AuditsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AuditsUIDGet returns the specified audit log
*/
func (a *Client) V1AuditsUIDGet(params *V1AuditsUIDGetParams) (*V1AuditsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AuditsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AuditsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/audits/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AuditsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AuditsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AuditsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AuditsUIDGetSysMsg returns the specified system audit message
*/
func (a *Client) V1AuditsUIDGetSysMsg(params *V1AuditsUIDGetSysMsgParams) (*V1AuditsUIDGetSysMsgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AuditsUIDGetSysMsgParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AuditsUidGetSysMsg",
		Method:             "GET",
		PathPattern:        "/v1/audits/{uid}/sysMsg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AuditsUIDGetSysMsgReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AuditsUIDGetSysMsgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AuditsUidGetSysMsg: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AuditsUIDMsgUpdate updates the specified user message for the specified audit
*/
func (a *Client) V1AuditsUIDMsgUpdate(params *V1AuditsUIDMsgUpdateParams) (*V1AuditsUIDMsgUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AuditsUIDMsgUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AuditsUidMsgUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/audits/{uid}/userMsg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AuditsUIDMsgUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AuditsUIDMsgUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AuditsUidMsgUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AuthOrg returns the user organization details

Returns the allowed login method and information with the organization details
*/
func (a *Client) V1AuthOrg(params *V1AuthOrgParams) (*V1AuthOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AuthOrgParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AuthOrg",
		Method:             "GET",
		PathPattern:        "/v1/auth/org",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AuthOrgReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AuthOrgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AuthOrg: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AuthRefresh refreshes authentication token

Returns a new token within refresh timeout and same session id is maintained
*/
func (a *Client) V1AuthRefresh(params *V1AuthRefreshParams) (*V1AuthRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AuthRefreshParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AuthRefresh",
		Method:             "GET",
		PathPattern:        "/v1/auth/refresh/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AuthRefreshReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AuthRefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AuthRefresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1Authenticate authenticates the user for the specified crendentials

Creates a authentication request with the specified credentials
*/
func (a *Client) V1Authenticate(params *V1AuthenticateParams) (*V1AuthenticateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AuthenticateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1Authenticate",
		Method:             "POST",
		PathPattern:        "/v1/auth/authenticate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AuthenticateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AuthenticateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1Authenticate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsCloudConfigsEdgeNativeMachinePoolDelete deletes the specified edge native machine pool of hybrid a w s cluster
*/
func (a *Client) V1AwsCloudConfigsEdgeNativeMachinePoolDelete(params *V1AwsCloudConfigsEdgeNativeMachinePoolDeleteParams) (*V1AwsCloudConfigsEdgeNativeMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsCloudConfigsEdgeNativeMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AwsCloudConfigsEdgeNativeMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/edge-native/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsCloudConfigsEdgeNativeMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsCloudConfigsEdgeNativeMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AwsCloudConfigsEdgeNativeMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsCloudConfigsEdgeNativeMachinePoolGet returns the specified a w s cluster s edge native machine pool configuration
*/
func (a *Client) V1AwsCloudConfigsEdgeNativeMachinePoolGet(params *V1AwsCloudConfigsEdgeNativeMachinePoolGetParams) (*V1AwsCloudConfigsEdgeNativeMachinePoolGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsCloudConfigsEdgeNativeMachinePoolGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AwsCloudConfigsEdgeNativeMachinePoolGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/edge-native/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsCloudConfigsEdgeNativeMachinePoolGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsCloudConfigsEdgeNativeMachinePoolGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AwsCloudConfigsEdgeNativeMachinePoolGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsCloudConfigsEdgeNativeMachinePoolUpdate updates the specified hybrid a w s cluster cloud config s edge native machine pool
*/
func (a *Client) V1AwsCloudConfigsEdgeNativeMachinePoolUpdate(params *V1AwsCloudConfigsEdgeNativeMachinePoolUpdateParams) (*V1AwsCloudConfigsEdgeNativeMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsCloudConfigsEdgeNativeMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AwsCloudConfigsEdgeNativeMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/edge-native/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsCloudConfigsEdgeNativeMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsCloudConfigsEdgeNativeMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AwsCloudConfigsEdgeNativeMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsCloudConfigsUIDHybridConfig updates the hybrid configuration information of a w s cluster
*/
func (a *Client) V1AwsCloudConfigsUIDHybridConfig(params *V1AwsCloudConfigsUIDHybridConfigParams) (*V1AwsCloudConfigsUIDHybridConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsCloudConfigsUIDHybridConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AwsCloudConfigsUidHybridConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/clusterConfig/hybridConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsCloudConfigsUIDHybridConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsCloudConfigsUIDHybridConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AwsCloudConfigsUidHybridConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1AwsCloudCost retrieves a w s cloud account usage cost from cost explorer
*/
func (a *Client) V1AwsCloudCost(params *V1AwsCloudCostParams) (*V1AwsCloudCostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AwsCloudCostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1AwsCloudCost",
		Method:             "POST",
		PathPattern:        "/v1/clouds/aws/cost",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1AwsCloudCostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AwsCloudCostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1AwsCloudCost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1BasicOciRegistriesCreate creates a basic oci registry
*/
func (a *Client) V1BasicOciRegistriesCreate(params *V1BasicOciRegistriesCreateParams) (*V1BasicOciRegistriesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1BasicOciRegistriesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1BasicOciRegistriesCreate",
		Method:             "POST",
		PathPattern:        "/v1/registries/oci/basic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1BasicOciRegistriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1BasicOciRegistriesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1BasicOciRegistriesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1BasicOciRegistriesUIDDelete deletes the specified basic oci registry
*/
func (a *Client) V1BasicOciRegistriesUIDDelete(params *V1BasicOciRegistriesUIDDeleteParams) (*V1BasicOciRegistriesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1BasicOciRegistriesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1BasicOciRegistriesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/registries/oci/{uid}/basic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1BasicOciRegistriesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1BasicOciRegistriesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1BasicOciRegistriesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1BasicOciRegistriesUIDGet returns the basic oci registry
*/
func (a *Client) V1BasicOciRegistriesUIDGet(params *V1BasicOciRegistriesUIDGetParams) (*V1BasicOciRegistriesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1BasicOciRegistriesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1BasicOciRegistriesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/registries/oci/{uid}/basic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1BasicOciRegistriesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1BasicOciRegistriesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1BasicOciRegistriesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1BasicOciRegistriesUIDSync syncs oci registry

Sync all the content from the oci registry
*/
func (a *Client) V1BasicOciRegistriesUIDSync(params *V1BasicOciRegistriesUIDSyncParams) (*V1BasicOciRegistriesUIDSyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1BasicOciRegistriesUIDSyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1BasicOciRegistriesUidSync",
		Method:             "POST",
		PathPattern:        "/v1/registries/oci/{uid}/basic/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1BasicOciRegistriesUIDSyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1BasicOciRegistriesUIDSyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1BasicOciRegistriesUidSync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1BasicOciRegistriesUIDSyncStatus gets oci registry sync status

Get sync status for the oci specified registry
*/
func (a *Client) V1BasicOciRegistriesUIDSyncStatus(params *V1BasicOciRegistriesUIDSyncStatusParams) (*V1BasicOciRegistriesUIDSyncStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1BasicOciRegistriesUIDSyncStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1BasicOciRegistriesUidSyncStatus",
		Method:             "GET",
		PathPattern:        "/v1/registries/oci/{uid}/basic/sync/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1BasicOciRegistriesUIDSyncStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1BasicOciRegistriesUIDSyncStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1BasicOciRegistriesUidSyncStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1BasicOciRegistriesUIDUpdate updates the specified basic oci registry
*/
func (a *Client) V1BasicOciRegistriesUIDUpdate(params *V1BasicOciRegistriesUIDUpdateParams) (*V1BasicOciRegistriesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1BasicOciRegistriesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1BasicOciRegistriesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/registries/oci/{uid}/basic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1BasicOciRegistriesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1BasicOciRegistriesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1BasicOciRegistriesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1BasicOciRegistriesValidate checks if oci registry is valid

Returns no contents if oci registry is valid else error.
*/
func (a *Client) V1BasicOciRegistriesValidate(params *V1BasicOciRegistriesValidateParams) (*V1BasicOciRegistriesValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1BasicOciRegistriesValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1BasicOciRegistriesValidate",
		Method:             "POST",
		PathPattern:        "/v1/registries/oci/basic/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1BasicOciRegistriesValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1BasicOciRegistriesValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1BasicOciRegistriesValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsAwsCreate creates an a w s cloud account
*/
func (a *Client) V1CloudAccountsAwsCreate(params *V1CloudAccountsAwsCreateParams) (*V1CloudAccountsAwsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsAwsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsAwsCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudaccounts/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsAwsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsAwsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsAwsCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsAwsDelete deletes the specified a w s account
*/
func (a *Client) V1CloudAccountsAwsDelete(params *V1CloudAccountsAwsDeleteParams) (*V1CloudAccountsAwsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsAwsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsAwsDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudaccounts/aws/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsAwsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsAwsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsAwsDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsAwsGet returns the specified a w s account
*/
func (a *Client) V1CloudAccountsAwsGet(params *V1CloudAccountsAwsGetParams) (*V1CloudAccountsAwsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsAwsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsAwsGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/aws/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsAwsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsAwsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsAwsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsAwsList retrieves a list of a w s cloud accounts
*/
func (a *Client) V1CloudAccountsAwsList(params *V1CloudAccountsAwsListParams) (*V1CloudAccountsAwsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsAwsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsAwsList",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsAwsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsAwsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsAwsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsAwsUpdate updates the specified a w s account
*/
func (a *Client) V1CloudAccountsAwsUpdate(params *V1CloudAccountsAwsUpdateParams) (*V1CloudAccountsAwsUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsAwsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsAwsUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudaccounts/aws/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsAwsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsAwsUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsAwsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsAzureCreate creates azure cloud account
*/
func (a *Client) V1CloudAccountsAzureCreate(params *V1CloudAccountsAzureCreateParams) (*V1CloudAccountsAzureCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsAzureCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsAzureCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudaccounts/azure",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsAzureCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsAzureCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsAzureCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsAzureDelete deletes the specified azure account
*/
func (a *Client) V1CloudAccountsAzureDelete(params *V1CloudAccountsAzureDeleteParams) (*V1CloudAccountsAzureDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsAzureDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsAzureDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudaccounts/azure/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsAzureDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsAzureDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsAzureDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsAzureGet returns the specified azure cloud account
*/
func (a *Client) V1CloudAccountsAzureGet(params *V1CloudAccountsAzureGetParams) (*V1CloudAccountsAzureGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsAzureGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsAzureGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/azure/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsAzureGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsAzureGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsAzureGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsAzureList retrieves a list of azure cloud accounts
*/
func (a *Client) V1CloudAccountsAzureList(params *V1CloudAccountsAzureListParams) (*V1CloudAccountsAzureListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsAzureListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsAzureList",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/azure",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsAzureListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsAzureListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsAzureList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsAzureUpdate updates the specified azure account
*/
func (a *Client) V1CloudAccountsAzureUpdate(params *V1CloudAccountsAzureUpdateParams) (*V1CloudAccountsAzureUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsAzureUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsAzureUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudaccounts/azure/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsAzureUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsAzureUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsAzureUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsCustomCreate creates an cloud account of specific cloud type
*/
func (a *Client) V1CloudAccountsCustomCreate(params *V1CloudAccountsCustomCreateParams) (*V1CloudAccountsCustomCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsCustomCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsCustomCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudaccounts/cloudTypes/{cloudType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsCustomCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsCustomCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsCustomCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsCustomDelete deletes the specified account by cloud type
*/
func (a *Client) V1CloudAccountsCustomDelete(params *V1CloudAccountsCustomDeleteParams) (*V1CloudAccountsCustomDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsCustomDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsCustomDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudaccounts/cloudTypes/{cloudType}/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsCustomDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsCustomDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsCustomDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsCustomGet returns the specified account by cloud type
*/
func (a *Client) V1CloudAccountsCustomGet(params *V1CloudAccountsCustomGetParams) (*V1CloudAccountsCustomGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsCustomGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsCustomGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/cloudTypes/{cloudType}/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsCustomGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsCustomGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsCustomGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsCustomList retrieves a list of cloud accounts by cloud type
*/
func (a *Client) V1CloudAccountsCustomList(params *V1CloudAccountsCustomListParams) (*V1CloudAccountsCustomListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsCustomListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsCustomList",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/cloudTypes/{cloudType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsCustomListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsCustomListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsCustomList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsCustomUpdate updates the specified account by cloud type
*/
func (a *Client) V1CloudAccountsCustomUpdate(params *V1CloudAccountsCustomUpdateParams) (*V1CloudAccountsCustomUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsCustomUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsCustomUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudaccounts/cloudTypes/{cloudType}/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsCustomUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsCustomUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsCustomUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsGcpCreate creates a g c p cloud account
*/
func (a *Client) V1CloudAccountsGcpCreate(params *V1CloudAccountsGcpCreateParams) (*V1CloudAccountsGcpCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsGcpCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsGcpCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudaccounts/gcp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsGcpCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsGcpCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsGcpCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsGcpDelete deletes the specified g c p account
*/
func (a *Client) V1CloudAccountsGcpDelete(params *V1CloudAccountsGcpDeleteParams) (*V1CloudAccountsGcpDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsGcpDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsGcpDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudaccounts/gcp/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsGcpDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsGcpDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsGcpDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsGcpGet returns the specified g c p cloud account
*/
func (a *Client) V1CloudAccountsGcpGet(params *V1CloudAccountsGcpGetParams) (*V1CloudAccountsGcpGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsGcpGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsGcpGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/gcp/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsGcpGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsGcpGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsGcpGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsGcpList retrieves a list of gcp cloud accounts
*/
func (a *Client) V1CloudAccountsGcpList(params *V1CloudAccountsGcpListParams) (*V1CloudAccountsGcpListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsGcpListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsGcpList",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/gcp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsGcpListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsGcpListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsGcpList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsGcpUpdate updates the specified g c p account
*/
func (a *Client) V1CloudAccountsGcpUpdate(params *V1CloudAccountsGcpUpdateParams) (*V1CloudAccountsGcpUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsGcpUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsGcpUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudaccounts/gcp/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsGcpUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsGcpUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsGcpUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsListSummary retrieves a list of cloud accounts summary
*/
func (a *Client) V1CloudAccountsListSummary(params *V1CloudAccountsListSummaryParams) (*V1CloudAccountsListSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsListSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsListSummary",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsListSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsListSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsListSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsMaasCreate creates an maas cloud account
*/
func (a *Client) V1CloudAccountsMaasCreate(params *V1CloudAccountsMaasCreateParams) (*V1CloudAccountsMaasCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsMaasCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsMaasCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudaccounts/maas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsMaasCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsMaasCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsMaasCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsMaasDelete deletes the specified maas account
*/
func (a *Client) V1CloudAccountsMaasDelete(params *V1CloudAccountsMaasDeleteParams) (*V1CloudAccountsMaasDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsMaasDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsMaasDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudaccounts/maas/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsMaasDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsMaasDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsMaasDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsMaasGet returns the specified maas account
*/
func (a *Client) V1CloudAccountsMaasGet(params *V1CloudAccountsMaasGetParams) (*V1CloudAccountsMaasGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsMaasGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsMaasGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/maas/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsMaasGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsMaasGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsMaasGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsMaasList retrieves a list of maas cloud accounts
*/
func (a *Client) V1CloudAccountsMaasList(params *V1CloudAccountsMaasListParams) (*V1CloudAccountsMaasListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsMaasListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsMaasList",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/maas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsMaasListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsMaasListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsMaasList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsMaasPatch patches the specified cloud account maas
*/
func (a *Client) V1CloudAccountsMaasPatch(params *V1CloudAccountsMaasPatchParams) (*V1CloudAccountsMaasPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsMaasPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsMaasPatch",
		Method:             "PATCH",
		PathPattern:        "/v1/cloudaccounts/maas/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsMaasPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsMaasPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsMaasPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsMaasUpdate updates the specified maas account
*/
func (a *Client) V1CloudAccountsMaasUpdate(params *V1CloudAccountsMaasUpdateParams) (*V1CloudAccountsMaasUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsMaasUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsMaasUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudaccounts/maas/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsMaasUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsMaasUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsMaasUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsOpenStackCreate creates a open stack cloud account
*/
func (a *Client) V1CloudAccountsOpenStackCreate(params *V1CloudAccountsOpenStackCreateParams) (*V1CloudAccountsOpenStackCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsOpenStackCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsOpenStackCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudaccounts/openstack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsOpenStackCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsOpenStackCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsOpenStackCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsOpenStackDelete deletes the specified open stack account
*/
func (a *Client) V1CloudAccountsOpenStackDelete(params *V1CloudAccountsOpenStackDeleteParams) (*V1CloudAccountsOpenStackDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsOpenStackDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsOpenStackDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudaccounts/openstack/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsOpenStackDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsOpenStackDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsOpenStackDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsOpenStackGet returns the specified open stack account
*/
func (a *Client) V1CloudAccountsOpenStackGet(params *V1CloudAccountsOpenStackGetParams) (*V1CloudAccountsOpenStackGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsOpenStackGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsOpenStackGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/openstack/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsOpenStackGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsOpenStackGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsOpenStackGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsOpenStackList retrieves a list of open stack cloud accounts
*/
func (a *Client) V1CloudAccountsOpenStackList(params *V1CloudAccountsOpenStackListParams) (*V1CloudAccountsOpenStackListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsOpenStackListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsOpenStackList",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/openstack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsOpenStackListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsOpenStackListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsOpenStackList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsOpenStackUpdate updates the specified open stack account
*/
func (a *Client) V1CloudAccountsOpenStackUpdate(params *V1CloudAccountsOpenStackUpdateParams) (*V1CloudAccountsOpenStackUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsOpenStackUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsOpenStackUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudaccounts/openstack/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsOpenStackUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsOpenStackUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsOpenStackUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsVsphereCreate creates a v sphere cloud account
*/
func (a *Client) V1CloudAccountsVsphereCreate(params *V1CloudAccountsVsphereCreateParams) (*V1CloudAccountsVsphereCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsVsphereCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsVsphereCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudaccounts/vsphere",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsVsphereCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsVsphereCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsVsphereCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsVsphereDelete deletes the specified v sphere account
*/
func (a *Client) V1CloudAccountsVsphereDelete(params *V1CloudAccountsVsphereDeleteParams) (*V1CloudAccountsVsphereDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsVsphereDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsVsphereDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudaccounts/vsphere/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsVsphereDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsVsphereDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsVsphereDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsVsphereGet returns the specified v sphere account
*/
func (a *Client) V1CloudAccountsVsphereGet(params *V1CloudAccountsVsphereGetParams) (*V1CloudAccountsVsphereGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsVsphereGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsVsphereGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/vsphere/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsVsphereGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsVsphereGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsVsphereGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsVsphereList retrieves a list of v sphere cloud accounts
*/
func (a *Client) V1CloudAccountsVsphereList(params *V1CloudAccountsVsphereListParams) (*V1CloudAccountsVsphereListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsVsphereListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsVsphereList",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/vsphere",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsVsphereListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsVsphereListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsVsphereList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudAccountsVsphereUpdate updates the specified v sphere account
*/
func (a *Client) V1CloudAccountsVsphereUpdate(params *V1CloudAccountsVsphereUpdateParams) (*V1CloudAccountsVsphereUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudAccountsVsphereUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudAccountsVsphereUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudaccounts/vsphere/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudAccountsVsphereUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudAccountsVsphereUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudAccountsVsphereUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAksGet returns the specified a k s cloud config
*/
func (a *Client) V1CloudConfigsAksGet(params *V1CloudConfigsAksGetParams) (*V1CloudConfigsAksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAksGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/aks/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAksGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAksMachinePoolCreate creates an a k s cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAksMachinePoolCreate(params *V1CloudConfigsAksMachinePoolCreateParams) (*V1CloudConfigsAksMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAksMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAksMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/aks/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAksMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAksMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAksMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAksMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsAksMachinePoolDelete(params *V1CloudConfigsAksMachinePoolDeleteParams) (*V1CloudConfigsAksMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAksMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAksMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAksMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAksMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAksMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAksMachinePoolUpdate updates the specified a k s cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAksMachinePoolUpdate(params *V1CloudConfigsAksMachinePoolUpdateParams) (*V1CloudConfigsAksMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAksMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAksMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAksMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAksMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAksMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAksPoolMachinesAdd adds the machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAksPoolMachinesAdd(params *V1CloudConfigsAksPoolMachinesAddParams) (*V1CloudConfigsAksPoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAksPoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAksPoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAksPoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAksPoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAksPoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAksPoolMachinesList retrieves a list of a k s machines
*/
func (a *Client) V1CloudConfigsAksPoolMachinesList(params *V1CloudConfigsAksPoolMachinesListParams) (*V1CloudConfigsAksPoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAksPoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAksPoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAksPoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAksPoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAksPoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAksPoolMachinesUIDDelete deletes the specified azure machine
*/
func (a *Client) V1CloudConfigsAksPoolMachinesUIDDelete(params *V1CloudConfigsAksPoolMachinesUIDDeleteParams) (*V1CloudConfigsAksPoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAksPoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAksPoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAksPoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAksPoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAksPoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAksPoolMachinesUIDGet returns the specified a k s machine
*/
func (a *Client) V1CloudConfigsAksPoolMachinesUIDGet(params *V1CloudConfigsAksPoolMachinesUIDGetParams) (*V1CloudConfigsAksPoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAksPoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAksPoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAksPoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAksPoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAksPoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAksPoolMachinesUIDUpdate updates the specified machine to the cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAksPoolMachinesUIDUpdate(params *V1CloudConfigsAksPoolMachinesUIDUpdateParams) (*V1CloudConfigsAksPoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAksPoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAksPoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAksPoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAksPoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAksPoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAksUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsAksUIDClusterConfig(params *V1CloudConfigsAksUIDClusterConfigParams) (*V1CloudConfigsAksUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAksUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAksUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/aks/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAksUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAksUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAksUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAwsGet returns the specified a w s cloud config
*/
func (a *Client) V1CloudConfigsAwsGet(params *V1CloudConfigsAwsGetParams) (*V1CloudConfigsAwsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAwsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAwsGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAwsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAwsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAwsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAwsMachinePoolCreate creates an a w s cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAwsMachinePoolCreate(params *V1CloudConfigsAwsMachinePoolCreateParams) (*V1CloudConfigsAwsMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAwsMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAwsMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAwsMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAwsMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAwsMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAwsMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsAwsMachinePoolDelete(params *V1CloudConfigsAwsMachinePoolDeleteParams) (*V1CloudConfigsAwsMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAwsMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAwsMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAwsMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAwsMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAwsMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAwsMachinePoolUpdate updates the specified a w s cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAwsMachinePoolUpdate(params *V1CloudConfigsAwsMachinePoolUpdateParams) (*V1CloudConfigsAwsMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAwsMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAwsMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAwsMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAwsMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAwsMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAwsPoolMachinesAdd adds the machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAwsPoolMachinesAdd(params *V1CloudConfigsAwsPoolMachinesAddParams) (*V1CloudConfigsAwsPoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAwsPoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAwsPoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAwsPoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAwsPoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAwsPoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAwsPoolMachinesList retrieves a list of a w s machines
*/
func (a *Client) V1CloudConfigsAwsPoolMachinesList(params *V1CloudConfigsAwsPoolMachinesListParams) (*V1CloudConfigsAwsPoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAwsPoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAwsPoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAwsPoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAwsPoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAwsPoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAwsPoolMachinesUIDDelete deletes the specified a w s machine
*/
func (a *Client) V1CloudConfigsAwsPoolMachinesUIDDelete(params *V1CloudConfigsAwsPoolMachinesUIDDeleteParams) (*V1CloudConfigsAwsPoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAwsPoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAwsPoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAwsPoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAwsPoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAwsPoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAwsPoolMachinesUIDGet returns the specified a w s machine
*/
func (a *Client) V1CloudConfigsAwsPoolMachinesUIDGet(params *V1CloudConfigsAwsPoolMachinesUIDGetParams) (*V1CloudConfigsAwsPoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAwsPoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAwsPoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAwsPoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAwsPoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAwsPoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAwsPoolMachinesUIDUpdate updates the specified machine to the cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAwsPoolMachinesUIDUpdate(params *V1CloudConfigsAwsPoolMachinesUIDUpdateParams) (*V1CloudConfigsAwsPoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAwsPoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAwsPoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAwsPoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAwsPoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAwsPoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAwsUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsAwsUIDClusterConfig(params *V1CloudConfigsAwsUIDClusterConfigParams) (*V1CloudConfigsAwsUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAwsUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAwsUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/aws/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAwsUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAwsUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAwsUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAzureGet returns the specified azure cloud config
*/
func (a *Client) V1CloudConfigsAzureGet(params *V1CloudConfigsAzureGetParams) (*V1CloudConfigsAzureGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAzureGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAzureGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/azure/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAzureGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAzureGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAzureGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAzureMachinePoolCreate creates an azure cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAzureMachinePoolCreate(params *V1CloudConfigsAzureMachinePoolCreateParams) (*V1CloudConfigsAzureMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAzureMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAzureMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/azure/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAzureMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAzureMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAzureMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAzureMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsAzureMachinePoolDelete(params *V1CloudConfigsAzureMachinePoolDeleteParams) (*V1CloudConfigsAzureMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAzureMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAzureMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAzureMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAzureMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAzureMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAzureMachinePoolUpdate updates the specified azure cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAzureMachinePoolUpdate(params *V1CloudConfigsAzureMachinePoolUpdateParams) (*V1CloudConfigsAzureMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAzureMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAzureMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAzureMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAzureMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAzureMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAzurePoolMachinesAdd adds the machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAzurePoolMachinesAdd(params *V1CloudConfigsAzurePoolMachinesAddParams) (*V1CloudConfigsAzurePoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAzurePoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAzurePoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAzurePoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAzurePoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAzurePoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAzurePoolMachinesList retrieves a list of azure machines

Returns all the Azure machines restricted to the user role and filters.
*/
func (a *Client) V1CloudConfigsAzurePoolMachinesList(params *V1CloudConfigsAzurePoolMachinesListParams) (*V1CloudConfigsAzurePoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAzurePoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAzurePoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAzurePoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAzurePoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAzurePoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAzurePoolMachinesUIDDelete deletes the specified azure machine
*/
func (a *Client) V1CloudConfigsAzurePoolMachinesUIDDelete(params *V1CloudConfigsAzurePoolMachinesUIDDeleteParams) (*V1CloudConfigsAzurePoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAzurePoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAzurePoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAzurePoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAzurePoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAzurePoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAzurePoolMachinesUIDGet returns the specified azure machine

Returns a Azure machine for the specified uid.
*/
func (a *Client) V1CloudConfigsAzurePoolMachinesUIDGet(params *V1CloudConfigsAzurePoolMachinesUIDGetParams) (*V1CloudConfigsAzurePoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAzurePoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAzurePoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAzurePoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAzurePoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAzurePoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAzurePoolMachinesUIDUpdate updates the specified machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsAzurePoolMachinesUIDUpdate(params *V1CloudConfigsAzurePoolMachinesUIDUpdateParams) (*V1CloudConfigsAzurePoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAzurePoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAzurePoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAzurePoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAzurePoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAzurePoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsAzureUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsAzureUIDClusterConfig(params *V1CloudConfigsAzureUIDClusterConfigParams) (*V1CloudConfigsAzureUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsAzureUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsAzureUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/azure/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsAzureUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsAzureUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsAzureUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsCustomGet returns the specified custom cloud config
*/
func (a *Client) V1CloudConfigsCustomGet(params *V1CloudConfigsCustomGetParams) (*V1CloudConfigsCustomGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsCustomGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsCustomGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsCustomGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsCustomGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsCustomGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsCustomMachinePoolCreate creates an custom cloud config s machine pool
*/
func (a *Client) V1CloudConfigsCustomMachinePoolCreate(params *V1CloudConfigsCustomMachinePoolCreateParams) (*V1CloudConfigsCustomMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsCustomMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsCustomMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsCustomMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsCustomMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsCustomMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsCustomMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsCustomMachinePoolDelete(params *V1CloudConfigsCustomMachinePoolDeleteParams) (*V1CloudConfigsCustomMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsCustomMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsCustomMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsCustomMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsCustomMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsCustomMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsCustomMachinePoolUpdate updates the specified custom cloud config s machine pool
*/
func (a *Client) V1CloudConfigsCustomMachinePoolUpdate(params *V1CloudConfigsCustomMachinePoolUpdateParams) (*V1CloudConfigsCustomMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsCustomMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsCustomMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsCustomMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsCustomMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsCustomMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsCustomPoolMachinesAdd adds the machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsCustomPoolMachinesAdd(params *V1CloudConfigsCustomPoolMachinesAddParams) (*V1CloudConfigsCustomPoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsCustomPoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsCustomPoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsCustomPoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsCustomPoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsCustomPoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsCustomPoolMachinesList retrieves a list of custom machines
*/
func (a *Client) V1CloudConfigsCustomPoolMachinesList(params *V1CloudConfigsCustomPoolMachinesListParams) (*V1CloudConfigsCustomPoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsCustomPoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsCustomPoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsCustomPoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsCustomPoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsCustomPoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsCustomPoolMachinesUIDDelete deletes the specified custom machine
*/
func (a *Client) V1CloudConfigsCustomPoolMachinesUIDDelete(params *V1CloudConfigsCustomPoolMachinesUIDDeleteParams) (*V1CloudConfigsCustomPoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsCustomPoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsCustomPoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsCustomPoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsCustomPoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsCustomPoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsCustomPoolMachinesUIDGet returns the specified custom machine
*/
func (a *Client) V1CloudConfigsCustomPoolMachinesUIDGet(params *V1CloudConfigsCustomPoolMachinesUIDGetParams) (*V1CloudConfigsCustomPoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsCustomPoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsCustomPoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsCustomPoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsCustomPoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsCustomPoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsCustomPoolMachinesUIDUpdate updates the specified machine to the cloud config s machine pool
*/
func (a *Client) V1CloudConfigsCustomPoolMachinesUIDUpdate(params *V1CloudConfigsCustomPoolMachinesUIDUpdateParams) (*V1CloudConfigsCustomPoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsCustomPoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsCustomPoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsCustomPoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsCustomPoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsCustomPoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsCustomUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsCustomUIDClusterConfig(params *V1CloudConfigsCustomUIDClusterConfigParams) (*V1CloudConfigsCustomUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsCustomUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsCustomUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsCustomUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsCustomUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsCustomUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEdgeNativeGet returns the specified edge native cloud config
*/
func (a *Client) V1CloudConfigsEdgeNativeGet(params *V1CloudConfigsEdgeNativeGetParams) (*V1CloudConfigsEdgeNativeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEdgeNativeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEdgeNativeGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/edge-native/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEdgeNativeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEdgeNativeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEdgeNativeGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEdgeNativeMachinePoolCreate creates a edge native cloud config s machine pool
*/
func (a *Client) V1CloudConfigsEdgeNativeMachinePoolCreate(params *V1CloudConfigsEdgeNativeMachinePoolCreateParams) (*V1CloudConfigsEdgeNativeMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEdgeNativeMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEdgeNativeMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/edge-native/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEdgeNativeMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEdgeNativeMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEdgeNativeMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEdgeNativeMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsEdgeNativeMachinePoolDelete(params *V1CloudConfigsEdgeNativeMachinePoolDeleteParams) (*V1CloudConfigsEdgeNativeMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEdgeNativeMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEdgeNativeMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEdgeNativeMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEdgeNativeMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEdgeNativeMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEdgeNativeMachinePoolUpdate updates the specified edge native cloud config s machine pool
*/
func (a *Client) V1CloudConfigsEdgeNativeMachinePoolUpdate(params *V1CloudConfigsEdgeNativeMachinePoolUpdateParams) (*V1CloudConfigsEdgeNativeMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEdgeNativeMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEdgeNativeMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEdgeNativeMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEdgeNativeMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEdgeNativeMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEdgeNativePoolMachinesAdd adds the edge native machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsEdgeNativePoolMachinesAdd(params *V1CloudConfigsEdgeNativePoolMachinesAddParams) (*V1CloudConfigsEdgeNativePoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEdgeNativePoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEdgeNativePoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEdgeNativePoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEdgeNativePoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEdgeNativePoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEdgeNativePoolMachinesList retrieves a list of edge native machines
*/
func (a *Client) V1CloudConfigsEdgeNativePoolMachinesList(params *V1CloudConfigsEdgeNativePoolMachinesListParams) (*V1CloudConfigsEdgeNativePoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEdgeNativePoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEdgeNativePoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEdgeNativePoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEdgeNativePoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEdgeNativePoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEdgeNativePoolMachinesUIDDelete deletes the specified edge native machine
*/
func (a *Client) V1CloudConfigsEdgeNativePoolMachinesUIDDelete(params *V1CloudConfigsEdgeNativePoolMachinesUIDDeleteParams) (*V1CloudConfigsEdgeNativePoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEdgeNativePoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEdgeNativePoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEdgeNativePoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEdgeNativePoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEdgeNativePoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEdgeNativePoolMachinesUIDGet returns the specified edge native machine
*/
func (a *Client) V1CloudConfigsEdgeNativePoolMachinesUIDGet(params *V1CloudConfigsEdgeNativePoolMachinesUIDGetParams) (*V1CloudConfigsEdgeNativePoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEdgeNativePoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEdgeNativePoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEdgeNativePoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEdgeNativePoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEdgeNativePoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEdgeNativePoolMachinesUIDUpdate updates the specified machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsEdgeNativePoolMachinesUIDUpdate(params *V1CloudConfigsEdgeNativePoolMachinesUIDUpdateParams) (*V1CloudConfigsEdgeNativePoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEdgeNativePoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEdgeNativePoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEdgeNativePoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEdgeNativePoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEdgeNativePoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEdgeNativeUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsEdgeNativeUIDClusterConfig(params *V1CloudConfigsEdgeNativeUIDClusterConfigParams) (*V1CloudConfigsEdgeNativeUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEdgeNativeUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEdgeNativeUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/edge-native/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEdgeNativeUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEdgeNativeUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEdgeNativeUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksGet returns the specified e k s cloud config
*/
func (a *Client) V1CloudConfigsEksGet(params *V1CloudConfigsEksGetParams) (*V1CloudConfigsEksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksMachinePoolCreate creates an e k s cloud config s machine pool
*/
func (a *Client) V1CloudConfigsEksMachinePoolCreate(params *V1CloudConfigsEksMachinePoolCreateParams) (*V1CloudConfigsEksMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsEksMachinePoolDelete(params *V1CloudConfigsEksMachinePoolDeleteParams) (*V1CloudConfigsEksMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksMachinePoolUpdate updates the specified e k s cloud config s machine pool
*/
func (a *Client) V1CloudConfigsEksMachinePoolUpdate(params *V1CloudConfigsEksMachinePoolUpdateParams) (*V1CloudConfigsEksMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksPoolMachinesAdd adds the machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsEksPoolMachinesAdd(params *V1CloudConfigsEksPoolMachinesAddParams) (*V1CloudConfigsEksPoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksPoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksPoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksPoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksPoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksPoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksPoolMachinesList retrieves a list of e k s machines
*/
func (a *Client) V1CloudConfigsEksPoolMachinesList(params *V1CloudConfigsEksPoolMachinesListParams) (*V1CloudConfigsEksPoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksPoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksPoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksPoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksPoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksPoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksPoolMachinesUIDDelete deletes the specified e k s machine
*/
func (a *Client) V1CloudConfigsEksPoolMachinesUIDDelete(params *V1CloudConfigsEksPoolMachinesUIDDeleteParams) (*V1CloudConfigsEksPoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksPoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksPoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksPoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksPoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksPoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksPoolMachinesUIDGet returns the specified e k s machine
*/
func (a *Client) V1CloudConfigsEksPoolMachinesUIDGet(params *V1CloudConfigsEksPoolMachinesUIDGetParams) (*V1CloudConfigsEksPoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksPoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksPoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksPoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksPoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksPoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksPoolMachinesUIDUpdate updates the specified machine to the cloud config s machine pool
*/
func (a *Client) V1CloudConfigsEksPoolMachinesUIDUpdate(params *V1CloudConfigsEksPoolMachinesUIDUpdateParams) (*V1CloudConfigsEksPoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksPoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksPoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksPoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksPoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksPoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsEksUIDClusterConfig(params *V1CloudConfigsEksUIDClusterConfigParams) (*V1CloudConfigsEksUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsEksUIDFargateProfilesUpdate updates e k s cloud config s fargate profiles
*/
func (a *Client) V1CloudConfigsEksUIDFargateProfilesUpdate(params *V1CloudConfigsEksUIDFargateProfilesUpdateParams) (*V1CloudConfigsEksUIDFargateProfilesUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsEksUIDFargateProfilesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsEksUidFargateProfilesUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/eks/{configUid}/fargateProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsEksUIDFargateProfilesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsEksUIDFargateProfilesUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsEksUidFargateProfilesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGcpGet returns the specified g c p cloud config
*/
func (a *Client) V1CloudConfigsGcpGet(params *V1CloudConfigsGcpGetParams) (*V1CloudConfigsGcpGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGcpGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGcpGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/gcp/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGcpGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGcpGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGcpGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGcpMachinePoolCreate creates a gcp cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGcpMachinePoolCreate(params *V1CloudConfigsGcpMachinePoolCreateParams) (*V1CloudConfigsGcpMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGcpMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGcpMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/gcp/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGcpMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGcpMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGcpMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGcpMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsGcpMachinePoolDelete(params *V1CloudConfigsGcpMachinePoolDeleteParams) (*V1CloudConfigsGcpMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGcpMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGcpMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGcpMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGcpMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGcpMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGcpMachinePoolUpdate updates the specified g c p cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGcpMachinePoolUpdate(params *V1CloudConfigsGcpMachinePoolUpdateParams) (*V1CloudConfigsGcpMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGcpMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGcpMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGcpMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGcpMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGcpMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGcpPoolMachinesAdd adds the machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGcpPoolMachinesAdd(params *V1CloudConfigsGcpPoolMachinesAddParams) (*V1CloudConfigsGcpPoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGcpPoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGcpPoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGcpPoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGcpPoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGcpPoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGcpPoolMachinesList retrieves a list of g c p machines
*/
func (a *Client) V1CloudConfigsGcpPoolMachinesList(params *V1CloudConfigsGcpPoolMachinesListParams) (*V1CloudConfigsGcpPoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGcpPoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGcpPoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGcpPoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGcpPoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGcpPoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGcpPoolMachinesUIDDelete deletes the specified g c p machine
*/
func (a *Client) V1CloudConfigsGcpPoolMachinesUIDDelete(params *V1CloudConfigsGcpPoolMachinesUIDDeleteParams) (*V1CloudConfigsGcpPoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGcpPoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGcpPoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGcpPoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGcpPoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGcpPoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGcpPoolMachinesUIDGet returns the specified g c p machine
*/
func (a *Client) V1CloudConfigsGcpPoolMachinesUIDGet(params *V1CloudConfigsGcpPoolMachinesUIDGetParams) (*V1CloudConfigsGcpPoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGcpPoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGcpPoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGcpPoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGcpPoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGcpPoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGcpPoolMachinesUIDUpdate updates the specified machine to the cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGcpPoolMachinesUIDUpdate(params *V1CloudConfigsGcpPoolMachinesUIDUpdateParams) (*V1CloudConfigsGcpPoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGcpPoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGcpPoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGcpPoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGcpPoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGcpPoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGcpUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsGcpUIDClusterConfig(params *V1CloudConfigsGcpUIDClusterConfigParams) (*V1CloudConfigsGcpUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGcpUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGcpUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/gcp/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGcpUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGcpUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGcpUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGenericGet returns the specified generic cloud config
*/
func (a *Client) V1CloudConfigsGenericGet(params *V1CloudConfigsGenericGetParams) (*V1CloudConfigsGenericGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGenericGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGenericGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/generic/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGenericGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGenericGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGenericGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGenericMachinePoolCreate creates a generic cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGenericMachinePoolCreate(params *V1CloudConfigsGenericMachinePoolCreateParams) (*V1CloudConfigsGenericMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGenericMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGenericMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/generic/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGenericMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGenericMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGenericMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGenericMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsGenericMachinePoolDelete(params *V1CloudConfigsGenericMachinePoolDeleteParams) (*V1CloudConfigsGenericMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGenericMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGenericMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGenericMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGenericMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGenericMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGenericMachinePoolUpdate updates the specified generic cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGenericMachinePoolUpdate(params *V1CloudConfigsGenericMachinePoolUpdateParams) (*V1CloudConfigsGenericMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGenericMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGenericMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGenericMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGenericMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGenericMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGenericPoolMachinesAdd adds the machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGenericPoolMachinesAdd(params *V1CloudConfigsGenericPoolMachinesAddParams) (*V1CloudConfigsGenericPoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGenericPoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGenericPoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGenericPoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGenericPoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGenericPoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGenericPoolMachinesList retrieves a list of generic machines
*/
func (a *Client) V1CloudConfigsGenericPoolMachinesList(params *V1CloudConfigsGenericPoolMachinesListParams) (*V1CloudConfigsGenericPoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGenericPoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGenericPoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGenericPoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGenericPoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGenericPoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGenericPoolMachinesUIDDelete deletes the specified machine
*/
func (a *Client) V1CloudConfigsGenericPoolMachinesUIDDelete(params *V1CloudConfigsGenericPoolMachinesUIDDeleteParams) (*V1CloudConfigsGenericPoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGenericPoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGenericPoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGenericPoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGenericPoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGenericPoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGenericPoolMachinesUIDGet returns the specified generic machine
*/
func (a *Client) V1CloudConfigsGenericPoolMachinesUIDGet(params *V1CloudConfigsGenericPoolMachinesUIDGetParams) (*V1CloudConfigsGenericPoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGenericPoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGenericPoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGenericPoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGenericPoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGenericPoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGenericPoolMachinesUIDUpdate updates the specified machine to the cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGenericPoolMachinesUIDUpdate(params *V1CloudConfigsGenericPoolMachinesUIDUpdateParams) (*V1CloudConfigsGenericPoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGenericPoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGenericPoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGenericPoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGenericPoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGenericPoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGenericUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsGenericUIDClusterConfig(params *V1CloudConfigsGenericUIDClusterConfigParams) (*V1CloudConfigsGenericUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGenericUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGenericUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/generic/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGenericUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGenericUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGenericUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGkeGet returns the specified g k e cloud config
*/
func (a *Client) V1CloudConfigsGkeGet(params *V1CloudConfigsGkeGetParams) (*V1CloudConfigsGkeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGkeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGkeGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/gke/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGkeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGkeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGkeGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGkeMachinePoolCreate creates an g k e cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGkeMachinePoolCreate(params *V1CloudConfigsGkeMachinePoolCreateParams) (*V1CloudConfigsGkeMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGkeMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGkeMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/gke/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGkeMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGkeMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGkeMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGkeMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsGkeMachinePoolDelete(params *V1CloudConfigsGkeMachinePoolDeleteParams) (*V1CloudConfigsGkeMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGkeMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGkeMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGkeMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGkeMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGkeMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGkeMachinePoolUpdate updates the specified g k e cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGkeMachinePoolUpdate(params *V1CloudConfigsGkeMachinePoolUpdateParams) (*V1CloudConfigsGkeMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGkeMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGkeMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGkeMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGkeMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGkeMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGkePoolMachinesAdd adds the machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGkePoolMachinesAdd(params *V1CloudConfigsGkePoolMachinesAddParams) (*V1CloudConfigsGkePoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGkePoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGkePoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGkePoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGkePoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGkePoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGkePoolMachinesList retrieves a list of g k e machines
*/
func (a *Client) V1CloudConfigsGkePoolMachinesList(params *V1CloudConfigsGkePoolMachinesListParams) (*V1CloudConfigsGkePoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGkePoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGkePoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGkePoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGkePoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGkePoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGkePoolMachinesUIDDelete deletes the specified gcp machine
*/
func (a *Client) V1CloudConfigsGkePoolMachinesUIDDelete(params *V1CloudConfigsGkePoolMachinesUIDDeleteParams) (*V1CloudConfigsGkePoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGkePoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGkePoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGkePoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGkePoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGkePoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGkePoolMachinesUIDGet returns the specified g k e machine
*/
func (a *Client) V1CloudConfigsGkePoolMachinesUIDGet(params *V1CloudConfigsGkePoolMachinesUIDGetParams) (*V1CloudConfigsGkePoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGkePoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGkePoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGkePoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGkePoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGkePoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGkePoolMachinesUIDUpdate updates the specified machine to the cloud config s machine pool
*/
func (a *Client) V1CloudConfigsGkePoolMachinesUIDUpdate(params *V1CloudConfigsGkePoolMachinesUIDUpdateParams) (*V1CloudConfigsGkePoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGkePoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGkePoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGkePoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGkePoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGkePoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsGkeUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsGkeUIDClusterConfig(params *V1CloudConfigsGkeUIDClusterConfigParams) (*V1CloudConfigsGkeUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsGkeUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsGkeUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/gke/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsGkeUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsGkeUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsGkeUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMaasGet returns the specified maas cloud config
*/
func (a *Client) V1CloudConfigsMaasGet(params *V1CloudConfigsMaasGetParams) (*V1CloudConfigsMaasGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMaasGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMaasGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/maas/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMaasGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMaasGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMaasGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMaasMachinePoolCreate creates an maas cloud config s machine pool
*/
func (a *Client) V1CloudConfigsMaasMachinePoolCreate(params *V1CloudConfigsMaasMachinePoolCreateParams) (*V1CloudConfigsMaasMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMaasMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMaasMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/maas/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMaasMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMaasMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMaasMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMaasMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsMaasMachinePoolDelete(params *V1CloudConfigsMaasMachinePoolDeleteParams) (*V1CloudConfigsMaasMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMaasMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMaasMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMaasMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMaasMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMaasMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMaasMachinePoolUpdate updates the specified maas cloud config s machine pool
*/
func (a *Client) V1CloudConfigsMaasMachinePoolUpdate(params *V1CloudConfigsMaasMachinePoolUpdateParams) (*V1CloudConfigsMaasMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMaasMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMaasMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMaasMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMaasMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMaasMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMaasPoolMachinesAdd adds the machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsMaasPoolMachinesAdd(params *V1CloudConfigsMaasPoolMachinesAddParams) (*V1CloudConfigsMaasPoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMaasPoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMaasPoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMaasPoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMaasPoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMaasPoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMaasPoolMachinesList retrieves a list of maas machines
*/
func (a *Client) V1CloudConfigsMaasPoolMachinesList(params *V1CloudConfigsMaasPoolMachinesListParams) (*V1CloudConfigsMaasPoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMaasPoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMaasPoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMaasPoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMaasPoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMaasPoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMaasPoolMachinesUIDDelete deletes the specified maas machine
*/
func (a *Client) V1CloudConfigsMaasPoolMachinesUIDDelete(params *V1CloudConfigsMaasPoolMachinesUIDDeleteParams) (*V1CloudConfigsMaasPoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMaasPoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMaasPoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMaasPoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMaasPoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMaasPoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMaasPoolMachinesUIDGet returns the specified maas machine
*/
func (a *Client) V1CloudConfigsMaasPoolMachinesUIDGet(params *V1CloudConfigsMaasPoolMachinesUIDGetParams) (*V1CloudConfigsMaasPoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMaasPoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMaasPoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMaasPoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMaasPoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMaasPoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMaasPoolMachinesUIDUpdate updates the specified machine to the cloud config s machine pool
*/
func (a *Client) V1CloudConfigsMaasPoolMachinesUIDUpdate(params *V1CloudConfigsMaasPoolMachinesUIDUpdateParams) (*V1CloudConfigsMaasPoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMaasPoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMaasPoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMaasPoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMaasPoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMaasPoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMaasUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsMaasUIDClusterConfig(params *V1CloudConfigsMaasUIDClusterConfigParams) (*V1CloudConfigsMaasUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMaasUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMaasUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/maas/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMaasUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMaasUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMaasUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMachinePoolsMachineUIDMaintenanceStatusUpdate updates the specified machine maintenance
*/
func (a *Client) V1CloudConfigsMachinePoolsMachineUIDMaintenanceStatusUpdate(params *V1CloudConfigsMachinePoolsMachineUIDMaintenanceStatusUpdateParams) (*V1CloudConfigsMachinePoolsMachineUIDMaintenanceStatusUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMachinePoolsMachineUIDMaintenanceStatusUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}/maintenance/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMachinePoolsMachineUIDMaintenanceStatusUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMachinePoolsMachineUIDMaintenanceStatusUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMachinePoolsMachineUIDMaintenanceUpdate updates the specified machine maintenance
*/
func (a *Client) V1CloudConfigsMachinePoolsMachineUIDMaintenanceUpdate(params *V1CloudConfigsMachinePoolsMachineUIDMaintenanceUpdateParams) (*V1CloudConfigsMachinePoolsMachineUIDMaintenanceUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMachinePoolsMachineUIDMaintenanceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}/maintenance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMachinePoolsMachineUIDMaintenanceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMachinePoolsMachineUIDMaintenanceUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsMachinePoolsMachineUidsGet returns the specified cloud config s machine pools and machine uid
*/
func (a *Client) V1CloudConfigsMachinePoolsMachineUidsGet(params *V1CloudConfigsMachinePoolsMachineUidsGetParams) (*V1CloudConfigsMachinePoolsMachineUidsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsMachinePoolsMachineUidsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsMachinePoolsMachineUidsGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/{configUid}/machinePools/machineUids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsMachinePoolsMachineUidsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsMachinePoolsMachineUidsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsMachinePoolsMachineUidsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsOpenStackGet returns the specified open stack cloud config
*/
func (a *Client) V1CloudConfigsOpenStackGet(params *V1CloudConfigsOpenStackGetParams) (*V1CloudConfigsOpenStackGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsOpenStackGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsOpenStackGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/openstack/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsOpenStackGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsOpenStackGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsOpenStackGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsOpenStackMachinePoolCreate creates a open stack cloud config s machine pool
*/
func (a *Client) V1CloudConfigsOpenStackMachinePoolCreate(params *V1CloudConfigsOpenStackMachinePoolCreateParams) (*V1CloudConfigsOpenStackMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsOpenStackMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsOpenStackMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/openstack/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsOpenStackMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsOpenStackMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsOpenStackMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsOpenStackMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsOpenStackMachinePoolDelete(params *V1CloudConfigsOpenStackMachinePoolDeleteParams) (*V1CloudConfigsOpenStackMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsOpenStackMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsOpenStackMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsOpenStackMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsOpenStackMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsOpenStackMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsOpenStackMachinePoolUpdate updates the specified open stack cloud config s machine pool
*/
func (a *Client) V1CloudConfigsOpenStackMachinePoolUpdate(params *V1CloudConfigsOpenStackMachinePoolUpdateParams) (*V1CloudConfigsOpenStackMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsOpenStackMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsOpenStackMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsOpenStackMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsOpenStackMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsOpenStackMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsOpenStackPoolMachinesAdd adds the open stack machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsOpenStackPoolMachinesAdd(params *V1CloudConfigsOpenStackPoolMachinesAddParams) (*V1CloudConfigsOpenStackPoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsOpenStackPoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsOpenStackPoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsOpenStackPoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsOpenStackPoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsOpenStackPoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsOpenStackPoolMachinesList retrieves a list of open stack machines
*/
func (a *Client) V1CloudConfigsOpenStackPoolMachinesList(params *V1CloudConfigsOpenStackPoolMachinesListParams) (*V1CloudConfigsOpenStackPoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsOpenStackPoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsOpenStackPoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsOpenStackPoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsOpenStackPoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsOpenStackPoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsOpenStackPoolMachinesUIDDelete deletes the specified open stack machine
*/
func (a *Client) V1CloudConfigsOpenStackPoolMachinesUIDDelete(params *V1CloudConfigsOpenStackPoolMachinesUIDDeleteParams) (*V1CloudConfigsOpenStackPoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsOpenStackPoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsOpenStackPoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsOpenStackPoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsOpenStackPoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsOpenStackPoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsOpenStackPoolMachinesUIDGet returns the specified open stack machine
*/
func (a *Client) V1CloudConfigsOpenStackPoolMachinesUIDGet(params *V1CloudConfigsOpenStackPoolMachinesUIDGetParams) (*V1CloudConfigsOpenStackPoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsOpenStackPoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsOpenStackPoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsOpenStackPoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsOpenStackPoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsOpenStackPoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsOpenStackPoolMachinesUIDUpdate updates the specified machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsOpenStackPoolMachinesUIDUpdate(params *V1CloudConfigsOpenStackPoolMachinesUIDUpdateParams) (*V1CloudConfigsOpenStackPoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsOpenStackPoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsOpenStackPoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsOpenStackPoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsOpenStackPoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsOpenStackPoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsOpenStackUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsOpenStackUIDClusterConfig(params *V1CloudConfigsOpenStackUIDClusterConfigParams) (*V1CloudConfigsOpenStackUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsOpenStackUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsOpenStackUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/openstack/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsOpenStackUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsOpenStackUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsOpenStackUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualGet returns the specified virtual cloud config
*/
func (a *Client) V1CloudConfigsVirtualGet(params *V1CloudConfigsVirtualGetParams) (*V1CloudConfigsVirtualGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualMachinePoolCreate creates a virtual cloud config s machine pool
*/
func (a *Client) V1CloudConfigsVirtualMachinePoolCreate(params *V1CloudConfigsVirtualMachinePoolCreateParams) (*V1CloudConfigsVirtualMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsVirtualMachinePoolDelete(params *V1CloudConfigsVirtualMachinePoolDeleteParams) (*V1CloudConfigsVirtualMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualMachinePoolUpdate updates the specified virtual cloud config s machine pool
*/
func (a *Client) V1CloudConfigsVirtualMachinePoolUpdate(params *V1CloudConfigsVirtualMachinePoolUpdateParams) (*V1CloudConfigsVirtualMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualPoolMachinesAdd adds the machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsVirtualPoolMachinesAdd(params *V1CloudConfigsVirtualPoolMachinesAddParams) (*V1CloudConfigsVirtualPoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualPoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualPoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualPoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualPoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualPoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualPoolMachinesList retrieves a list of virtual machines
*/
func (a *Client) V1CloudConfigsVirtualPoolMachinesList(params *V1CloudConfigsVirtualPoolMachinesListParams) (*V1CloudConfigsVirtualPoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualPoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualPoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualPoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualPoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualPoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualPoolMachinesUIDDelete deletes the specified virtual machine
*/
func (a *Client) V1CloudConfigsVirtualPoolMachinesUIDDelete(params *V1CloudConfigsVirtualPoolMachinesUIDDeleteParams) (*V1CloudConfigsVirtualPoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualPoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualPoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualPoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualPoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualPoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualPoolMachinesUIDGet returns the specified virtual machine
*/
func (a *Client) V1CloudConfigsVirtualPoolMachinesUIDGet(params *V1CloudConfigsVirtualPoolMachinesUIDGetParams) (*V1CloudConfigsVirtualPoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualPoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualPoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualPoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualPoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualPoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualPoolMachinesUIDUpdate updates the specified machine to the cloud config s machine pool
*/
func (a *Client) V1CloudConfigsVirtualPoolMachinesUIDUpdate(params *V1CloudConfigsVirtualPoolMachinesUIDUpdateParams) (*V1CloudConfigsVirtualPoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualPoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualPoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualPoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualPoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualPoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsVirtualUIDClusterConfig(params *V1CloudConfigsVirtualUIDClusterConfigParams) (*V1CloudConfigsVirtualUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVirtualUIDUpdate updates and resizes the virtual cluster
*/
func (a *Client) V1CloudConfigsVirtualUIDUpdate(params *V1CloudConfigsVirtualUIDUpdateParams) (*V1CloudConfigsVirtualUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVirtualUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVirtualUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/virtual/{configUid}/resize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVirtualUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVirtualUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVirtualUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVsphereGet returns the specified v sphere cloud config
*/
func (a *Client) V1CloudConfigsVsphereGet(params *V1CloudConfigsVsphereGetParams) (*V1CloudConfigsVsphereGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVsphereGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVsphereGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/vsphere/{configUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVsphereGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVsphereGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVsphereGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVsphereMachinePoolCreate creates a v sphere cloud config s machine pool
*/
func (a *Client) V1CloudConfigsVsphereMachinePoolCreate(params *V1CloudConfigsVsphereMachinePoolCreateParams) (*V1CloudConfigsVsphereMachinePoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVsphereMachinePoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVsphereMachinePoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/vsphere/{configUid}/machinePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVsphereMachinePoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVsphereMachinePoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVsphereMachinePoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVsphereMachinePoolDelete deletes the specified machine pool
*/
func (a *Client) V1CloudConfigsVsphereMachinePoolDelete(params *V1CloudConfigsVsphereMachinePoolDeleteParams) (*V1CloudConfigsVsphereMachinePoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVsphereMachinePoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVsphereMachinePoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVsphereMachinePoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVsphereMachinePoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVsphereMachinePoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVsphereMachinePoolUpdate updates the specified v sphere cloud config s machine pool
*/
func (a *Client) V1CloudConfigsVsphereMachinePoolUpdate(params *V1CloudConfigsVsphereMachinePoolUpdateParams) (*V1CloudConfigsVsphereMachinePoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVsphereMachinePoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVsphereMachinePoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVsphereMachinePoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVsphereMachinePoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVsphereMachinePoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVspherePoolMachinesAdd adds the v sphere machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsVspherePoolMachinesAdd(params *V1CloudConfigsVspherePoolMachinesAddParams) (*V1CloudConfigsVspherePoolMachinesAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVspherePoolMachinesAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVspherePoolMachinesAdd",
		Method:             "POST",
		PathPattern:        "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVspherePoolMachinesAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVspherePoolMachinesAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVspherePoolMachinesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVspherePoolMachinesList retrieves a list of v sphere machines
*/
func (a *Client) V1CloudConfigsVspherePoolMachinesList(params *V1CloudConfigsVspherePoolMachinesListParams) (*V1CloudConfigsVspherePoolMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVspherePoolMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVspherePoolMachinesList",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVspherePoolMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVspherePoolMachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVspherePoolMachinesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVspherePoolMachinesUIDDelete deletes the specified v sphere machine
*/
func (a *Client) V1CloudConfigsVspherePoolMachinesUIDDelete(params *V1CloudConfigsVspherePoolMachinesUIDDeleteParams) (*V1CloudConfigsVspherePoolMachinesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVspherePoolMachinesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVspherePoolMachinesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVspherePoolMachinesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVspherePoolMachinesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVspherePoolMachinesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVspherePoolMachinesUIDGet returns the specified v sphere machine
*/
func (a *Client) V1CloudConfigsVspherePoolMachinesUIDGet(params *V1CloudConfigsVspherePoolMachinesUIDGetParams) (*V1CloudConfigsVspherePoolMachinesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVspherePoolMachinesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVspherePoolMachinesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVspherePoolMachinesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVspherePoolMachinesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVspherePoolMachinesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVspherePoolMachinesUIDUpdate updates the specified machine to cloud config s machine pool
*/
func (a *Client) V1CloudConfigsVspherePoolMachinesUIDUpdate(params *V1CloudConfigsVspherePoolMachinesUIDUpdateParams) (*V1CloudConfigsVspherePoolMachinesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVspherePoolMachinesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVspherePoolMachinesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVspherePoolMachinesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVspherePoolMachinesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVspherePoolMachinesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1CloudConfigsVsphereUIDClusterConfig updates the cluster configuration information
*/
func (a *Client) V1CloudConfigsVsphereUIDClusterConfig(params *V1CloudConfigsVsphereUIDClusterConfigParams) (*V1CloudConfigsVsphereUIDClusterConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1CloudConfigsVsphereUIDClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1CloudConfigsVsphereUidClusterConfig",
		Method:             "PUT",
		PathPattern:        "/v1/cloudconfigs/vsphere/{configUid}/clusterConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1CloudConfigsVsphereUIDClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1CloudConfigsVsphereUIDClusterConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1CloudConfigsVsphereUidClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureBackupCreate creates cluster backup settings
*/
func (a *Client) V1ClusterFeatureBackupCreate(params *V1ClusterFeatureBackupCreateParams) (*V1ClusterFeatureBackupCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureBackupCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureBackupCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/features/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureBackupCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureBackupCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureBackupCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureBackupDelete deletes cluster backup
*/
func (a *Client) V1ClusterFeatureBackupDelete(params *V1ClusterFeatureBackupDeleteParams) (*V1ClusterFeatureBackupDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureBackupDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureBackupDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/spectroclusters/{uid}/features/backup/{backupName}/request/{requestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureBackupDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureBackupDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureBackupDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureBackupGet returns the cluster backup result
*/
func (a *Client) V1ClusterFeatureBackupGet(params *V1ClusterFeatureBackupGetParams) (*V1ClusterFeatureBackupGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureBackupGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureBackupGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureBackupGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureBackupGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureBackupGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureBackupOnDemandCreate creates on demand cluster backup
*/
func (a *Client) V1ClusterFeatureBackupOnDemandCreate(params *V1ClusterFeatureBackupOnDemandCreateParams) (*V1ClusterFeatureBackupOnDemandCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureBackupOnDemandCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureBackupOnDemandCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/features/backup/onDemand",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureBackupOnDemandCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureBackupOnDemandCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureBackupOnDemandCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureBackupScheduleReset resets cluster backup schedule settings
*/
func (a *Client) V1ClusterFeatureBackupScheduleReset(params *V1ClusterFeatureBackupScheduleResetParams) (*V1ClusterFeatureBackupScheduleResetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureBackupScheduleResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureBackupScheduleReset",
		Method:             "DELETE",
		PathPattern:        "/v1/spectroclusters/{uid}/features/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureBackupScheduleResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureBackupScheduleResetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureBackupScheduleReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureBackupUpdate updates cluster backup settings
*/
func (a *Client) V1ClusterFeatureBackupUpdate(params *V1ClusterFeatureBackupUpdateParams) (*V1ClusterFeatureBackupUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureBackupUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureBackupUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/features/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureBackupUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureBackupUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureBackupUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureComplianceScanCreate creates cluster compliance scan
*/
func (a *Client) V1ClusterFeatureComplianceScanCreate(params *V1ClusterFeatureComplianceScanCreateParams) (*V1ClusterFeatureComplianceScanCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureComplianceScanCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureComplianceScanCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureComplianceScanCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureComplianceScanCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureComplianceScanCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureComplianceScanGet returns the compliance scan of cluster if driver type is provided then specific status of driver type will be returned
*/
func (a *Client) V1ClusterFeatureComplianceScanGet(params *V1ClusterFeatureComplianceScanGetParams) (*V1ClusterFeatureComplianceScanGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureComplianceScanGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureComplianceScanGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureComplianceScanGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureComplianceScanGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureComplianceScanGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureComplianceScanLogDelete deletes the compliance scan log by uid
*/
func (a *Client) V1ClusterFeatureComplianceScanLogDelete(params *V1ClusterFeatureComplianceScanLogDeleteParams) (*V1ClusterFeatureComplianceScanLogDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureComplianceScanLogDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureComplianceScanLogDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureComplianceScanLogDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureComplianceScanLogDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureComplianceScanLogDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureComplianceScanLogsGet returns the compliance scan log by cluster uid and driver type
*/
func (a *Client) V1ClusterFeatureComplianceScanLogsGet(params *V1ClusterFeatureComplianceScanLogsGetParams) (*V1ClusterFeatureComplianceScanLogsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureComplianceScanLogsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureComplianceScanLogsGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureComplianceScanLogsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureComplianceScanLogsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureComplianceScanLogsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureComplianceScanOnDemandCreate creates on demand cluster compliance scan
*/
func (a *Client) V1ClusterFeatureComplianceScanOnDemandCreate(params *V1ClusterFeatureComplianceScanOnDemandCreateParams) (*V1ClusterFeatureComplianceScanOnDemandCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureComplianceScanOnDemandCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureComplianceScanOnDemandCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/onDemand",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureComplianceScanOnDemandCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureComplianceScanOnDemandCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureComplianceScanOnDemandCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureComplianceScanUpdate updates cluster compliance scan settings
*/
func (a *Client) V1ClusterFeatureComplianceScanUpdate(params *V1ClusterFeatureComplianceScanUpdateParams) (*V1ClusterFeatureComplianceScanUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureComplianceScanUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureComplianceScanUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureComplianceScanUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureComplianceScanUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureComplianceScanUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureDriverLogDownload downloads the driver cluster logs
*/
func (a *Client) V1ClusterFeatureDriverLogDownload(params *V1ClusterFeatureDriverLogDownloadParams, writer io.Writer) (*V1ClusterFeatureDriverLogDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureDriverLogDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureDriverLogDownload",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/{driver}/download",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureDriverLogDownloadReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureDriverLogDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureDriverLogDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureHelmChartsGet gets the installed helm charts of a specified cluster
*/
func (a *Client) V1ClusterFeatureHelmChartsGet(params *V1ClusterFeatureHelmChartsGetParams) (*V1ClusterFeatureHelmChartsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureHelmChartsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureHelmChartsGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/helmCharts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureHelmChartsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureHelmChartsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureHelmChartsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureKubeBenchLogGet returns the kube bench compliance scan log by uid
*/
func (a *Client) V1ClusterFeatureKubeBenchLogGet(params *V1ClusterFeatureKubeBenchLogGetParams) (*V1ClusterFeatureKubeBenchLogGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureKubeBenchLogGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureKubeBenchLogGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/kubeBench",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureKubeBenchLogGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureKubeBenchLogGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureKubeBenchLogGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureKubeHunterLogGet returns the kube hunter compliance scan log by uid
*/
func (a *Client) V1ClusterFeatureKubeHunterLogGet(params *V1ClusterFeatureKubeHunterLogGetParams) (*V1ClusterFeatureKubeHunterLogGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureKubeHunterLogGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureKubeHunterLogGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/kubeHunter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureKubeHunterLogGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureKubeHunterLogGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureKubeHunterLogGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureLogFetcherCreate creates the log fetcher for cluster
*/
func (a *Client) V1ClusterFeatureLogFetcherCreate(params *V1ClusterFeatureLogFetcherCreateParams) (*V1ClusterFeatureLogFetcherCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureLogFetcherCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureLogFetcherCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/features/logFetcher",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureLogFetcherCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureLogFetcherCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureLogFetcherCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureLogFetcherGet gets the log fetcher for cluster
*/
func (a *Client) V1ClusterFeatureLogFetcherGet(params *V1ClusterFeatureLogFetcherGetParams) (*V1ClusterFeatureLogFetcherGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureLogFetcherGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureLogFetcherGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/logFetcher",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureLogFetcherGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureLogFetcherGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureLogFetcherGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureLogFetcherLogDownload downloads log fetcher logs for cluster by log fetcher uid
*/
func (a *Client) V1ClusterFeatureLogFetcherLogDownload(params *V1ClusterFeatureLogFetcherLogDownloadParams, writer io.Writer) (*V1ClusterFeatureLogFetcherLogDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureLogFetcherLogDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureLogFetcherLogDownload",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/features/logFetcher/{uid}/download",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureLogFetcherLogDownloadReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureLogFetcherLogDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureLogFetcherLogDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureLogFetcherLogUpdate updates log fetcher logs by log fetcher uid
*/
func (a *Client) V1ClusterFeatureLogFetcherLogUpdate(params *V1ClusterFeatureLogFetcherLogUpdateParams) (*V1ClusterFeatureLogFetcherLogUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureLogFetcherLogUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureLogFetcherLogUpdate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/features/logFetcher/{uid}/log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureLogFetcherLogUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureLogFetcherLogUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureLogFetcherLogUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureManifestsGet gets the installed manifests of a specified cluster
*/
func (a *Client) V1ClusterFeatureManifestsGet(params *V1ClusterFeatureManifestsGetParams) (*V1ClusterFeatureManifestsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureManifestsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureManifestsGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureManifestsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureManifestsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureManifestsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureRestoreGet returns the cluster restore of cluster
*/
func (a *Client) V1ClusterFeatureRestoreGet(params *V1ClusterFeatureRestoreGetParams) (*V1ClusterFeatureRestoreGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureRestoreGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureRestoreGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureRestoreGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureRestoreGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureRestoreGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureRestoreOnDemandCreate creates on demand cluster restore
*/
func (a *Client) V1ClusterFeatureRestoreOnDemandCreate(params *V1ClusterFeatureRestoreOnDemandCreateParams) (*V1ClusterFeatureRestoreOnDemandCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureRestoreOnDemandCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureRestoreOnDemandCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/features/restore/onDemand",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureRestoreOnDemandCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureRestoreOnDemandCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureRestoreOnDemandCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureScanKubeBenchLogUpdate updates the kube bench compliance scan log by uid
*/
func (a *Client) V1ClusterFeatureScanKubeBenchLogUpdate(params *V1ClusterFeatureScanKubeBenchLogUpdateParams) (*V1ClusterFeatureScanKubeBenchLogUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureScanKubeBenchLogUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureScanKubeBenchLogUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/kubeBench",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureScanKubeBenchLogUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureScanKubeBenchLogUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureScanKubeBenchLogUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureScanKubeHunterLogUpdate updates the kube hunter compliance scan log by uid
*/
func (a *Client) V1ClusterFeatureScanKubeHunterLogUpdate(params *V1ClusterFeatureScanKubeHunterLogUpdateParams) (*V1ClusterFeatureScanKubeHunterLogUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureScanKubeHunterLogUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureScanKubeHunterLogUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/kubeHunter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureScanKubeHunterLogUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureScanKubeHunterLogUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureScanKubeHunterLogUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureScanSonobuoyLogUpdate updates the sonobuoy compliance scan log by uid
*/
func (a *Client) V1ClusterFeatureScanSonobuoyLogUpdate(params *V1ClusterFeatureScanSonobuoyLogUpdateParams) (*V1ClusterFeatureScanSonobuoyLogUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureScanSonobuoyLogUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureScanSonobuoyLogUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/sonobuoy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureScanSonobuoyLogUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureScanSonobuoyLogUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureScanSonobuoyLogUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureScanSyftLogUpdate updates the syft compliance scan log by uid
*/
func (a *Client) V1ClusterFeatureScanSyftLogUpdate(params *V1ClusterFeatureScanSyftLogUpdateParams) (*V1ClusterFeatureScanSyftLogUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureScanSyftLogUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureScanSyftLogUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/syft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureScanSyftLogUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureScanSyftLogUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureScanSyftLogUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureSonobuoyLogGet returns the sonobuoy compliance scan log by uid
*/
func (a *Client) V1ClusterFeatureSonobuoyLogGet(params *V1ClusterFeatureSonobuoyLogGetParams) (*V1ClusterFeatureSonobuoyLogGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureSonobuoyLogGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureSonobuoyLogGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/sonobuoy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureSonobuoyLogGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureSonobuoyLogGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureSonobuoyLogGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterFeatureSyftLogGet returns the syft compliance scan log by uid
*/
func (a *Client) V1ClusterFeatureSyftLogGet(params *V1ClusterFeatureSyftLogGetParams) (*V1ClusterFeatureSyftLogGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterFeatureSyftLogGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterFeatureSyftLogGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/syft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterFeatureSyftLogGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterFeatureSyftLogGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterFeatureSyftLogGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupUIDHostClustersSummary retrieves a list of cluster summary for a given cluster group
*/
func (a *Client) V1ClusterGroupUIDHostClustersSummary(params *V1ClusterGroupUIDHostClustersSummaryParams) (*V1ClusterGroupUIDHostClustersSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupUIDHostClustersSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupUidHostClustersSummary",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/clustergroups/{uid}/hostClusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupUIDHostClustersSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupUIDHostClustersSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupUidHostClustersSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupUIDVirtualClustersSummary retrieves a list of cluster summary for a given cluster group
*/
func (a *Client) V1ClusterGroupUIDVirtualClustersSummary(params *V1ClusterGroupUIDVirtualClustersSummaryParams) (*V1ClusterGroupUIDVirtualClustersSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupUIDVirtualClustersSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupUidVirtualClustersSummary",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/clustergroups/{uid}/virtualClusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupUIDVirtualClustersSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupUIDVirtualClustersSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupUidVirtualClustersSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsCreate creates cluster groups
*/
func (a *Client) V1ClusterGroupsCreate(params *V1ClusterGroupsCreateParams) (*V1ClusterGroupsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsCreate",
		Method:             "POST",
		PathPattern:        "/v1/clustergroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsDeveloperCreditUsageGet gets cluster group developer credit usage by scope
*/
func (a *Client) V1ClusterGroupsDeveloperCreditUsageGet(params *V1ClusterGroupsDeveloperCreditUsageGetParams) (*V1ClusterGroupsDeveloperCreditUsageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsDeveloperCreditUsageGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsDeveloperCreditUsageGet",
		Method:             "GET",
		PathPattern:        "/v1/clustergroups/developerCredit/usage/{scope}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsDeveloperCreditUsageGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsDeveloperCreditUsageGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsDeveloperCreditUsageGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsHostClusterMetadata retrieves a list of cluster groups host cluster metadata
*/
func (a *Client) V1ClusterGroupsHostClusterMetadata(params *V1ClusterGroupsHostClusterMetadataParams) (*V1ClusterGroupsHostClusterMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsHostClusterMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsHostClusterMetadata",
		Method:             "GET",
		PathPattern:        "/v1/clustergroups/hostCluster/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsHostClusterMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsHostClusterMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsHostClusterMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsHostClusterSummary retrieves a list of cluster groups host cluster summary
*/
func (a *Client) V1ClusterGroupsHostClusterSummary(params *V1ClusterGroupsHostClusterSummaryParams) (*V1ClusterGroupsHostClusterSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsHostClusterSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsHostClusterSummary",
		Method:             "GET",
		PathPattern:        "/v1/clustergroups/hostCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsHostClusterSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsHostClusterSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsHostClusterSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsUIDDelete deletes the specified cluster group
*/
func (a *Client) V1ClusterGroupsUIDDelete(params *V1ClusterGroupsUIDDeleteParams) (*V1ClusterGroupsUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clustergroups/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsUIDGet returns the specified cluster groups
*/
func (a *Client) V1ClusterGroupsUIDGet(params *V1ClusterGroupsUIDGetParams) (*V1ClusterGroupsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/clustergroups/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsUIDHostClusterUpdate updates cluster reference and host cluster config
*/
func (a *Client) V1ClusterGroupsUIDHostClusterUpdate(params *V1ClusterGroupsUIDHostClusterUpdateParams) (*V1ClusterGroupsUIDHostClusterUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsUIDHostClusterUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsUidHostClusterUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clustergroups/{uid}/hostCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsUIDHostClusterUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsUIDHostClusterUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsUidHostClusterUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsUIDMetaUpdate updates the specified cluster groups meta
*/
func (a *Client) V1ClusterGroupsUIDMetaUpdate(params *V1ClusterGroupsUIDMetaUpdateParams) (*V1ClusterGroupsUIDMetaUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsUIDMetaUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsUidMetaUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clustergroups/{uid}/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsUIDMetaUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsUIDMetaUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsUidMetaUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsUIDPacksResolvedValuesGet returns the specified clustergroup s profile packs resolved values
*/
func (a *Client) V1ClusterGroupsUIDPacksResolvedValuesGet(params *V1ClusterGroupsUIDPacksResolvedValuesGetParams) (*V1ClusterGroupsUIDPacksResolvedValuesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsUIDPacksResolvedValuesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsUidPacksResolvedValuesGet",
		Method:             "GET",
		PathPattern:        "/v1/clustergroups/{uid}/packs/resolvedValues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsUIDPacksResolvedValuesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsUIDPacksResolvedValuesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsUidPacksResolvedValuesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsUIDProfilesGet returns the associated profiles of a specified cluster group
*/
func (a *Client) V1ClusterGroupsUIDProfilesGet(params *V1ClusterGroupsUIDProfilesGetParams) (*V1ClusterGroupsUIDProfilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsUIDProfilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsUidProfilesGet",
		Method:             "GET",
		PathPattern:        "/v1/clustergroups/{uid}/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsUIDProfilesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsUIDProfilesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsUidProfilesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsUIDProfilesUpdate updates the specified cluster groups profiles
*/
func (a *Client) V1ClusterGroupsUIDProfilesUpdate(params *V1ClusterGroupsUIDProfilesUpdateParams) (*V1ClusterGroupsUIDProfilesUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsUIDProfilesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsUidProfilesUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clustergroups/{uid}/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsUIDProfilesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsUIDProfilesUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsUidProfilesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterGroupsValidateName validates the cluster groups name
*/
func (a *Client) V1ClusterGroupsValidateName(params *V1ClusterGroupsValidateNameParams) (*V1ClusterGroupsValidateNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterGroupsValidateNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterGroupsValidateName",
		Method:             "GET",
		PathPattern:        "/v1/clustergroups/validate/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterGroupsValidateNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterGroupsValidateNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterGroupsValidateName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterNamespacesGet returns available namespaces for the cluster
*/
func (a *Client) V1ClusterNamespacesGet(params *V1ClusterNamespacesGetParams) (*V1ClusterNamespacesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterNamespacesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterNamespacesGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterNamespacesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterNamespacesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterNamespacesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesBulkDelete deletes list of cluster profiles
*/
func (a *Client) V1ClusterProfilesBulkDelete(params *V1ClusterProfilesBulkDeleteParams) (*V1ClusterProfilesBulkDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesBulkDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesBulkDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clusterprofiles/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesBulkDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesBulkDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesBulkDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesCreate creates a cluster profile
*/
func (a *Client) V1ClusterProfilesCreate(params *V1ClusterProfilesCreateParams) (*V1ClusterProfilesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesCreate",
		Method:             "POST",
		PathPattern:        "/v1/clusterprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesDelete deletes the specified cluster profile
*/
func (a *Client) V1ClusterProfilesDelete(params *V1ClusterProfilesDeleteParams) (*V1ClusterProfilesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clusterprofiles/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesFilterSummary retrieves a list of cluster profiles filter summary supported filter fields profile name tags profile type environment supported sort fields profile name environment profile type creation timestamp last modified timestamp
*/
func (a *Client) V1ClusterProfilesFilterSummary(params *V1ClusterProfilesFilterSummaryParams) (*V1ClusterProfilesFilterSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesFilterSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesFilterSummary",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/clusterprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesFilterSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesFilterSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesFilterSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesGet returns a specified cluster profile
*/
func (a *Client) V1ClusterProfilesGet(params *V1ClusterProfilesGetParams) (*V1ClusterProfilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesGet",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesImport imports a cluster profile
*/
func (a *Client) V1ClusterProfilesImport(params *V1ClusterProfilesImportParams) (*V1ClusterProfilesImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesImport",
		Method:             "POST",
		PathPattern:        "/v1/clusterprofiles/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesImportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesImportFile imports a cluster profile via file
*/
func (a *Client) V1ClusterProfilesImportFile(params *V1ClusterProfilesImportFileParams) (*V1ClusterProfilesImportFileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesImportFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesImportFile",
		Method:             "POST",
		PathPattern:        "/v1/clusterprofiles/import/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesImportFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesImportFileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesImportFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesImportValidate validates cluster profile import
*/
func (a *Client) V1ClusterProfilesImportValidate(params *V1ClusterProfilesImportValidateParams) (*V1ClusterProfilesImportValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesImportValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesImportValidate",
		Method:             "POST",
		PathPattern:        "/v1/clusterprofiles/import/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesImportValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesImportValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesImportValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesMetadata retrieves a list of cluster profiles metadata
*/
func (a *Client) V1ClusterProfilesMetadata(params *V1ClusterProfilesMetadataParams) (*V1ClusterProfilesMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesMetadata",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/clusterprofiles/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesPacksRefUpdate updates cluster profile packs ref
*/
func (a *Client) V1ClusterProfilesPacksRefUpdate(params *V1ClusterProfilesPacksRefUpdateParams) (*V1ClusterProfilesPacksRefUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesPacksRefUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesPacksRefUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/clusterprofiles/{uid}/packRefs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesPacksRefUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesPacksRefUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesPacksRefUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	V1ClusterProfilesPublish publishes the specified cluster profile

	Publish the draft cluster profile with next revision, the current draft cluster profile will be marked to published

and the draft cluster profile will be set to null in the cluster profile template.
*/
func (a *Client) V1ClusterProfilesPublish(params *V1ClusterProfilesPublishParams) (*V1ClusterProfilesPublishNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesPublishParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesPublish",
		Method:             "PATCH",
		PathPattern:        "/v1/clusterprofiles/{uid}/publish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesPublishReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesPublishNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesPublish: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDClone creates a clone of the specified cluster profile
*/
func (a *Client) V1ClusterProfilesUIDClone(params *V1ClusterProfilesUIDCloneParams) (*V1ClusterProfilesUIDCloneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDCloneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidClone",
		Method:             "POST",
		PathPattern:        "/v1/clusterprofiles/{uid}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDCloneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDCloneCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidClone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDCloneValidate validates the cluster profile clone

Validates the cloned cluster profile name, version and target project uid
*/
func (a *Client) V1ClusterProfilesUIDCloneValidate(params *V1ClusterProfilesUIDCloneValidateParams) (*V1ClusterProfilesUIDCloneValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDCloneValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidCloneValidate",
		Method:             "POST",
		PathPattern:        "/v1/clusterprofiles/{uid}/clone/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDCloneValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDCloneValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidCloneValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDMetadataUpdate updates the specified cluster profile metadata
*/
func (a *Client) V1ClusterProfilesUIDMetadataUpdate(params *V1ClusterProfilesUIDMetadataUpdateParams) (*V1ClusterProfilesUIDMetadataUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDMetadataUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidMetadataUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/clusterprofiles/{uid}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDMetadataUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDMetadataUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidMetadataUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksAdd adds a new pack to the specified cluster profile and returns the created pack uid
*/
func (a *Client) V1ClusterProfilesUIDPacksAdd(params *V1ClusterProfilesUIDPacksAddParams) (*V1ClusterProfilesUIDPacksAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksAdd",
		Method:             "POST",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksConfigGet returns the specified cluster profile pack configuration
*/
func (a *Client) V1ClusterProfilesUIDPacksConfigGet(params *V1ClusterProfilesUIDPacksConfigGetParams) (*V1ClusterProfilesUIDPacksConfigGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksConfigGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksConfigGet",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/{packName}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksConfigGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksConfigGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksConfigGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksGet returns the specified cluster profile packs
*/
func (a *Client) V1ClusterProfilesUIDPacksGet(params *V1ClusterProfilesUIDPacksGetParams) (*V1ClusterProfilesUIDPacksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksGet",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksManifestsGet returns the specified cluster profile pack manifests
*/
func (a *Client) V1ClusterProfilesUIDPacksManifestsGet(params *V1ClusterProfilesUIDPacksManifestsGetParams) (*V1ClusterProfilesUIDPacksManifestsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksManifestsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksManifestsGet",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksManifestsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksManifestsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksManifestsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksNameDelete deletes the specified pack information in the cluster profile
*/
func (a *Client) V1ClusterProfilesUIDPacksNameDelete(params *V1ClusterProfilesUIDPacksNameDeleteParams) (*V1ClusterProfilesUIDPacksNameDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksNameDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksNameDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/{packName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksNameDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksNameDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksNameDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksNameManifestsAdd adds manifest to the profiles packs and returns the added manifests uid
*/
func (a *Client) V1ClusterProfilesUIDPacksNameManifestsAdd(params *V1ClusterProfilesUIDPacksNameManifestsAddParams) (*V1ClusterProfilesUIDPacksNameManifestsAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksNameManifestsAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksNameManifestsAdd",
		Method:             "POST",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/{packName}/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksNameManifestsAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksNameManifestsAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksNameManifestsAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksNameManifestsUIDDelete deletes the specified cluster profile pack manifest
*/
func (a *Client) V1ClusterProfilesUIDPacksNameManifestsUIDDelete(params *V1ClusterProfilesUIDPacksNameManifestsUIDDeleteParams) (*V1ClusterProfilesUIDPacksNameManifestsUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksNameManifestsUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksNameManifestsUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/{packName}/manifests/{manifestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksNameManifestsUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksNameManifestsUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksNameManifestsUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksNameManifestsUIDGet returns the specified cluster profile pack manifest
*/
func (a *Client) V1ClusterProfilesUIDPacksNameManifestsUIDGet(params *V1ClusterProfilesUIDPacksNameManifestsUIDGetParams) (*V1ClusterProfilesUIDPacksNameManifestsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksNameManifestsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksNameManifestsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/{packName}/manifests/{manifestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksNameManifestsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksNameManifestsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksNameManifestsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksNameManifestsUIDUpdate updates the specified manifest of the profile s pack
*/
func (a *Client) V1ClusterProfilesUIDPacksNameManifestsUIDUpdate(params *V1ClusterProfilesUIDPacksNameManifestsUIDUpdateParams) (*V1ClusterProfilesUIDPacksNameManifestsUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksNameManifestsUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksNameManifestsUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/{packName}/manifests/{manifestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksNameManifestsUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksNameManifestsUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksNameManifestsUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksNameUpdate updates the specified pack information in the cluster profile
*/
func (a *Client) V1ClusterProfilesUIDPacksNameUpdate(params *V1ClusterProfilesUIDPacksNameUpdateParams) (*V1ClusterProfilesUIDPacksNameUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksNameUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksNameUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/{packName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksNameUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksNameUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksNameUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksResolvedValuesGet returns the specified cluster profile packs resolved values
*/
func (a *Client) V1ClusterProfilesUIDPacksResolvedValuesGet(params *V1ClusterProfilesUIDPacksResolvedValuesGetParams) (*V1ClusterProfilesUIDPacksResolvedValuesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksResolvedValuesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksResolvedValuesGet",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/resolvedValues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksResolvedValuesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksResolvedValuesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksResolvedValuesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDPacksUIDManifests returns the associated manifests for the specified profile s pack
*/
func (a *Client) V1ClusterProfilesUIDPacksUIDManifests(params *V1ClusterProfilesUIDPacksUIDManifestsParams) (*V1ClusterProfilesUIDPacksUIDManifestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDPacksUIDManifestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidPacksUidManifests",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/packs/{packName}/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDPacksUIDManifestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDPacksUIDManifestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidPacksUidManifests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDSpcDownload downloads the specified cluster profile
*/
func (a *Client) V1ClusterProfilesUIDSpcDownload(params *V1ClusterProfilesUIDSpcDownloadParams, writer io.Writer) (*V1ClusterProfilesUIDSpcDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDSpcDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidSpcDownload",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/{uid}/spc/download",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDSpcDownloadReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDSpcDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidSpcDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDSummary retrieves a specified cluster profile summary
*/
func (a *Client) V1ClusterProfilesUIDSummary(params *V1ClusterProfilesUIDSummaryParams) (*V1ClusterProfilesUIDSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidSummary",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/clusterprofiles/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUIDValidatePacks validates specified cluster profile packs
*/
func (a *Client) V1ClusterProfilesUIDValidatePacks(params *V1ClusterProfilesUIDValidatePacksParams) (*V1ClusterProfilesUIDValidatePacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUIDValidatePacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUidValidatePacks",
		Method:             "POST",
		PathPattern:        "/v1/clusterprofiles/{uid}/validate/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUIDValidatePacksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUIDValidatePacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUidValidatePacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesUpdate updates the specified cluster profile
*/
func (a *Client) V1ClusterProfilesUpdate(params *V1ClusterProfilesUpdateParams) (*V1ClusterProfilesUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/clusterprofiles/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesValidateNameVersion validates the cluster profile metadata

Validates the cluster profile name and version
*/
func (a *Client) V1ClusterProfilesValidateNameVersion(params *V1ClusterProfilesValidateNameVersionParams) (*V1ClusterProfilesValidateNameVersionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesValidateNameVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesValidateNameVersion",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/validate/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesValidateNameVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesValidateNameVersionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesValidateNameVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterProfilesValidatePacks validates cluster profile packs
*/
func (a *Client) V1ClusterProfilesValidatePacks(params *V1ClusterProfilesValidatePacksParams) (*V1ClusterProfilesValidatePacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterProfilesValidatePacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterProfilesValidatePacks",
		Method:             "POST",
		PathPattern:        "/v1/clusterprofiles/validate/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterProfilesValidatePacksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterProfilesValidatePacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterProfilesValidatePacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ClusterVMSnapshotsList returns the list of snapshots of given namespaces
*/
func (a *Client) V1ClusterVMSnapshotsList(params *V1ClusterVMSnapshotsListParams) (*V1ClusterVMSnapshotsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ClusterVMSnapshotsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ClusterVMSnapshotsList",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ClusterVMSnapshotsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ClusterVMSnapshotsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ClusterVMSnapshotsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardAppDeployments retrieves a list of application deployments filter summary supported filter fields app deployment name cluster Uid tags supported sort fields app deployment name creation timestamp last modified timestamp
*/
func (a *Client) V1DashboardAppDeployments(params *V1DashboardAppDeploymentsParams) (*V1DashboardAppDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardAppDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardAppDeployments",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/appDeployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardAppDeploymentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardAppDeploymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardAppDeployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardAppProfiles retrieves a list of application profiles filter summary supported filter fields profile name tags supported sort fields profile name creation timestamp last modified timestamp
*/
func (a *Client) V1DashboardAppProfiles(params *V1DashboardAppProfilesParams) (*V1DashboardAppProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardAppProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardAppProfiles",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/appProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardAppProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardAppProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardAppProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardAppProfilesMetadata retrieves a list of application profile metadata
*/
func (a *Client) V1DashboardAppProfilesMetadata(params *V1DashboardAppProfilesMetadataParams) (*V1DashboardAppProfilesMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardAppProfilesMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardAppProfilesMetadata",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/appProfiles/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardAppProfilesMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardAppProfilesMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardAppProfilesMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardCloudAccountsMetadata retrieves a list of cloud accounts metadata
*/
func (a *Client) V1DashboardCloudAccountsMetadata(params *V1DashboardCloudAccountsMetadataParams) (*V1DashboardCloudAccountsMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardCloudAccountsMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardCloudAccountsMetadata",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/cloudaccounts/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardCloudAccountsMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardCloudAccountsMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardCloudAccountsMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardClustersSearchSummaryExport exports the list of cluster summary with matching search filter and download as a file csv supported sort fields environment cluster name health state creation timestamp last modified timestamp
*/
func (a *Client) V1DashboardClustersSearchSummaryExport(params *V1DashboardClustersSearchSummaryExportParams, writer io.Writer) (*V1DashboardClustersSearchSummaryExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardClustersSearchSummaryExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardClustersSearchSummaryExport",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/search/export",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardClustersSearchSummaryExportReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardClustersSearchSummaryExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardClustersSearchSummaryExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardClustersSearchSummaryExportGet exports and download the list of cluster summary with matching search filter and download as a file csv
*/
func (a *Client) V1DashboardClustersSearchSummaryExportGet(params *V1DashboardClustersSearchSummaryExportGetParams, writer io.Writer) (*V1DashboardClustersSearchSummaryExportGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardClustersSearchSummaryExportGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardClustersSearchSummaryExportGet",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/search/export",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardClustersSearchSummaryExportGetReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardClustersSearchSummaryExportGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardClustersSearchSummaryExportGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardEdgehostsSearch retrieves a list of edgehosts summary with provided search filter supported fields as per schema v1 dashboard edgehosts search schema
*/
func (a *Client) V1DashboardEdgehostsSearch(params *V1DashboardEdgehostsSearchParams) (*V1DashboardEdgehostsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardEdgehostsSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardEdgehostsSearch",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/edgehosts/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardEdgehostsSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardEdgehostsSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardEdgehostsSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardEdgehostsSearchSchemaGet retrieves a schema for the edgehost search filter
*/
func (a *Client) V1DashboardEdgehostsSearchSchemaGet(params *V1DashboardEdgehostsSearchSchemaGetParams) (*V1DashboardEdgehostsSearchSchemaGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardEdgehostsSearchSchemaGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardEdgehostsSearchSchemaGet",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/edgehosts/search/schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardEdgehostsSearchSchemaGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardEdgehostsSearchSchemaGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardEdgehostsSearchSchemaGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardPcgSearchSchemaGet retrieves a schema for the p c g search filter
*/
func (a *Client) V1DashboardPcgSearchSchemaGet(params *V1DashboardPcgSearchSchemaGetParams) (*V1DashboardPcgSearchSchemaGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardPcgSearchSchemaGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardPcgSearchSchemaGet",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/pcgs/search/schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardPcgSearchSchemaGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardPcgSearchSchemaGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardPcgSearchSchemaGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardPcgsSearchSummary retrieves a list of p c g summary with provided search filter supported fields as per schema v1 dashboard pcgs search schema
*/
func (a *Client) V1DashboardPcgsSearchSummary(params *V1DashboardPcgsSearchSummaryParams) (*V1DashboardPcgsSearchSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardPcgsSearchSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardPcgsSearchSummary",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/pcgs/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardPcgsSearchSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardPcgsSearchSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardPcgsSearchSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersCostSummary retrieves spectro clusters cloud cost summary information
*/
func (a *Client) V1DashboardSpectroClustersCostSummary(params *V1DashboardSpectroClustersCostSummaryParams) (*V1DashboardSpectroClustersCostSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersCostSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersCostSummary",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/cost",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersCostSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersCostSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersCostSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersRepaveList retrieves a list of clusters with the desired repave state
*/
func (a *Client) V1DashboardSpectroClustersRepaveList(params *V1DashboardSpectroClustersRepaveListParams) (*V1DashboardSpectroClustersRepaveListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersRepaveListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersRepaveList",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/repaveStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersRepaveListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersRepaveListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersRepaveList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersSearchInput retrieves a supported input values for the cluster search filter
*/
func (a *Client) V1DashboardSpectroClustersSearchInput(params *V1DashboardSpectroClustersSearchInputParams) (*V1DashboardSpectroClustersSearchInputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersSearchInputParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersSearchInput",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/search/input",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersSearchInputReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersSearchInputOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersSearchInput: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersUIDWorkloads retrieves specified cluster workloads
*/
func (a *Client) V1DashboardSpectroClustersUIDWorkloads(params *V1DashboardSpectroClustersUIDWorkloadsParams) (*V1DashboardSpectroClustersUIDWorkloadsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersUIDWorkloadsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersUidWorkloads",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/workloads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersUIDWorkloadsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersUIDWorkloadsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersUidWorkloads: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersUIDWorkloadsClusterRoleBinding retrieves specified cluster workload clusterrolebindings
*/
func (a *Client) V1DashboardSpectroClustersUIDWorkloadsClusterRoleBinding(params *V1DashboardSpectroClustersUIDWorkloadsClusterRoleBindingParams) (*V1DashboardSpectroClustersUIDWorkloadsClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersUIDWorkloadsClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersUidWorkloadsClusterRoleBinding",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/workloads/clusterrolebinding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersUIDWorkloadsClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersUIDWorkloadsClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersUidWorkloadsClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersUIDWorkloadsCronJob retrieves specified cluster workload cronjobs
*/
func (a *Client) V1DashboardSpectroClustersUIDWorkloadsCronJob(params *V1DashboardSpectroClustersUIDWorkloadsCronJobParams) (*V1DashboardSpectroClustersUIDWorkloadsCronJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersUIDWorkloadsCronJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersUidWorkloadsCronJob",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/workloads/cronjob",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersUIDWorkloadsCronJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersUIDWorkloadsCronJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersUidWorkloadsCronJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersUIDWorkloadsDaemonSet retrieves specified cluster workload daemonsets
*/
func (a *Client) V1DashboardSpectroClustersUIDWorkloadsDaemonSet(params *V1DashboardSpectroClustersUIDWorkloadsDaemonSetParams) (*V1DashboardSpectroClustersUIDWorkloadsDaemonSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersUIDWorkloadsDaemonSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersUidWorkloadsDaemonSet",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/workloads/daemonset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersUIDWorkloadsDaemonSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersUIDWorkloadsDaemonSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersUidWorkloadsDaemonSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersUIDWorkloadsDeployment retrieves specified cluster workload deployments
*/
func (a *Client) V1DashboardSpectroClustersUIDWorkloadsDeployment(params *V1DashboardSpectroClustersUIDWorkloadsDeploymentParams) (*V1DashboardSpectroClustersUIDWorkloadsDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersUIDWorkloadsDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersUidWorkloadsDeployment",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/workloads/deployment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersUIDWorkloadsDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersUIDWorkloadsDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersUidWorkloadsDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersUIDWorkloadsJob retrieves specified cluster workload jobs
*/
func (a *Client) V1DashboardSpectroClustersUIDWorkloadsJob(params *V1DashboardSpectroClustersUIDWorkloadsJobParams) (*V1DashboardSpectroClustersUIDWorkloadsJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersUIDWorkloadsJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersUidWorkloadsJob",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/workloads/job",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersUIDWorkloadsJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersUIDWorkloadsJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersUidWorkloadsJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersUIDWorkloadsNamespace retrieves specified cluster workload namespaces
*/
func (a *Client) V1DashboardSpectroClustersUIDWorkloadsNamespace(params *V1DashboardSpectroClustersUIDWorkloadsNamespaceParams) (*V1DashboardSpectroClustersUIDWorkloadsNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersUIDWorkloadsNamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersUidWorkloadsNamespace",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/workloads/namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersUIDWorkloadsNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersUIDWorkloadsNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersUidWorkloadsNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersUIDWorkloadsPod retrieves specified cluster workload pods
*/
func (a *Client) V1DashboardSpectroClustersUIDWorkloadsPod(params *V1DashboardSpectroClustersUIDWorkloadsPodParams) (*V1DashboardSpectroClustersUIDWorkloadsPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersUIDWorkloadsPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersUidWorkloadsPod",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/workloads/pod",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersUIDWorkloadsPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersUIDWorkloadsPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersUidWorkloadsPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersUIDWorkloadsRoleBinding retrieves specified cluster workload rolebindings
*/
func (a *Client) V1DashboardSpectroClustersUIDWorkloadsRoleBinding(params *V1DashboardSpectroClustersUIDWorkloadsRoleBindingParams) (*V1DashboardSpectroClustersUIDWorkloadsRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersUIDWorkloadsRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersUidWorkloadsRoleBinding",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/workloads/rolebinding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersUIDWorkloadsRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersUIDWorkloadsRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersUidWorkloadsRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardSpectroClustersUIDWorkloadsStatefulSet retrieves specified cluster workload statefulsets
*/
func (a *Client) V1DashboardSpectroClustersUIDWorkloadsStatefulSet(params *V1DashboardSpectroClustersUIDWorkloadsStatefulSetParams) (*V1DashboardSpectroClustersUIDWorkloadsStatefulSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardSpectroClustersUIDWorkloadsStatefulSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardSpectroClustersUidWorkloadsStatefulSet",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/workloads/statefulset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardSpectroClustersUIDWorkloadsStatefulSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardSpectroClustersUIDWorkloadsStatefulSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardSpectroClustersUidWorkloadsStatefulSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardWorkspacesList retrieves a list of workspace
*/
func (a *Client) V1DashboardWorkspacesList(params *V1DashboardWorkspacesListParams) (*V1DashboardWorkspacesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardWorkspacesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardWorkspacesList",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardWorkspacesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardWorkspacesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardWorkspacesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardWorkspacesUIDSpectroClustersWorkloadsClusterRoleBinding retrieves specified workspace clusters workload clusterrolebindings
*/
func (a *Client) V1DashboardWorkspacesUIDSpectroClustersWorkloadsClusterRoleBinding(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsClusterRoleBindingParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardWorkspacesUIDSpectroClustersWorkloadsClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBinding",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/clusterrolebinding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardWorkspacesUIDSpectroClustersWorkloadsClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardWorkspacesUIDSpectroClustersWorkloadsClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardWorkspacesUIDSpectroClustersWorkloadsCronJob retrieves specified workspace clusters workload cronjobs
*/
func (a *Client) V1DashboardWorkspacesUIDSpectroClustersWorkloadsCronJob(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsCronJobParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsCronJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardWorkspacesUIDSpectroClustersWorkloadsCronJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJob",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/cronjob",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardWorkspacesUIDSpectroClustersWorkloadsCronJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardWorkspacesUIDSpectroClustersWorkloadsCronJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardWorkspacesUIDSpectroClustersWorkloadsDaemonSet retrieves specified workspace clusters workload daemonsets
*/
func (a *Client) V1DashboardWorkspacesUIDSpectroClustersWorkloadsDaemonSet(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsDaemonSetParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsDaemonSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardWorkspacesUIDSpectroClustersWorkloadsDaemonSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSet",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/daemonset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardWorkspacesUIDSpectroClustersWorkloadsDaemonSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardWorkspacesUIDSpectroClustersWorkloadsDaemonSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardWorkspacesUIDSpectroClustersWorkloadsDeployment retrieves specified workspace clusters workload deployments
*/
func (a *Client) V1DashboardWorkspacesUIDSpectroClustersWorkloadsDeployment(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsDeploymentParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardWorkspacesUIDSpectroClustersWorkloadsDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardWorkspacesUidSpectroClustersWorkloadsDeployment",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/deployment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardWorkspacesUIDSpectroClustersWorkloadsDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardWorkspacesUIDSpectroClustersWorkloadsDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardWorkspacesUidSpectroClustersWorkloadsDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardWorkspacesUIDSpectroClustersWorkloadsJob retrieves specified workspace clusters workload jobs
*/
func (a *Client) V1DashboardWorkspacesUIDSpectroClustersWorkloadsJob(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsJobParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardWorkspacesUIDSpectroClustersWorkloadsJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardWorkspacesUidSpectroClustersWorkloadsJob",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/job",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardWorkspacesUIDSpectroClustersWorkloadsJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardWorkspacesUIDSpectroClustersWorkloadsJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardWorkspacesUidSpectroClustersWorkloadsJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardWorkspacesUIDSpectroClustersWorkloadsNamespace retrieves specified workspace clusters workload namespaces
*/
func (a *Client) V1DashboardWorkspacesUIDSpectroClustersWorkloadsNamespace(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsNamespaceParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardWorkspacesUIDSpectroClustersWorkloadsNamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespace",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardWorkspacesUIDSpectroClustersWorkloadsNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardWorkspacesUIDSpectroClustersWorkloadsNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardWorkspacesUIDSpectroClustersWorkloadsPod retrieves specified workspace clusters workload pods
*/
func (a *Client) V1DashboardWorkspacesUIDSpectroClustersWorkloadsPod(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsPodParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardWorkspacesUIDSpectroClustersWorkloadsPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardWorkspacesUidSpectroClustersWorkloadsPod",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/pod",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardWorkspacesUIDSpectroClustersWorkloadsPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardWorkspacesUIDSpectroClustersWorkloadsPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardWorkspacesUidSpectroClustersWorkloadsPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardWorkspacesUIDSpectroClustersWorkloadsRoleBinding retrieves specified workspace clusters workload rolebindings
*/
func (a *Client) V1DashboardWorkspacesUIDSpectroClustersWorkloadsRoleBinding(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsRoleBindingParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardWorkspacesUIDSpectroClustersWorkloadsRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBinding",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/rolebinding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardWorkspacesUIDSpectroClustersWorkloadsRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardWorkspacesUIDSpectroClustersWorkloadsRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DashboardWorkspacesUIDSpectroClustersWorkloadsStatefulSet retrieves specified workspace clusters workload statefulsets
*/
func (a *Client) V1DashboardWorkspacesUIDSpectroClustersWorkloadsStatefulSet(params *V1DashboardWorkspacesUIDSpectroClustersWorkloadsStatefulSetParams) (*V1DashboardWorkspacesUIDSpectroClustersWorkloadsStatefulSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DashboardWorkspacesUIDSpectroClustersWorkloadsStatefulSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSet",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/statefulset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1DashboardWorkspacesUIDSpectroClustersWorkloadsStatefulSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DashboardWorkspacesUIDSpectroClustersWorkloadsStatefulSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EcrRegistriesCreate creates a ecr registry
*/
func (a *Client) V1EcrRegistriesCreate(params *V1EcrRegistriesCreateParams) (*V1EcrRegistriesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EcrRegistriesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EcrRegistriesCreate",
		Method:             "POST",
		PathPattern:        "/v1/registries/oci/ecr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EcrRegistriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EcrRegistriesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EcrRegistriesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EcrRegistriesUIDDelete deletes the specified ecr registry
*/
func (a *Client) V1EcrRegistriesUIDDelete(params *V1EcrRegistriesUIDDeleteParams) (*V1EcrRegistriesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EcrRegistriesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EcrRegistriesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/registries/oci/{uid}/ecr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EcrRegistriesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EcrRegistriesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EcrRegistriesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EcrRegistriesUIDGet returns the specified ecr registry
*/
func (a *Client) V1EcrRegistriesUIDGet(params *V1EcrRegistriesUIDGetParams) (*V1EcrRegistriesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EcrRegistriesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EcrRegistriesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/registries/oci/{uid}/ecr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EcrRegistriesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EcrRegistriesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EcrRegistriesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EcrRegistriesUIDSync syncs ecr registry

Sync all the content from the ecr registry
*/
func (a *Client) V1EcrRegistriesUIDSync(params *V1EcrRegistriesUIDSyncParams) (*V1EcrRegistriesUIDSyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EcrRegistriesUIDSyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EcrRegistriesUidSync",
		Method:             "POST",
		PathPattern:        "/v1/registries/oci/{uid}/ecr/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EcrRegistriesUIDSyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EcrRegistriesUIDSyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EcrRegistriesUidSync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EcrRegistriesUIDSyncStatus gets ecr registry sync status

Get sync status for the ecr specified registry
*/
func (a *Client) V1EcrRegistriesUIDSyncStatus(params *V1EcrRegistriesUIDSyncStatusParams) (*V1EcrRegistriesUIDSyncStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EcrRegistriesUIDSyncStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EcrRegistriesUidSyncStatus",
		Method:             "GET",
		PathPattern:        "/v1/registries/oci/{uid}/ecr/sync/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EcrRegistriesUIDSyncStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EcrRegistriesUIDSyncStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EcrRegistriesUidSyncStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EcrRegistriesUIDUpdate updates the specified ecr registry
*/
func (a *Client) V1EcrRegistriesUIDUpdate(params *V1EcrRegistriesUIDUpdateParams) (*V1EcrRegistriesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EcrRegistriesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EcrRegistriesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/registries/oci/{uid}/ecr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EcrRegistriesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EcrRegistriesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EcrRegistriesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EcrRegistriesValidate checks if ecr registry is valid

Returns no contents if ecr registry is valid else error.
*/
func (a *Client) V1EcrRegistriesValidate(params *V1EcrRegistriesValidateParams) (*V1EcrRegistriesValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EcrRegistriesValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EcrRegistriesValidate",
		Method:             "POST",
		PathPattern:        "/v1/registries/oci/ecr/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EcrRegistriesValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EcrRegistriesValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EcrRegistriesValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDeviceHostCheckSumUpdate updates the specified edge host device host check sum
*/
func (a *Client) V1EdgeHostDeviceHostCheckSumUpdate(params *V1EdgeHostDeviceHostCheckSumUpdateParams) (*V1EdgeHostDeviceHostCheckSumUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDeviceHostCheckSumUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDeviceHostCheckSumUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/edgehosts/{uid}/hostCheckSum",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDeviceHostCheckSumUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDeviceHostCheckSumUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDeviceHostCheckSumUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDeviceHostPairingKeyUpdate updates the specified edge host device host pairing key
*/
func (a *Client) V1EdgeHostDeviceHostPairingKeyUpdate(params *V1EdgeHostDeviceHostPairingKeyUpdateParams) (*V1EdgeHostDeviceHostPairingKeyUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDeviceHostPairingKeyUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDeviceHostPairingKeyUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/edgehosts/{uid}/hostPairingKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDeviceHostPairingKeyUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDeviceHostPairingKeyUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDeviceHostPairingKeyUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesCreate creates the edge host device
*/
func (a *Client) V1EdgeHostDevicesCreate(params *V1EdgeHostDevicesCreateParams) (*V1EdgeHostDevicesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesCreate",
		Method:             "POST",
		PathPattern:        "/v1/edgehosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesHealthUpdate updates the edge host health
*/
func (a *Client) V1EdgeHostDevicesHealthUpdate(params *V1EdgeHostDevicesHealthUpdateParams) (*V1EdgeHostDevicesHealthUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesHealthUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesHealthUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/edgehosts/{uid}/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesHealthUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesHealthUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesHealthUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesRegister registers the edge host device
*/
func (a *Client) V1EdgeHostDevicesRegister(params *V1EdgeHostDevicesRegisterParams) (*V1EdgeHostDevicesRegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesRegister",
		Method:             "POST",
		PathPattern:        "/v1/edgehosts/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesRegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesRegisterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesRegister: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDClusterAssociate associates the clusters to the edge host
*/
func (a *Client) V1EdgeHostDevicesUIDClusterAssociate(params *V1EdgeHostDevicesUIDClusterAssociateParams) (*V1EdgeHostDevicesUIDClusterAssociateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDClusterAssociateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidClusterAssociate",
		Method:             "PATCH",
		PathPattern:        "/v1/edgehosts/{uid}/cluster/associate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDClusterAssociateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDClusterAssociateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidClusterAssociate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDClusterDeassociate deassociates the clusters to the edge host
*/
func (a *Client) V1EdgeHostDevicesUIDClusterDeassociate(params *V1EdgeHostDevicesUIDClusterDeassociateParams) (*V1EdgeHostDevicesUIDClusterDeassociateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDClusterDeassociateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidClusterDeassociate",
		Method:             "DELETE",
		PathPattern:        "/v1/edgehosts/{uid}/cluster/associate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDClusterDeassociateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDClusterDeassociateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidClusterDeassociate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDConfigGet gets the specified edge host device configuration
*/
func (a *Client) V1EdgeHostDevicesUIDConfigGet(params *V1EdgeHostDevicesUIDConfigGetParams) (*V1EdgeHostDevicesUIDConfigGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDConfigGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidConfigGet",
		Method:             "GET",
		PathPattern:        "/v1/edgehosts/{uid}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDConfigGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDConfigGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidConfigGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDDelete deletes the specified edge host device
*/
func (a *Client) V1EdgeHostDevicesUIDDelete(params *V1EdgeHostDevicesUIDDeleteParams) (*V1EdgeHostDevicesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/edgehosts/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDGet returns the specified edge host device
*/
func (a *Client) V1EdgeHostDevicesUIDGet(params *V1EdgeHostDevicesUIDGetParams) (*V1EdgeHostDevicesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/edgehosts/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDMetaUpdate updates the specified edge host device meta
*/
func (a *Client) V1EdgeHostDevicesUIDMetaUpdate(params *V1EdgeHostDevicesUIDMetaUpdateParams) (*V1EdgeHostDevicesUIDMetaUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDMetaUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidMetaUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/edgehosts/{uid}/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDMetaUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDMetaUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidMetaUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDPackManifestsUIDGet returns the specified edge host s manifest
*/
func (a *Client) V1EdgeHostDevicesUIDPackManifestsUIDGet(params *V1EdgeHostDevicesUIDPackManifestsUIDGetParams) (*V1EdgeHostDevicesUIDPackManifestsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDPackManifestsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidPackManifestsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/edgehosts/{uid}/pack/manifests/{manifestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDPackManifestsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDPackManifestsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidPackManifestsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDPacksStatusPatch patches update specified edge host s packs status
*/
func (a *Client) V1EdgeHostDevicesUIDPacksStatusPatch(params *V1EdgeHostDevicesUIDPacksStatusPatchParams) (*V1EdgeHostDevicesUIDPacksStatusPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDPacksStatusPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidPacksStatusPatch",
		Method:             "PATCH",
		PathPattern:        "/v1/edgehosts/{uid}/packs/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDPacksStatusPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDPacksStatusPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidPacksStatusPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDProfilesGet returns the associated profiles of a specified edge host device
*/
func (a *Client) V1EdgeHostDevicesUIDProfilesGet(params *V1EdgeHostDevicesUIDProfilesGetParams) (*V1EdgeHostDevicesUIDProfilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDProfilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidProfilesGet",
		Method:             "GET",
		PathPattern:        "/v1/edgehosts/{uid}/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDProfilesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDProfilesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidProfilesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDProfilesUpdate associates cluster profiles to the specified edge host device
*/
func (a *Client) V1EdgeHostDevicesUIDProfilesUpdate(params *V1EdgeHostDevicesUIDProfilesUpdateParams) (*V1EdgeHostDevicesUIDProfilesUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDProfilesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidProfilesUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/edgehosts/{uid}/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDProfilesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDProfilesUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidProfilesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDSpcDownload downloads the specified edge host device spc
*/
func (a *Client) V1EdgeHostDevicesUIDSpcDownload(params *V1EdgeHostDevicesUIDSpcDownloadParams, writer io.Writer) (*V1EdgeHostDevicesUIDSpcDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDSpcDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidSpcDownload",
		Method:             "GET",
		PathPattern:        "/v1/edgehosts/{uid}/spc/download",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDSpcDownloadReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDSpcDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidSpcDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDTunnelConfigUpdate updates the specified edge host device tunnel configuration
*/
func (a *Client) V1EdgeHostDevicesUIDTunnelConfigUpdate(params *V1EdgeHostDevicesUIDTunnelConfigUpdateParams) (*V1EdgeHostDevicesUIDTunnelConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDTunnelConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidTunnelConfigUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/edgehosts/{uid}/tunnelConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDTunnelConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDTunnelConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidTunnelConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDTunnelStatusUpdate updates the edge host tunnel status
*/
func (a *Client) V1EdgeHostDevicesUIDTunnelStatusUpdate(params *V1EdgeHostDevicesUIDTunnelStatusUpdateParams) (*V1EdgeHostDevicesUIDTunnelStatusUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDTunnelStatusUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidTunnelStatusUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/edgehosts/{uid}/tunnelStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDTunnelStatusUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDTunnelStatusUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidTunnelStatusUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDUpdate updates the specified edge host device
*/
func (a *Client) V1EdgeHostDevicesUIDUpdate(params *V1EdgeHostDevicesUIDUpdateParams) (*V1EdgeHostDevicesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/edgehosts/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostDevicesUIDVspherePropertiesUpdate updates the specified edge host device vsphere properties
*/
func (a *Client) V1EdgeHostDevicesUIDVspherePropertiesUpdate(params *V1EdgeHostDevicesUIDVspherePropertiesUpdateParams) (*V1EdgeHostDevicesUIDVspherePropertiesUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostDevicesUIDVspherePropertiesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostDevicesUidVspherePropertiesUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/edgehosts/{uid}/vsphere/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostDevicesUIDVspherePropertiesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostDevicesUIDVspherePropertiesUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostDevicesUidVspherePropertiesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostsMetadata retrieves a list of edgehosts summary
*/
func (a *Client) V1EdgeHostsMetadata(params *V1EdgeHostsMetadataParams) (*V1EdgeHostsMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostsMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostsMetadata",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/appliances/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostsMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostsMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostsMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostsMetadataQuickFilterGet retrieves a list of edge hosts metadata matching the filter condition
*/
func (a *Client) V1EdgeHostsMetadataQuickFilterGet(params *V1EdgeHostsMetadataQuickFilterGetParams) (*V1EdgeHostsMetadataQuickFilterGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostsMetadataQuickFilterGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostsMetadataQuickFilterGet",
		Method:             "GET",
		PathPattern:        "/v1/edgehosts/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostsMetadataQuickFilterGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostsMetadataQuickFilterGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostsMetadataQuickFilterGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeHostsTagsGet retrieves a list of edge hosts tags
*/
func (a *Client) V1EdgeHostsTagsGet(params *V1EdgeHostsTagsGetParams) (*V1EdgeHostsTagsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeHostsTagsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeHostsTagsGet",
		Method:             "GET",
		PathPattern:        "/v1/edgehosts/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeHostsTagsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeHostsTagsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeHostsTagsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeNativeClustersHostsList retrieves a list of edge host of edge native cluster
*/
func (a *Client) V1EdgeNativeClustersHostsList(params *V1EdgeNativeClustersHostsListParams) (*V1EdgeNativeClustersHostsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeNativeClustersHostsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeNativeClustersHostsList",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/edge-native/edgeHosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeNativeClustersHostsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeNativeClustersHostsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeNativeClustersHostsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeTokensCreate creates the edge token
*/
func (a *Client) V1EdgeTokensCreate(params *V1EdgeTokensCreateParams) (*V1EdgeTokensCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeTokensCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeTokensCreate",
		Method:             "POST",
		PathPattern:        "/v1/edgehosts/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeTokensCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeTokensCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeTokensCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeTokensList retrieves a list of edge tokens
*/
func (a *Client) V1EdgeTokensList(params *V1EdgeTokensListParams) (*V1EdgeTokensListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeTokensListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeTokensList",
		Method:             "GET",
		PathPattern:        "/v1/edgehosts/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeTokensListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeTokensListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeTokensList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeTokensUIDDelete deletes the specified edge token
*/
func (a *Client) V1EdgeTokensUIDDelete(params *V1EdgeTokensUIDDeleteParams) (*V1EdgeTokensUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeTokensUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeTokensUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/edgehosts/tokens/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeTokensUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeTokensUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeTokensUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeTokensUIDGet returns the specified edge token
*/
func (a *Client) V1EdgeTokensUIDGet(params *V1EdgeTokensUIDGetParams) (*V1EdgeTokensUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeTokensUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeTokensUidGet",
		Method:             "GET",
		PathPattern:        "/v1/edgehosts/tokens/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeTokensUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeTokensUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeTokensUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeTokensUIDState revokes or re activate the edge token access
*/
func (a *Client) V1EdgeTokensUIDState(params *V1EdgeTokensUIDStateParams) (*V1EdgeTokensUIDStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeTokensUIDStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeTokensUidState",
		Method:             "PUT",
		PathPattern:        "/v1/edgehosts/tokens/{uid}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeTokensUIDStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeTokensUIDStateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeTokensUidState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EdgeTokensUIDUpdate updates the specified edge token
*/
func (a *Client) V1EdgeTokensUIDUpdate(params *V1EdgeTokensUIDUpdateParams) (*V1EdgeTokensUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EdgeTokensUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EdgeTokensUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/edgehosts/tokens/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EdgeTokensUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EdgeTokensUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EdgeTokensUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EventsComponentsCreate creates a component event

Creates a component event
*/
func (a *Client) V1EventsComponentsCreate(params *V1EventsComponentsCreateParams) (*V1EventsComponentsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EventsComponentsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EventsComponentsCreate",
		Method:             "POST",
		PathPattern:        "/v1/events/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EventsComponentsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EventsComponentsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EventsComponentsCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EventsComponentsCreateBulk creates the component events in bulk

Creates the component events in bulk
*/
func (a *Client) V1EventsComponentsCreateBulk(params *V1EventsComponentsCreateBulkParams) (*V1EventsComponentsCreateBulkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EventsComponentsCreateBulkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EventsComponentsCreateBulk",
		Method:             "POST",
		PathPattern:        "/v1/events/components/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EventsComponentsCreateBulkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EventsComponentsCreateBulkCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EventsComponentsCreateBulk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EventsComponentsList returns a paginated list of component events based on request parameters

Returns a paginated list of component events based on request parameters
*/
func (a *Client) V1EventsComponentsList(params *V1EventsComponentsListParams) (*V1EventsComponentsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EventsComponentsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EventsComponentsList",
		Method:             "GET",
		PathPattern:        "/v1/events/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EventsComponentsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EventsComponentsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EventsComponentsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EventsComponentsObjTypeUIDDelete deletes all the components events for the specified related object
*/
func (a *Client) V1EventsComponentsObjTypeUIDDelete(params *V1EventsComponentsObjTypeUIDDeleteParams) (*V1EventsComponentsObjTypeUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EventsComponentsObjTypeUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EventsComponentsObjTypeUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/events/components/{objectKind}/{objectUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EventsComponentsObjTypeUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EventsComponentsObjTypeUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EventsComponentsObjTypeUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1EventsComponentsObjTypeUIDList returns a list of components events for the specified related object

Returns a list of components events for the specified related object
*/
func (a *Client) V1EventsComponentsObjTypeUIDList(params *V1EventsComponentsObjTypeUIDListParams) (*V1EventsComponentsObjTypeUIDListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1EventsComponentsObjTypeUIDListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1EventsComponentsObjTypeUidList",
		Method:             "GET",
		PathPattern:        "/v1/events/components/{objectKind}/{objectUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1EventsComponentsObjTypeUIDListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1EventsComponentsObjTypeUIDListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1EventsComponentsObjTypeUidList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1FeaturesList retrieves the list of features
*/
func (a *Client) V1FeaturesList(params *V1FeaturesListParams) (*V1FeaturesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1FeaturesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1FeaturesList",
		Method:             "GET",
		PathPattern:        "/v1/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1FeaturesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1FeaturesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1FeaturesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1FeaturesUpdate updates a feature
*/
func (a *Client) V1FeaturesUpdate(params *V1FeaturesUpdateParams) (*V1FeaturesUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1FeaturesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1FeaturesUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/features/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1FeaturesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1FeaturesUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1FeaturesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1FiltersList returns a list of filters
*/
func (a *Client) V1FiltersList(params *V1FiltersListParams) (*V1FiltersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1FiltersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1FiltersList",
		Method:             "GET",
		PathPattern:        "/v1/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1FiltersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1FiltersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1FiltersList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1FiltersMetadata returns a list of filters metadata
*/
func (a *Client) V1FiltersMetadata(params *V1FiltersMetadataParams) (*V1FiltersMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1FiltersMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1FiltersMetadata",
		Method:             "GET",
		PathPattern:        "/v1/filters/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1FiltersMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1FiltersMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1FiltersMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1InvoicesUIDGet returns a specified invoice
*/
func (a *Client) V1InvoicesUIDGet(params *V1InvoicesUIDGetParams) (*V1InvoicesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1InvoicesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1InvoicesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/invoices/{invoiceUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1InvoicesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1InvoicesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1InvoicesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasAccountsUIDAzs gets the maas azs for a given account
*/
func (a *Client) V1MaasAccountsUIDAzs(params *V1MaasAccountsUIDAzsParams) (*V1MaasAccountsUIDAzsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasAccountsUIDAzsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1MaasAccountsUidAzs",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/maas/{uid}/properties/azs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasAccountsUIDAzsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasAccountsUIDAzsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1MaasAccountsUidAzs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasAccountsUIDDomains gets the maas domains for a given account
*/
func (a *Client) V1MaasAccountsUIDDomains(params *V1MaasAccountsUIDDomainsParams) (*V1MaasAccountsUIDDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasAccountsUIDDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1MaasAccountsUidDomains",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/maas/{uid}/properties/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasAccountsUIDDomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasAccountsUIDDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1MaasAccountsUidDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasAccountsUIDPools gets the maas pools for a given account
*/
func (a *Client) V1MaasAccountsUIDPools(params *V1MaasAccountsUIDPoolsParams) (*V1MaasAccountsUIDPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasAccountsUIDPoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1MaasAccountsUidPools",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/maas/{uid}/properties/resourcePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasAccountsUIDPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasAccountsUIDPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1MaasAccountsUidPools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasAccountsUIDSubnets gets the maas subnets for a given account
*/
func (a *Client) V1MaasAccountsUIDSubnets(params *V1MaasAccountsUIDSubnetsParams) (*V1MaasAccountsUIDSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasAccountsUIDSubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1MaasAccountsUidSubnets",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/maas/{uid}/properties/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasAccountsUIDSubnetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasAccountsUIDSubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1MaasAccountsUidSubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MaasAccountsUIDTags gets the maas tags for a given account
*/
func (a *Client) V1MaasAccountsUIDTags(params *V1MaasAccountsUIDTagsParams) (*V1MaasAccountsUIDTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MaasAccountsUIDTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1MaasAccountsUidTags",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/maas/{uid}/properties/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MaasAccountsUIDTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MaasAccountsUIDTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1MaasAccountsUidTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MacrosList retrieves a list of macros
*/
func (a *Client) V1MacrosList(params *V1MacrosListParams) (*V1MacrosListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MacrosListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1MacrosList",
		Method:             "GET",
		PathPattern:        "/v1/clusterprofiles/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MacrosListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MacrosListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1MacrosList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MetricsList retrieves the list of metrics for a specified resource kind

Returns all the metrics for a given resource kind
*/
func (a *Client) V1MetricsList(params *V1MetricsListParams) (*V1MetricsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MetricsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1MetricsList",
		Method:             "GET",
		PathPattern:        "/v1/metrics/{resourceKind}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MetricsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MetricsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1MetricsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MetricsUIDDelete deletes the metrics of the specified resource
*/
func (a *Client) V1MetricsUIDDelete(params *V1MetricsUIDDeleteParams) (*V1MetricsUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MetricsUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1MetricsUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/metrics/{resourceKind}/{resourceUid}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MetricsUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MetricsUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1MetricsUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MetricsUIDList returns the metrics for a specified resource uid
*/
func (a *Client) V1MetricsUIDList(params *V1MetricsUIDListParams) (*V1MetricsUIDListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MetricsUIDListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1MetricsUidList",
		Method:             "GET",
		PathPattern:        "/v1/metrics/{resourceKind}/{resourceUid}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1MetricsUIDListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MetricsUIDListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1MetricsUidList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1NotificationsEventCreate creates a notification event

Creates a notification event
*/
func (a *Client) V1NotificationsEventCreate(params *V1NotificationsEventCreateParams) (*V1NotificationsEventCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1NotificationsEventCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1NotificationsEventCreate",
		Method:             "POST",
		PathPattern:        "/v1/notifications/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1NotificationsEventCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1NotificationsEventCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1NotificationsEventCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1NotificationsList returns a paginated list of notifications based on request parameters

Returns a paginated list of notifications based on request parameters
*/
func (a *Client) V1NotificationsList(params *V1NotificationsListParams) (*V1NotificationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1NotificationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1NotificationsList",
		Method:             "GET",
		PathPattern:        "/v1/notifications/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1NotificationsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1NotificationsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1NotificationsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1NotificationsObjTypeUIDList returns a list of notifications for the specified related object

Returns a list of notifications for the specified related object
*/
func (a *Client) V1NotificationsObjTypeUIDList(params *V1NotificationsObjTypeUIDListParams) (*V1NotificationsObjTypeUIDListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1NotificationsObjTypeUIDListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1NotificationsObjTypeUidList",
		Method:             "GET",
		PathPattern:        "/v1/notifications/{objectKind}/{objectUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1NotificationsObjTypeUIDListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1NotificationsObjTypeUIDListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1NotificationsObjTypeUidList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1NotificationsUIDAck updates the specified notification for the acknowledgment

Updates the specified notification for the acknowledgment
*/
func (a *Client) V1NotificationsUIDAck(params *V1NotificationsUIDAckParams) (*V1NotificationsUIDAckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1NotificationsUIDAckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1NotificationsUidAck",
		Method:             "PATCH",
		PathPattern:        "/v1/notifications/{uid}/ack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1NotificationsUIDAckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1NotificationsUIDAckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1NotificationsUidAck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1NotificationsUIDDone updates the specified notification action as done

Updates the specified notification action as done
*/
func (a *Client) V1NotificationsUIDDone(params *V1NotificationsUIDDoneParams) (*V1NotificationsUIDDoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1NotificationsUIDDoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1NotificationsUidDone",
		Method:             "PATCH",
		PathPattern:        "/v1/notifications/{uid}/done",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1NotificationsUIDDoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1NotificationsUIDDoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1NotificationsUidDone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OciImageRegistryGet creates a image registry
*/
func (a *Client) V1OciImageRegistryGet(params *V1OciImageRegistryGetParams) (*V1OciImageRegistryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OciImageRegistryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OciImageRegistryGet",
		Method:             "GET",
		PathPattern:        "/v1/registries/oci/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OciImageRegistryGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OciImageRegistryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OciImageRegistryGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OciRegistriesGet returns the information of specified oci registry
*/
func (a *Client) V1OciRegistriesGet(params *V1OciRegistriesGetParams) (*V1OciRegistriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OciRegistriesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OciRegistriesGet",
		Method:             "GET",
		PathPattern:        "/v1/registries/oci/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OciRegistriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OciRegistriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OciRegistriesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OciRegistriesSummary retrieves a oci registries summary
*/
func (a *Client) V1OciRegistriesSummary(params *V1OciRegistriesSummaryParams) (*V1OciRegistriesSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OciRegistriesSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OciRegistriesSummary",
		Method:             "GET",
		PathPattern:        "/v1/registries/oci/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OciRegistriesSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OciRegistriesSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OciRegistriesSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenstackAccountsUIDAzs gets the openstack azs for a given account and region
*/
func (a *Client) V1OpenstackAccountsUIDAzs(params *V1OpenstackAccountsUIDAzsParams) (*V1OpenstackAccountsUIDAzsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenstackAccountsUIDAzsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OpenstackAccountsUidAzs",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/openstack/{uid}/properties/azs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenstackAccountsUIDAzsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenstackAccountsUIDAzsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OpenstackAccountsUidAzs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenstackAccountsUIDFlavors gets the openstack keypairs for a given account and scope
*/
func (a *Client) V1OpenstackAccountsUIDFlavors(params *V1OpenstackAccountsUIDFlavorsParams) (*V1OpenstackAccountsUIDFlavorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenstackAccountsUIDFlavorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OpenstackAccountsUidFlavors",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/openstack/{uid}/properties/flavors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenstackAccountsUIDFlavorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenstackAccountsUIDFlavorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OpenstackAccountsUidFlavors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenstackAccountsUIDKeypairs gets the openstack keypairs for a given account and scope
*/
func (a *Client) V1OpenstackAccountsUIDKeypairs(params *V1OpenstackAccountsUIDKeypairsParams) (*V1OpenstackAccountsUIDKeypairsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenstackAccountsUIDKeypairsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OpenstackAccountsUidKeypairs",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/openstack/{uid}/properties/keypairs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenstackAccountsUIDKeypairsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenstackAccountsUIDKeypairsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OpenstackAccountsUidKeypairs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenstackAccountsUIDNetworks gets the openstack networks for a given account and scope
*/
func (a *Client) V1OpenstackAccountsUIDNetworks(params *V1OpenstackAccountsUIDNetworksParams) (*V1OpenstackAccountsUIDNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenstackAccountsUIDNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OpenstackAccountsUidNetworks",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/openstack/{uid}/properties/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenstackAccountsUIDNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenstackAccountsUIDNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OpenstackAccountsUidNetworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenstackAccountsUIDProjects gets the openstack projects for a given account
*/
func (a *Client) V1OpenstackAccountsUIDProjects(params *V1OpenstackAccountsUIDProjectsParams) (*V1OpenstackAccountsUIDProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenstackAccountsUIDProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OpenstackAccountsUidProjects",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/openstack/{uid}/properties/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenstackAccountsUIDProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenstackAccountsUIDProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OpenstackAccountsUidProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OpenstackAccountsUIDRegions gets the openstack regions for a given account
*/
func (a *Client) V1OpenstackAccountsUIDRegions(params *V1OpenstackAccountsUIDRegionsParams) (*V1OpenstackAccountsUIDRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OpenstackAccountsUIDRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OpenstackAccountsUidRegions",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/openstack/{uid}/properties/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OpenstackAccountsUIDRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OpenstackAccountsUIDRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OpenstackAccountsUidRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsList retrieves a list of overlords owned by the tenant
*/
func (a *Client) V1OverlordsList(params *V1OverlordsListParams) (*V1OverlordsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsList",
		Method:             "GET",
		PathPattern:        "/v1/overlords",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsOpenStackManifest returns the manifests required for the private gateway installation
*/
func (a *Client) V1OverlordsOpenStackManifest(params *V1OverlordsOpenStackManifestParams) (*V1OverlordsOpenStackManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsOpenStackManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsOpenStackManifest",
		Method:             "GET",
		PathPattern:        "/v1/overlords/openstack/manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsOpenStackManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsOpenStackManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsOpenStackManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsPairingCode returns the pairing code for the private gateway
*/
func (a *Client) V1OverlordsPairingCode(params *V1OverlordsPairingCodeParams) (*V1OverlordsPairingCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsPairingCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsPairingCode",
		Method:             "GET",
		PathPattern:        "/v1/overlords/pairing/code",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsPairingCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsPairingCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsPairingCode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDDelete deletes the private gateway
*/
func (a *Client) V1OverlordsUIDDelete(params *V1OverlordsUIDDeleteParams) (*V1OverlordsUIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/overlords/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDGet returns the specified private gateway s for the given uid
*/
func (a *Client) V1OverlordsUIDGet(params *V1OverlordsUIDGetParams) (*V1OverlordsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/overlords/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMaasAccountCreate creates the maas cloudaccount for the private gateway
*/
func (a *Client) V1OverlordsUIDMaasAccountCreate(params *V1OverlordsUIDMaasAccountCreateParams) (*V1OverlordsUIDMaasAccountCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMaasAccountCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidMaasAccountCreate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/maas/{uid}/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMaasAccountCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMaasAccountCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidMaasAccountCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMaasAccountUpdate updates the maas cloudaccount for the private gateway
*/
func (a *Client) V1OverlordsUIDMaasAccountUpdate(params *V1OverlordsUIDMaasAccountUpdateParams) (*V1OverlordsUIDMaasAccountUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMaasAccountUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidMaasAccountUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/overlords/maas/{uid}/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMaasAccountUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMaasAccountUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidMaasAccountUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMaasAccountValidate validates the maas cloudaccount for the private gateway
*/
func (a *Client) V1OverlordsUIDMaasAccountValidate(params *V1OverlordsUIDMaasAccountValidateParams) (*V1OverlordsUIDMaasAccountValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMaasAccountValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidMaasAccountValidate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/maas/{uid}/account/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMaasAccountValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMaasAccountValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidMaasAccountValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMaasClusterProfile returns the specified maas private gateway cluster profile
*/
func (a *Client) V1OverlordsUIDMaasClusterProfile(params *V1OverlordsUIDMaasClusterProfileParams) (*V1OverlordsUIDMaasClusterProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMaasClusterProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidMaasClusterProfile",
		Method:             "GET",
		PathPattern:        "/v1/overlords/maas/{uid}/clusterprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMaasClusterProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMaasClusterProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidMaasClusterProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMaasPoolCreate creates an IP pool definition for the specified maas private gateway
*/
func (a *Client) V1OverlordsUIDMaasPoolCreate(params *V1OverlordsUIDMaasPoolCreateParams) (*V1OverlordsUIDMaasPoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMaasPoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidMaasPoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/maas/{uid}/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMaasPoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMaasPoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidMaasPoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMaasPoolDelete deletes the maas private gateway s specified IP pool data
*/
func (a *Client) V1OverlordsUIDMaasPoolDelete(params *V1OverlordsUIDMaasPoolDeleteParams) (*V1OverlordsUIDMaasPoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMaasPoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidMaasPoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/overlords/maas/{uid}/pools/{poolUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMaasPoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMaasPoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidMaasPoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMaasPoolUpdate updates the maas private gateway s specified IP pool data
*/
func (a *Client) V1OverlordsUIDMaasPoolUpdate(params *V1OverlordsUIDMaasPoolUpdateParams) (*V1OverlordsUIDMaasPoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMaasPoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidMaasPoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/overlords/maas/{uid}/pools/{poolUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMaasPoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMaasPoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidMaasPoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMaasPoolsList retrieves a list of IP pools for the specified maas private gateway
*/
func (a *Client) V1OverlordsUIDMaasPoolsList(params *V1OverlordsUIDMaasPoolsListParams) (*V1OverlordsUIDMaasPoolsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMaasPoolsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidMaasPoolsList",
		Method:             "GET",
		PathPattern:        "/v1/overlords/maas/{uid}/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMaasPoolsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMaasPoolsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidMaasPoolsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDMetadataUpdate updates the private gateway s metadata
*/
func (a *Client) V1OverlordsUIDMetadataUpdate(params *V1OverlordsUIDMetadataUpdateParams) (*V1OverlordsUIDMetadataUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDMetadataUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidMetadataUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/overlords/{uid}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDMetadataUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDMetadataUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidMetadataUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDOpenStackAccountCreate creates the open stack cloudaccount for the private gateway
*/
func (a *Client) V1OverlordsUIDOpenStackAccountCreate(params *V1OverlordsUIDOpenStackAccountCreateParams) (*V1OverlordsUIDOpenStackAccountCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDOpenStackAccountCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidOpenStackAccountCreate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/openstack/{uid}/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDOpenStackAccountCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDOpenStackAccountCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidOpenStackAccountCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDOpenStackAccountUpdate updates the open stack cloudaccount for the private gateway
*/
func (a *Client) V1OverlordsUIDOpenStackAccountUpdate(params *V1OverlordsUIDOpenStackAccountUpdateParams) (*V1OverlordsUIDOpenStackAccountUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDOpenStackAccountUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidOpenStackAccountUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/overlords/openstack/{uid}/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDOpenStackAccountUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDOpenStackAccountUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidOpenStackAccountUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDOpenStackAccountValidate validates the open stack cloudaccount for the private gateway
*/
func (a *Client) V1OverlordsUIDOpenStackAccountValidate(params *V1OverlordsUIDOpenStackAccountValidateParams) (*V1OverlordsUIDOpenStackAccountValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDOpenStackAccountValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidOpenStackAccountValidate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/openstack/{uid}/account/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDOpenStackAccountValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDOpenStackAccountValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidOpenStackAccountValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDOpenStackCloudConfigCreate creates the open stack cloud config for the private gateway
*/
func (a *Client) V1OverlordsUIDOpenStackCloudConfigCreate(params *V1OverlordsUIDOpenStackCloudConfigCreateParams) (*V1OverlordsUIDOpenStackCloudConfigCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDOpenStackCloudConfigCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidOpenStackCloudConfigCreate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/openstack/{uid}/cloudconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDOpenStackCloudConfigCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDOpenStackCloudConfigCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidOpenStackCloudConfigCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDOpenStackCloudConfigUpdate updates the open stack cloud config for the private gateway
*/
func (a *Client) V1OverlordsUIDOpenStackCloudConfigUpdate(params *V1OverlordsUIDOpenStackCloudConfigUpdateParams) (*V1OverlordsUIDOpenStackCloudConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDOpenStackCloudConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidOpenStackCloudConfigUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/overlords/openstack/{uid}/cloudconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDOpenStackCloudConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDOpenStackCloudConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidOpenStackCloudConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDOpenStackClusterProfile returns the specified open stack private gateway cluster profile
*/
func (a *Client) V1OverlordsUIDOpenStackClusterProfile(params *V1OverlordsUIDOpenStackClusterProfileParams) (*V1OverlordsUIDOpenStackClusterProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDOpenStackClusterProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidOpenStackClusterProfile",
		Method:             "GET",
		PathPattern:        "/v1/overlords/openstack/{uid}/clusterprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDOpenStackClusterProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDOpenStackClusterProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidOpenStackClusterProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDPoolCreate creates an IP pool defintion for the sepcified private gateway
*/
func (a *Client) V1OverlordsUIDPoolCreate(params *V1OverlordsUIDPoolCreateParams) (*V1OverlordsUIDPoolCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDPoolCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidPoolCreate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/vsphere/{uid}/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDPoolCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDPoolCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidPoolCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDPoolDelete deletes the private gateways s specified IP pool data
*/
func (a *Client) V1OverlordsUIDPoolDelete(params *V1OverlordsUIDPoolDeleteParams) (*V1OverlordsUIDPoolDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDPoolDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidPoolDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/overlords/vsphere/{uid}/pools/{poolUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDPoolDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDPoolDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidPoolDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDPoolUpdate updates the private gateways s specified IP pool data
*/
func (a *Client) V1OverlordsUIDPoolUpdate(params *V1OverlordsUIDPoolUpdateParams) (*V1OverlordsUIDPoolUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDPoolUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidPoolUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/overlords/vsphere/{uid}/pools/{poolUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDPoolUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDPoolUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidPoolUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDPoolsList retrieves a list of IP pools for the specified private gateway
*/
func (a *Client) V1OverlordsUIDPoolsList(params *V1OverlordsUIDPoolsListParams) (*V1OverlordsUIDPoolsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDPoolsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidPoolsList",
		Method:             "GET",
		PathPattern:        "/v1/overlords/vsphere/{uid}/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDPoolsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDPoolsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidPoolsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDReset resets the private gateway by disaaociating the private gateway s resources
*/
func (a *Client) V1OverlordsUIDReset(params *V1OverlordsUIDResetParams) (*V1OverlordsUIDResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidReset",
		Method:             "PUT",
		PathPattern:        "/v1/overlords/{uid}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDResetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDVsphereAccountCreate creates the v sphere cloudaccount for the private gateway
*/
func (a *Client) V1OverlordsUIDVsphereAccountCreate(params *V1OverlordsUIDVsphereAccountCreateParams) (*V1OverlordsUIDVsphereAccountCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDVsphereAccountCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidVsphereAccountCreate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/vsphere/{uid}/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDVsphereAccountCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDVsphereAccountCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidVsphereAccountCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDVsphereAccountUpdate updates the v sphere cloudaccount for the private gateway
*/
func (a *Client) V1OverlordsUIDVsphereAccountUpdate(params *V1OverlordsUIDVsphereAccountUpdateParams) (*V1OverlordsUIDVsphereAccountUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDVsphereAccountUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidVsphereAccountUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/overlords/vsphere/{uid}/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDVsphereAccountUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDVsphereAccountUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidVsphereAccountUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDVsphereAccountValidate validates the v sphere cloudaccount for the private gateway
*/
func (a *Client) V1OverlordsUIDVsphereAccountValidate(params *V1OverlordsUIDVsphereAccountValidateParams) (*V1OverlordsUIDVsphereAccountValidateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDVsphereAccountValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidVsphereAccountValidate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/vsphere/{uid}/account/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDVsphereAccountValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDVsphereAccountValidateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidVsphereAccountValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDVsphereCloudConfigCreate creates the v sphere cloud config for the private gateway
*/
func (a *Client) V1OverlordsUIDVsphereCloudConfigCreate(params *V1OverlordsUIDVsphereCloudConfigCreateParams) (*V1OverlordsUIDVsphereCloudConfigCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDVsphereCloudConfigCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidVsphereCloudConfigCreate",
		Method:             "POST",
		PathPattern:        "/v1/overlords/vsphere/{uid}/cloudconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDVsphereCloudConfigCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDVsphereCloudConfigCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidVsphereCloudConfigCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDVsphereCloudConfigUpdate updates the v sphere cloud config for the private gateway
*/
func (a *Client) V1OverlordsUIDVsphereCloudConfigUpdate(params *V1OverlordsUIDVsphereCloudConfigUpdateParams) (*V1OverlordsUIDVsphereCloudConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDVsphereCloudConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidVsphereCloudConfigUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/overlords/vsphere/{uid}/cloudconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDVsphereCloudConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDVsphereCloudConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidVsphereCloudConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDVsphereClusterProfile returns the specified vsphere private gateway cluster profile
*/
func (a *Client) V1OverlordsUIDVsphereClusterProfile(params *V1OverlordsUIDVsphereClusterProfileParams) (*V1OverlordsUIDVsphereClusterProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDVsphereClusterProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidVsphereClusterProfile",
		Method:             "GET",
		PathPattern:        "/v1/overlords/vsphere/{uid}/clusterprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDVsphereClusterProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDVsphereClusterProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidVsphereClusterProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDVsphereComputeclusterRes retrieves the v sphere computecluster resources for the specified private gateway s account
*/
func (a *Client) V1OverlordsUIDVsphereComputeclusterRes(params *V1OverlordsUIDVsphereComputeclusterResParams) (*V1OverlordsUIDVsphereComputeclusterResOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDVsphereComputeclusterResParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidVsphereComputeclusterRes",
		Method:             "GET",
		PathPattern:        "/v1/overlords/vsphere/{uid}/properties/computecluster/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDVsphereComputeclusterResReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDVsphereComputeclusterResOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidVsphereComputeclusterRes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsUIDVsphereDatacenters retrieves the v sphere datacenters and datacluster for the specified private gateway s account
*/
func (a *Client) V1OverlordsUIDVsphereDatacenters(params *V1OverlordsUIDVsphereDatacentersParams) (*V1OverlordsUIDVsphereDatacentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsUIDVsphereDatacentersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsUidVsphereDatacenters",
		Method:             "GET",
		PathPattern:        "/v1/overlords/vsphere/{uid}/properties/datacenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsUIDVsphereDatacentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsUIDVsphereDatacentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsUidVsphereDatacenters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsVsphereManifest returns the manifests required for the private gateway installation
*/
func (a *Client) V1OverlordsVsphereManifest(params *V1OverlordsVsphereManifestParams) (*V1OverlordsVsphereManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsVsphereManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsVsphereManifest",
		Method:             "GET",
		PathPattern:        "/v1/overlords/vsphere/manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsVsphereManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsVsphereManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsVsphereManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1OverlordsVsphereOvaGet returns overlord s ova information
*/
func (a *Client) V1OverlordsVsphereOvaGet(params *V1OverlordsVsphereOvaGetParams) (*V1OverlordsVsphereOvaGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1OverlordsVsphereOvaGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1OverlordsVsphereOvaGet",
		Method:             "GET",
		PathPattern:        "/v1/overlords/vsphere/ova",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1OverlordsVsphereOvaGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1OverlordsVsphereOvaGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1OverlordsVsphereOvaGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PacksNameRegistryUIDList retrieves a list of packs
*/
func (a *Client) V1PacksNameRegistryUIDList(params *V1PacksNameRegistryUIDListParams) (*V1PacksNameRegistryUIDListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PacksNameRegistryUIDListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PacksNameRegistryUidList",
		Method:             "GET",
		PathPattern:        "/v1/packs/{packName}/registries/{registryUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PacksNameRegistryUIDListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PacksNameRegistryUIDListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PacksNameRegistryUidList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PacksPackUIDLogo returns the logo for a specified pack
*/
func (a *Client) V1PacksPackUIDLogo(params *V1PacksPackUIDLogoParams, writer io.Writer) (*V1PacksPackUIDLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PacksPackUIDLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PacksPackUidLogo",
		Method:             "GET",
		PathPattern:        "/v1/packs/{packUid}/logo",
		ProducesMediaTypes: []string{"image/png", "image/gif", "image/jpeg"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PacksPackUIDLogoReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PacksPackUIDLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PacksPackUidLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PacksSearch retrieves a list of packs based on filter
*/
func (a *Client) V1PacksSearch(params *V1PacksSearchParams) (*V1PacksSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PacksSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PacksSearch",
		Method:             "POST",
		PathPattern:        "/v1/packs/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PacksSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PacksSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PacksSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PacksSummaryList retrieves a list of packs
*/
func (a *Client) V1PacksSummaryList(params *V1PacksSummaryListParams) (*V1PacksSummaryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PacksSummaryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PacksSummaryList",
		Method:             "GET",
		PathPattern:        "/v1/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PacksSummaryListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PacksSummaryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PacksSummaryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PacksUID returns the specified pack
*/
func (a *Client) V1PacksUID(params *V1PacksUIDParams) (*V1PacksUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PacksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PacksUid",
		Method:             "GET",
		PathPattern:        "/v1/packs/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PacksUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PacksUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PacksUid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PacksUIDReadme returns the readme of a specified pack
*/
func (a *Client) V1PacksUIDReadme(params *V1PacksUIDReadmeParams) (*V1PacksUIDReadmeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PacksUIDReadmeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PacksUidReadme",
		Method:             "GET",
		PathPattern:        "/v1/packs/{uid}/readme",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PacksUIDReadmeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PacksUIDReadmeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PacksUidReadme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PasswordActivate updates and activates the specified user password using the password token

Updates and Activates user password with the help of password token
*/
func (a *Client) V1PasswordActivate(params *V1PasswordActivateParams) (*V1PasswordActivateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PasswordActivateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PasswordActivate",
		Method:             "PATCH",
		PathPattern:        "/v1/auth/password/{passwordToken}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PasswordActivateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PasswordActivateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PasswordActivate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PasswordReset resets the user password using the password token

Updates the new user password with the help of password token
*/
func (a *Client) V1PasswordReset(params *V1PasswordResetParams) (*V1PasswordResetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PasswordResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PasswordReset",
		Method:             "PATCH",
		PathPattern:        "/v1/auth/password/{passwordToken}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PasswordResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PasswordResetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PasswordReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PasswordResetRequest creates request to reset password via email

Creates request to reset password via email. Password reset email will be sent to the user. Sends 204 No Content.
*/
func (a *Client) V1PasswordResetRequest(params *V1PasswordResetRequestParams) (*V1PasswordResetRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PasswordResetRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PasswordResetRequest",
		Method:             "POST",
		PathPattern:        "/v1/auth/user/password/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PasswordResetRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PasswordResetRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PasswordResetRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PatchTenantAddress updates tenant address
*/
func (a *Client) V1PatchTenantAddress(params *V1PatchTenantAddressParams) (*V1PatchTenantAddressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PatchTenantAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PatchTenantAddress",
		Method:             "PATCH",
		PathPattern:        "/v1/tenants/{tenantUid}/address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PatchTenantAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PatchTenantAddressNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PatchTenantAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PatchTenantEmailID updates tenant email Id
*/
func (a *Client) V1PatchTenantEmailID(params *V1PatchTenantEmailIDParams) (*V1PatchTenantEmailIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PatchTenantEmailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PatchTenantEmailId",
		Method:             "PATCH",
		PathPattern:        "/v1/tenants/{tenantUid}/emailId",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PatchTenantEmailIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PatchTenantEmailIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PatchTenantEmailId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PcgSelfHosted returns the private gateway manifest link
*/
func (a *Client) V1PcgSelfHosted(params *V1PcgSelfHostedParams) (*V1PcgSelfHostedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PcgSelfHostedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PcgSelfHosted",
		Method:             "POST",
		PathPattern:        "/v1/pcg/selfHosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PcgSelfHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PcgSelfHostedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PcgSelfHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PcgUIDAllyManifestGet returns the pcg ally manifest
*/
func (a *Client) V1PcgUIDAllyManifestGet(params *V1PcgUIDAllyManifestGetParams, writer io.Writer) (*V1PcgUIDAllyManifestGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PcgUIDAllyManifestGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PcgUidAllyManifestGet",
		Method:             "GET",
		PathPattern:        "/v1/pcg/{uid}/services/ally/manifest",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PcgUIDAllyManifestGetReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PcgUIDAllyManifestGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PcgUidAllyManifestGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PcgUIDJetManifestGet returns the pcg jet manifest
*/
func (a *Client) V1PcgUIDJetManifestGet(params *V1PcgUIDJetManifestGetParams, writer io.Writer) (*V1PcgUIDJetManifestGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PcgUIDJetManifestGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PcgUidJetManifestGet",
		Method:             "GET",
		PathPattern:        "/v1/pcg/{uid}/services/jet/manifest",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PcgUIDJetManifestGetReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PcgUIDJetManifestGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PcgUidJetManifestGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PcgUIDRegister registers the pcg
*/
func (a *Client) V1PcgUIDRegister(params *V1PcgUIDRegisterParams) (*V1PcgUIDRegisterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PcgUIDRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PcgUidRegister",
		Method:             "POST",
		PathPattern:        "/v1/pcg/{uid}/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PcgUIDRegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PcgUIDRegisterNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PcgUidRegister: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1PermissionsList retrieves a list of permissions
*/
func (a *Client) V1PermissionsList(params *V1PermissionsListParams) (*V1PermissionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1PermissionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1PermissionsList",
		Method:             "GET",
		PathPattern:        "/v1/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1PermissionsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1PermissionsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1PermissionsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectClusterSettingsGet gets project cluster settings
*/
func (a *Client) V1ProjectClusterSettingsGet(params *V1ProjectClusterSettingsGetParams) (*V1ProjectClusterSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectClusterSettingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectClusterSettingsGet",
		Method:             "GET",
		PathPattern:        "/v1/projects/{uid}/preferences/clusterSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectClusterSettingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectClusterSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectClusterSettingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectClustersNodesAutoRemediationSettingUpdate updates project clusters nodes auto remediation setting
*/
func (a *Client) V1ProjectClustersNodesAutoRemediationSettingUpdate(params *V1ProjectClustersNodesAutoRemediationSettingUpdateParams) (*V1ProjectClustersNodesAutoRemediationSettingUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectClustersNodesAutoRemediationSettingUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectClustersNodesAutoRemediationSettingUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{uid}/preferences/clusterSettings/nodesAutoRemediationSetting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectClustersNodesAutoRemediationSettingUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectClustersNodesAutoRemediationSettingUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectClustersNodesAutoRemediationSettingUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsAlerts retrieves a list of supported alerts for a project
*/
func (a *Client) V1ProjectsAlerts(params *V1ProjectsAlertsParams) (*V1ProjectsAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsAlertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsAlerts",
		Method:             "GET",
		PathPattern:        "/v1/projects/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsAlertsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsCreate creates a project
*/
func (a *Client) V1ProjectsCreate(params *V1ProjectsCreateParams) (*V1ProjectsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsCreate",
		Method:             "POST",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsFilterSummary v1 projects filter summary API
*/
func (a *Client) V1ProjectsFilterSummary(params *V1ProjectsFilterSummaryParams) (*V1ProjectsFilterSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsFilterSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsFilterSummary",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsFilterSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsFilterSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsFilterSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsMetadata retrieves a list of projects metadata
*/
func (a *Client) V1ProjectsMetadata(params *V1ProjectsMetadataParams) (*V1ProjectsMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsMetadata",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/projects/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDAlertCreate creates the specified alert to the specified project
*/
func (a *Client) V1ProjectsUIDAlertCreate(params *V1ProjectsUIDAlertCreateParams) (*V1ProjectsUIDAlertCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDAlertCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidAlertCreate",
		Method:             "POST",
		PathPattern:        "/v1/projects/{uid}/alerts/{component}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDAlertCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDAlertCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidAlertCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDAlertDelete deletes the specified alert to the specified project
*/
func (a *Client) V1ProjectsUIDAlertDelete(params *V1ProjectsUIDAlertDeleteParams) (*V1ProjectsUIDAlertDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDAlertDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidAlertDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{uid}/alerts/{component}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDAlertDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDAlertDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidAlertDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDAlertUpdate upserts the specified alert to the specified project
*/
func (a *Client) V1ProjectsUIDAlertUpdate(params *V1ProjectsUIDAlertUpdateParams) (*V1ProjectsUIDAlertUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDAlertUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidAlertUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{uid}/alerts/{component}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDAlertUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDAlertUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidAlertUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDAlertsUIDDelete deletes the specified alert of the specified project
*/
func (a *Client) V1ProjectsUIDAlertsUIDDelete(params *V1ProjectsUIDAlertsUIDDeleteParams) (*V1ProjectsUIDAlertsUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDAlertsUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidAlertsUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{uid}/alerts/{component}/{alertUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDAlertsUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDAlertsUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidAlertsUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDAlertsUIDGet gets the specified alert of the specified project
*/
func (a *Client) V1ProjectsUIDAlertsUIDGet(params *V1ProjectsUIDAlertsUIDGetParams) (*V1ProjectsUIDAlertsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDAlertsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidAlertsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/projects/{uid}/alerts/{component}/{alertUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDAlertsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDAlertsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidAlertsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDAlertsUIDUpdate updates the specified alert of the specified project
*/
func (a *Client) V1ProjectsUIDAlertsUIDUpdate(params *V1ProjectsUIDAlertsUIDUpdateParams) (*V1ProjectsUIDAlertsUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDAlertsUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidAlertsUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{uid}/alerts/{component}/{alertUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDAlertsUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDAlertsUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidAlertsUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDDelete deletes the specified project
*/
func (a *Client) V1ProjectsUIDDelete(params *V1ProjectsUIDDeleteParams) (*V1ProjectsUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDGet returns the specified project
*/
func (a *Client) V1ProjectsUIDGet(params *V1ProjectsUIDGetParams) (*V1ProjectsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/projects/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDMacrosCreate creates or add new macros for the specified project
*/
func (a *Client) V1ProjectsUIDMacrosCreate(params *V1ProjectsUIDMacrosCreateParams) (*V1ProjectsUIDMacrosCreateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDMacrosCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidMacrosCreate",
		Method:             "POST",
		PathPattern:        "/v1/projects/{uid}/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDMacrosCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDMacrosCreateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidMacrosCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDMacrosDeleteByMacroName deletes the macros for the specified project by macro name
*/
func (a *Client) V1ProjectsUIDMacrosDeleteByMacroName(params *V1ProjectsUIDMacrosDeleteByMacroNameParams) (*V1ProjectsUIDMacrosDeleteByMacroNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDMacrosDeleteByMacroNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidMacrosDeleteByMacroName",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{uid}/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDMacrosDeleteByMacroNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDMacrosDeleteByMacroNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidMacrosDeleteByMacroName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDMacrosList lists the macros of the specified project
*/
func (a *Client) V1ProjectsUIDMacrosList(params *V1ProjectsUIDMacrosListParams) (*V1ProjectsUIDMacrosListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDMacrosListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidMacrosList",
		Method:             "GET",
		PathPattern:        "/v1/projects/{uid}/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDMacrosListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDMacrosListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidMacrosList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDMacrosUpdate updates the macros of the specified project
*/
func (a *Client) V1ProjectsUIDMacrosUpdate(params *V1ProjectsUIDMacrosUpdateParams) (*V1ProjectsUIDMacrosUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDMacrosUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidMacrosUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{uid}/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDMacrosUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDMacrosUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidMacrosUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDMacrosUpdateByMacroName updates the macros for the specified project by macro name
*/
func (a *Client) V1ProjectsUIDMacrosUpdateByMacroName(params *V1ProjectsUIDMacrosUpdateByMacroNameParams) (*V1ProjectsUIDMacrosUpdateByMacroNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDMacrosUpdateByMacroNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidMacrosUpdateByMacroName",
		Method:             "PATCH",
		PathPattern:        "/v1/projects/{uid}/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDMacrosUpdateByMacroNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDMacrosUpdateByMacroNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidMacrosUpdateByMacroName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDMetaUpdate updates the metadata of the specified project
*/
func (a *Client) V1ProjectsUIDMetaUpdate(params *V1ProjectsUIDMetaUpdateParams) (*V1ProjectsUIDMetaUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDMetaUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidMetaUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{uid}/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDMetaUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDMetaUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidMetaUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDTeamsUpdate updates the teams association to the specified project
*/
func (a *Client) V1ProjectsUIDTeamsUpdate(params *V1ProjectsUIDTeamsUpdateParams) (*V1ProjectsUIDTeamsUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDTeamsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidTeamsUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{uid}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDTeamsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDTeamsUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidTeamsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDUpdate updates the specified project
*/
func (a *Client) V1ProjectsUIDUpdate(params *V1ProjectsUIDUpdateParams) (*V1ProjectsUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDUsersUpdate updates the users association to the specified project
*/
func (a *Client) V1ProjectsUIDUsersUpdate(params *V1ProjectsUIDUsersUpdateParams) (*V1ProjectsUIDUsersUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDUsersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidUsersUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{uid}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDUsersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDUsersUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidUsersUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ProjectsUIDValidate validates and returns active resource of project before delete
*/
func (a *Client) V1ProjectsUIDValidate(params *V1ProjectsUIDValidateParams) (*V1ProjectsUIDValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ProjectsUIDValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ProjectsUidValidate",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{uid}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ProjectsUIDValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ProjectsUIDValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ProjectsUidValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RateConfigGet gets all rate config for public and private cloud
*/
func (a *Client) V1RateConfigGet(params *V1RateConfigGetParams) (*V1RateConfigGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RateConfigGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RateConfigGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/rateConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RateConfigGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RateConfigGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RateConfigGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RateConfigUpdate updates the rate config for public and private cloud
*/
func (a *Client) V1RateConfigUpdate(params *V1RateConfigUpdateParams) (*V1RateConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RateConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RateConfigUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/rateConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RateConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RateConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RateConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesHelmCreate creates a helm registry
*/
func (a *Client) V1RegistriesHelmCreate(params *V1RegistriesHelmCreateParams) (*V1RegistriesHelmCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesHelmCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesHelmCreate",
		Method:             "POST",
		PathPattern:        "/v1/registries/helm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesHelmCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesHelmCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesHelmCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesHelmList retrieves a list of helm registries
*/
func (a *Client) V1RegistriesHelmList(params *V1RegistriesHelmListParams) (*V1RegistriesHelmListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesHelmListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesHelmList",
		Method:             "GET",
		PathPattern:        "/v1/registries/helm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesHelmListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesHelmListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesHelmList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesHelmSummaryList retrieves a list of helm registries as summary
*/
func (a *Client) V1RegistriesHelmSummaryList(params *V1RegistriesHelmSummaryListParams) (*V1RegistriesHelmSummaryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesHelmSummaryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesHelmSummaryList",
		Method:             "GET",
		PathPattern:        "/v1/registries/helm/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesHelmSummaryListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesHelmSummaryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesHelmSummaryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesHelmUIDDelete deletes the specified helm registry
*/
func (a *Client) V1RegistriesHelmUIDDelete(params *V1RegistriesHelmUIDDeleteParams) (*V1RegistriesHelmUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesHelmUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesHelmUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/registries/helm/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesHelmUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesHelmUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesHelmUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesHelmUIDGet returns the specified helm registry
*/
func (a *Client) V1RegistriesHelmUIDGet(params *V1RegistriesHelmUIDGetParams) (*V1RegistriesHelmUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesHelmUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesHelmUidGet",
		Method:             "GET",
		PathPattern:        "/v1/registries/helm/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesHelmUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesHelmUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesHelmUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesHelmUIDSync syncs helm registry

Sync all the helm charts from the registry
*/
func (a *Client) V1RegistriesHelmUIDSync(params *V1RegistriesHelmUIDSyncParams) (*V1RegistriesHelmUIDSyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesHelmUIDSyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesHelmUidSync",
		Method:             "POST",
		PathPattern:        "/v1/registries/helm/{uid}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesHelmUIDSyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesHelmUIDSyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesHelmUidSync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesHelmUIDSyncStatus gets helm registry sync status

Get the sync status for the specified helm registry
*/
func (a *Client) V1RegistriesHelmUIDSyncStatus(params *V1RegistriesHelmUIDSyncStatusParams) (*V1RegistriesHelmUIDSyncStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesHelmUIDSyncStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesHelmUidSyncStatus",
		Method:             "GET",
		PathPattern:        "/v1/registries/helm/{uid}/sync/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesHelmUIDSyncStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesHelmUIDSyncStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesHelmUidSyncStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesHelmUIDUpdate updates the specified helm registry
*/
func (a *Client) V1RegistriesHelmUIDUpdate(params *V1RegistriesHelmUIDUpdateParams) (*V1RegistriesHelmUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesHelmUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesHelmUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/registries/helm/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesHelmUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesHelmUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesHelmUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesMetadata retrieves a list of registries metadata
*/
func (a *Client) V1RegistriesMetadata(params *V1RegistriesMetadataParams) (*V1RegistriesMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesMetadata",
		Method:             "GET",
		PathPattern:        "/v1/registries/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesNameConfigGet returns the specified system scope registry configuration
*/
func (a *Client) V1RegistriesNameConfigGet(params *V1RegistriesNameConfigGetParams) (*V1RegistriesNameConfigGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesNameConfigGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesNameConfigGet",
		Method:             "GET",
		PathPattern:        "/v1/registries/{registryName}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesNameConfigGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesNameConfigGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesNameConfigGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesPackCreate creates a pack registry
*/
func (a *Client) V1RegistriesPackCreate(params *V1RegistriesPackCreateParams) (*V1RegistriesPackCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesPackCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesPackCreate",
		Method:             "POST",
		PathPattern:        "/v1/registries/pack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesPackCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesPackCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesPackCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesPackList retrieves a list of pack registries
*/
func (a *Client) V1RegistriesPackList(params *V1RegistriesPackListParams) (*V1RegistriesPackListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesPackListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesPackList",
		Method:             "GET",
		PathPattern:        "/v1/registries/pack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesPackListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesPackListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesPackList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesPackSummaryList retrieves a list of pack registries as summary
*/
func (a *Client) V1RegistriesPackSummaryList(params *V1RegistriesPackSummaryListParams) (*V1RegistriesPackSummaryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesPackSummaryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesPackSummaryList",
		Method:             "GET",
		PathPattern:        "/v1/registries/pack/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesPackSummaryListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesPackSummaryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesPackSummaryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesPackUIDDelete deletes the specified pack registry
*/
func (a *Client) V1RegistriesPackUIDDelete(params *V1RegistriesPackUIDDeleteParams) (*V1RegistriesPackUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesPackUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesPackUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/registries/pack/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesPackUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesPackUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesPackUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesPackUIDGet returns the specified pack registry
*/
func (a *Client) V1RegistriesPackUIDGet(params *V1RegistriesPackUIDGetParams) (*V1RegistriesPackUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesPackUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesPackUidGet",
		Method:             "GET",
		PathPattern:        "/v1/registries/pack/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesPackUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesPackUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesPackUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesPackUIDSync syncs pack registry

Sync all the packs from the registry
*/
func (a *Client) V1RegistriesPackUIDSync(params *V1RegistriesPackUIDSyncParams) (*V1RegistriesPackUIDSyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesPackUIDSyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesPackUidSync",
		Method:             "POST",
		PathPattern:        "/v1/registries/pack/{uid}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesPackUIDSyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesPackUIDSyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesPackUidSync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesPackUIDSyncStatus gets pack registry sync status

Get sync status for the pack specified registry
*/
func (a *Client) V1RegistriesPackUIDSyncStatus(params *V1RegistriesPackUIDSyncStatusParams) (*V1RegistriesPackUIDSyncStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesPackUIDSyncStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesPackUidSyncStatus",
		Method:             "GET",
		PathPattern:        "/v1/registries/pack/{uid}/sync/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesPackUIDSyncStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesPackUIDSyncStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesPackUidSyncStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesPackUIDUpdate updates the specified pack registry
*/
func (a *Client) V1RegistriesPackUIDUpdate(params *V1RegistriesPackUIDUpdateParams) (*V1RegistriesPackUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesPackUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesPackUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/registries/pack/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesPackUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesPackUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesPackUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RegistriesUIDDelete deletes the specified registry
*/
func (a *Client) V1RegistriesUIDDelete(params *V1RegistriesUIDDeleteParams) (*V1RegistriesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RegistriesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RegistriesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/registries/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RegistriesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RegistriesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RegistriesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RolesClone clones the role
*/
func (a *Client) V1RolesClone(params *V1RolesCloneParams) (*V1RolesCloneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RolesCloneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RolesClone",
		Method:             "POST",
		PathPattern:        "/v1/roles/{uid}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RolesCloneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RolesCloneCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RolesClone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RolesCreate creates a role with specified permissions
*/
func (a *Client) V1RolesCreate(params *V1RolesCreateParams) (*V1RolesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RolesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RolesCreate",
		Method:             "POST",
		PathPattern:        "/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RolesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RolesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RolesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RolesList retrieves a list of roles
*/
func (a *Client) V1RolesList(params *V1RolesListParams) (*V1RolesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RolesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RolesList",
		Method:             "GET",
		PathPattern:        "/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RolesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RolesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RolesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RolesUIDDelete deletes the specified role
*/
func (a *Client) V1RolesUIDDelete(params *V1RolesUIDDeleteParams) (*V1RolesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RolesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RolesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/roles/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RolesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RolesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RolesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RolesUIDGet returns the specified role
*/
func (a *Client) V1RolesUIDGet(params *V1RolesUIDGetParams) (*V1RolesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RolesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RolesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/roles/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RolesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RolesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RolesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1RolesUIDUpdate updates the specified role
*/
func (a *Client) V1RolesUIDUpdate(params *V1RolesUIDUpdateParams) (*V1RolesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RolesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1RolesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/roles/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1RolesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RolesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1RolesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ServiceManifestGet returns a service manifest for a given service name and version
*/
func (a *Client) V1ServiceManifestGet(params *V1ServiceManifestGetParams) (*V1ServiceManifestGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ServiceManifestGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ServiceManifestGet",
		Method:             "GET",
		PathPattern:        "/v1/services/{serviceName}/versions/{version}/manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ServiceManifestGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ServiceManifestGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ServiceManifestGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ServiceVersionGet returns a latest version for a given service name
*/
func (a *Client) V1ServiceVersionGet(params *V1ServiceVersionGetParams) (*V1ServiceVersionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ServiceVersionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1ServiceVersionGet",
		Method:             "GET",
		PathPattern:        "/v1/services/{serviceName}/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1ServiceVersionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ServiceVersionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1ServiceVersionGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAksCreate creates an a k s cluster
*/
func (a *Client) V1SpectroClustersAksCreate(params *V1SpectroClustersAksCreateParams) (*V1SpectroClustersAksCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAksCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAksCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/aks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAksCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAksCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAksCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAksRate gets a k s cluster estimated rate information
*/
func (a *Client) V1SpectroClustersAksRate(params *V1SpectroClustersAksRateParams) (*V1SpectroClustersAksRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAksRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAksRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/aks/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAksRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAksRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAksRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAksValidate validates a k s cluster create operation
*/
func (a *Client) V1SpectroClustersAksValidate(params *V1SpectroClustersAksValidateParams) (*V1SpectroClustersAksValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAksValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAksValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/aks/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAksValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAksValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAksValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAwsCreate creates an a w s cluster
*/
func (a *Client) V1SpectroClustersAwsCreate(params *V1SpectroClustersAwsCreateParams) (*V1SpectroClustersAwsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAwsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAwsCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAwsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAwsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAwsCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAwsImport imports an a w s cluster
*/
func (a *Client) V1SpectroClustersAwsImport(params *V1SpectroClustersAwsImportParams) (*V1SpectroClustersAwsImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAwsImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAwsImport",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/aws/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAwsImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAwsImportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAwsImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAwsRate gets a w s cluster estimated rate information
*/
func (a *Client) V1SpectroClustersAwsRate(params *V1SpectroClustersAwsRateParams) (*V1SpectroClustersAwsRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAwsRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAwsRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/aws/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAwsRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAwsRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAwsRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAwsValidate validates a w s cluster create operation
*/
func (a *Client) V1SpectroClustersAwsValidate(params *V1SpectroClustersAwsValidateParams) (*V1SpectroClustersAwsValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAwsValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAwsValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/aws/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAwsValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAwsValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAwsValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAzureCreate creates an azure cluster
*/
func (a *Client) V1SpectroClustersAzureCreate(params *V1SpectroClustersAzureCreateParams) (*V1SpectroClustersAzureCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAzureCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAzureCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/azure",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAzureCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAzureCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAzureCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAzureImport imports an azure cluster
*/
func (a *Client) V1SpectroClustersAzureImport(params *V1SpectroClustersAzureImportParams) (*V1SpectroClustersAzureImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAzureImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAzureImport",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/azure/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAzureImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAzureImportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAzureImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAzureRate gets azure cluster estimated rate information
*/
func (a *Client) V1SpectroClustersAzureRate(params *V1SpectroClustersAzureRateParams) (*V1SpectroClustersAzureRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAzureRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAzureRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/azure/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAzureRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAzureRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAzureRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersAzureValidate validates azure cluster create operation
*/
func (a *Client) V1SpectroClustersAzureValidate(params *V1SpectroClustersAzureValidateParams) (*V1SpectroClustersAzureValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersAzureValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersAzureValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/azure/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersAzureValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersAzureValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersAzureValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersCertificatesRenew sets the cluster control plane nodes kubernetes certificates for renewal
*/
func (a *Client) V1SpectroClustersCertificatesRenew(params *V1SpectroClustersCertificatesRenewParams) (*V1SpectroClustersCertificatesRenewNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersCertificatesRenewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersCertificatesRenew",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/k8certificates/renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersCertificatesRenewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersCertificatesRenewNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersCertificatesRenew: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersConfigEdgeInstaller clusters configuration for the edge installer
*/
func (a *Client) V1SpectroClustersConfigEdgeInstaller(params *V1SpectroClustersConfigEdgeInstallerParams) (*V1SpectroClustersConfigEdgeInstallerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersConfigEdgeInstallerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersConfigEdgeInstaller",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/config/edgeInstaller",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersConfigEdgeInstallerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersConfigEdgeInstallerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersConfigEdgeInstaller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersCustomCreate creates a custom cluster
*/
func (a *Client) V1SpectroClustersCustomCreate(params *V1SpectroClustersCustomCreateParams) (*V1SpectroClustersCustomCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersCustomCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersCustomCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/cloudTypes/{cloudType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersCustomCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersCustomCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersCustomCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersCustomValidate validates custom cluster create operation
*/
func (a *Client) V1SpectroClustersCustomValidate(params *V1SpectroClustersCustomValidateParams) (*V1SpectroClustersCustomValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersCustomValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersCustomValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/cloudTypes/{cloudType}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersCustomValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersCustomValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersCustomValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersDelete deletes the specified cluster
*/
func (a *Client) V1SpectroClustersDelete(params *V1SpectroClustersDeleteParams) (*V1SpectroClustersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/spectroclusters/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersDeleteProfiles removes cluster profiles from the specified cluster
*/
func (a *Client) V1SpectroClustersDeleteProfiles(params *V1SpectroClustersDeleteProfilesParams) (*V1SpectroClustersDeleteProfilesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersDeleteProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersDeleteProfiles",
		Method:             "DELETE",
		PathPattern:        "/v1/spectroclusters/{uid}/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersDeleteProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersDeleteProfilesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersDeleteProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersEdgeNativeCreate creates an edge native cluster
*/
func (a *Client) V1SpectroClustersEdgeNativeCreate(params *V1SpectroClustersEdgeNativeCreateParams) (*V1SpectroClustersEdgeNativeCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersEdgeNativeCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersEdgeNativeCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/edge-native",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersEdgeNativeCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersEdgeNativeCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersEdgeNativeCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersEdgeNativeImport imports an edge native cluster
*/
func (a *Client) V1SpectroClustersEdgeNativeImport(params *V1SpectroClustersEdgeNativeImportParams) (*V1SpectroClustersEdgeNativeImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersEdgeNativeImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersEdgeNativeImport",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/edge-native/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersEdgeNativeImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersEdgeNativeImportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersEdgeNativeImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersEdgeNativeRate gets edge native cluster estimated rate information
*/
func (a *Client) V1SpectroClustersEdgeNativeRate(params *V1SpectroClustersEdgeNativeRateParams) (*V1SpectroClustersEdgeNativeRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersEdgeNativeRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersEdgeNativeRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/edge-native/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersEdgeNativeRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersEdgeNativeRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersEdgeNativeRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersEdgeNativeValidate validates edge native cluster create operation
*/
func (a *Client) V1SpectroClustersEdgeNativeValidate(params *V1SpectroClustersEdgeNativeValidateParams) (*V1SpectroClustersEdgeNativeValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersEdgeNativeValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersEdgeNativeValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/edge-native/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersEdgeNativeValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersEdgeNativeValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersEdgeNativeValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersEksCreate creates an e k s cluster
*/
func (a *Client) V1SpectroClustersEksCreate(params *V1SpectroClustersEksCreateParams) (*V1SpectroClustersEksCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersEksCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersEksCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/eks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersEksCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersEksCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersEksCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersEksRate gets e k s cluster estimated rate information
*/
func (a *Client) V1SpectroClustersEksRate(params *V1SpectroClustersEksRateParams) (*V1SpectroClustersEksRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersEksRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersEksRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/eks/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersEksRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersEksRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersEksRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersEksValidate validates e k s cluster create operation
*/
func (a *Client) V1SpectroClustersEksValidate(params *V1SpectroClustersEksValidateParams) (*V1SpectroClustersEksValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersEksValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersEksValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/eks/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersEksValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersEksValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersEksValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersFiltersWorkspace retrieves a list of running non rbac configured clusters in a workspace
*/
func (a *Client) V1SpectroClustersFiltersWorkspace(params *V1SpectroClustersFiltersWorkspaceParams) (*V1SpectroClustersFiltersWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersFiltersWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersFiltersWorkspace",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/filters/workspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersFiltersWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersFiltersWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersFiltersWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGcpCreate creates a g c p cluster
*/
func (a *Client) V1SpectroClustersGcpCreate(params *V1SpectroClustersGcpCreateParams) (*V1SpectroClustersGcpCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGcpCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGcpCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/gcp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGcpCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGcpCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGcpCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGcpImport imports a g c p cluster
*/
func (a *Client) V1SpectroClustersGcpImport(params *V1SpectroClustersGcpImportParams) (*V1SpectroClustersGcpImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGcpImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGcpImport",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/gcp/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGcpImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGcpImportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGcpImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGcpRate gets g c p cluster estimated rate information
*/
func (a *Client) V1SpectroClustersGcpRate(params *V1SpectroClustersGcpRateParams) (*V1SpectroClustersGcpRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGcpRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGcpRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/gcp/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGcpRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGcpRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGcpRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGcpValidate validates g c p cluster create operation
*/
func (a *Client) V1SpectroClustersGcpValidate(params *V1SpectroClustersGcpValidateParams) (*V1SpectroClustersGcpValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGcpValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGcpValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/gcp/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGcpValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGcpValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGcpValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGenericImport imports a cluster of any cloud type in generic way

The machines information will be captured, whereas the cloud specific configuration info will not be retrieved
*/
func (a *Client) V1SpectroClustersGenericImport(params *V1SpectroClustersGenericImportParams) (*V1SpectroClustersGenericImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGenericImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGenericImport",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/generic/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGenericImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGenericImportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGenericImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGenericRate gets generic cluster estimated rate information
*/
func (a *Client) V1SpectroClustersGenericRate(params *V1SpectroClustersGenericRateParams) (*V1SpectroClustersGenericRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGenericRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGenericRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/generic/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGenericRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGenericRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGenericRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGet returns the specified cluster
*/
func (a *Client) V1SpectroClustersGet(params *V1SpectroClustersGetParams) (*V1SpectroClustersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGetHybridPoolsMetadata returns the metadata of all hybrid pools associated with the specified cluster
*/
func (a *Client) V1SpectroClustersGetHybridPoolsMetadata(params *V1SpectroClustersGetHybridPoolsMetadataParams) (*V1SpectroClustersGetHybridPoolsMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGetHybridPoolsMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGetHybridPoolsMetadata",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/hybridPools/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGetHybridPoolsMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGetHybridPoolsMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGetHybridPoolsMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGetProfileUpdates returns the profile updates of a specified cluster
*/
func (a *Client) V1SpectroClustersGetProfileUpdates(params *V1SpectroClustersGetProfileUpdatesParams) (*V1SpectroClustersGetProfileUpdatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGetProfileUpdatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGetProfileUpdates",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/profileUpdates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGetProfileUpdatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGetProfileUpdatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGetProfileUpdates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGetProfiles returns the associated profiles of a specified cluster
*/
func (a *Client) V1SpectroClustersGetProfiles(params *V1SpectroClustersGetProfilesParams) (*V1SpectroClustersGetProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGetProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGetProfiles",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGetProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGetProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGetProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGetProfilesPacksManifests returns the associated profile s pack manifests of a specified cluster
*/
func (a *Client) V1SpectroClustersGetProfilesPacksManifests(params *V1SpectroClustersGetProfilesPacksManifestsParams) (*V1SpectroClustersGetProfilesPacksManifestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGetProfilesPacksManifestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGetProfilesPacksManifests",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/profiles/packs/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGetProfilesPacksManifestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGetProfilesPacksManifestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGetProfilesPacksManifests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGkeCreate creates an g k e cluster
*/
func (a *Client) V1SpectroClustersGkeCreate(params *V1SpectroClustersGkeCreateParams) (*V1SpectroClustersGkeCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGkeCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGkeCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/gke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGkeCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGkeCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGkeCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGkeRate gets g k e cluster estimated rate information
*/
func (a *Client) V1SpectroClustersGkeRate(params *V1SpectroClustersGkeRateParams) (*V1SpectroClustersGkeRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGkeRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGkeRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/gke/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGkeRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGkeRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGkeRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersGkeValidate validates g k e cluster create operation
*/
func (a *Client) V1SpectroClustersGkeValidate(params *V1SpectroClustersGkeValidateParams) (*V1SpectroClustersGkeValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersGkeValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersGkeValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/gke/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersGkeValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersGkeValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersGkeValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersK8Certificate gets k8 certificate for spectro cluster
*/
func (a *Client) V1SpectroClustersK8Certificate(params *V1SpectroClustersK8CertificateParams) (*V1SpectroClustersK8CertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersK8CertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersK8Certificate",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/k8certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersK8CertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersK8CertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersK8Certificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersK8CertificateUpdate updates k8 certificate for spectro cluster
*/
func (a *Client) V1SpectroClustersK8CertificateUpdate(params *V1SpectroClustersK8CertificateUpdateParams) (*V1SpectroClustersK8CertificateUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersK8CertificateUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersK8CertificateUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/k8certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersK8CertificateUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersK8CertificateUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersK8CertificateUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersMaasCreate creates a m a a s cluster
*/
func (a *Client) V1SpectroClustersMaasCreate(params *V1SpectroClustersMaasCreateParams) (*V1SpectroClustersMaasCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersMaasCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersMaasCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/maas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersMaasCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersMaasCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersMaasCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersMaasImport imports a maas cluster
*/
func (a *Client) V1SpectroClustersMaasImport(params *V1SpectroClustersMaasImportParams) (*V1SpectroClustersMaasImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersMaasImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersMaasImport",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/maas/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersMaasImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersMaasImportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersMaasImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersMaasRate gets maas cluster estimated rate information
*/
func (a *Client) V1SpectroClustersMaasRate(params *V1SpectroClustersMaasRateParams) (*V1SpectroClustersMaasRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersMaasRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersMaasRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/maas/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersMaasRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersMaasRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersMaasRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersMaasValidate validates m a a s cluster create operation
*/
func (a *Client) V1SpectroClustersMaasValidate(params *V1SpectroClustersMaasValidateParams) (*V1SpectroClustersMaasValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersMaasValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersMaasValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/maas/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersMaasValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersMaasValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersMaasValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersMetaGet gets all clusters metadata

Returns metadata information for all clusters
*/
func (a *Client) V1SpectroClustersMetaGet(params *V1SpectroClustersMetaGetParams) (*V1SpectroClustersMetaGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersMetaGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersMetaGet",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersMetaGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersMetaGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersMetaGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersMetadata retrieves a list of cluster summary
*/
func (a *Client) V1SpectroClustersMetadata(params *V1SpectroClustersMetadataParams) (*V1SpectroClustersMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersMetadata",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersMetadataGet retrieves a list of cluster summary metadata
*/
func (a *Client) V1SpectroClustersMetadataGet(params *V1SpectroClustersMetadataGetParams) (*V1SpectroClustersMetadataGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersMetadataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersMetadataGet",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersMetadataGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersMetadataGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersMetadataGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersMetadataSearch retrieves a list of cluster metadata with provided search filter spec supported sort fields environment cluster name cluster state creation timestamp last modified timestamp
*/
func (a *Client) V1SpectroClustersMetadataSearch(params *V1SpectroClustersMetadataSearchParams) (*V1SpectroClustersMetadataSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersMetadataSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersMetadataSearch",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/metadata/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersMetadataSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersMetadataSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersMetadataSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersMetadataSearchSchema retrieves a schema for the cluster metadata search filter
*/
func (a *Client) V1SpectroClustersMetadataSearchSchema(params *V1SpectroClustersMetadataSearchSchemaParams) (*V1SpectroClustersMetadataSearchSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersMetadataSearchSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersMetadataSearchSchema",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/metadata/search/schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersMetadataSearchSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersMetadataSearchSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersMetadataSearchSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersOpenStackCreate creates a open stack cluster
*/
func (a *Client) V1SpectroClustersOpenStackCreate(params *V1SpectroClustersOpenStackCreateParams) (*V1SpectroClustersOpenStackCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersOpenStackCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersOpenStackCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/openstack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersOpenStackCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersOpenStackCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersOpenStackCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersOpenStackImport imports an open stack cluster
*/
func (a *Client) V1SpectroClustersOpenStackImport(params *V1SpectroClustersOpenStackImportParams) (*V1SpectroClustersOpenStackImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersOpenStackImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersOpenStackImport",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/openstack/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersOpenStackImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersOpenStackImportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersOpenStackImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersOpenStackRate gets openstack cluster estimated rate information
*/
func (a *Client) V1SpectroClustersOpenStackRate(params *V1SpectroClustersOpenStackRateParams) (*V1SpectroClustersOpenStackRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersOpenStackRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersOpenStackRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/openstack/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersOpenStackRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersOpenStackRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersOpenStackRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersOpenStackValidate validates open stack cluster create operation
*/
func (a *Client) V1SpectroClustersOpenStackValidate(params *V1SpectroClustersOpenStackValidateParams) (*V1SpectroClustersOpenStackValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersOpenStackValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersOpenStackValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/openstack/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersOpenStackValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersOpenStackValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersOpenStackValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersPacksRefUpdate updates the cluster s pack references
*/
func (a *Client) V1SpectroClustersPacksRefUpdate(params *V1SpectroClustersPacksRefUpdateParams) (*V1SpectroClustersPacksRefUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersPacksRefUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersPacksRefUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/packRefs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersPacksRefUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersPacksRefUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersPacksRefUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersPatchProfiles patches cluster profiles to the specified cluster
*/
func (a *Client) V1SpectroClustersPatchProfiles(params *V1SpectroClustersPatchProfilesParams) (*V1SpectroClustersPatchProfilesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersPatchProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersPatchProfiles",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersPatchProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersPatchProfilesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersPatchProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersProfilesUIDPackManifestsGet returns the associated profiles pack manifests of the specified cluster
*/
func (a *Client) V1SpectroClustersProfilesUIDPackManifestsGet(params *V1SpectroClustersProfilesUIDPackManifestsGetParams) (*V1SpectroClustersProfilesUIDPackManifestsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersProfilesUIDPackManifestsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersProfilesUidPackManifestsGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/profiles/{profileUid}/packs/{packName}/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersProfilesUIDPackManifestsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersProfilesUIDPackManifestsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersProfilesUidPackManifestsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersProfilesUIDPackManifestsUpdate updates cluster profiles pack manifests to the specified cluster
*/
func (a *Client) V1SpectroClustersProfilesUIDPackManifestsUpdate(params *V1SpectroClustersProfilesUIDPackManifestsUpdateParams) (*V1SpectroClustersProfilesUIDPackManifestsUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersProfilesUIDPackManifestsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersProfilesUidPackManifestsUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/profiles/{profileUid}/packs/{packName}/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersProfilesUIDPackManifestsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersProfilesUIDPackManifestsUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersProfilesUidPackManifestsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersResourcesConsumption retrieves spectro clusters resource consumption
*/
func (a *Client) V1SpectroClustersResourcesConsumption(params *V1SpectroClustersResourcesConsumptionParams) (*V1SpectroClustersResourcesConsumptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersResourcesConsumptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersResourcesConsumption",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/resources/consumption",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersResourcesConsumptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersResourcesConsumptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersResourcesConsumption: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersResourcesCostSummary retrieves spectro clusters resources cost summary information
*/
func (a *Client) V1SpectroClustersResourcesCostSummary(params *V1SpectroClustersResourcesCostSummaryParams) (*V1SpectroClustersResourcesCostSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersResourcesCostSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersResourcesCostSummary",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/resources/cost",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersResourcesCostSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersResourcesCostSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersResourcesCostSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersResourcesUsageSummary retrieves spectro clusters resources usage summary information
*/
func (a *Client) V1SpectroClustersResourcesUsageSummary(params *V1SpectroClustersResourcesUsageSummaryParams) (*V1SpectroClustersResourcesUsageSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersResourcesUsageSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersResourcesUsageSummary",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/resources/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersResourcesUsageSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersResourcesUsageSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersResourcesUsageSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersSearchFilterSummary retrieves a list of cluster summary with provided search filter spec supported sort fields environment cluster name memory usage health state creation timestamp last modified timestamp
*/
func (a *Client) V1SpectroClustersSearchFilterSummary(params *V1SpectroClustersSearchFilterSummaryParams) (*V1SpectroClustersSearchFilterSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersSearchFilterSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersSearchFilterSummary",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersSearchFilterSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersSearchFilterSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersSearchFilterSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersSearchSchema retrieves a schema for the cluster search filter
*/
func (a *Client) V1SpectroClustersSearchSchema(params *V1SpectroClustersSearchSchemaParams) (*V1SpectroClustersSearchSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersSearchSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersSearchSchema",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/search/schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersSearchSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersSearchSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersSearchSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersSpcDownload downloads the cluster definition archive file
*/
func (a *Client) V1SpectroClustersSpcDownload(params *V1SpectroClustersSpcDownloadParams, writer io.Writer) (*V1SpectroClustersSpcDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersSpcDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersSpcDownload",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/spc/download",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersSpcDownloadReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersSpcDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersSpcDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersSummaryUID returns the specified cluster summary
*/
func (a *Client) V1SpectroClustersSummaryUID(params *V1SpectroClustersSummaryUIDParams) (*V1SpectroClustersSummaryUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersSummaryUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersSummaryUid",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersSummaryUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersSummaryUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersSummaryUid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersSummaryUIDOverview returns the specified cluster summary overview
*/
func (a *Client) V1SpectroClustersSummaryUIDOverview(params *V1SpectroClustersSummaryUIDOverviewParams) (*V1SpectroClustersSummaryUIDOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersSummaryUIDOverviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersSummaryUidOverview",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersSummaryUIDOverviewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersSummaryUIDOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersSummaryUidOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersTagsGet retrieves a list of spectrocluster tags
*/
func (a *Client) V1SpectroClustersTagsGet(params *V1SpectroClustersTagsGetParams) (*V1SpectroClustersTagsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersTagsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersTagsGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersTagsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersTagsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersTagsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDAdminKubeConfig returns the specified cluster s kube config file
*/
func (a *Client) V1SpectroClustersUIDAdminKubeConfig(params *V1SpectroClustersUIDAdminKubeConfigParams, writer io.Writer) (*V1SpectroClustersUIDAdminKubeConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDAdminKubeConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidAdminKubeConfig",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/adminKubeconfig",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDAdminKubeConfigReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDAdminKubeConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidAdminKubeConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDAssets associates the assets for the cluster
*/
func (a *Client) V1SpectroClustersUIDAssets(params *V1SpectroClustersUIDAssetsParams) (*V1SpectroClustersUIDAssetsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDAssetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidAssets",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/assets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDAssetsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidAssets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDAssetsGet gets the cluster asset doc
*/
func (a *Client) V1SpectroClustersUIDAssetsGet(params *V1SpectroClustersUIDAssetsGetParams) (*V1SpectroClustersUIDAssetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDAssetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidAssetsGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/assets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDAssetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDAssetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidAssetsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDClusterMetaAttributeUpdate updates the specified cluster meta attribute
*/
func (a *Client) V1SpectroClustersUIDClusterMetaAttributeUpdate(params *V1SpectroClustersUIDClusterMetaAttributeUpdateParams) (*V1SpectroClustersUIDClusterMetaAttributeUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDClusterMetaAttributeUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidClusterMetaAttributeUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/clusterConfig/clusterMetaAttribute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDClusterMetaAttributeUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDClusterMetaAttributeUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidClusterMetaAttributeUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDConfigNamespacesGet retrieves namespaces for the specified cluster
*/
func (a *Client) V1SpectroClustersUIDConfigNamespacesGet(params *V1SpectroClustersUIDConfigNamespacesGetParams) (*V1SpectroClustersUIDConfigNamespacesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDConfigNamespacesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidConfigNamespacesGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/config/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDConfigNamespacesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDConfigNamespacesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidConfigNamespacesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDConfigNamespacesUIDGet retrieves the specified namespace of the cluster
*/
func (a *Client) V1SpectroClustersUIDConfigNamespacesUIDGet(params *V1SpectroClustersUIDConfigNamespacesUIDGetParams) (*V1SpectroClustersUIDConfigNamespacesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDConfigNamespacesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidConfigNamespacesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/config/namespaces/{namespaceUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDConfigNamespacesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDConfigNamespacesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidConfigNamespacesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDConfigNamespacesUIDUpdate updates the specified namespace of the cluster
*/
func (a *Client) V1SpectroClustersUIDConfigNamespacesUIDUpdate(params *V1SpectroClustersUIDConfigNamespacesUIDUpdateParams) (*V1SpectroClustersUIDConfigNamespacesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDConfigNamespacesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidConfigNamespacesUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/config/namespaces/{namespaceUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDConfigNamespacesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDConfigNamespacesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidConfigNamespacesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDConfigNamespacesUpdate updates namespaces for the specified cluster
*/
func (a *Client) V1SpectroClustersUIDConfigNamespacesUpdate(params *V1SpectroClustersUIDConfigNamespacesUpdateParams) (*V1SpectroClustersUIDConfigNamespacesUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDConfigNamespacesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidConfigNamespacesUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/config/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDConfigNamespacesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDConfigNamespacesUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidConfigNamespacesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDConfigRbacsGet retrieves r b a c information for the specified cluster
*/
func (a *Client) V1SpectroClustersUIDConfigRbacsGet(params *V1SpectroClustersUIDConfigRbacsGetParams) (*V1SpectroClustersUIDConfigRbacsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDConfigRbacsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidConfigRbacsGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/config/rbacs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDConfigRbacsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDConfigRbacsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidConfigRbacsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDConfigRbacsUIDGet retrieves the specified r b a c of the cluster
*/
func (a *Client) V1SpectroClustersUIDConfigRbacsUIDGet(params *V1SpectroClustersUIDConfigRbacsUIDGetParams) (*V1SpectroClustersUIDConfigRbacsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDConfigRbacsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidConfigRbacsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/config/rbacs/{rbacUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDConfigRbacsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDConfigRbacsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidConfigRbacsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDConfigRbacsUIDUpdate updates the specified r b a c of the cluster
*/
func (a *Client) V1SpectroClustersUIDConfigRbacsUIDUpdate(params *V1SpectroClustersUIDConfigRbacsUIDUpdateParams) (*V1SpectroClustersUIDConfigRbacsUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDConfigRbacsUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidConfigRbacsUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/config/rbacs/{rbacUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDConfigRbacsUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDConfigRbacsUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidConfigRbacsUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDConfigRbacsUpdate updates r b a c information for the specified cluster
*/
func (a *Client) V1SpectroClustersUIDConfigRbacsUpdate(params *V1SpectroClustersUIDConfigRbacsUpdateParams) (*V1SpectroClustersUIDConfigRbacsUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDConfigRbacsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidConfigRbacsUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/config/rbacs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDConfigRbacsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDConfigRbacsUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidConfigRbacsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDCostSummary retrieves the specified cluster cost summary
*/
func (a *Client) V1SpectroClustersUIDCostSummary(params *V1SpectroClustersUIDCostSummaryParams) (*V1SpectroClustersUIDCostSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDCostSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidCostSummary",
		Method:             "GET",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/cost",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDCostSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDCostSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidCostSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDDownload downloads the specified cluster
*/
func (a *Client) V1SpectroClustersUIDDownload(params *V1SpectroClustersUIDDownloadParams, writer io.Writer) (*V1SpectroClustersUIDDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidDownload",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/download",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDDownloadReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDFrpKubeConfigDelete deletes the cluster s frp kube config client data
*/
func (a *Client) V1SpectroClustersUIDFrpKubeConfigDelete(params *V1SpectroClustersUIDFrpKubeConfigDeleteParams) (*V1SpectroClustersUIDFrpKubeConfigDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDFrpKubeConfigDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidFrpKubeConfigDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/frpKubeconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDFrpKubeConfigDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDFrpKubeConfigDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidFrpKubeConfigDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDFrpKubeConfigGet returns the specified cluster s frp kube config file
*/
func (a *Client) V1SpectroClustersUIDFrpKubeConfigGet(params *V1SpectroClustersUIDFrpKubeConfigGetParams, writer io.Writer) (*V1SpectroClustersUIDFrpKubeConfigGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDFrpKubeConfigGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidFrpKubeConfigGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/frpKubeconfig",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDFrpKubeConfigGetReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDFrpKubeConfigGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidFrpKubeConfigGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDFrpKubeConfigUpdate updates the cluster s frp kube config data
*/
func (a *Client) V1SpectroClustersUIDFrpKubeConfigUpdate(params *V1SpectroClustersUIDFrpKubeConfigUpdateParams) (*V1SpectroClustersUIDFrpKubeConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDFrpKubeConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidFrpKubeConfigUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/frpKubeconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDFrpKubeConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDFrpKubeConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidFrpKubeConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDHeartbeatUpdate updates specific cluster heartbeat
*/
func (a *Client) V1SpectroClustersUIDHeartbeatUpdate(params *V1SpectroClustersUIDHeartbeatUpdateParams) (*V1SpectroClustersUIDHeartbeatUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDHeartbeatUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidHeartbeatUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/heartbeat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDHeartbeatUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDHeartbeatUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidHeartbeatUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDHybridSettings updates specific cluster hybrid settings
*/
func (a *Client) V1SpectroClustersUIDHybridSettings(params *V1SpectroClustersUIDHybridSettingsParams) (*V1SpectroClustersUIDHybridSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDHybridSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidHybridSettings",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/hybridSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDHybridSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDHybridSettingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidHybridSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDImportManifest returns the specified cluster s import manifest file
*/
func (a *Client) V1SpectroClustersUIDImportManifest(params *V1SpectroClustersUIDImportManifestParams, writer io.Writer) (*V1SpectroClustersUIDImportManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDImportManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidImportManifest",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/import/manifest",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDImportManifestReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDImportManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidImportManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDImportUpgradePatch upgrades the specified imported read only cluster with full permissions
*/
func (a *Client) V1SpectroClustersUIDImportUpgradePatch(params *V1SpectroClustersUIDImportUpgradePatchParams) (*V1SpectroClustersUIDImportUpgradePatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDImportUpgradePatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidImportUpgradePatch",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/import/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDImportUpgradePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDImportUpgradePatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidImportUpgradePatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDKubeConfig returns the specified cluster s kube config file
*/
func (a *Client) V1SpectroClustersUIDKubeConfig(params *V1SpectroClustersUIDKubeConfigParams, writer io.Writer) (*V1SpectroClustersUIDKubeConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDKubeConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidKubeConfig",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/kubeconfig",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDKubeConfigReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDKubeConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidKubeConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDKubeConfigClientDelete deletes the cluster s kube config client data
*/
func (a *Client) V1SpectroClustersUIDKubeConfigClientDelete(params *V1SpectroClustersUIDKubeConfigClientDeleteParams) (*V1SpectroClustersUIDKubeConfigClientDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDKubeConfigClientDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidKubeConfigClientDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/kubeconfigclient",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDKubeConfigClientDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDKubeConfigClientDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidKubeConfigClientDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDKubeConfigClientGet returns the specified cluster s kube config client file
*/
func (a *Client) V1SpectroClustersUIDKubeConfigClientGet(params *V1SpectroClustersUIDKubeConfigClientGetParams, writer io.Writer) (*V1SpectroClustersUIDKubeConfigClientGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDKubeConfigClientGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidKubeConfigClientGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/kubeconfigclient",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDKubeConfigClientGetReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDKubeConfigClientGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidKubeConfigClientGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDKubeConfigClientUpdate updates the cluster s kube config client data
*/
func (a *Client) V1SpectroClustersUIDKubeConfigClientUpdate(params *V1SpectroClustersUIDKubeConfigClientUpdateParams) (*V1SpectroClustersUIDKubeConfigClientUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDKubeConfigClientUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidKubeConfigClientUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/kubeconfigclient",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDKubeConfigClientUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDKubeConfigClientUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidKubeConfigClientUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDKubeConfigUpdate updates the cluster s manifest data
*/
func (a *Client) V1SpectroClustersUIDKubeConfigUpdate(params *V1SpectroClustersUIDKubeConfigUpdateParams) (*V1SpectroClustersUIDKubeConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDKubeConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidKubeConfigUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/kubeconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDKubeConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDKubeConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidKubeConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDLifecycleConfigUpdate updates the specified cluster life cycle configuration
*/
func (a *Client) V1SpectroClustersUIDLifecycleConfigUpdate(params *V1SpectroClustersUIDLifecycleConfigUpdateParams) (*V1SpectroClustersUIDLifecycleConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDLifecycleConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidLifecycleConfigUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/clusterConfig/lifecycleConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDLifecycleConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDLifecycleConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidLifecycleConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDLocationPut associates the assets for the cluster
*/
func (a *Client) V1SpectroClustersUIDLocationPut(params *V1SpectroClustersUIDLocationPutParams) (*V1SpectroClustersUIDLocationPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDLocationPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidLocationPut",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/location",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDLocationPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDLocationPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidLocationPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDManifestGet returns the specified cluster s manifest data
*/
func (a *Client) V1SpectroClustersUIDManifestGet(params *V1SpectroClustersUIDManifestGetParams) (*V1SpectroClustersUIDManifestGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDManifestGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidManifestGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDManifestGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDManifestGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidManifestGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDManifestUpdate updates the specified cluster s manifest data
*/
func (a *Client) V1SpectroClustersUIDManifestUpdate(params *V1SpectroClustersUIDManifestUpdateParams) (*V1SpectroClustersUIDManifestUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDManifestUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidManifestUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDManifestUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDManifestUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidManifestUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDMetadataUpdate updates the specified spectro cluster metadata
*/
func (a *Client) V1SpectroClustersUIDMetadataUpdate(params *V1SpectroClustersUIDMetadataUpdateParams) (*V1SpectroClustersUIDMetadataUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDMetadataUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidMetadataUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDMetadataUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDMetadataUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidMetadataUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDOsPatchUpdate updates the specified cluster o s patch configuration
*/
func (a *Client) V1SpectroClustersUIDOsPatchUpdate(params *V1SpectroClustersUIDOsPatchUpdateParams) (*V1SpectroClustersUIDOsPatchUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDOsPatchUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidOsPatchUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/clusterConfig/osPatch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDOsPatchUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDOsPatchUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidOsPatchUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDPackManifestsUIDGet returns the specified cluster s manifest
*/
func (a *Client) V1SpectroClustersUIDPackManifestsUIDGet(params *V1SpectroClustersUIDPackManifestsUIDGetParams) (*V1SpectroClustersUIDPackManifestsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDPackManifestsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidPackManifestsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/pack/manifests/{manifestUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDPackManifestsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDPackManifestsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidPackManifestsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDPackProperties gets specified cluster pack properties
*/
func (a *Client) V1SpectroClustersUIDPackProperties(params *V1SpectroClustersUIDPackPropertiesParams) (*V1SpectroClustersUIDPackPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDPackPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidPackProperties",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/pack/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDPackPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDPackPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidPackProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDPacksResolvedValuesGet returns the specified cluster s packs resolved values
*/
func (a *Client) V1SpectroClustersUIDPacksResolvedValuesGet(params *V1SpectroClustersUIDPacksResolvedValuesGetParams) (*V1SpectroClustersUIDPacksResolvedValuesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDPacksResolvedValuesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidPacksResolvedValuesGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/packs/resolvedValues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDPacksResolvedValuesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDPacksResolvedValuesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidPacksResolvedValuesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDPacksStatusPatch patches update specified cluster s packs status
*/
func (a *Client) V1SpectroClustersUIDPacksStatusPatch(params *V1SpectroClustersUIDPacksStatusPatchParams) (*V1SpectroClustersUIDPacksStatusPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDPacksStatusPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidPacksStatusPatch",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/packs/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDPacksStatusPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDPacksStatusPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidPacksStatusPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDProfilesUIDPacksConfigGet returns the specified cluster s profile pack configuration
*/
func (a *Client) V1SpectroClustersUIDProfilesUIDPacksConfigGet(params *V1SpectroClustersUIDProfilesUIDPacksConfigGetParams) (*V1SpectroClustersUIDProfilesUIDPacksConfigGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDProfilesUIDPacksConfigGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidProfilesUidPacksConfigGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/profiles/{profileUid}/packs/{packName}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDProfilesUIDPacksConfigGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDProfilesUIDPacksConfigGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidProfilesUidPacksConfigGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDRate returns the estimated rate of the specified cluster
*/
func (a *Client) V1SpectroClustersUIDRate(params *V1SpectroClustersUIDRateParams) (*V1SpectroClustersUIDRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidRate",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDRepaveApproveUpdate returns the spectrocluster repave approve update
*/
func (a *Client) V1SpectroClustersUIDRepaveApproveUpdate(params *V1SpectroClustersUIDRepaveApproveUpdateParams) (*V1SpectroClustersUIDRepaveApproveUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDRepaveApproveUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidRepaveApproveUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/repave/approve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDRepaveApproveUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDRepaveApproveUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidRepaveApproveUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDRepaveGet returns the spectrocluster repave
*/
func (a *Client) V1SpectroClustersUIDRepaveGet(params *V1SpectroClustersUIDRepaveGetParams) (*V1SpectroClustersUIDRepaveGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDRepaveGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidRepaveGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/repave/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDRepaveGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDRepaveGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidRepaveGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDResourcesConsumption retrieves specified spectro cluster resource consumption
*/
func (a *Client) V1SpectroClustersUIDResourcesConsumption(params *V1SpectroClustersUIDResourcesConsumptionParams) (*V1SpectroClustersUIDResourcesConsumptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDResourcesConsumptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidResourcesConsumption",
		Method:             "POST",
		PathPattern:        "/v1/dashboard/spectroclusters/{uid}/resources/consumption",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDResourcesConsumptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDResourcesConsumptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidResourcesConsumption: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDStatus gets the cluster s status
*/
func (a *Client) V1SpectroClustersUIDStatus(params *V1SpectroClustersUIDStatusParams) (*V1SpectroClustersUIDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidStatus",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDStatusSpcApply sets the can be applied to true on the spc apply status can be applied indicates the agent to orchestrate the spc changes
*/
func (a *Client) V1SpectroClustersUIDStatusSpcApply(params *V1SpectroClustersUIDStatusSpcApplyParams) (*V1SpectroClustersUIDStatusSpcApplyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDStatusSpcApplyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidStatusSpcApply",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/status/spcApply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDStatusSpcApplyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDStatusSpcApplyAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidStatusSpcApply: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDStatusSpcApplyGet returns the s p c apply information for the agent
*/
func (a *Client) V1SpectroClustersUIDStatusSpcApplyGet(params *V1SpectroClustersUIDStatusSpcApplyGetParams) (*V1SpectroClustersUIDStatusSpcApplyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDStatusSpcApplyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidStatusSpcApplyGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/status/spcApply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDStatusSpcApplyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDStatusSpcApplyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidStatusSpcApplyGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDStatusSpcPatchTime updates the agent patch time for the s p c changes
*/
func (a *Client) V1SpectroClustersUIDStatusSpcPatchTime(params *V1SpectroClustersUIDStatusSpcPatchTimeParams) (*V1SpectroClustersUIDStatusSpcPatchTimeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDStatusSpcPatchTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidStatusSpcPatchTime",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/status/spcApply/patchTime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDStatusSpcPatchTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDStatusSpcPatchTimeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidStatusSpcPatchTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDTokenKubeConfigDelete deletes the cluster s token kube config data
*/
func (a *Client) V1SpectroClustersUIDTokenKubeConfigDelete(params *V1SpectroClustersUIDTokenKubeConfigDeleteParams) (*V1SpectroClustersUIDTokenKubeConfigDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDTokenKubeConfigDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidTokenKubeConfigDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/adminTokenKubeconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDTokenKubeConfigDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDTokenKubeConfigDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidTokenKubeConfigDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDTokenKubeConfigGet returns the specified cluster s token kube config file
*/
func (a *Client) V1SpectroClustersUIDTokenKubeConfigGet(params *V1SpectroClustersUIDTokenKubeConfigGetParams, writer io.Writer) (*V1SpectroClustersUIDTokenKubeConfigGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDTokenKubeConfigGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidTokenKubeConfigGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/adminTokenKubeconfig",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDTokenKubeConfigGetReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDTokenKubeConfigGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidTokenKubeConfigGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDTokenKubeConfigUpdate updates the cluster s token kube config data
*/
func (a *Client) V1SpectroClustersUIDTokenKubeConfigUpdate(params *V1SpectroClustersUIDTokenKubeConfigUpdateParams) (*V1SpectroClustersUIDTokenKubeConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDTokenKubeConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidTokenKubeConfigUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/assets/adminTokenKubeconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDTokenKubeConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDTokenKubeConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidTokenKubeConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDUpgradeSettings updates specific cluster upgrade settings
*/
func (a *Client) V1SpectroClustersUIDUpgradeSettings(params *V1SpectroClustersUIDUpgradeSettingsParams) (*V1SpectroClustersUIDUpgradeSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDUpgradeSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidUpgradeSettings",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/upgrade/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDUpgradeSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDUpgradeSettingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidUpgradeSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDUpgradesPut updates the cluster s upgrade status
*/
func (a *Client) V1SpectroClustersUIDUpgradesPut(params *V1SpectroClustersUIDUpgradesPutParams) (*V1SpectroClustersUIDUpgradesPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDUpgradesPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidUpgradesPut",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/status/upgrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDUpgradesPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDUpgradesPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidUpgradesPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDValidatePacks validates cluster packs
*/
func (a *Client) V1SpectroClustersUIDValidatePacks(params *V1SpectroClustersUIDValidatePacksParams) (*V1SpectroClustersUIDValidatePacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDValidatePacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidValidatePacks",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/validate/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDValidatePacksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDValidatePacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidValidatePacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDValidateRepave validates if cluster gets repaved for the specified packs
*/
func (a *Client) V1SpectroClustersUIDValidateRepave(params *V1SpectroClustersUIDValidateRepaveParams) (*V1SpectroClustersUIDValidateRepaveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDValidateRepaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidValidateRepave",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/validate/repave",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDValidateRepaveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDValidateRepaveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidValidateRepave: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDVariablesGet retrieves a list of variables associated with the cluster
*/
func (a *Client) V1SpectroClustersUIDVariablesGet(params *V1SpectroClustersUIDVariablesGetParams) (*V1SpectroClustersUIDVariablesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDVariablesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidVariablesGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDVariablesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDVariablesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidVariablesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDVariablesPatch updates cluster variable values for specified cluster
*/
func (a *Client) V1SpectroClustersUIDVariablesPatch(params *V1SpectroClustersUIDVariablesPatchParams) (*V1SpectroClustersUIDVariablesPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDVariablesPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidVariablesPatch",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDVariablesPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDVariablesPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidVariablesPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDWorkloadsKindSync syncs specified cluster workload
*/
func (a *Client) V1SpectroClustersUIDWorkloadsKindSync(params *V1SpectroClustersUIDWorkloadsKindSyncParams) (*V1SpectroClustersUIDWorkloadsKindSyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDWorkloadsKindSyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidWorkloadsKindSync",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/workloads/{workloadKind}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDWorkloadsKindSyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDWorkloadsKindSyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidWorkloadsKindSync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUIDWorkloadsSync syncs specified cluster workload

Sync specified cluster workload
*/
func (a *Client) V1SpectroClustersUIDWorkloadsSync(params *V1SpectroClustersUIDWorkloadsSyncParams) (*V1SpectroClustersUIDWorkloadsSyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUIDWorkloadsSyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUidWorkloadsSync",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/workloads/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUIDWorkloadsSyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUIDWorkloadsSyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUidWorkloadsSync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUpdateProfiles associates cluster profiles to the specified cluster
*/
func (a *Client) V1SpectroClustersUpdateProfiles(params *V1SpectroClustersUpdateProfilesParams) (*V1SpectroClustersUpdateProfilesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUpdateProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUpdateProfiles",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUpdateProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUpdateProfilesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUpdateProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUpdateStatusCondition updates the specified cluster status condition
*/
func (a *Client) V1SpectroClustersUpdateStatusCondition(params *V1SpectroClustersUpdateStatusConditionParams) (*V1SpectroClustersUpdateStatusConditionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUpdateStatusConditionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUpdateStatusCondition",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/status/condition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUpdateStatusConditionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUpdateStatusConditionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUpdateStatusCondition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUpdateStatusConditions updates the specified cluster status conditions
*/
func (a *Client) V1SpectroClustersUpdateStatusConditions(params *V1SpectroClustersUpdateStatusConditionsParams) (*V1SpectroClustersUpdateStatusConditionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUpdateStatusConditionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUpdateStatusConditions",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/status/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUpdateStatusConditionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUpdateStatusConditionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUpdateStatusConditions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUpdateStatusEndpoints updates the specified cluster s service endpoints information
*/
func (a *Client) V1SpectroClustersUpdateStatusEndpoints(params *V1SpectroClustersUpdateStatusEndpointsParams) (*V1SpectroClustersUpdateStatusEndpointsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUpdateStatusEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUpdateStatusEndpoints",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/status/endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUpdateStatusEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUpdateStatusEndpointsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUpdateStatusEndpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUpdateStatusImported updates the specified cluster status as imported
*/
func (a *Client) V1SpectroClustersUpdateStatusImported(params *V1SpectroClustersUpdateStatusImportedParams) (*V1SpectroClustersUpdateStatusImportedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUpdateStatusImportedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUpdateStatusImported",
		Method:             "PATCH",
		PathPattern:        "/v1/spectroclusters/{uid}/status/imported",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUpdateStatusImportedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUpdateStatusImportedNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUpdateStatusImported: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUpdateStatusServices updates the specified cluster s services information
*/
func (a *Client) V1SpectroClustersUpdateStatusServices(params *V1SpectroClustersUpdateStatusServicesParams) (*V1SpectroClustersUpdateStatusServicesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUpdateStatusServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUpdateStatusServices",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/status/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUpdateStatusServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUpdateStatusServicesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUpdateStatusServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUpgradeSettings updates all clusters upgrade settings
*/
func (a *Client) V1SpectroClustersUpgradeSettings(params *V1SpectroClustersUpgradeSettingsParams) (*V1SpectroClustersUpgradeSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUpgradeSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUpgradeSettings",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/upgrade/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUpgradeSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUpgradeSettingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUpgradeSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersUpgradeSettingsGet gets cluster settings by context
*/
func (a *Client) V1SpectroClustersUpgradeSettingsGet(params *V1SpectroClustersUpgradeSettingsGetParams) (*V1SpectroClustersUpgradeSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersUpgradeSettingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersUpgradeSettingsGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/upgrade/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersUpgradeSettingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersUpgradeSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersUpgradeSettingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMAddVolume adds volume to the virtual machine instance
*/
func (a *Client) V1SpectroClustersVMAddVolume(params *V1SpectroClustersVMAddVolumeParams) (*V1SpectroClustersVMAddVolumeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMAddVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMAddVolume",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/addVolume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMAddVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMAddVolumeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMAddVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMClone clones virtual machine
*/
func (a *Client) V1SpectroClustersVMClone(params *V1SpectroClustersVMCloneParams) (*V1SpectroClustersVMCloneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMCloneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMClone",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMCloneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMCloneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMClone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMCreate creates virtual machine
*/
func (a *Client) V1SpectroClustersVMCreate(params *V1SpectroClustersVMCreateParams) (*V1SpectroClustersVMCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/vms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMDelete deletes the virtual machine
*/
func (a *Client) V1SpectroClustersVMDelete(params *V1SpectroClustersVMDeleteParams) (*V1SpectroClustersVMDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMGet gets virtual machine
*/
func (a *Client) V1SpectroClustersVMGet(params *V1SpectroClustersVMGetParams) (*V1SpectroClustersVMGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMList returns the list of virtual machines
*/
func (a *Client) V1SpectroClustersVMList(params *V1SpectroClustersVMListParams) (*V1SpectroClustersVMListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMList",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/vms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMMigrate migrates the virtual machine
*/
func (a *Client) V1SpectroClustersVMMigrate(params *V1SpectroClustersVMMigrateParams) (*V1SpectroClustersVMMigrateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMMigrateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMMigrate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMMigrateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMMigrateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMMigrate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMPause pauses the virtual machine instance
*/
func (a *Client) V1SpectroClustersVMPause(params *V1SpectroClustersVMPauseParams) (*V1SpectroClustersVMPauseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMPauseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMPause",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMPauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMPauseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMPause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMRemoveVolume removes volume from the virtual machine instance
*/
func (a *Client) V1SpectroClustersVMRemoveVolume(params *V1SpectroClustersVMRemoveVolumeParams) (*V1SpectroClustersVMRemoveVolumeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMRemoveVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMRemoveVolume",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/removeVolume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMRemoveVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMRemoveVolumeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMRemoveVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMRestart restarts the virtual machine
*/
func (a *Client) V1SpectroClustersVMRestart(params *V1SpectroClustersVMRestartParams) (*V1SpectroClustersVMRestartNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMRestartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMRestart",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMRestartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMRestartNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMRestart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMResume resumes the virtual machine instance
*/
func (a *Client) V1SpectroClustersVMResume(params *V1SpectroClustersVMResumeParams) (*V1SpectroClustersVMResumeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMResumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMResume",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMResumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMResumeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMResume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMStart starts the virtual machine
*/
func (a *Client) V1SpectroClustersVMStart(params *V1SpectroClustersVMStartParams) (*V1SpectroClustersVMStartNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMStart",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMStartNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMStart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMStop stops the virtual machine
*/
func (a *Client) V1SpectroClustersVMStop(params *V1SpectroClustersVMStopParams) (*V1SpectroClustersVMStopNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMStop",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMStopNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMStop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVMUpdate updates the specified virtual machine of the cluster
*/
func (a *Client) V1SpectroClustersVMUpdate(params *V1SpectroClustersVMUpdateParams) (*V1SpectroClustersVMUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVMUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVMUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVMUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVMUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVMUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersValidateName validates the cluster name
*/
func (a *Client) V1SpectroClustersValidateName(params *V1SpectroClustersValidateNameParams) (*V1SpectroClustersValidateNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersValidateNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersValidateName",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/validate/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersValidateNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersValidateNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersValidateName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersValidatePacks validates spectro cluster packs
*/
func (a *Client) V1SpectroClustersValidatePacks(params *V1SpectroClustersValidatePacksParams) (*V1SpectroClustersValidatePacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersValidatePacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersValidatePacks",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/validate/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersValidatePacksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersValidatePacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersValidatePacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVirtualCreate creates a virtual cluster
*/
func (a *Client) V1SpectroClustersVirtualCreate(params *V1SpectroClustersVirtualCreateParams) (*V1SpectroClustersVirtualCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVirtualCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVirtualCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/virtual",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVirtualCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVirtualCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVirtualCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVirtualValidate validates virtual cluster create operation
*/
func (a *Client) V1SpectroClustersVirtualValidate(params *V1SpectroClustersVirtualValidateParams) (*V1SpectroClustersVirtualValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVirtualValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVirtualValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/virtual/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVirtualValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVirtualValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVirtualValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVsphereCreate creates a v sphere cluster
*/
func (a *Client) V1SpectroClustersVsphereCreate(params *V1SpectroClustersVsphereCreateParams) (*V1SpectroClustersVsphereCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVsphereCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVsphereCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/vsphere",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVsphereCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVsphereCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVsphereCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVsphereImport imports a v sphere cluster
*/
func (a *Client) V1SpectroClustersVsphereImport(params *V1SpectroClustersVsphereImportParams) (*V1SpectroClustersVsphereImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVsphereImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVsphereImport",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/vsphere/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVsphereImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVsphereImportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVsphereImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVsphereRate gets v sphere cluster estimated rate information
*/
func (a *Client) V1SpectroClustersVsphereRate(params *V1SpectroClustersVsphereRateParams) (*V1SpectroClustersVsphereRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVsphereRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVsphereRate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/vsphere/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVsphereRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVsphereRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVsphereRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SpectroClustersVsphereValidate validates v sphere cluster create operation
*/
func (a *Client) V1SpectroClustersVsphereValidate(params *V1SpectroClustersVsphereValidateParams) (*V1SpectroClustersVsphereValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SpectroClustersVsphereValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SpectroClustersVsphereValidate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/vsphere/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SpectroClustersVsphereValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SpectroClustersVsphereValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SpectroClustersVsphereValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SyftScanLogImageSBOMGet returns the image sbom of syft scan log of cluster
*/
func (a *Client) V1SyftScanLogImageSBOMGet(params *V1SyftScanLogImageSBOMGetParams, writer io.Writer) (*V1SyftScanLogImageSBOMGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SyftScanLogImageSBOMGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1SyftScanLogImageSBOMGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/syft/sbom",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1SyftScanLogImageSBOMGetReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SyftScanLogImageSBOMGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1SyftScanLogImageSBOMGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TagFilterUIDDelete deletes the specified filter object
*/
func (a *Client) V1TagFilterUIDDelete(params *V1TagFilterUIDDeleteParams) (*V1TagFilterUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TagFilterUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TagFilterUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/filters/tag/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TagFilterUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TagFilterUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TagFilterUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TagFilterUIDGet returns the specified filter object
*/
func (a *Client) V1TagFilterUIDGet(params *V1TagFilterUIDGetParams) (*V1TagFilterUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TagFilterUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TagFilterUidGet",
		Method:             "GET",
		PathPattern:        "/v1/filters/tag/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TagFilterUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TagFilterUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TagFilterUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TagFilterUIDUpdate updates a tag filter
*/
func (a *Client) V1TagFilterUIDUpdate(params *V1TagFilterUIDUpdateParams) (*V1TagFilterUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TagFilterUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TagFilterUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/filters/tag/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TagFilterUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TagFilterUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TagFilterUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TagFiltersCreate creates a tag filter
*/
func (a *Client) V1TagFiltersCreate(params *V1TagFiltersCreateParams) (*V1TagFiltersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TagFiltersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TagFiltersCreate",
		Method:             "POST",
		PathPattern:        "/v1/filters/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TagFiltersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TagFiltersCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TagFiltersCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsCreate creates a team with the specified users and roles
*/
func (a *Client) V1TeamsCreate(params *V1TeamsCreateParams) (*V1TeamsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsCreate",
		Method:             "POST",
		PathPattern:        "/v1/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsList retrieves a list of teams
*/
func (a *Client) V1TeamsList(params *V1TeamsListParams) (*V1TeamsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsList",
		Method:             "GET",
		PathPattern:        "/v1/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsProjectRoles returns the specified team s project and roles data
*/
func (a *Client) V1TeamsProjectRoles(params *V1TeamsProjectRolesParams) (*V1TeamsProjectRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsProjectRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsProjectRoles",
		Method:             "GET",
		PathPattern:        "/v1/teams/{uid}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsProjectRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsProjectRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsProjectRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsProjectRolesPut updates the projects and roles for the specified team
*/
func (a *Client) V1TeamsProjectRolesPut(params *V1TeamsProjectRolesPutParams) (*V1TeamsProjectRolesPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsProjectRolesPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsProjectRolesPut",
		Method:             "PUT",
		PathPattern:        "/v1/teams/{uid}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsProjectRolesPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsProjectRolesPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsProjectRolesPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsResourceRolesUIDUpdate updates the resource roles for team

Specific resource roles fo team is updated
*/
func (a *Client) V1TeamsResourceRolesUIDUpdate(params *V1TeamsResourceRolesUIDUpdateParams) (*V1TeamsResourceRolesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsResourceRolesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsResourceRolesUidUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/teams/{uid}/resourceRoles/{resourceRoleUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsResourceRolesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsResourceRolesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsResourceRolesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsSummaryGet retrieves a list of teams summary with provided filter spec
*/
func (a *Client) V1TeamsSummaryGet(params *V1TeamsSummaryGetParams) (*V1TeamsSummaryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsSummaryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsSummaryGet",
		Method:             "POST",
		PathPattern:        "/v1/teams/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsSummaryGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsSummaryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsSummaryGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsUIDDelete deletes the specified team
*/
func (a *Client) V1TeamsUIDDelete(params *V1TeamsUIDDeleteParams) (*V1TeamsUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/teams/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsUIDGet returns the sepcified team
*/
func (a *Client) V1TeamsUIDGet(params *V1TeamsUIDGetParams) (*V1TeamsUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsUidGet",
		Method:             "GET",
		PathPattern:        "/v1/teams/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsUIDPatch patches the specified team
*/
func (a *Client) V1TeamsUIDPatch(params *V1TeamsUIDPatchParams) (*V1TeamsUIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsUIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsUidPatch",
		Method:             "PATCH",
		PathPattern:        "/v1/teams/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsUIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsUIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsUidPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsUIDResourceRoles returns the specified individual and resource roles for a team

Returns resource roles for team
*/
func (a *Client) V1TeamsUIDResourceRoles(params *V1TeamsUIDResourceRolesParams) (*V1TeamsUIDResourceRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsUIDResourceRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsUidResourceRoles",
		Method:             "GET",
		PathPattern:        "/v1/teams/{uid}/resourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsUIDResourceRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsUIDResourceRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsUidResourceRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsUIDResourceRolesCreate adds resource roles for team

Resource roles added to specific team
*/
func (a *Client) V1TeamsUIDResourceRolesCreate(params *V1TeamsUIDResourceRolesCreateParams) (*V1TeamsUIDResourceRolesCreateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsUIDResourceRolesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsUidResourceRolesCreate",
		Method:             "POST",
		PathPattern:        "/v1/teams/{uid}/resourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsUIDResourceRolesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsUIDResourceRolesCreateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsUidResourceRolesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsUIDResourceRolesUIDDelete deleteds the resource roles from team
*/
func (a *Client) V1TeamsUIDResourceRolesUIDDelete(params *V1TeamsUIDResourceRolesUIDDeleteParams) (*V1TeamsUIDResourceRolesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsUIDResourceRolesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsUidResourceRolesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/teams/{uid}/resourceRoles/{resourceRoleUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsUIDResourceRolesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsUIDResourceRolesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsUidResourceRolesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsUIDUpdate updates the sepcified team
*/
func (a *Client) V1TeamsUIDUpdate(params *V1TeamsUIDUpdateParams) (*V1TeamsUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/teams/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsWorkspaceGetRoles returns the specified team s workspaces and roles data
*/
func (a *Client) V1TeamsWorkspaceGetRoles(params *V1TeamsWorkspaceGetRolesParams) (*V1TeamsWorkspaceGetRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsWorkspaceGetRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsWorkspaceGetRoles",
		Method:             "GET",
		PathPattern:        "/v1/workspaces/teams/{teamUid}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsWorkspaceGetRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsWorkspaceGetRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsWorkspaceGetRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TeamsWorkspaceRolesPut updates the workspace roles for the specified team
*/
func (a *Client) V1TeamsWorkspaceRolesPut(params *V1TeamsWorkspaceRolesPutParams) (*V1TeamsWorkspaceRolesPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TeamsWorkspaceRolesPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TeamsWorkspaceRolesPut",
		Method:             "PUT",
		PathPattern:        "/v1/workspaces/teams/{teamUid}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TeamsWorkspaceRolesPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TeamsWorkspaceRolesPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TeamsWorkspaceRolesPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantClusterRbacSettingsGet gets tenant cluster r b a c settings
*/
func (a *Client) V1TenantClusterRbacSettingsGet(params *V1TenantClusterRbacSettingsGetParams) (*V1TenantClusterRbacSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantClusterRbacSettingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantClusterRbacSettingsGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/preferences/clusterRbacSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantClusterRbacSettingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantClusterRbacSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantClusterRbacSettingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantClusterRbacSettingsUpdate updates tenant cluster r b a c settings
*/
func (a *Client) V1TenantClusterRbacSettingsUpdate(params *V1TenantClusterRbacSettingsUpdateParams) (*V1TenantClusterRbacSettingsUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantClusterRbacSettingsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantClusterRbacSettingsUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/preferences/clusterRbacSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantClusterRbacSettingsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantClusterRbacSettingsUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantClusterRbacSettingsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantClusterSettingsGet gets tenant cluster settings
*/
func (a *Client) V1TenantClusterSettingsGet(params *V1TenantClusterSettingsGetParams) (*V1TenantClusterSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantClusterSettingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantClusterSettingsGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/preferences/clusterSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantClusterSettingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantClusterSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantClusterSettingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantClustersNodesAutoRemediationSettingUpdate updates tenant clusters nodes auto remediation setting
*/
func (a *Client) V1TenantClustersNodesAutoRemediationSettingUpdate(params *V1TenantClustersNodesAutoRemediationSettingUpdateParams) (*V1TenantClustersNodesAutoRemediationSettingUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantClustersNodesAutoRemediationSettingUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantClustersNodesAutoRemediationSettingUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/preferences/clusterSettings/nodesAutoRemediationSetting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantClustersNodesAutoRemediationSettingUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantClustersNodesAutoRemediationSettingUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantClustersNodesAutoRemediationSettingUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantFipsSettingsGet gets tenant fips settings
*/
func (a *Client) V1TenantFipsSettingsGet(params *V1TenantFipsSettingsGetParams) (*V1TenantFipsSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantFipsSettingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantFipsSettingsGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/preferences/fips",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantFipsSettingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantFipsSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantFipsSettingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantFipsSettingsUpdate updates tenant fips setting
*/
func (a *Client) V1TenantFipsSettingsUpdate(params *V1TenantFipsSettingsUpdateParams) (*V1TenantFipsSettingsUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantFipsSettingsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantFipsSettingsUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/preferences/fips",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantFipsSettingsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantFipsSettingsUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantFipsSettingsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantFreemiumGet gets tenant level freemium configuration
*/
func (a *Client) V1TenantFreemiumGet(params *V1TenantFreemiumGetParams) (*V1TenantFreemiumGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantFreemiumGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantFreemiumGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/freemium",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantFreemiumGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantFreemiumGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantFreemiumGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantFreemiumUpdate updates tenant freemium configuration
*/
func (a *Client) V1TenantFreemiumUpdate(params *V1TenantFreemiumUpdateParams) (*V1TenantFreemiumUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantFreemiumUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantFreemiumUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/freemium",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantFreemiumUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantFreemiumUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantFreemiumUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantFreemiumUsageGet gets tenant freemium usage
*/
func (a *Client) V1TenantFreemiumUsageGet(params *V1TenantFreemiumUsageGetParams) (*V1TenantFreemiumUsageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantFreemiumUsageGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantFreemiumUsageGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/freemiumUsage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantFreemiumUsageGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantFreemiumUsageGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantFreemiumUsageGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantResourceLimitsGet gets tenant level resource limits configuration
*/
func (a *Client) V1TenantResourceLimitsGet(params *V1TenantResourceLimitsGetParams) (*V1TenantResourceLimitsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantResourceLimitsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantResourceLimitsGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/resourceLimits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantResourceLimitsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantResourceLimitsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantResourceLimitsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantResourceLimitsUpdate updates tenant resource limits configuration
*/
func (a *Client) V1TenantResourceLimitsUpdate(params *V1TenantResourceLimitsUpdateParams) (*V1TenantResourceLimitsUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantResourceLimitsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantResourceLimitsUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/tenants/{tenantUid}/resourceLimits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantResourceLimitsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantResourceLimitsUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantResourceLimitsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAuthTokenSettingsGet gets tenant auth token settings
*/
func (a *Client) V1TenantUIDAuthTokenSettingsGet(params *V1TenantUIDAuthTokenSettingsGetParams) (*V1TenantUIDAuthTokenSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAuthTokenSettingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantUidAuthTokenSettingsGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/authTokenSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAuthTokenSettingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAuthTokenSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantUidAuthTokenSettingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDAuthTokenSettingsUpdate updates tenant auth token settings
*/
func (a *Client) V1TenantUIDAuthTokenSettingsUpdate(params *V1TenantUIDAuthTokenSettingsUpdateParams) (*V1TenantUIDAuthTokenSettingsUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDAuthTokenSettingsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantUidAuthTokenSettingsUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/authTokenSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDAuthTokenSettingsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDAuthTokenSettingsUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantUidAuthTokenSettingsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDLoginBannerGet gets tenant login banner settings
*/
func (a *Client) V1TenantUIDLoginBannerGet(params *V1TenantUIDLoginBannerGetParams) (*V1TenantUIDLoginBannerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDLoginBannerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantUidLoginBannerGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/loginBanner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDLoginBannerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDLoginBannerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantUidLoginBannerGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantUIDLoginBannerUpdate updates tenant login banner settings
*/
func (a *Client) V1TenantUIDLoginBannerUpdate(params *V1TenantUIDLoginBannerUpdateParams) (*V1TenantUIDLoginBannerUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantUIDLoginBannerUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantUidLoginBannerUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/loginBanner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantUIDLoginBannerUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantUIDLoginBannerUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantUidLoginBannerUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantsCreditAccountDelete deletes the aws credit account for tenants
*/
func (a *Client) V1TenantsCreditAccountDelete(params *V1TenantsCreditAccountDeleteParams) (*V1TenantsCreditAccountDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantsCreditAccountDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantsCreditAccountDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/tenants/{tenantUid}/creditAccount/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantsCreditAccountDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantsCreditAccountDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantsCreditAccountDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantsCreditAccountGet gets the credit accounts for the tenants with free tier access
*/
func (a *Client) V1TenantsCreditAccountGet(params *V1TenantsCreditAccountGetParams) (*V1TenantsCreditAccountGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantsCreditAccountGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantsCreditAccountGet",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/creditAccount/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantsCreditAccountGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantsCreditAccountGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantsCreditAccountGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantsUIDContractAccept tenants to accept the contract agreement
*/
func (a *Client) V1TenantsUIDContractAccept(params *V1TenantsUIDContractAcceptParams) (*V1TenantsUIDContractAcceptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantsUIDContractAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantsUidContractAccept",
		Method:             "PATCH",
		PathPattern:        "/v1/tenants/{tenantUid}/contract/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantsUIDContractAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantsUIDContractAcceptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantsUidContractAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantsUIDMacrosCreate creates or add new macros for the specified tenant
*/
func (a *Client) V1TenantsUIDMacrosCreate(params *V1TenantsUIDMacrosCreateParams) (*V1TenantsUIDMacrosCreateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantsUIDMacrosCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantsUidMacrosCreate",
		Method:             "POST",
		PathPattern:        "/v1/tenants/{tenantUid}/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantsUIDMacrosCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantsUIDMacrosCreateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantsUidMacrosCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantsUIDMacrosDeleteByMacroName deletes the macros for the specified tenant by given macro name
*/
func (a *Client) V1TenantsUIDMacrosDeleteByMacroName(params *V1TenantsUIDMacrosDeleteByMacroNameParams) (*V1TenantsUIDMacrosDeleteByMacroNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantsUIDMacrosDeleteByMacroNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantsUidMacrosDeleteByMacroName",
		Method:             "DELETE",
		PathPattern:        "/v1/tenants/{tenantUid}/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantsUIDMacrosDeleteByMacroNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantsUIDMacrosDeleteByMacroNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantsUidMacrosDeleteByMacroName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantsUIDMacrosList lists the macros of the specified tenant
*/
func (a *Client) V1TenantsUIDMacrosList(params *V1TenantsUIDMacrosListParams) (*V1TenantsUIDMacrosListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantsUIDMacrosListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantsUidMacrosList",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantUid}/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantsUIDMacrosListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantsUIDMacrosListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantsUidMacrosList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantsUIDMacrosUpdate updates the macros of the specified tenant
*/
func (a *Client) V1TenantsUIDMacrosUpdate(params *V1TenantsUIDMacrosUpdateParams) (*V1TenantsUIDMacrosUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantsUIDMacrosUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantsUidMacrosUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantUid}/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantsUIDMacrosUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantsUIDMacrosUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantsUidMacrosUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1TenantsUIDMacrosUpdateByMacroName updates the macros for the specified tenant by given macro name
*/
func (a *Client) V1TenantsUIDMacrosUpdateByMacroName(params *V1TenantsUIDMacrosUpdateByMacroNameParams) (*V1TenantsUIDMacrosUpdateByMacroNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TenantsUIDMacrosUpdateByMacroNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1TenantsUidMacrosUpdateByMacroName",
		Method:             "PATCH",
		PathPattern:        "/v1/tenants/{tenantUid}/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1TenantsUIDMacrosUpdateByMacroNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TenantsUIDMacrosUpdateByMacroNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1TenantsUidMacrosUpdateByMacroName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UserAssetsSSHCreate creates a SSH key
*/
func (a *Client) V1UserAssetsSSHCreate(params *V1UserAssetsSSHCreateParams) (*V1UserAssetsSSHCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UserAssetsSSHCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UserAssetsSshCreate",
		Method:             "POST",
		PathPattern:        "/v1/users/assets/sshkeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UserAssetsSSHCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UserAssetsSSHCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UserAssetsSshCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetSSHDelete returns the specified user ssh key
*/
func (a *Client) V1UsersAssetSSHDelete(params *V1UsersAssetSSHDeleteParams) (*V1UsersAssetSSHDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetSSHDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetSshDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/users/assets/sshkeys/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetSSHDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetSSHDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetSshDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetSSHGetUID returns the specified user ssh key
*/
func (a *Client) V1UsersAssetSSHGetUID(params *V1UsersAssetSSHGetUIDParams) (*V1UsersAssetSSHGetUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetSSHGetUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetSshGetUid",
		Method:             "GET",
		PathPattern:        "/v1/users/assets/sshkeys/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetSSHGetUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetSSHGetUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetSshGetUid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetSSHUpdate updates the specified user ssh key
*/
func (a *Client) V1UsersAssetSSHUpdate(params *V1UsersAssetSSHUpdateParams) (*V1UsersAssetSSHUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetSSHUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetSshUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/users/assets/sshkeys/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetSSHUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetSSHUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetSshUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationAzureCreate creates a azure location
*/
func (a *Client) V1UsersAssetsLocationAzureCreate(params *V1UsersAssetsLocationAzureCreateParams) (*V1UsersAssetsLocationAzureCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationAzureCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationAzureCreate",
		Method:             "POST",
		PathPattern:        "/v1/users/assets/locations/azure",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationAzureCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationAzureCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationAzureCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationAzureGet returns the specified azure location
*/
func (a *Client) V1UsersAssetsLocationAzureGet(params *V1UsersAssetsLocationAzureGetParams) (*V1UsersAssetsLocationAzureGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationAzureGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationAzureGet",
		Method:             "GET",
		PathPattern:        "/v1/users/assets/locations/azure/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationAzureGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationAzureGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationAzureGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationAzureUpdate updates the specified azure location
*/
func (a *Client) V1UsersAssetsLocationAzureUpdate(params *V1UsersAssetsLocationAzureUpdateParams) (*V1UsersAssetsLocationAzureUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationAzureUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationAzureUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/users/assets/locations/azure/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationAzureUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationAzureUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationAzureUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationDefaultUpdate updates the default backup location
*/
func (a *Client) V1UsersAssetsLocationDefaultUpdate(params *V1UsersAssetsLocationDefaultUpdateParams) (*V1UsersAssetsLocationDefaultUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationDefaultUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationDefaultUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/users/assets/locations/{type}/{uid}/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationDefaultUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationDefaultUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationDefaultUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationDelete deletes the specified location
*/
func (a *Client) V1UsersAssetsLocationDelete(params *V1UsersAssetsLocationDeleteParams) (*V1UsersAssetsLocationDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/users/assets/locations/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationGcpCreate creates a g c p location
*/
func (a *Client) V1UsersAssetsLocationGcpCreate(params *V1UsersAssetsLocationGcpCreateParams) (*V1UsersAssetsLocationGcpCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationGcpCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationGcpCreate",
		Method:             "POST",
		PathPattern:        "/v1/users/assets/locations/gcp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationGcpCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationGcpCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationGcpCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationGcpGet returns the specified g c p location
*/
func (a *Client) V1UsersAssetsLocationGcpGet(params *V1UsersAssetsLocationGcpGetParams) (*V1UsersAssetsLocationGcpGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationGcpGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationGcpGet",
		Method:             "GET",
		PathPattern:        "/v1/users/assets/locations/gcp/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationGcpGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationGcpGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationGcpGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationGcpUpdate updates the specified g c p location
*/
func (a *Client) V1UsersAssetsLocationGcpUpdate(params *V1UsersAssetsLocationGcpUpdateParams) (*V1UsersAssetsLocationGcpUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationGcpUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationGcpUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/users/assets/locations/gcp/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationGcpUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationGcpUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationGcpUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationGet returns the specified users location
*/
func (a *Client) V1UsersAssetsLocationGet(params *V1UsersAssetsLocationGetParams) (*V1UsersAssetsLocationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationGet",
		Method:             "GET",
		PathPattern:        "/v1/users/assets/locations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationMinioCreate creates a min i o location
*/
func (a *Client) V1UsersAssetsLocationMinioCreate(params *V1UsersAssetsLocationMinioCreateParams) (*V1UsersAssetsLocationMinioCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationMinioCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationMinioCreate",
		Method:             "POST",
		PathPattern:        "/v1/users/assets/locations/minio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationMinioCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationMinioCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationMinioCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationMinioGet returns the specified min i o location
*/
func (a *Client) V1UsersAssetsLocationMinioGet(params *V1UsersAssetsLocationMinioGetParams) (*V1UsersAssetsLocationMinioGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationMinioGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationMinioGet",
		Method:             "GET",
		PathPattern:        "/v1/users/assets/locations/minio/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationMinioGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationMinioGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationMinioGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationMinioUpdate updates the specified min i o location
*/
func (a *Client) V1UsersAssetsLocationMinioUpdate(params *V1UsersAssetsLocationMinioUpdateParams) (*V1UsersAssetsLocationMinioUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationMinioUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationMinioUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/users/assets/locations/minio/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationMinioUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationMinioUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationMinioUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationS3Create creates a s3 location
*/
func (a *Client) V1UsersAssetsLocationS3Create(params *V1UsersAssetsLocationS3CreateParams) (*V1UsersAssetsLocationS3CreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationS3CreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationS3Create",
		Method:             "POST",
		PathPattern:        "/v1/users/assets/locations/s3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationS3CreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationS3CreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationS3Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationS3Delete returns the specified s3 location
*/
func (a *Client) V1UsersAssetsLocationS3Delete(params *V1UsersAssetsLocationS3DeleteParams) (*V1UsersAssetsLocationS3DeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationS3DeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationS3Delete",
		Method:             "DELETE",
		PathPattern:        "/v1/users/assets/locations/s3/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationS3DeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationS3DeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationS3Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationS3Get returns the specified s3 location
*/
func (a *Client) V1UsersAssetsLocationS3Get(params *V1UsersAssetsLocationS3GetParams) (*V1UsersAssetsLocationS3GetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationS3GetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationS3Get",
		Method:             "GET",
		PathPattern:        "/v1/users/assets/locations/s3/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationS3GetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationS3GetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationS3Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsLocationS3Update updates the specified s3 location
*/
func (a *Client) V1UsersAssetsLocationS3Update(params *V1UsersAssetsLocationS3UpdateParams) (*V1UsersAssetsLocationS3UpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsLocationS3UpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsLocationS3Update",
		Method:             "PUT",
		PathPattern:        "/v1/users/assets/locations/s3/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsLocationS3UpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsLocationS3UpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsLocationS3Update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAssetsSSHGet returns the SSH keys
*/
func (a *Client) V1UsersAssetsSSHGet(params *V1UsersAssetsSSHGetParams) (*V1UsersAssetsSSHGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAssetsSSHGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAssetsSshGet",
		Method:             "GET",
		PathPattern:        "/v1/users/assets/sshkeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAssetsSSHGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAssetsSSHGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAssetsSshGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersAuthTokensRevoke revokes access of specific token s
*/
func (a *Client) V1UsersAuthTokensRevoke(params *V1UsersAuthTokensRevokeParams) (*V1UsersAuthTokensRevokeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersAuthTokensRevokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersAuthTokensRevoke",
		Method:             "POST",
		PathPattern:        "/v1/users/auth/tokens/revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersAuthTokensRevokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersAuthTokensRevokeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersAuthTokensRevoke: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersCreate creates user

A user is created for the given user context
*/
func (a *Client) V1UsersCreate(params *V1UsersCreateParams) (*V1UsersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersCreate",
		Method:             "POST",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersEmailPasswordReset users password reset request using the email id

User password request will be sent to the supplied emailId
*/
func (a *Client) V1UsersEmailPasswordReset(params *V1UsersEmailPasswordResetParams) (*V1UsersEmailPasswordResetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersEmailPasswordResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersEmailPasswordReset",
		Method:             "PATCH",
		PathPattern:        "/v1/users/password/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersEmailPasswordResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersEmailPasswordResetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersEmailPasswordReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersInfoGet returns the base information of specified user

Returns a basic information of User for the specified uid.
*/
func (a *Client) V1UsersInfoGet(params *V1UsersInfoGetParams) (*V1UsersInfoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersInfoGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersInfoGet",
		Method:             "GET",
		PathPattern:        "/v1/users/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersInfoGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersInfoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersInfoGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersList lists users

Lists users the given user context
*/
func (a *Client) V1UsersList(params *V1UsersListParams) (*V1UsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersList",
		Method:             "GET",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersMetadata retrieves a list of users metadata
*/
func (a *Client) V1UsersMetadata(params *V1UsersMetadataParams) (*V1UsersMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersMetadata",
		Method:             "GET",
		PathPattern:        "/v1/users/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersProjectRoles returns the specified user projects and roles information

Returns a User with projects and roles
*/
func (a *Client) V1UsersProjectRoles(params *V1UsersProjectRolesParams) (*V1UsersProjectRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersProjectRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersProjectRoles",
		Method:             "GET",
		PathPattern:        "/v1/users/{uid}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersProjectRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersProjectRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersProjectRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersProjectRolesPut updates the projects and roles for user

User is updated with projects and roles
*/
func (a *Client) V1UsersProjectRolesPut(params *V1UsersProjectRolesPutParams) (*V1UsersProjectRolesPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersProjectRolesPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersProjectRolesPut",
		Method:             "PUT",
		PathPattern:        "/v1/users/{uid}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersProjectRolesPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersProjectRolesPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersProjectRolesPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersResourceRolesUIDUpdate updates the resource roles for user

Specific resource roles fo user is updated
*/
func (a *Client) V1UsersResourceRolesUIDUpdate(params *V1UsersResourceRolesUIDUpdateParams) (*V1UsersResourceRolesUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersResourceRolesUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersResourceRolesUidUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1/users/{uid}/resourceRoles/{resourceRoleUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersResourceRolesUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersResourceRolesUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersResourceRolesUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersStatusLoginMode users status login mode
*/
func (a *Client) V1UsersStatusLoginMode(params *V1UsersStatusLoginModeParams) (*V1UsersStatusLoginModeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersStatusLoginModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersStatusLoginMode",
		Method:             "PATCH",
		PathPattern:        "/v1/users/{uid}/status/loginMode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersStatusLoginModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersStatusLoginModeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersStatusLoginMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersSummaryGet retrieves a list of users summary with provided filter spec
*/
func (a *Client) V1UsersSummaryGet(params *V1UsersSummaryGetParams) (*V1UsersSummaryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersSummaryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersSummaryGet",
		Method:             "POST",
		PathPattern:        "/v1/users/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersSummaryGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersSummaryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersSummaryGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersSystemFeature returns the users system feature

Returns the users system feature
*/
func (a *Client) V1UsersSystemFeature(params *V1UsersSystemFeatureParams) (*V1UsersSystemFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersSystemFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersSystemFeature",
		Method:             "GET",
		PathPattern:        "/v1/users/system/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersSystemFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersSystemFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersSystemFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersSystemMacrosCreate creates or add new macros for the system user
*/
func (a *Client) V1UsersSystemMacrosCreate(params *V1UsersSystemMacrosCreateParams) (*V1UsersSystemMacrosCreateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersSystemMacrosCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersSystemMacrosCreate",
		Method:             "POST",
		PathPattern:        "/v1/users/system/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersSystemMacrosCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersSystemMacrosCreateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersSystemMacrosCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersSystemMacrosDeleteByMacroName deletes the macros for the system user by macro name
*/
func (a *Client) V1UsersSystemMacrosDeleteByMacroName(params *V1UsersSystemMacrosDeleteByMacroNameParams) (*V1UsersSystemMacrosDeleteByMacroNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersSystemMacrosDeleteByMacroNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersSystemMacrosDeleteByMacroName",
		Method:             "DELETE",
		PathPattern:        "/v1/users/system/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersSystemMacrosDeleteByMacroNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersSystemMacrosDeleteByMacroNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersSystemMacrosDeleteByMacroName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersSystemMacrosList lists the macros of the system
*/
func (a *Client) V1UsersSystemMacrosList(params *V1UsersSystemMacrosListParams) (*V1UsersSystemMacrosListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersSystemMacrosListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersSystemMacrosList",
		Method:             "GET",
		PathPattern:        "/v1/users/system/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersSystemMacrosListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersSystemMacrosListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersSystemMacrosList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersSystemMacrosUpdate updates the macros of the system
*/
func (a *Client) V1UsersSystemMacrosUpdate(params *V1UsersSystemMacrosUpdateParams) (*V1UsersSystemMacrosUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersSystemMacrosUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersSystemMacrosUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/users/system/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersSystemMacrosUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersSystemMacrosUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersSystemMacrosUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersSystemMacrosUpdateByMacroName updates the macros for the system user by macro name
*/
func (a *Client) V1UsersSystemMacrosUpdateByMacroName(params *V1UsersSystemMacrosUpdateByMacroNameParams) (*V1UsersSystemMacrosUpdateByMacroNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersSystemMacrosUpdateByMacroNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersSystemMacrosUpdateByMacroName",
		Method:             "PATCH",
		PathPattern:        "/v1/users/system/macros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersSystemMacrosUpdateByMacroNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersSystemMacrosUpdateByMacroNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersSystemMacrosUpdateByMacroName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDDelete deletes the specified user

Deletes the specified User for given uid
*/
func (a *Client) V1UsersUIDDelete(params *V1UsersUIDDeleteParams) (*V1UsersUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/users/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDGet returns the specified user

Returns a User for the specified uid.
*/
func (a *Client) V1UsersUIDGet(params *V1UsersUIDGetParams) (*V1UsersUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidGet",
		Method:             "GET",
		PathPattern:        "/v1/users/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDPasswordChange users password change request using the user uid

User password change request via current password
*/
func (a *Client) V1UsersUIDPasswordChange(params *V1UsersUIDPasswordChangeParams) (*V1UsersUIDPasswordChangeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDPasswordChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidPasswordChange",
		Method:             "PATCH",
		PathPattern:        "/v1/users/{uid}/password/change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDPasswordChangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDPasswordChangeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidPasswordChange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDPasswordReset users password reset request using the user uid

User password reset request, will send the password reset option through the emailId
*/
func (a *Client) V1UsersUIDPasswordReset(params *V1UsersUIDPasswordResetParams) (*V1UsersUIDPasswordResetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDPasswordResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidPasswordReset",
		Method:             "PATCH",
		PathPattern:        "/v1/users/{uid}/password/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDPasswordResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDPasswordResetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidPasswordReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDPatch patches the specified user

User is patched for the specified information
*/
func (a *Client) V1UsersUIDPatch(params *V1UsersUIDPatchParams) (*V1UsersUIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidPatch",
		Method:             "PATCH",
		PathPattern:        "/v1/users/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDResourceRoles returns the specified individual and resource roles for a user

Returns resource roles for user
*/
func (a *Client) V1UsersUIDResourceRoles(params *V1UsersUIDResourceRolesParams) (*V1UsersUIDResourceRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDResourceRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidResourceRoles",
		Method:             "GET",
		PathPattern:        "/v1/users/{uid}/resourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDResourceRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDResourceRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidResourceRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDResourceRolesCreate adds resource roles for user

Resource roles added to specific user
*/
func (a *Client) V1UsersUIDResourceRolesCreate(params *V1UsersUIDResourceRolesCreateParams) (*V1UsersUIDResourceRolesCreateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDResourceRolesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidResourceRolesCreate",
		Method:             "POST",
		PathPattern:        "/v1/users/{uid}/resourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDResourceRolesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDResourceRolesCreateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidResourceRolesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDResourceRolesUIDDelete deleteds the resource roles from user
*/
func (a *Client) V1UsersUIDResourceRolesUIDDelete(params *V1UsersUIDResourceRolesUIDDeleteParams) (*V1UsersUIDResourceRolesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDResourceRolesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidResourceRolesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/users/{uid}/resourceRoles/{resourceRoleUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDResourceRolesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDResourceRolesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidResourceRolesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDRoles returns the specified individual and team roles for a user

Returns roles clubbed from team
*/
func (a *Client) V1UsersUIDRoles(params *V1UsersUIDRolesParams) (*V1UsersUIDRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidRoles",
		Method:             "GET",
		PathPattern:        "/v1/users/{uid}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDRolesUpdate updates the roles for user

User is updated with roles
*/
func (a *Client) V1UsersUIDRolesUpdate(params *V1UsersUIDRolesUpdateParams) (*V1UsersUIDRolesUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDRolesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidRolesUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/users/{uid}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDRolesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDRolesUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidRolesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersUIDUpdate updates user

A user is created for the given user context
*/
func (a *Client) V1UsersUIDUpdate(params *V1UsersUIDUpdateParams) (*V1UsersUIDUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersUIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersUidUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/users/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersUIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersUIDUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersUidUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersWorkspaceGetRoles returns the specified user workspaces and roles information

Returns a User with workspaces and roles
*/
func (a *Client) V1UsersWorkspaceGetRoles(params *V1UsersWorkspaceGetRolesParams) (*V1UsersWorkspaceGetRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersWorkspaceGetRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersWorkspaceGetRoles",
		Method:             "GET",
		PathPattern:        "/v1/workspaces/users/{userUid}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersWorkspaceGetRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersWorkspaceGetRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersWorkspaceGetRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1UsersWorkspaceRolesPut updates the workspace roles for user

User is updated with workspace roles
*/
func (a *Client) V1UsersWorkspaceRolesPut(params *V1UsersWorkspaceRolesPutParams) (*V1UsersWorkspaceRolesPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1UsersWorkspaceRolesPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1UsersWorkspaceRolesPut",
		Method:             "PUT",
		PathPattern:        "/v1/workspaces/users/{userUid}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1UsersWorkspaceRolesPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1UsersWorkspaceRolesPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1UsersWorkspaceRolesPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VMSnapshotCreate creates snapshot of virtual machine
*/
func (a *Client) V1VMSnapshotCreate(params *V1VMSnapshotCreateParams) (*V1VMSnapshotCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VMSnapshotCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VMSnapshotCreate",
		Method:             "POST",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VMSnapshotCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VMSnapshotCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VMSnapshotCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VMSnapshotDelete deletes the snapshot of virtual machine
*/
func (a *Client) V1VMSnapshotDelete(params *V1VMSnapshotDeleteParams) (*V1VMSnapshotDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VMSnapshotDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VMSnapshotDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/snapshot/{snapshotName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VMSnapshotDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VMSnapshotDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VMSnapshotDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VMSnapshotGet gets virtual machine snapshot
*/
func (a *Client) V1VMSnapshotGet(params *V1VMSnapshotGetParams) (*V1VMSnapshotGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VMSnapshotGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VMSnapshotGet",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/snapshot/{snapshotName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VMSnapshotGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VMSnapshotGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VMSnapshotGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VMSnapshotUpdate updates the specified snapshot of a virtual machine
*/
func (a *Client) V1VMSnapshotUpdate(params *V1VMSnapshotUpdateParams) (*V1VMSnapshotUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VMSnapshotUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VMSnapshotUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/spectroclusters/{uid}/vms/{vmName}/snapshot/{snapshotName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VMSnapshotUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VMSnapshotUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VMSnapshotUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VirtualClustersPacksValues gets the cluster pack values yaml
*/
func (a *Client) V1VirtualClustersPacksValues(params *V1VirtualClustersPacksValuesParams) (*V1VirtualClustersPacksValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VirtualClustersPacksValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VirtualClustersPacksValues",
		Method:             "GET",
		PathPattern:        "/v1/spectroclusters/virtual/packs/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VirtualClustersPacksValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VirtualClustersPacksValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VirtualClustersPacksValues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereAccountsUIDClusterRes gets the v sphere computecluster resources for the given overlord account
*/
func (a *Client) V1VsphereAccountsUIDClusterRes(params *V1VsphereAccountsUIDClusterResParams) (*V1VsphereAccountsUIDClusterResOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereAccountsUIDClusterResParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VsphereAccountsUidClusterRes",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/vsphere/{uid}/properties/computecluster/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereAccountsUIDClusterResReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereAccountsUIDClusterResOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VsphereAccountsUidClusterRes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereAccountsUIDDatacenters gets the v sphere datacenters and datacluster for the given overlord account
*/
func (a *Client) V1VsphereAccountsUIDDatacenters(params *V1VsphereAccountsUIDDatacentersParams) (*V1VsphereAccountsUIDDatacentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereAccountsUIDDatacentersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VsphereAccountsUidDatacenters",
		Method:             "GET",
		PathPattern:        "/v1/cloudaccounts/vsphere/{uid}/properties/datacenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereAccountsUIDDatacentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereAccountsUIDDatacentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VsphereAccountsUidDatacenters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereDNSMappingCreate creates a v sphere DNS mapping
*/
func (a *Client) V1VsphereDNSMappingCreate(params *V1VsphereDNSMappingCreateParams) (*V1VsphereDNSMappingCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereDNSMappingCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VsphereDnsMappingCreate",
		Method:             "POST",
		PathPattern:        "/v1/users/assets/vsphere/dnsMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereDNSMappingCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereDNSMappingCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VsphereDnsMappingCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereDNSMappingDelete deletes the specified v sphere DNS mapping
*/
func (a *Client) V1VsphereDNSMappingDelete(params *V1VsphereDNSMappingDeleteParams) (*V1VsphereDNSMappingDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereDNSMappingDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VsphereDnsMappingDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/users/assets/vsphere/dnsMappings/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereDNSMappingDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereDNSMappingDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VsphereDnsMappingDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereDNSMappingGet returns the specified v sphere DNS mapping
*/
func (a *Client) V1VsphereDNSMappingGet(params *V1VsphereDNSMappingGetParams) (*V1VsphereDNSMappingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereDNSMappingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VsphereDnsMappingGet",
		Method:             "GET",
		PathPattern:        "/v1/users/assets/vsphere/dnsMappings/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereDNSMappingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereDNSMappingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VsphereDnsMappingGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereDNSMappingUpdate updates the specified v sphere DNS mapping
*/
func (a *Client) V1VsphereDNSMappingUpdate(params *V1VsphereDNSMappingUpdateParams) (*V1VsphereDNSMappingUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereDNSMappingUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VsphereDnsMappingUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/users/assets/vsphere/dnsMappings/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereDNSMappingUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereDNSMappingUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VsphereDnsMappingUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereDNSMappingsGet returns the specified v sphere DNS mappings
*/
func (a *Client) V1VsphereDNSMappingsGet(params *V1VsphereDNSMappingsGetParams) (*V1VsphereDNSMappingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereDNSMappingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VsphereDnsMappingsGet",
		Method:             "GET",
		PathPattern:        "/v1/users/assets/vsphere/dnsMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereDNSMappingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereDNSMappingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VsphereDnsMappingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1VsphereMappingGet returns the specified v sphere DNS mapping
*/
func (a *Client) V1VsphereMappingGet(params *V1VsphereMappingGetParams) (*V1VsphereMappingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1VsphereMappingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1VsphereMappingGet",
		Method:             "GET",
		PathPattern:        "/v1/users/assets/vsphere/dnsMapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1VsphereMappingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1VsphereMappingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1VsphereMappingGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspaceOpsBackupCreate creates workspace backup settings
*/
func (a *Client) V1WorkspaceOpsBackupCreate(params *V1WorkspaceOpsBackupCreateParams) (*V1WorkspaceOpsBackupCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspaceOpsBackupCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspaceOpsBackupCreate",
		Method:             "POST",
		PathPattern:        "/v1/workspaces/{uid}/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspaceOpsBackupCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspaceOpsBackupCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspaceOpsBackupCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspaceOpsBackupDelete deletes workspace backup
*/
func (a *Client) V1WorkspaceOpsBackupDelete(params *V1WorkspaceOpsBackupDeleteParams) (*V1WorkspaceOpsBackupDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspaceOpsBackupDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspaceOpsBackupDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/workspaces/{uid}/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspaceOpsBackupDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspaceOpsBackupDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspaceOpsBackupDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspaceOpsBackupGet returns the workspace backup result
*/
func (a *Client) V1WorkspaceOpsBackupGet(params *V1WorkspaceOpsBackupGetParams) (*V1WorkspaceOpsBackupGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspaceOpsBackupGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspaceOpsBackupGet",
		Method:             "GET",
		PathPattern:        "/v1/workspaces/{uid}/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspaceOpsBackupGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspaceOpsBackupGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspaceOpsBackupGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspaceOpsBackupOnDemandCreate creates on demand workspace backup
*/
func (a *Client) V1WorkspaceOpsBackupOnDemandCreate(params *V1WorkspaceOpsBackupOnDemandCreateParams) (*V1WorkspaceOpsBackupOnDemandCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspaceOpsBackupOnDemandCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspaceOpsBackupOnDemandCreate",
		Method:             "POST",
		PathPattern:        "/v1/workspaces/{uid}/backup/onDemand",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspaceOpsBackupOnDemandCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspaceOpsBackupOnDemandCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspaceOpsBackupOnDemandCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspaceOpsBackupUpdate updates workspace backup settings
*/
func (a *Client) V1WorkspaceOpsBackupUpdate(params *V1WorkspaceOpsBackupUpdateParams) (*V1WorkspaceOpsBackupUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspaceOpsBackupUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspaceOpsBackupUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/workspaces/{uid}/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspaceOpsBackupUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspaceOpsBackupUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspaceOpsBackupUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspaceOpsRestoreGet returns the workspace restore result
*/
func (a *Client) V1WorkspaceOpsRestoreGet(params *V1WorkspaceOpsRestoreGetParams) (*V1WorkspaceOpsRestoreGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspaceOpsRestoreGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspaceOpsRestoreGet",
		Method:             "GET",
		PathPattern:        "/v1/workspaces/{uid}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspaceOpsRestoreGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspaceOpsRestoreGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspaceOpsRestoreGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspaceOpsRestoreOnDemandCreate creates on demand workspace restore
*/
func (a *Client) V1WorkspaceOpsRestoreOnDemandCreate(params *V1WorkspaceOpsRestoreOnDemandCreateParams) (*V1WorkspaceOpsRestoreOnDemandCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspaceOpsRestoreOnDemandCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspaceOpsRestoreOnDemandCreate",
		Method:             "POST",
		PathPattern:        "/v1/workspaces/{uid}/restore/onDemand",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspaceOpsRestoreOnDemandCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspaceOpsRestoreOnDemandCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspaceOpsRestoreOnDemandCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspacesClusterRbacCreate creates cluster rbac in workspace
*/
func (a *Client) V1WorkspacesClusterRbacCreate(params *V1WorkspacesClusterRbacCreateParams) (*V1WorkspacesClusterRbacCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspacesClusterRbacCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspacesClusterRbacCreate",
		Method:             "POST",
		PathPattern:        "/v1/workspaces/{uid}/clusterRbacs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspacesClusterRbacCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspacesClusterRbacCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspacesClusterRbacCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspacesCreate creates workspace
*/
func (a *Client) V1WorkspacesCreate(params *V1WorkspacesCreateParams) (*V1WorkspacesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspacesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspacesCreate",
		Method:             "POST",
		PathPattern:        "/v1/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspacesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspacesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspacesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspacesUIDClusterNamespacesUpdate updates the specified workspace namespaces
*/
func (a *Client) V1WorkspacesUIDClusterNamespacesUpdate(params *V1WorkspacesUIDClusterNamespacesUpdateParams) (*V1WorkspacesUIDClusterNamespacesUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspacesUIDClusterNamespacesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspacesUidClusterNamespacesUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/workspaces/{uid}/clusterNamespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspacesUIDClusterNamespacesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspacesUIDClusterNamespacesUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspacesUidClusterNamespacesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspacesUIDClusterRbacDelete deletes the specified workspace cluster rbac
*/
func (a *Client) V1WorkspacesUIDClusterRbacDelete(params *V1WorkspacesUIDClusterRbacDeleteParams) (*V1WorkspacesUIDClusterRbacDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspacesUIDClusterRbacDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspacesUidClusterRbacDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/workspaces/{uid}/clusterRbacs/{clusterRbacUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspacesUIDClusterRbacDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspacesUIDClusterRbacDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspacesUidClusterRbacDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspacesUIDClusterRbacUpdate updates the specified workspace cluster rbac
*/
func (a *Client) V1WorkspacesUIDClusterRbacUpdate(params *V1WorkspacesUIDClusterRbacUpdateParams) (*V1WorkspacesUIDClusterRbacUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspacesUIDClusterRbacUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspacesUidClusterRbacUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/workspaces/{uid}/clusterRbacs/{clusterRbacUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspacesUIDClusterRbacUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspacesUIDClusterRbacUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspacesUidClusterRbacUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspacesUIDDelete deletes the specified workspace
*/
func (a *Client) V1WorkspacesUIDDelete(params *V1WorkspacesUIDDeleteParams) (*V1WorkspacesUIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspacesUIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspacesUidDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/workspaces/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspacesUIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspacesUIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspacesUidDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspacesUIDGet returns the specified workspace
*/
func (a *Client) V1WorkspacesUIDGet(params *V1WorkspacesUIDGetParams) (*V1WorkspacesUIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspacesUIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspacesUidGet",
		Method:             "GET",
		PathPattern:        "/v1/workspaces/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspacesUIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspacesUIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspacesUidGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspacesUIDMetaUpdate updates the specified workspace meta
*/
func (a *Client) V1WorkspacesUIDMetaUpdate(params *V1WorkspacesUIDMetaUpdateParams) (*V1WorkspacesUIDMetaUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspacesUIDMetaUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspacesUidMetaUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/workspaces/{uid}/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspacesUIDMetaUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspacesUIDMetaUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspacesUidMetaUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1WorkspacesValidateName validates the workspace name
*/
func (a *Client) V1WorkspacesValidateName(params *V1WorkspacesValidateNameParams) (*V1WorkspacesValidateNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1WorkspacesValidateNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v1WorkspacesValidateName",
		Method:             "GET",
		PathPattern:        "/v1/workspaces/validate/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V1WorkspacesValidateNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1WorkspacesValidateNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1WorkspacesValidateName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
