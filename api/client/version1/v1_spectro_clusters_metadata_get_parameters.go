// Code generated by go-swagger; DO NOT EDIT.

package version1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewV1SpectroClustersMetadataGetParams creates a new V1SpectroClustersMetadataGetParams object
// with the default values initialized.
func NewV1SpectroClustersMetadataGetParams() *V1SpectroClustersMetadataGetParams {
	var ()
	return &V1SpectroClustersMetadataGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV1SpectroClustersMetadataGetParamsWithTimeout creates a new V1SpectroClustersMetadataGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1SpectroClustersMetadataGetParamsWithTimeout(timeout time.Duration) *V1SpectroClustersMetadataGetParams {
	var ()
	return &V1SpectroClustersMetadataGetParams{

		timeout: timeout,
	}
}

// NewV1SpectroClustersMetadataGetParamsWithContext creates a new V1SpectroClustersMetadataGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1SpectroClustersMetadataGetParamsWithContext(ctx context.Context) *V1SpectroClustersMetadataGetParams {
	var ()
	return &V1SpectroClustersMetadataGetParams{

		Context: ctx,
	}
}

// NewV1SpectroClustersMetadataGetParamsWithHTTPClient creates a new V1SpectroClustersMetadataGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1SpectroClustersMetadataGetParamsWithHTTPClient(client *http.Client) *V1SpectroClustersMetadataGetParams {
	var ()
	return &V1SpectroClustersMetadataGetParams{
		HTTPClient: client,
	}
}

/*
V1SpectroClustersMetadataGetParams contains all the parameters to send to the API endpoint
for the v1 spectro clusters metadata get operation typically these are written to a http.Request
*/
type V1SpectroClustersMetadataGetParams struct {

	/*QuickFilter*/
	QuickFilter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 spectro clusters metadata get params
func (o *V1SpectroClustersMetadataGetParams) WithTimeout(timeout time.Duration) *V1SpectroClustersMetadataGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 spectro clusters metadata get params
func (o *V1SpectroClustersMetadataGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 spectro clusters metadata get params
func (o *V1SpectroClustersMetadataGetParams) WithContext(ctx context.Context) *V1SpectroClustersMetadataGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 spectro clusters metadata get params
func (o *V1SpectroClustersMetadataGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 spectro clusters metadata get params
func (o *V1SpectroClustersMetadataGetParams) WithHTTPClient(client *http.Client) *V1SpectroClustersMetadataGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 spectro clusters metadata get params
func (o *V1SpectroClustersMetadataGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQuickFilter adds the quickFilter to the v1 spectro clusters metadata get params
func (o *V1SpectroClustersMetadataGetParams) WithQuickFilter(quickFilter *string) *V1SpectroClustersMetadataGetParams {
	o.SetQuickFilter(quickFilter)
	return o
}

// SetQuickFilter adds the quickFilter to the v1 spectro clusters metadata get params
func (o *V1SpectroClustersMetadataGetParams) SetQuickFilter(quickFilter *string) {
	o.QuickFilter = quickFilter
}

// WriteToRequest writes these params to a swagger request
func (o *V1SpectroClustersMetadataGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.QuickFilter != nil {

		// query param quickFilter
		var qrQuickFilter string
		if o.QuickFilter != nil {
			qrQuickFilter = *o.QuickFilter
		}
		qQuickFilter := qrQuickFilter
		if qQuickFilter != "" {
			if err := r.SetQueryParam("quickFilter", qQuickFilter); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
