// Code generated by go-swagger; DO NOT EDIT.

package version1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewV1OidcLogoutParams creates a new V1OidcLogoutParams object
// with the default values initialized.
func NewV1OidcLogoutParams() *V1OidcLogoutParams {
	var ()
	return &V1OidcLogoutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV1OidcLogoutParamsWithTimeout creates a new V1OidcLogoutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1OidcLogoutParamsWithTimeout(timeout time.Duration) *V1OidcLogoutParams {
	var ()
	return &V1OidcLogoutParams{

		timeout: timeout,
	}
}

// NewV1OidcLogoutParamsWithContext creates a new V1OidcLogoutParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1OidcLogoutParamsWithContext(ctx context.Context) *V1OidcLogoutParams {
	var ()
	return &V1OidcLogoutParams{

		Context: ctx,
	}
}

// NewV1OidcLogoutParamsWithHTTPClient creates a new V1OidcLogoutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1OidcLogoutParamsWithHTTPClient(client *http.Client) *V1OidcLogoutParams {
	var ()
	return &V1OidcLogoutParams{
		HTTPClient: client,
	}
}

/*
V1OidcLogoutParams contains all the parameters to send to the API endpoint
for the v1 oidc logout operation typically these are written to a http.Request
*/
type V1OidcLogoutParams struct {

	/*Org
	  Organization name

	*/
	Org string
	/*State
	  Describes a state to validate and associate request and response

	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 oidc logout params
func (o *V1OidcLogoutParams) WithTimeout(timeout time.Duration) *V1OidcLogoutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 oidc logout params
func (o *V1OidcLogoutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 oidc logout params
func (o *V1OidcLogoutParams) WithContext(ctx context.Context) *V1OidcLogoutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 oidc logout params
func (o *V1OidcLogoutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 oidc logout params
func (o *V1OidcLogoutParams) WithHTTPClient(client *http.Client) *V1OidcLogoutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 oidc logout params
func (o *V1OidcLogoutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrg adds the org to the v1 oidc logout params
func (o *V1OidcLogoutParams) WithOrg(org string) *V1OidcLogoutParams {
	o.SetOrg(org)
	return o
}

// SetOrg adds the org to the v1 oidc logout params
func (o *V1OidcLogoutParams) SetOrg(org string) {
	o.Org = org
}

// WithState adds the state to the v1 oidc logout params
func (o *V1OidcLogoutParams) WithState(state *string) *V1OidcLogoutParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the v1 oidc logout params
func (o *V1OidcLogoutParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *V1OidcLogoutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param org
	if err := r.SetPathParam("org", o.Org); err != nil {
		return err
	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
