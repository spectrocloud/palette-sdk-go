// Code generated by go-swagger; DO NOT EDIT.

package version1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewV1OidcCallbackParams creates a new V1OidcCallbackParams object
// with the default values initialized.
func NewV1OidcCallbackParams() *V1OidcCallbackParams {
	var ()
	return &V1OidcCallbackParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV1OidcCallbackParamsWithTimeout creates a new V1OidcCallbackParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1OidcCallbackParamsWithTimeout(timeout time.Duration) *V1OidcCallbackParams {
	var ()
	return &V1OidcCallbackParams{

		timeout: timeout,
	}
}

// NewV1OidcCallbackParamsWithContext creates a new V1OidcCallbackParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1OidcCallbackParamsWithContext(ctx context.Context) *V1OidcCallbackParams {
	var ()
	return &V1OidcCallbackParams{

		Context: ctx,
	}
}

// NewV1OidcCallbackParamsWithHTTPClient creates a new V1OidcCallbackParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1OidcCallbackParamsWithHTTPClient(client *http.Client) *V1OidcCallbackParams {
	var ()
	return &V1OidcCallbackParams{
		HTTPClient: client,
	}
}

/*
V1OidcCallbackParams contains all the parameters to send to the API endpoint
for the v1 oidc callback operation typically these are written to a http.Request
*/
type V1OidcCallbackParams struct {

	/*Code
	  Describes temporary and very short lived code sent by IDP to validate the token

	*/
	Code *string
	/*Error
	  Describes a error code in case the IDP is not able to validate and authenticates the user

	*/
	Error *string
	/*ErrorDescription
	  Describes a error in case the IDP is not able to validate and authenticates the user

	*/
	ErrorDescription *string
	/*Org
	  Organization name

	*/
	Org string
	/*State
	  Describes a state to validate and associate request and response

	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 oidc callback params
func (o *V1OidcCallbackParams) WithTimeout(timeout time.Duration) *V1OidcCallbackParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 oidc callback params
func (o *V1OidcCallbackParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 oidc callback params
func (o *V1OidcCallbackParams) WithContext(ctx context.Context) *V1OidcCallbackParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 oidc callback params
func (o *V1OidcCallbackParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 oidc callback params
func (o *V1OidcCallbackParams) WithHTTPClient(client *http.Client) *V1OidcCallbackParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 oidc callback params
func (o *V1OidcCallbackParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the v1 oidc callback params
func (o *V1OidcCallbackParams) WithCode(code *string) *V1OidcCallbackParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the v1 oidc callback params
func (o *V1OidcCallbackParams) SetCode(code *string) {
	o.Code = code
}

// WithError adds the error to the v1 oidc callback params
func (o *V1OidcCallbackParams) WithError(error *string) *V1OidcCallbackParams {
	o.SetError(error)
	return o
}

// SetError adds the error to the v1 oidc callback params
func (o *V1OidcCallbackParams) SetError(error *string) {
	o.Error = error
}

// WithErrorDescription adds the errorDescription to the v1 oidc callback params
func (o *V1OidcCallbackParams) WithErrorDescription(errorDescription *string) *V1OidcCallbackParams {
	o.SetErrorDescription(errorDescription)
	return o
}

// SetErrorDescription adds the errorDescription to the v1 oidc callback params
func (o *V1OidcCallbackParams) SetErrorDescription(errorDescription *string) {
	o.ErrorDescription = errorDescription
}

// WithOrg adds the org to the v1 oidc callback params
func (o *V1OidcCallbackParams) WithOrg(org string) *V1OidcCallbackParams {
	o.SetOrg(org)
	return o
}

// SetOrg adds the org to the v1 oidc callback params
func (o *V1OidcCallbackParams) SetOrg(org string) {
	o.Org = org
}

// WithState adds the state to the v1 oidc callback params
func (o *V1OidcCallbackParams) WithState(state *string) *V1OidcCallbackParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the v1 oidc callback params
func (o *V1OidcCallbackParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *V1OidcCallbackParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Code != nil {

		// query param code
		var qrCode string
		if o.Code != nil {
			qrCode = *o.Code
		}
		qCode := qrCode
		if qCode != "" {
			if err := r.SetQueryParam("code", qCode); err != nil {
				return err
			}
		}

	}

	if o.Error != nil {

		// query param error
		var qrError string
		if o.Error != nil {
			qrError = *o.Error
		}
		qError := qrError
		if qError != "" {
			if err := r.SetQueryParam("error", qError); err != nil {
				return err
			}
		}

	}

	if o.ErrorDescription != nil {

		// query param error_description
		var qrErrorDescription string
		if o.ErrorDescription != nil {
			qrErrorDescription = *o.ErrorDescription
		}
		qErrorDescription := qrErrorDescription
		if qErrorDescription != "" {
			if err := r.SetQueryParam("error_description", qErrorDescription); err != nil {
				return err
			}
		}

	}

	// path param org
	if err := r.SetPathParam("org", o.Org); err != nil {
		return err
	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
