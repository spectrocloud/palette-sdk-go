// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewV1OpenstackAccountsUIDKeypairsParams creates a new V1OpenstackAccountsUIDKeypairsParams object
// with the default values initialized.
func NewV1OpenstackAccountsUIDKeypairsParams() *V1OpenstackAccountsUIDKeypairsParams {
	var ()
	return &V1OpenstackAccountsUIDKeypairsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV1OpenstackAccountsUIDKeypairsParamsWithTimeout creates a new V1OpenstackAccountsUIDKeypairsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1OpenstackAccountsUIDKeypairsParamsWithTimeout(timeout time.Duration) *V1OpenstackAccountsUIDKeypairsParams {
	var ()
	return &V1OpenstackAccountsUIDKeypairsParams{

		timeout: timeout,
	}
}

// NewV1OpenstackAccountsUIDKeypairsParamsWithContext creates a new V1OpenstackAccountsUIDKeypairsParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1OpenstackAccountsUIDKeypairsParamsWithContext(ctx context.Context) *V1OpenstackAccountsUIDKeypairsParams {
	var ()
	return &V1OpenstackAccountsUIDKeypairsParams{

		Context: ctx,
	}
}

// NewV1OpenstackAccountsUIDKeypairsParamsWithHTTPClient creates a new V1OpenstackAccountsUIDKeypairsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1OpenstackAccountsUIDKeypairsParamsWithHTTPClient(client *http.Client) *V1OpenstackAccountsUIDKeypairsParams {
	var ()
	return &V1OpenstackAccountsUIDKeypairsParams{
		HTTPClient: client,
	}
}

/*
V1OpenstackAccountsUIDKeypairsParams contains all the parameters to send to the API endpoint
for the v1 openstack accounts Uid keypairs operation typically these are written to a http.Request
*/
type V1OpenstackAccountsUIDKeypairsParams struct {

	/*Domain*/
	Domain *string
	/*Project*/
	Project *string
	/*Region*/
	Region *string
	/*UID*/
	UID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) WithTimeout(timeout time.Duration) *V1OpenstackAccountsUIDKeypairsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) WithContext(ctx context.Context) *V1OpenstackAccountsUIDKeypairsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) WithHTTPClient(client *http.Client) *V1OpenstackAccountsUIDKeypairsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomain adds the domain to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) WithDomain(domain *string) *V1OpenstackAccountsUIDKeypairsParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithProject adds the project to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) WithProject(project *string) *V1OpenstackAccountsUIDKeypairsParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) SetProject(project *string) {
	o.Project = project
}

// WithRegion adds the region to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) WithRegion(region *string) *V1OpenstackAccountsUIDKeypairsParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) SetRegion(region *string) {
	o.Region = region
}

// WithUID adds the uid to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) WithUID(uid string) *V1OpenstackAccountsUIDKeypairsParams {
	o.SetUID(uid)
	return o
}

// SetUID adds the uid to the v1 openstack accounts Uid keypairs params
func (o *V1OpenstackAccountsUIDKeypairsParams) SetUID(uid string) {
	o.UID = uid
}

// WriteToRequest writes these params to a swagger request
func (o *V1OpenstackAccountsUIDKeypairsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Domain != nil {

		// query param domain
		var qrDomain string
		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {
			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}

	}

	if o.Project != nil {

		// query param project
		var qrProject string
		if o.Project != nil {
			qrProject = *o.Project
		}
		qProject := qrProject
		if qProject != "" {
			if err := r.SetQueryParam("project", qProject); err != nil {
				return err
			}
		}

	}

	if o.Region != nil {

		// query param region
		var qrRegion string
		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {
			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}

	}

	// path param uid
	if err := r.SetPathParam("uid", o.UID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
