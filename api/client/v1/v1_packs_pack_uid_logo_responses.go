// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// V1PacksPackUIDLogoReader is a Reader for the V1PacksPackUIDLogo structure.
type V1PacksPackUIDLogoReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *V1PacksPackUIDLogoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1PacksPackUIDLogoOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewV1PacksPackUIDLogoOK creates a V1PacksPackUIDLogoOK with default headers values
func NewV1PacksPackUIDLogoOK(writer io.Writer) *V1PacksPackUIDLogoOK {
	return &V1PacksPackUIDLogoOK{
		Payload: writer,
	}
}

/*V1PacksPackUIDLogoOK handles this case with default header values.

OK
*/
type V1PacksPackUIDLogoOK struct {
	/*Cache control directive for the response
	 */
	CacheControl string

	Expires string

	Payload io.Writer
}

func (o *V1PacksPackUIDLogoOK) Error() string {
	return fmt.Sprintf("[GET /v1/packs/{packUid}/logo][%d] v1PacksPackUidLogoOK  %+v", 200, o.Payload)
}

func (o *V1PacksPackUIDLogoOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *V1PacksPackUIDLogoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
