// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewV1MetricsUIDDeleteParams creates a new V1MetricsUIDDeleteParams object
// with the default values initialized.
func NewV1MetricsUIDDeleteParams() *V1MetricsUIDDeleteParams {
	var ()
	return &V1MetricsUIDDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV1MetricsUIDDeleteParamsWithTimeout creates a new V1MetricsUIDDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1MetricsUIDDeleteParamsWithTimeout(timeout time.Duration) *V1MetricsUIDDeleteParams {
	var ()
	return &V1MetricsUIDDeleteParams{

		timeout: timeout,
	}
}

// NewV1MetricsUIDDeleteParamsWithContext creates a new V1MetricsUIDDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1MetricsUIDDeleteParamsWithContext(ctx context.Context) *V1MetricsUIDDeleteParams {
	var ()
	return &V1MetricsUIDDeleteParams{

		Context: ctx,
	}
}

// NewV1MetricsUIDDeleteParamsWithHTTPClient creates a new V1MetricsUIDDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1MetricsUIDDeleteParamsWithHTTPClient(client *http.Client) *V1MetricsUIDDeleteParams {
	var ()
	return &V1MetricsUIDDeleteParams{
		HTTPClient: client,
	}
}

/*
V1MetricsUIDDeleteParams contains all the parameters to send to the API endpoint
for the v1 metrics Uid delete operation typically these are written to a http.Request
*/
type V1MetricsUIDDeleteParams struct {

	/*ResourceKind*/
	ResourceKind string
	/*ResourceUID*/
	ResourceUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 metrics Uid delete params
func (o *V1MetricsUIDDeleteParams) WithTimeout(timeout time.Duration) *V1MetricsUIDDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 metrics Uid delete params
func (o *V1MetricsUIDDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 metrics Uid delete params
func (o *V1MetricsUIDDeleteParams) WithContext(ctx context.Context) *V1MetricsUIDDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 metrics Uid delete params
func (o *V1MetricsUIDDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 metrics Uid delete params
func (o *V1MetricsUIDDeleteParams) WithHTTPClient(client *http.Client) *V1MetricsUIDDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 metrics Uid delete params
func (o *V1MetricsUIDDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithResourceKind adds the resourceKind to the v1 metrics Uid delete params
func (o *V1MetricsUIDDeleteParams) WithResourceKind(resourceKind string) *V1MetricsUIDDeleteParams {
	o.SetResourceKind(resourceKind)
	return o
}

// SetResourceKind adds the resourceKind to the v1 metrics Uid delete params
func (o *V1MetricsUIDDeleteParams) SetResourceKind(resourceKind string) {
	o.ResourceKind = resourceKind
}

// WithResourceUID adds the resourceUID to the v1 metrics Uid delete params
func (o *V1MetricsUIDDeleteParams) WithResourceUID(resourceUID string) *V1MetricsUIDDeleteParams {
	o.SetResourceUID(resourceUID)
	return o
}

// SetResourceUID adds the resourceUid to the v1 metrics Uid delete params
func (o *V1MetricsUIDDeleteParams) SetResourceUID(resourceUID string) {
	o.ResourceUID = resourceUID
}

// WriteToRequest writes these params to a swagger request
func (o *V1MetricsUIDDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param resourceKind
	if err := r.SetPathParam("resourceKind", o.ResourceKind); err != nil {
		return err
	}

	// path param resourceUid
	if err := r.SetPathParam("resourceUid", o.ResourceUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
