// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewV1SpectroClustersUIDPackPropertiesParams creates a new V1SpectroClustersUIDPackPropertiesParams object
// with the default values initialized.
func NewV1SpectroClustersUIDPackPropertiesParams() *V1SpectroClustersUIDPackPropertiesParams {
	var (
		resolveMacrosDefault = bool(true)
	)
	return &V1SpectroClustersUIDPackPropertiesParams{
		ResolveMacros: &resolveMacrosDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewV1SpectroClustersUIDPackPropertiesParamsWithTimeout creates a new V1SpectroClustersUIDPackPropertiesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1SpectroClustersUIDPackPropertiesParamsWithTimeout(timeout time.Duration) *V1SpectroClustersUIDPackPropertiesParams {
	var (
		resolveMacrosDefault = bool(true)
	)
	return &V1SpectroClustersUIDPackPropertiesParams{
		ResolveMacros: &resolveMacrosDefault,

		timeout: timeout,
	}
}

// NewV1SpectroClustersUIDPackPropertiesParamsWithContext creates a new V1SpectroClustersUIDPackPropertiesParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1SpectroClustersUIDPackPropertiesParamsWithContext(ctx context.Context) *V1SpectroClustersUIDPackPropertiesParams {
	var (
		resolveMacrosDefault = bool(true)
	)
	return &V1SpectroClustersUIDPackPropertiesParams{
		ResolveMacros: &resolveMacrosDefault,

		Context: ctx,
	}
}

// NewV1SpectroClustersUIDPackPropertiesParamsWithHTTPClient creates a new V1SpectroClustersUIDPackPropertiesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1SpectroClustersUIDPackPropertiesParamsWithHTTPClient(client *http.Client) *V1SpectroClustersUIDPackPropertiesParams {
	var (
		resolveMacrosDefault = bool(true)
	)
	return &V1SpectroClustersUIDPackPropertiesParams{
		ResolveMacros: &resolveMacrosDefault,
		HTTPClient:    client,
	}
}

/*V1SpectroClustersUIDPackPropertiesParams contains all the parameters to send to the API endpoint
for the v1 spectro clusters Uid pack properties operation typically these are written to a http.Request
*/
type V1SpectroClustersUIDPackPropertiesParams struct {

	/*FieldPath
	  Pack values yaml field path

	*/
	FieldPath string
	/*Layer
	  Pack layer

	*/
	Layer string
	/*Name
	  Pack name

	*/
	Name *string
	/*ResolveMacros
	  Is the macros need to be resolved

	*/
	ResolveMacros *bool
	/*UID
	  Cluster uid

	*/
	UID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) WithTimeout(timeout time.Duration) *V1SpectroClustersUIDPackPropertiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) WithContext(ctx context.Context) *V1SpectroClustersUIDPackPropertiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) WithHTTPClient(client *http.Client) *V1SpectroClustersUIDPackPropertiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFieldPath adds the fieldPath to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) WithFieldPath(fieldPath string) *V1SpectroClustersUIDPackPropertiesParams {
	o.SetFieldPath(fieldPath)
	return o
}

// SetFieldPath adds the fieldPath to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) SetFieldPath(fieldPath string) {
	o.FieldPath = fieldPath
}

// WithLayer adds the layer to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) WithLayer(layer string) *V1SpectroClustersUIDPackPropertiesParams {
	o.SetLayer(layer)
	return o
}

// SetLayer adds the layer to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) SetLayer(layer string) {
	o.Layer = layer
}

// WithName adds the name to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) WithName(name *string) *V1SpectroClustersUIDPackPropertiesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) SetName(name *string) {
	o.Name = name
}

// WithResolveMacros adds the resolveMacros to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) WithResolveMacros(resolveMacros *bool) *V1SpectroClustersUIDPackPropertiesParams {
	o.SetResolveMacros(resolveMacros)
	return o
}

// SetResolveMacros adds the resolveMacros to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) SetResolveMacros(resolveMacros *bool) {
	o.ResolveMacros = resolveMacros
}

// WithUID adds the uid to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) WithUID(uid string) *V1SpectroClustersUIDPackPropertiesParams {
	o.SetUID(uid)
	return o
}

// SetUID adds the uid to the v1 spectro clusters Uid pack properties params
func (o *V1SpectroClustersUIDPackPropertiesParams) SetUID(uid string) {
	o.UID = uid
}

// WriteToRequest writes these params to a swagger request
func (o *V1SpectroClustersUIDPackPropertiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param fieldPath
	qrFieldPath := o.FieldPath
	qFieldPath := qrFieldPath
	if qFieldPath != "" {
		if err := r.SetQueryParam("fieldPath", qFieldPath); err != nil {
			return err
		}
	}

	// query param layer
	qrLayer := o.Layer
	qLayer := qrLayer
	if qLayer != "" {
		if err := r.SetQueryParam("layer", qLayer); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.ResolveMacros != nil {

		// query param resolveMacros
		var qrResolveMacros bool
		if o.ResolveMacros != nil {
			qrResolveMacros = *o.ResolveMacros
		}
		qResolveMacros := swag.FormatBool(qrResolveMacros)
		if qResolveMacros != "" {
			if err := r.SetQueryParam("resolveMacros", qResolveMacros); err != nil {
				return err
			}
		}

	}

	// path param uid
	if err := r.SetPathParam("uid", o.UID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
