// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewV1AuditsListParams creates a new V1AuditsListParams object
// with the default values initialized.
func NewV1AuditsListParams() *V1AuditsListParams {
	var (
		limitDefault = int64(50)
	)
	return &V1AuditsListParams{
		Limit: &limitDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewV1AuditsListParamsWithTimeout creates a new V1AuditsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1AuditsListParamsWithTimeout(timeout time.Duration) *V1AuditsListParams {
	var (
		limitDefault = int64(50)
	)
	return &V1AuditsListParams{
		Limit: &limitDefault,

		timeout: timeout,
	}
}

// NewV1AuditsListParamsWithContext creates a new V1AuditsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1AuditsListParamsWithContext(ctx context.Context) *V1AuditsListParams {
	var (
		limitDefault = int64(50)
	)
	return &V1AuditsListParams{
		Limit: &limitDefault,

		Context: ctx,
	}
}

// NewV1AuditsListParamsWithHTTPClient creates a new V1AuditsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1AuditsListParamsWithHTTPClient(client *http.Client) *V1AuditsListParams {
	var (
		limitDefault = int64(50)
	)
	return &V1AuditsListParams{
		Limit:      &limitDefault,
		HTTPClient: client,
	}
}

/*V1AuditsListParams contains all the parameters to send to the API endpoint
for the v1 audits list operation typically these are written to a http.Request
*/
type V1AuditsListParams struct {

	/*ActionType*/
	ActionType *string
	/*Continue
	  continue token to paginate the subsequent data items

	*/
	Continue *string
	/*EndTime
	  Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.

	*/
	EndTime *strfmt.DateTime
	/*Limit
	  limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.
	If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.

	*/
	Limit *int64
	/*Offset
	  offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.

	*/
	Offset *int64
	/*ProjectUID
	  Specify the project uid, to retrieve the specific project audit logs

	*/
	ProjectUID *string
	/*ResourceKind
	  Specify the resource name, to retrieve the specific resource audit logs

	*/
	ResourceKind *string
	/*ResourceUID
	  Specify the resource uid, to retrieve the specific resource audit logs

	*/
	ResourceUID *string
	/*StartTime
	  Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.

	*/
	StartTime *strfmt.DateTime
	/*TenantUID
	  Specify the tenant uid, to retrieve the specific tenant audit logs

	*/
	TenantUID *string
	/*UserUID
	  Specify the user uid, to retrieve the specific user audit logs

	*/
	UserUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 audits list params
func (o *V1AuditsListParams) WithTimeout(timeout time.Duration) *V1AuditsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 audits list params
func (o *V1AuditsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 audits list params
func (o *V1AuditsListParams) WithContext(ctx context.Context) *V1AuditsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 audits list params
func (o *V1AuditsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 audits list params
func (o *V1AuditsListParams) WithHTTPClient(client *http.Client) *V1AuditsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 audits list params
func (o *V1AuditsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionType adds the actionType to the v1 audits list params
func (o *V1AuditsListParams) WithActionType(actionType *string) *V1AuditsListParams {
	o.SetActionType(actionType)
	return o
}

// SetActionType adds the actionType to the v1 audits list params
func (o *V1AuditsListParams) SetActionType(actionType *string) {
	o.ActionType = actionType
}

// WithContinue adds the continueVar to the v1 audits list params
func (o *V1AuditsListParams) WithContinue(continueVar *string) *V1AuditsListParams {
	o.SetContinue(continueVar)
	return o
}

// SetContinue adds the continue to the v1 audits list params
func (o *V1AuditsListParams) SetContinue(continueVar *string) {
	o.Continue = continueVar
}

// WithEndTime adds the endTime to the v1 audits list params
func (o *V1AuditsListParams) WithEndTime(endTime *strfmt.DateTime) *V1AuditsListParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the v1 audits list params
func (o *V1AuditsListParams) SetEndTime(endTime *strfmt.DateTime) {
	o.EndTime = endTime
}

// WithLimit adds the limit to the v1 audits list params
func (o *V1AuditsListParams) WithLimit(limit *int64) *V1AuditsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the v1 audits list params
func (o *V1AuditsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the v1 audits list params
func (o *V1AuditsListParams) WithOffset(offset *int64) *V1AuditsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the v1 audits list params
func (o *V1AuditsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithProjectUID adds the projectUID to the v1 audits list params
func (o *V1AuditsListParams) WithProjectUID(projectUID *string) *V1AuditsListParams {
	o.SetProjectUID(projectUID)
	return o
}

// SetProjectUID adds the projectUid to the v1 audits list params
func (o *V1AuditsListParams) SetProjectUID(projectUID *string) {
	o.ProjectUID = projectUID
}

// WithResourceKind adds the resourceKind to the v1 audits list params
func (o *V1AuditsListParams) WithResourceKind(resourceKind *string) *V1AuditsListParams {
	o.SetResourceKind(resourceKind)
	return o
}

// SetResourceKind adds the resourceKind to the v1 audits list params
func (o *V1AuditsListParams) SetResourceKind(resourceKind *string) {
	o.ResourceKind = resourceKind
}

// WithResourceUID adds the resourceUID to the v1 audits list params
func (o *V1AuditsListParams) WithResourceUID(resourceUID *string) *V1AuditsListParams {
	o.SetResourceUID(resourceUID)
	return o
}

// SetResourceUID adds the resourceUid to the v1 audits list params
func (o *V1AuditsListParams) SetResourceUID(resourceUID *string) {
	o.ResourceUID = resourceUID
}

// WithStartTime adds the startTime to the v1 audits list params
func (o *V1AuditsListParams) WithStartTime(startTime *strfmt.DateTime) *V1AuditsListParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the v1 audits list params
func (o *V1AuditsListParams) SetStartTime(startTime *strfmt.DateTime) {
	o.StartTime = startTime
}

// WithTenantUID adds the tenantUID to the v1 audits list params
func (o *V1AuditsListParams) WithTenantUID(tenantUID *string) *V1AuditsListParams {
	o.SetTenantUID(tenantUID)
	return o
}

// SetTenantUID adds the tenantUid to the v1 audits list params
func (o *V1AuditsListParams) SetTenantUID(tenantUID *string) {
	o.TenantUID = tenantUID
}

// WithUserUID adds the userUID to the v1 audits list params
func (o *V1AuditsListParams) WithUserUID(userUID *string) *V1AuditsListParams {
	o.SetUserUID(userUID)
	return o
}

// SetUserUID adds the userUid to the v1 audits list params
func (o *V1AuditsListParams) SetUserUID(userUID *string) {
	o.UserUID = userUID
}

// WriteToRequest writes these params to a swagger request
func (o *V1AuditsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActionType != nil {

		// query param actionType
		var qrActionType string
		if o.ActionType != nil {
			qrActionType = *o.ActionType
		}
		qActionType := qrActionType
		if qActionType != "" {
			if err := r.SetQueryParam("actionType", qActionType); err != nil {
				return err
			}
		}

	}

	if o.Continue != nil {

		// query param continue
		var qrContinue string
		if o.Continue != nil {
			qrContinue = *o.Continue
		}
		qContinue := qrContinue
		if qContinue != "" {
			if err := r.SetQueryParam("continue", qContinue); err != nil {
				return err
			}
		}

	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime strfmt.DateTime
		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime.String()
		if qEndTime != "" {
			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.ProjectUID != nil {

		// query param projectUid
		var qrProjectUID string
		if o.ProjectUID != nil {
			qrProjectUID = *o.ProjectUID
		}
		qProjectUID := qrProjectUID
		if qProjectUID != "" {
			if err := r.SetQueryParam("projectUid", qProjectUID); err != nil {
				return err
			}
		}

	}

	if o.ResourceKind != nil {

		// query param resourceKind
		var qrResourceKind string
		if o.ResourceKind != nil {
			qrResourceKind = *o.ResourceKind
		}
		qResourceKind := qrResourceKind
		if qResourceKind != "" {
			if err := r.SetQueryParam("resourceKind", qResourceKind); err != nil {
				return err
			}
		}

	}

	if o.ResourceUID != nil {

		// query param resourceUid
		var qrResourceUID string
		if o.ResourceUID != nil {
			qrResourceUID = *o.ResourceUID
		}
		qResourceUID := qrResourceUID
		if qResourceUID != "" {
			if err := r.SetQueryParam("resourceUid", qResourceUID); err != nil {
				return err
			}
		}

	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime strfmt.DateTime
		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime.String()
		if qStartTime != "" {
			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}

	}

	if o.TenantUID != nil {

		// query param tenantUid
		var qrTenantUID string
		if o.TenantUID != nil {
			qrTenantUID = *o.TenantUID
		}
		qTenantUID := qrTenantUID
		if qTenantUID != "" {
			if err := r.SetQueryParam("tenantUid", qTenantUID); err != nil {
				return err
			}
		}

	}

	if o.UserUID != nil {

		// query param userUid
		var qrUserUID string
		if o.UserUID != nil {
			qrUserUID = *o.UserUID
		}
		qUserUID := qrUserUID
		if qUserUID != "" {
			if err := r.SetQueryParam("userUid", qUserUID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
