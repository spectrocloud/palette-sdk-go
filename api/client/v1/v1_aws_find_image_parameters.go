// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/spectrocloud/palette-sdk-go/api/models"
)

// NewV1AwsFindImageParams creates a new V1AwsFindImageParams object
// with the default values initialized.
func NewV1AwsFindImageParams() *V1AwsFindImageParams {
	var ()
	return &V1AwsFindImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV1AwsFindImageParamsWithTimeout creates a new V1AwsFindImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV1AwsFindImageParamsWithTimeout(timeout time.Duration) *V1AwsFindImageParams {
	var ()
	return &V1AwsFindImageParams{

		timeout: timeout,
	}
}

// NewV1AwsFindImageParamsWithContext creates a new V1AwsFindImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewV1AwsFindImageParamsWithContext(ctx context.Context) *V1AwsFindImageParams {
	var ()
	return &V1AwsFindImageParams{

		Context: ctx,
	}
}

// NewV1AwsFindImageParamsWithHTTPClient creates a new V1AwsFindImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV1AwsFindImageParamsWithHTTPClient(client *http.Client) *V1AwsFindImageParams {
	var ()
	return &V1AwsFindImageParams{
		HTTPClient: client,
	}
}

/*V1AwsFindImageParams contains all the parameters to send to the API endpoint
for the v1 aws find image operation typically these are written to a http.Request
*/
type V1AwsFindImageParams struct {

	/*AwsImageRequest
	  Request payload to find the AWS image

	*/
	AwsImageRequest *models.V1AwsFindImageRequest
	/*Region
	  Region to find AWS image

	*/
	Region string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v1 aws find image params
func (o *V1AwsFindImageParams) WithTimeout(timeout time.Duration) *V1AwsFindImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 aws find image params
func (o *V1AwsFindImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 aws find image params
func (o *V1AwsFindImageParams) WithContext(ctx context.Context) *V1AwsFindImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 aws find image params
func (o *V1AwsFindImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 aws find image params
func (o *V1AwsFindImageParams) WithHTTPClient(client *http.Client) *V1AwsFindImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 aws find image params
func (o *V1AwsFindImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAwsImageRequest adds the awsImageRequest to the v1 aws find image params
func (o *V1AwsFindImageParams) WithAwsImageRequest(awsImageRequest *models.V1AwsFindImageRequest) *V1AwsFindImageParams {
	o.SetAwsImageRequest(awsImageRequest)
	return o
}

// SetAwsImageRequest adds the awsImageRequest to the v1 aws find image params
func (o *V1AwsFindImageParams) SetAwsImageRequest(awsImageRequest *models.V1AwsFindImageRequest) {
	o.AwsImageRequest = awsImageRequest
}

// WithRegion adds the region to the v1 aws find image params
func (o *V1AwsFindImageParams) WithRegion(region string) *V1AwsFindImageParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the v1 aws find image params
func (o *V1AwsFindImageParams) SetRegion(region string) {
	o.Region = region
}

// WriteToRequest writes these params to a swagger request
func (o *V1AwsFindImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AwsImageRequest != nil {
		if err := r.SetBodyParam(o.AwsImageRequest); err != nil {
			return err
		}
	}

	// path param region
	if err := r.SetPathParam("region", o.Region); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
